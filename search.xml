<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉树的最大深度</title>
      <link href="/post/9f86f042.html"/>
      <url>/post/9f86f042.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个二叉树，找出其最大深度</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数</p><p><img src="https://img-blog.csdnimg.cn/20210203153031914.png" alt="104. 二叉树的最大深度"></p><p>使用前序（中左右），也可以使用后序遍历（左右中），<strong>使用前序求的就是深度，使用后序求的是高度。</strong></p><h1 id="对于二叉树最大深度和最大高度的理解"><a href="#对于二叉树最大深度和最大高度的理解" class="headerlink" title="对于二叉树最大深度和最大高度的理解"></a>对于二叉树最大深度和最大高度的理解</h1><ul><li>二叉树节点的<strong>深度</strong>：指<strong>从根节点到该节点的最长简单路径边的条数或者节点数</strong>（取决于深度从0开始还是从1开始）</li><li>二叉树节点的<strong>高度</strong>：指<strong>从该节点到叶子节点的最长简单路径边的条数或者节点数</strong>（取决于高度从0开始还是从1开始）</li></ul><p><strong>而根节点的高度就是二叉树的最大深度</strong>，所以本题中我们通过后序求的根节点高度来求的二叉树最大深度。</p><h2 id="递归法：-（三部曲）"><a href="#递归法：-（三部曲）" class="headerlink" title="递归法： （三部曲）"></a>递归法： （三部曲）</h2><ol><li><strong>递归法传参是重点</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//传入的是根节点 ，得到的结果为树的最大深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(Node root)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>递归的终止条件就是判断是否为叶子节点（也就是说如果下一个节点为空的话就返回 0 ）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>确定单层递归的逻辑</strong></li></ol><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>确定单层递归的逻辑：<strong>先求它的左子树的深度，再求右子树的深度，最后取左右深度最大的数值 再+1</strong> （加1是因为算上当前中间节点）<strong>就是目前节点为根节点的树的深度</strong>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> getDepth(root.left);</span><br><span class="line"><span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> getDepth(root.right);</span><br><span class="line"><span class="keyword">return</span> Math.max(leftDepth,rightDepth) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>对于递归的题。个人感觉最好将其从题目中提取出来，因为返回值的考虑会让我们分心去思考这样递归是否会超出范围等等，所以将有返回值的递归题 提取成为一个方法是最好的做法！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getDepth(root,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDepth</span><span class="params">(TreeNode root , <span class="type">int</span> deep)</span>&#123;</span><br><span class="line">        <span class="comment">//比较，永远将最大值传给result</span></span><br><span class="line">        result = deep &gt; result ? deep:result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            getDepth(root.left,deep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            getDepth(root.right,deep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>对于这种求解深度的问题来说，使用迭代法相较来说是比较麻烦的，因为我们需要一层一层的遍历，最后得到的层数就是最大的深度。</p><p><img src="https://img-blog.csdnimg.cn/20200810193056585.png" alt="层序遍历"></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>层序遍历每一次计算队列的长度时（也就是当前层的元素全部在队列中的时候）。此时将层数加1，然后将整棵树遍历完后，得到的二叉树的层数就是我们需要的最大深度</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历的模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dept</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同类型的对于N叉树的最大深度"><a href="#同类型的对于N叉树的最大深度" class="headerlink" title="同类型的对于N叉树的最大深度"></a>同类型的对于N叉树的最大深度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getDepth(root,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDepth</span><span class="params">(Node root, <span class="type">int</span> deep)</span>&#123;</span><br><span class="line">         result = Math.max(deep,result);</span><br><span class="line">        <span class="comment">//递归进行遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt; root.children.size();i++)&#123;</span><br><span class="line">            getDepth(root.children.get(i),deep+<span class="number">1</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代法，使用层序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Node&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            depth ++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; node.children.size(); i++)</span><br><span class="line">                    <span class="keyword">if</span> (node.children.get(i) != <span class="literal">null</span>) </span><br><span class="line">                        que.offer(node.children.get(i));</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h1><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是<strong>从根节点到最近叶子节点</strong>的最短路径上的节点数量。</p><p><em><strong>说明</strong>:</em> <em><strong>从根节点开始 ，那么就是说如果根节点的左右子节点如果有一个为空的话那么就不能算</strong></em></p><p>示例:</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><p><img src="https://img-blog.csdnimg.cn/2021020315582586.png" alt="111.二叉树的最小深度1"></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>和求最大深度有些类似，但是<strong>也有很多不同</strong></p><p>思路就是 ： 如果左子树为空，右子树不为空，说明最小深度是 1 + 右子树的深度。</p><p>反之，右子树为空，左子树不为空，最小深度是 1 + 左子树的深度。 最后如果左右子树都不为空，返回左右子树深度最小值 + 1 。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> minDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> minDepth(root.right);</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightDepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leftDepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左右结点都不为null</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代法，层序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">                <span class="keyword">if</span> (poll.left == <span class="literal">null</span> &amp;&amp; poll.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 是叶子结点，直接返回depth，因为从上往下遍历，所以该值就是最小值</span></span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求最小深度推荐用迭代法实现"><a href="#求最小深度推荐用迭代法实现" class="headerlink" title="求最小深度推荐用迭代法实现"></a>求最小深度推荐用迭代法实现</h3><blockquote><table><thead><tr><th align="left">提交结果</th><th align="left">执行用时</th><th align="left">内存消耗</th><th align="left">语言</th><th align="left">提交时间</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><a href="https://leetcode.cn/submissions/detail/396076578/">通过</a></td><td align="left">1 ms</td><td align="left">60.2 MB</td><td align="left">Java</td><td align="left">2023&#x2F;01&#x2F;18 15:04</td><td align="left">迭代</td></tr><tr><td align="left"><a href="https://leetcode.cn/submissions/detail/396076529/">通过</a></td><td align="left">9 ms</td><td align="left">61.5 MB</td><td align="left">Java</td><td align="left">2023&#x2F;01&#x2F;18 15:03</td><td align="left">递归</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中表的映射关系</title>
      <link href="/post/3d5bac2d.html"/>
      <url>/post/3d5bac2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-中表的映射关系"><a href="#MyBatis-中表的映射关系" class="headerlink" title="MyBatis 中表的映射关系"></a>MyBatis 中表的映射关系</h1><blockquote><p>多对多 和 一对一方法相同 ,这里不展开讲 ,主要讲解 一对多 和 多对一</p></blockquote><h3 id="resultMap的作用-处理属性和字段之间的映射关系-设置自定义映射"><a href="#resultMap的作用-处理属性和字段之间的映射关系-设置自定义映射" class="headerlink" title="resultMap的作用 : 处理属性和字段之间的映射关系 (设置自定义映射)"></a>resultMap的作用 : 处理属性和字段之间的映射关系 (设置自定义映射)</h3><p><strong>属性:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>：表示自定义映射的唯一标识 与select标签中的resultMap内容一致</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>：查询的数据要映射的实体类的类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>子标签:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>：设置主键的映射关系</span><br><span class="line">result：设置普通字段的映射关系</span><br><span class="line">association：设置多对一的映射关系</span><br><span class="line">collection：设置一对多的映射关系</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">property</span>：设置映射关系中实体类中的属性名</span><br><span class="line"></span><br><span class="line">column：设置映射关系中表中的字段名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="First-多对一的映射关系"><a href="#First-多对一的映射关系" class="headerlink" title="First : 多对一的映射关系"></a>First : 多对一的映射关系</h2><blockquote><p>查询员工以及员工所对应的部门信息 或者查询学生以及学生所对应的班级信息</p></blockquote><blockquote><p>本文讲解主要以员工类Emp以及部门类Dept为主,对应的数据库表名[ Emp—&gt;t_emp ] [ Dept—&gt; t_dept]</p></blockquote><h3 id="方法一-使用级联的方式处理映射关系"><a href="#方法一-使用级联的方式处理映射关系" class="headerlink" title="方法一 : 使用级联的方式处理映射关系"></a>方法一 : 使用级联的方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      这里是处理当前表emp的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这里是处理Dept中的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  接口 :  Emp getEmpAndDeptById(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getEmpAndDept&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">        t_emp.* ,t_dept.*</span><br><span class="line">    from t_emp left join t_dept</span><br><span class="line">             on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">    where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意点</strong>: 这里的查询用到了左外连接, 多表查询的一种。</p><h3 id="方法二-使用association标签-处理映射关系"><a href="#方法二-使用association标签-处理映射关系" class="headerlink" title="方法二 : 使用association标签: 处理映射关系"></a>方法二 : 使用association标签: 处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      这里是处理表t_emp--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property 中处理的一定是实体类中的属性 所以Emp中的属性名有一个Dept 类型的dept</span></span><br><span class="line"><span class="comment">            javaType===&gt;是该属性的来源</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      这里是处理t_dept表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    Emp getEmpAndDeptById(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getEmpAndDeptOne&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            t_emp.* ,t_dept.*</span><br><span class="line">        from t_emp left join t_dept</span><br><span class="line">                 on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">        where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法三-最常用的-分布查询"><a href="#方法三-最常用的-分布查询" class="headerlink" title="方法三 :  最常用的 分布查询"></a>方法三 :  最常用的 分布查询</h3><p><strong>步骤:</strong></p><ol><li>首先查询相关的员工信息</li><li>根据员工信息中的部门id 从而查询出对应的部门信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--      这里是处理当前表emp的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这里的dept从哪里来,就是stepTwo(DeptMapper中的)中的查询出来的dept</span></span><br><span class="line"><span class="comment">        property :  设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">        select : 设置分布查询的 sql语句的唯一表示 通过namespace.id  :  获取sql语句的唯一标识</span></span><br><span class="line"><span class="comment">        格式: 模块名.包名.接口名.方法名</span></span><br><span class="line"><span class="comment">        column : 设置分布查询的sql的条件</span></span><br><span class="line"><span class="comment">           也就是作为下一步StepTwo 的sql的条件where XXX = ? 的字段</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com_Ray.mapper.DeptMapper.getEmpStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分布查询的第一步   Emp getEmpByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getEmpOne&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时已经根据员工的id 查询出了相关的员工信息 , 接下来就是根据员工信息中的dept_id字段来查询出对应的部门的信息</p><p><strong>再次解释assciation标签中的select属性:</strong> 设置分布查询的 sql语句的唯一表示 通过namespace.id获取</p><p>namespace 就是mapper标签中的属性 , 而对应的id 就是我们所要执行的接口中的方法名(因为方法名与id的内容要一致) <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40722cedb9be4b1a9b1e4a08a8b28f66~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39e1261fc4214da2a1adcbdc2be4fa85~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>接下来进行第二步:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com_Ray.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分布查询的第二步   Dept getEmpStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分布查询的优点"><a href="#分布查询的优点" class="headerlink" title="分布查询的优点"></a>分布查询的优点</h5><p>可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</span><br><span class="line"></span><br><span class="line">aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 </span><br><span class="line">否则，每个属性会按需加载 ,此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。</span><br><span class="line">此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，</span><br><span class="line">fetchType=&quot;<span class="built_in">lazy</span>(延迟加载)|<span class="built_in">eager</span>(立即加载)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Second-一对多的映射关系"><a href="#Second-一对多的映射关系" class="headerlink" title="Second : 一对多的映射关系"></a>Second : 一对多的映射关系</h2><blockquote><p>查询部门中所有的员工信息  或者查询班级中所有的学生信息</p></blockquote><p><strong>步骤:</strong></p><ol><li>首先在Dept部门类中创建Emp集合</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/799f47ec2ea549c49501818277edbb3e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><ol><li>然后再进行查询需要查询的部门id ,再通过部门id查询出部门中所有的员工信息</li></ol><h3 id="方法一-collection"><a href="#方法一-collection" class="headerlink" title="方法一 : collection"></a>方法一 : collection</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection : 处理多对一的属性</span></span><br><span class="line"><span class="comment">    property : 需要处理的多对一的属性的属性名</span></span><br><span class="line"><span class="comment">    ofType :  需要处理的属性的类型</span></span><br><span class="line"><span class="comment">注意点  :里面的emps是Emp的集合类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方法名:    Dept getDeptById(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            t_dept.* , t_emp.*</span><br><span class="line">        from t_emp right join t_dept</span><br><span class="line">                             on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">        where t_dept.dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法二-分布查询"><a href="#方法二-分布查询" class="headerlink" title="方法二 : 分布查询"></a>方法二 : 分布查询</h3><p>第一步:查询出需要查询的部门信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptStepOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        property :  设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">        select : 设置分布查询的 sql语句的唯一表示</span></span><br><span class="line"><span class="comment">        通过namespace.id  :  获取sql语句的唯一标识</span></span><br><span class="line"><span class="comment">        column : 设置分布查询的sql的条件 作为下一步StepTwo 的sql的条件where XXX = ? 的字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com_Ray.mapper.EmpMapper.getDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    分布查询的第一步 : Emp getDeptByStepOne(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptStepOne&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步:  根据部门id 查询员工信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多对一 分布查询的二步</span></span><br><span class="line"><span class="comment">    List&lt;Emp&gt; getDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点!!!"></a><strong>注意点!!!</strong></h5><p><strong>虽然这里我们用到的表中的字段名和所对应的实体类中的属性名不一致 ,但是表设置的字段名使用’_’符合数据库的规则, 而实体类中的属性也同样满足java驼峰命名规范,所以这里可以在核心控制文件中加上下面这段代码 ,这样就可以不用设置resultMap</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  mapUnderscoreToCamelCase: 将下划线映射为驼峰 例如: user_name==&gt;userName --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配</title>
      <link href="/post/d4e5e1b1.html"/>
      <url>/post/d4e5e1b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="依赖的管理"><a href="#依赖的管理" class="headerlink" title="依赖的管理"></a>依赖的管理</h2><p>对于所有的依赖我们需要在<strong>父项目中设置版本号等都设置</strong>好了，在子项目中就不需要再配置版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">他的父项目</span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br></pre></td></tr></table></figure><p>但是如果想要使用非SpringBoot官方引入的jar的话就需要写版本号</p><h3 id="starter场景启动器"><a href="#starter场景启动器" class="headerlink" title="starter场景启动器"></a>starter场景启动器</h3><ol><li><strong>很多spring-boot-starter ：  就某种场景</strong></li><li><strong>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</strong></li><li><strong>SpringBoot所有支持的场景</strong></li><li><strong>-spring-boot-starter：</strong> 第三方为我们提供的简化开发的场景启动器</li></ol><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>自动配置好Tomcat ，SpringMVC ， SpringMVC中的常见组件 ，配置好了web的常见功能 。</p><p>下面是我们打印一个请求时查看SpringBoot所启用的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">组件:  org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">组件:  org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">组件:  org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">组件:  org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">组件:  org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">组件:  mainApplication</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><br><span class="line">组件:  helloController</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.AutoConfigurationPackages</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class="line">组件:  propertySourcesPlaceholderConfigurer</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration</span><br><span class="line">组件:  websocketServletWebServerCustomizer</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat</span><br><span class="line">组件:  tomcatServletWebServerFactory</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</span><br><span class="line">组件:  servletWebServerFactoryCustomizer</span><br><span class="line">组件:  tomcatServletWebServerFactoryCustomizer</span><br><span class="line">组件:  org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor</span><br><span class="line">组件:  org.springframework.boot.context.internalConfigurationPropertiesBinderFactory</span><br><span class="line">组件:  org.springframework.boot.context.internalConfigurationPropertiesBinder</span><br><span class="line">组件:  org.springframework.boot.context.properties.BoundConfigurationProperties</span><br><span class="line">组件:  org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata</span><br><span class="line">组件:  server-org.springframework.boot.autoconfigure.web.ServerProperties</span><br><span class="line">组件:  webServerFactoryCustomizerBeanPostProcessor</span><br><span class="line">组件:  errorPageRegistrarBeanPostProcessor</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration</span><br><span class="line">组件:  dispatcherServlet</span><br><span class="line">组件:  spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration</span><br><span class="line">组件:  dispatcherServletRegistration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</span><br><span class="line">组件:  taskExecutorBuilder</span><br><span class="line">组件:  applicationTaskExecutor</span><br><span class="line">组件:  spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration</span><br><span class="line">组件:  error</span><br><span class="line">组件:  beanNameViewResolver</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration</span><br><span class="line">组件:  conventionErrorViewResolver</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</span><br><span class="line">组件:  errorAttributes</span><br><span class="line">组件:  basicErrorController</span><br><span class="line">组件:  errorPageCustomizer</span><br><span class="line">组件:  preserveErrorControllerTargetClassPostProcessor</span><br><span class="line">组件:  spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration</span><br><span class="line">组件:  requestMappingHandlerAdapter</span><br><span class="line">组件:  requestMappingHandlerMapping</span><br><span class="line">组件:  welcomePageHandlerMapping</span><br><span class="line">组件:  mvcConversionService</span><br><span class="line">组件:  mvcValidator</span><br><span class="line">组件:  mvcContentNegotiationManager</span><br><span class="line">组件:  mvcPathMatcher</span><br><span class="line">组件:  mvcUrlPathHelper</span><br><span class="line">组件:  viewControllerHandlerMapping</span><br><span class="line">组件:  beanNameHandlerMapping</span><br><span class="line">组件:  routerFunctionMapping</span><br><span class="line">组件:  resourceHandlerMapping</span><br><span class="line">组件:  mvcResourceUrlProvider</span><br><span class="line">组件:  defaultServletHandlerMapping</span><br><span class="line">组件:  handlerFunctionAdapter</span><br><span class="line">组件:  mvcUriComponentsContributor</span><br><span class="line">组件:  httpRequestHandlerAdapter</span><br><span class="line">组件:  simpleControllerHandlerAdapter</span><br><span class="line">组件:  handlerExceptionResolver</span><br><span class="line">组件:  mvcViewResolver</span><br><span class="line">组件:  mvcHandlerMappingIntrospector</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter</span><br><span class="line">组件:  defaultViewResolver</span><br><span class="line">组件:  viewResolver</span><br><span class="line">组件:  requestContextFilter</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</span><br><span class="line">组件:  formContentFilter</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</span><br><span class="line">组件:  mbeanExporter</span><br><span class="line">组件:  objectNamingStrategy</span><br><span class="line">组件:  mbeanServer</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</span><br><span class="line">组件:  springApplicationAdminRegistrar</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</span><br><span class="line">组件:  applicationAvailability</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</span><br><span class="line">组件:  lifecycleProcessor</span><br><span class="line">组件:  spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration</span><br><span class="line">组件:  standardJacksonObjectMapperBuilderCustomizer</span><br><span class="line">组件:  spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration</span><br><span class="line">组件:  jacksonObjectMapperBuilder</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration</span><br><span class="line">组件:  parameterNamesModule</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration</span><br><span class="line">组件:  jacksonObjectMapper</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</span><br><span class="line">组件:  jsonComponentModule</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration</span><br><span class="line">组件:  stringHttpMessageConverter</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration</span><br><span class="line">组件:  mappingJackson2HttpMessageConverter</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</span><br><span class="line">组件:  messageConverters</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</span><br><span class="line">组件:  spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</span><br><span class="line">组件:  taskSchedulerBuilder</span><br><span class="line">组件:  spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class="line">组件:  restTemplateBuilder</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration</span><br><span class="line">组件:  tomcatWebServerFactoryCustomizer</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</span><br><span class="line">组件:  characterEncodingFilter</span><br><span class="line">组件:  localeCharsetMappingsCustomizer</span><br><span class="line">组件:  org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</span><br><span class="line">组件:  multipartConfigElement</span><br><span class="line">组件:  multipartResolver</span><br><span class="line">组件:  spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</span><br><span class="line">组件:  org.springframework.aop.config.internalAutoProxyCreator</span><br><span class="line">2023-01-14 08:40:52.385  INFO 8564 --- [nio-8888-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2023-01-14 08:40:52.385  INFO 8564 --- [nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2023-01-14 08:40:52.388  INFO 8564 --- [nio-8888-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 3 ms</span><br></pre></td></tr></table></figure><p><strong>使用</strong>**@ComponentScan(“包名”)**<strong>可以改变扫描路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在之前我们使用的<span class="meta">@SpringBootApplication</span> ，他只能扫描自己所在包里面的所有的组件</span><br><span class="line">使用<span class="meta">@ComponentScan(&quot;包名&quot;)</span> 和下面的另外两个就可以代替<span class="meta">@SpringBootAplication</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// @SpringBootConfiguration&#125;</span></span><br><span class="line"><span class="comment">// @EnableAutoConfiguration &#125; == 》 @SpringBootApplication</span></span><br><span class="line"><span class="comment">// @ComponentScan(&quot;com.atguigu.boot&quot;)&#125;</span></span><br></pre></td></tr></table></figure><h4 id="各种配置拥有默认值"><a href="#各种配置拥有默认值" class="headerlink" title="各种配置拥有默认值"></a>各种配置拥有默认值</h4><ul><li><strong>默认配置最终都是映射到某个类上</strong>，如：MultipartProperties</li><li><strong>配置文件的值最终会绑定每个类上</strong>，这个类会在<strong>容器中创建对象</strong></li></ul><h4 id="按需加载所有自动配置项"><a href="#按需加载所有自动配置项" class="headerlink" title="按需加载所有自动配置项"></a>按需加载所有自动配置项</h4><ul><li><ul><li>非常多的starter</li><li><strong>引入了哪些场景这个场景的自动配置才会开启</strong></li><li><strong>SpringBoot所有的自动配置功能</strong>都在 <strong>spring-boot-autoconfigure</strong> 包里面</li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67f5837cc4c54699a7401fa9a6fa89df~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="a"></p><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="原生的spring添加组件的方法："><a href="#原生的spring添加组件的方法：" class="headerlink" title="原生的spring添加组件的方法："></a>原生的spring添加组件的方法：</h3><p>创建一个spring.xml的类，然后配置组件的信息，注册组件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7d33290b2324fbf9df0a87fa9e285ab~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="SpringBoot中添加组件的方法："><a href="#SpringBoot中添加组件的方法：" class="headerlink" title="SpringBoot中添加组件的方法："></a>SpringBoot中添加组件的方法：</h3><ol><li>创建一个类，将这个类设置为配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//用来告诉SpringBoot 这是一个配置文件类</span></span><br><span class="line"><span class="comment">//@Configuration(proxyBeanMethods = false) //设置多实例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*给容器中添加组件，一方法名作为组件的id ， 返回类型就是组件类型 ， 值就是组件中的内容实例*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhansan&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等同于下面的</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;user1&quot; class=&quot;com.ray.bean.User&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;da&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;age&quot; value=&quot;11&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    */</span>   </span><br><span class="line"><span class="meta">@Bean(&quot;tom&quot;)</span>  <span class="comment">// 也可以直接在bean中设置组件的id</span></span><br><span class="line"><span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">tomcat</span>(<span class="string">&quot;tom&quot;</span> , <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>给方法名设置@Bean注解，将方法名当做组件的id ，返回类型就是组件类型 ，返回值就是组件在容器中的实例（对象）</p></li><li><p><strong>@Configuration(proxyBeanMethods &#x3D; false) &#x2F;&#x2F; 中默认的是true  。</strong></p></li><li><ol><li><strong>值为true 那</strong>么无论我们调用多少次组件，他<strong>返回的都是单例的</strong>。【每次调用都是获取容器中唯一的】</li><li><strong>值为false ：</strong>【 那么我们每个@Bean方法被<strong>调用多少次返回多少个新的组件</strong>】</li></ol></li></ol><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><p><strong>@Bean、@Component、@Controller、@Service、@Repository(数据库组件)</strong></p><p><strong>@ComponentScan(指定包扫描的)、@Import(放在任何一个组件上面都行)</strong></p><h4 id="Import（-XXX-class-AAA-class-…-）-组件"><a href="#Import（-XXX-class-AAA-class-…-）-组件" class="headerlink" title="@Import（{ XXX.class, AAA.class ….} ） 组件"></a>@Import（{ XXX.class, AAA.class ….} ） 组件</h4><p>作用：<strong>给容器导入组件</strong>，他是一个数组类型的</p><p>可以自动的给容器中创建调用这其中组件的无参构造器 ，从而创建出指定类型的对象[默认组件的名字就是全类名]</p><h4 id="条件装配组件-Conditional-（如果条件满足或者说如果条件不满足才执行XXX组件）"><a href="#条件装配组件-Conditional-（如果条件满足或者说如果条件不满足才执行XXX组件）" class="headerlink" title="条件装配组件@Conditional （如果条件满足或者说如果条件不满足才执行XXX组件）"></a>条件装配组件@Conditional （如果条件满足或者说如果条件不满足才执行XXX组件）</h4><p>继承类：@ConditionalOnBean(name &#x3D; “tom”)</p><p>&#x2F;&#x2F;条件组件，就是当我们的类中有名为tom的时候，我们类中的XXX组件才会被执行，才会生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">    zhangsan.setPet(tomcatPet());</span><br><span class="line">    <span class="keyword">return</span> zhangsan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将条件组件标记在类上，那么就是除非类中有tom组件，配置配种的其他组件才会被执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//用来告诉SpringBoot 这是一个配置文件类</span></span><br><span class="line"><span class="comment">//@Configuration(proxyBeanMethods = false) //设置多实例对象</span></span><br><span class="line"><span class="meta">@Conditional(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>其他条件装配注解</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h3 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h3><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getProperties</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">         <span class="type">Properties</span> <span class="variable">pps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">         pps.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         <span class="type">Enumeration</span> <span class="variable">enum1</span> <span class="operator">=</span> pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">strKey</span> <span class="operator">=</span> (String) enum1.nextElement();</span><br><span class="line">             <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>**@**<strong>ConfigurationProperties</strong><br>@Component只有在容器中的组件，才会拥有SpringBoot提供的强大功能<br>@ConfigurationProperties(prefix &#x3D; “mycar”) &#x2F;&#x2F;将类放入容器中(@Compnent)，然后与javaBean （mycar）与配置绑定</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4895f2dc3c0451385d99076832bc7ec~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fdccf2bb9914c4d91f886f700d13fac~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br></pre></td></tr></table></figure><ol><li><strong>开启属性配置功能</strong></li></ol><p>@EnableConfigurationProperties (在配置类中) + @ConfigurationProperties（在javaBean类中） &#x3D; 就是开启属性配置，然后将配置与javaBean绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Car类中就不需要使用@Component注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br></pre></td></tr></table></figure><h2 id="自动装配源码解析"><a href="#自动装配源码解析" class="headerlink" title="自动装配源码解析"></a>自动装配源码解析</h2><ol><li><strong>引导加载自动配置类</strong></li></ol><p>**@**SpringBiootApplication注解 </p><ol><li><strong>@SpringBootConfiguration</strong></li><li><strong>@ComponentScan : 作用是指定扫描哪些注解</strong></li><li><strong>@EmableAutoConfiguration</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1673743958288-5337536e-34d8-4e87-bfb1-7fc411ee159f.png" alt="img"></p><p><strong>他上面两个注解的合成。</strong></p><p>**其中： import(AutoConfiguationPackages.Registrar.class ) &#x2F;&#x2F;**作用：给容器导入一个组件Registrar</p><p><strong>AutoConfiguationPackages</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1673744265542-ac9ecc87-e65e-43b5-8311-d095360bb1ba.png" alt="img"></p><p><strong>import(AutoConfiguationPackages.Registrar.class )</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1673744781049-27253ee0-4ae2-44d5-b7fa-5f50d0310a3f.png" alt="img"></p><p><strong>spring.factorites 中有127个场景配置，也就是说springBoot一启动就会加载所有的配置类</strong></p><p>*<em>但是按照条件装配规则（@<strong><strong>Conditional</strong></strong>），最终会按需加载</em>*</p><ol><li><strong>按需开启自动配置项</strong></li></ol><p>*<em>只有（@<strong><strong>Conditional</strong></strong>）生效之后，所在的配置类才会被加载进容器，然后生效</em>*</p><ul><li><p><em>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</em></p></li><li><p><em>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。所有的值都是从xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</em></p></li><li><p><em>生效的配置类就会给容器中装配很多组件</em></p></li><li><p><em>只要容器中有这些组件，相当于这些功能就有了</em></p></li><li><p>*<strong>定制化配置*</strong></p></li><li><ul><li><em>用户直接自己@Bean替换底层的组件</em></li><li><em>用户去看这个组件是获取的配置文件什么值就去修改。</em></li></ul></li></ul><p><strong>xxxxxAutoConfiguration(导入进去) —&gt; 容器中就会有这些组件  —&gt; 组件又从xxxxProperties里面拿值（然后它从后面的那个里面拿值）  —-&gt; application.properties</strong></p><blockquote><p>参考说明: 尚硅谷雷神SpringBoot</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML知识点总结</title>
      <link href="/post/a9e4f4b5.html"/>
      <url>/post/a9e4f4b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="html编辑文档"><a href="#html编辑文档" class="headerlink" title="html编辑文档"></a>html编辑文档</h1><ol><li><strong><!DOCTYPE html> :</strong> <strong>这是html5的新规定 ，相比于之前的html4的三种声明减少了麻烦</strong></li><li><strong><body> 标签定义文档的主体。</body></strong></li></ol><p>包含文档的所有内容（比如文本、超链接、图像、表格和列表等等）。</p><ol start="3"><li><strong><style> 标签定义 HTML 文档的样式信息。</strong></li></ol><p>在 <style> 元素中，您可以规定在浏览器中如何呈现 HTML 文档。</p><p>每个 HTML 文档能包含多个 <style> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> //红</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //蓝</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong><div> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</strong></li></ol><blockquote><div>标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。<p> <strong>提示：</strong><div> 元素经常与 CSS 一起使用，用来布局网页。</p><p><strong>注释：</strong>默认情况下，浏览器通常会在 <div> 元素前后放置一个换行符。然而，您可以通过使用 CSS 改变这种情况</p></blockquote><ol start="5"><li><p><strong><span> 定义文档的节，</strong> <strong>用于对文档中的行内元素进行组合。</strong></p></li><li><p><strong><article> 标签定义独立的内容定义一个文章区域。其中可以有h1 , p 等</strong></p></li></ol><blockquote><p>标签定义的内容本身必须是有意义的且必须是独立于文档的其余部分。</p><p>比如： </p><ul><li>论坛帖子</li><li>博客文章</li><li>新闻故事</li><li>评论</li></ul></blockquote><ol start="7"><li><strong><aside></strong> <strong>定义页面的侧边栏内容 ,和<title>中的差不多</strong></li></ol><blockquote><p> aside 的内容应该与附近的内容相关</p></blockquote><h1 id="html其他标签列表"><a href="#html其他标签列表" class="headerlink" title="html其他标签列表"></a>html其他标签列表</h1><ol><li>&lt;a **href**&#x3D;<a href="https://www.runoob.com>点击访问相关网站！">https://www.runoob.com&gt;点击访问相关网站！</a></a>：</li></ol><p>a标签的相关属性：<strong>最重要的属性是 href 属性，</strong> <strong>如果没有href属性，剩余的属性就都无法使用</strong></p><p>download： </p><p>​描述 ： 指定的下载链接</p><p>href： </p><p>​描述 ： 标定链接目标的url</p><p>type： </p><p>​描述：规定目标 URL 的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions。</p><ol start="2"><li><strong>address：</strong> <strong>定义文档作者&#x2F;所有者的联系信息。</strong></li></ol><ul><li>如果 <address> 元素位于 <body> 元素内部，则它表示该文档作者&#x2F;所有者的联系信息。</li><li>如果 <address> 元素位于 <article> 元素内部，则它表示该文章作者&#x2F;所有者的联系信息</li></ul><ol start="3"><li><strong><area> :</strong>  <strong>标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。</strong></li></ol><blockquote><p>&lt;<strong>area&gt; 元素始终嵌套在 <map> 标签内部。</strong></p><p><img> 标签中的 usemap 属性与 <map> 元素中的 name 相关联，以创建图像与映射之间的关系。</p></blockquote><p><strong>属性：</strong></p><p>alt  : 值为text ， 规定区域的代替文本，如果使用href属性 ， 那么该属性就是必须的</p><p>coords ： 规定了区域的坐标【0，0，82，126或者90,58,3】 </p><p>href ： 规定了区域的url地址</p><p>rel ： 规定当前文档与 目标url之前的关系</p><p>shape ： 【值 ： default    rect      circle  poly 】 规定区域的形状</p><p>target ：  【_blank_parent_self _top】 规定了在何处打开url资源</p><p>type :  规定目标 URL 的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击太阳或其他行星，注意变化：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;planets.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;145&quot;</span> <span class="attr">height</span>=<span class="string">&quot;126&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Planets&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#planetmap&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;planetmap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;0,0,82,126&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Sun&quot;</span> <span class="attr">href</span>=<span class="string">&quot;sun.htm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;90,58,3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Mercury&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mercur.htm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;124,58,8&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Venus&quot;</span> <span class="attr">href</span>=<span class="string">&quot;venus.htm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/gif/29629815/1673607565884-895db870-4318-4c06-9472-640851a9cb8e.gif" alt="img"></p><ol start="4"><li><strong><audio> 标签 ： 标签定义声音，比如音乐或其他音频流。</strong></li></ol><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示音频控件（比如播放&#x2F;暂停按钮）。</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td>muted</td><td>muted</td><td>如果出现该属性，则音频输出为静音。</td></tr><tr><td>preload</td><td>auto metadata none</td><td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td></tr><tr><td>src</td><td><em>URL</em></td><td>规定音频文件的 URL。</td></tr></tbody></table><ol start="5"><li><p><strong><b> 标签</strong>  <strong>标签定义粗体的文本。</strong></p></li><li><p><strong>标题标签</strong></p></li></ol><p><strong>h1 —- h6  ：</strong> 总共就是六个标题标签。大小以及重要性依次减小</p><ol start="7"><li><strong><base> 标签 ： 作用是规定了页面上所有链接的默认url 及其目标</strong></li></ol><p><strong><base> 标签必须位于 <head> 元素内部</strong></p><p><strong>属性： href  、target</strong></p><p>target ： 【_blank _parent_self_top 】</p><p>target 描述：</p><p>规定了页面中的所有链接和表单在何处打开。该属性会被每个链接中的 target 属性覆盖。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.runoob.com/images/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="8"><li><strong><button> 标签定义一个按钮。</strong></li></ol><blockquote><p><button type="" >点我!</button></p></blockquote><blockquote><p><button> 标签定义一个按钮。</p><p>在 <button> 元素内部，您可以放置内容，比如文本或图像。这是该元素与使用 <input> 元素创建的按钮之间的不同之处。</p><p><strong>提示：</strong>请始终为 <button> 元素规定 type 属性。不同的浏览器对 <button> 元素的 type 属性使用不同的默认值。</p></blockquote><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autofocus<strong>New</strong></td><td>autofocus</td><td>规定当页面加载时按钮应当自动地获得焦点。</td></tr><tr><td>disabled</td><td>disabled</td><td>规定应该禁用该按钮。</td></tr><tr><td>form<strong>New</strong></td><td><em>form_id</em></td><td>规定按钮属于一个或多个表单。</td></tr><tr><td>formaction<strong>New</strong></td><td><em>URL</em></td><td>规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formenctype<strong>New</strong></td><td>application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formmethod<strong>New</strong></td><td>get post</td><td>规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formnovalidate<strong>New</strong></td><td>formnovalidate</td><td>如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formtarget<strong>New</strong></td><td>_blank _self _parent _top <em>framename</em></td><td>规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>name</td><td><em>name</em></td><td>规定按钮的名称。</td></tr><tr><td>type</td><td>button reset submit</td><td>规定按钮的类型。</td></tr><tr><td>value</td><td><em>text</em></td><td>规定按钮的初始值。可由脚本进行修改。</td></tr></tbody></table><ol start="9"><li><strong><canvas> 标签</strong>通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。</li></ol><p><strong><canvas> 标签只是图形容器</strong>，您必须使用脚本来绘制图形。</p><p>属性： </p><p> height ： 规定了画布的高度</p><p> width ： 规定了画布的宽度 </p><h1 id="列表以及表格相关"><a href="#列表以及表格相关" class="headerlink" title="列表以及表格相关"></a>列表以及表格相关</h1><ol><li><strong><caption> 标签定义表格的标题。</strong></li></ol><p>您只能对每个表格定义一个标题。</p><p><strong>提示：</strong>通常这个标题会被居中于表格之上。然而，CSS 属性 “text-align” 和 “caption-side” 能用来设置标题的对齐方式和显示位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Monthly savings<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>February<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>$50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong><cite> 标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题。</strong></p></li><li><p><strong><tr> 标签定义 HTML 表格中的行。</strong></p></li></ol><p>一个 <tr> 元素包含一个或多个 <th> 或 <td> 元素</p><ol start="4"><li><p><strong><th> : 标签定义表头单元格的内容</strong></p></li><li><p>**<td> : 标签定义单元格<br>** </p></li><li><p><strong><dd> 标签被用来对一个描述列表中的项目&#x2F;名字进行描述。</strong></p></li></ol><blockquote><dd> 标签与 <dl> （定义一个描述列表）和 <dt> （定义项目/名字）一起使用。<p>在 <dd> 标签内，您能放置段落、换行、图片、链接、列表等等。</p><p>dt之后的dd就能实现换行的功能</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">如下：</span><br><span class="line"></span><br><span class="line">Coffee</span><br><span class="line">Black hot drink</span><br><span class="line">Milk</span><br><span class="line">White cold drink</span><br></pre></td></tr></table></figure><ol start="7"><li><strong><del> 标签定义文档中已删除的文本。</strong></li></ol><blockquote><p><strong>提示：</strong>您也可以看看 <ins> 标签如何标记先插入的文本。</p><p><strong>提示：</strong><del> 和 <ins> 一起使用，描述文档中的更新和修正。浏览器通常会在已删除文本上添加一条删除线，在新插入文本下添加一条下划线。</p></blockquote><ol start="8"><li><strong><section> 标签定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WWF<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The World Wide Fund for Nature (WWF) is an international organization working on issues regarding the conservation, research and restoration of the environment, formerly named the World Wildlife Fund. WWF was founded in 1961.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WWF&#x27;s Panda symbol<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The Panda has become the symbol of WWF. The well-known panda logo of WWF originated from a panda named Chi Chi that was transferred from the Beijing Zoo to the London Zoo in the same year of the establishment of WWF.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><strong><time> 标签是 HTML5 中的新标签。定义公历的时间</strong></li></ol><blockquote><p><time> 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。</p><p>该元素能够以机器可读的方式对日期和时间进行编码，这样，举例说，用户代理能够把生日提醒或排定的事件添加到用户日程表中，搜索引擎也能够生成更智能的搜索结果。</p></blockquote><p>属性 ： </p><p>datatime： 规定时间的方式</p><p>pubdate ： 发布日期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我们在每天早上 <span class="tag">&lt;<span class="name">time</span>&gt;</span>9:00<span class="tag">&lt;/<span class="name">time</span>&gt;</span> 开始营业。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我在 <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-02-14&quot;</span>&gt;</span>情人节<span class="tag">&lt;/<span class="name">time</span>&gt;</span> 有个约会。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><ol><li><strong><form> 标签用于创建供用户输入的 HTML 表单。</strong></li></ol><p>属性： </p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td><em>character_set</em></td><td>规定服务器可处理的表单数据字符集。</td></tr><tr><td>action</td><td><em>URL</em></td><td>规定当提交表单时向何处发送表单数据。</td></tr><tr><td>autocomplete<strong>New</strong></td><td>on off</td><td>规定是否启用表单的自动完成功能。</td></tr><tr><td>enctype</td><td>application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method&#x3D;”post” 的情况）</td></tr><tr><td>method</td><td>get post</td><td>规定用于发送表单数据的 HTTP 方法。</td></tr><tr><td>name</td><td><em>text</em></td><td>规定表单的名称。</td></tr><tr><td>novalidate<strong>New</strong></td><td>novalidate</td><td>如果使用该属性，则提交表单时不进行验证。</td></tr><tr><td>target</td><td>_blank _self _parent _top</td><td>规定在何处打开 action URL。</td></tr></tbody></table><ol start="2"><li><strong><input> 标签规定了用户可以在其中输入数据的输入字段。</strong></li></ol><blockquote><p><input> 元素在 <form> 元素中使用，用来声明允许用户输入数据的 input 控件。输入字段可通过多种方式改变，取决于 type 属性</p></blockquote><p><strong>属性</strong>：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>accept</td><td>audio&#x2F;* video&#x2F;* image&#x2F;* <em>MIME_type</em></td><td>规定通过文件上传来提交的文件的类型。 (只针对type&#x3D;”file”)</td></tr><tr><td>alt</td><td><em>text</em></td><td>定义图像输入的替代文本。 (只针对type&#x3D;”image”)</td></tr><tr><td>autocomplete</td><td>on off</td><td>autocomplete 属性规定 <input> 元素输入字段是否应该启用自动完成功能。</td></tr><tr><td>autofocus<strong>New</strong></td><td>autofocus</td><td>属性规定当页面加载时 <input> 元素应该自动获得焦点。</td></tr><tr><td>checked</td><td>checked</td><td>checked 属性规定在页面加载时应该被预先选定的 <input> 元素。 (只针对 type&#x3D;”checkbox” 或者 type&#x3D;”radio”)</td></tr><tr><td>disabled</td><td>disabled</td><td>disabled 属性规定应该禁用的 <input> 元素。</td></tr><tr><td>form<strong>New</strong></td><td><em>form_id</em></td><td>form 属性规定 <input> 元素所属的一个或多个表单。</td></tr><tr><td>formaction<strong>New</strong></td><td><em>URL</em></td><td>属性规定当表单提交时处理输入控件的文件的 URL。(只针对 type&#x3D;”submit” 和 type&#x3D;”image”)</td></tr><tr><td>formenctype<strong>New</strong></td><td>application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td>属性规定当表单数据提交到服务器时如何编码(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)。</td></tr><tr><td>formmethod<strong>New</strong></td><td>get post</td><td>定义发送表单数据到 action URL 的 HTTP 方法。 (只适合 type&#x3D;”submit” 和 type&#x3D;”image”)</td></tr><tr><td>formnovalidate<strong>New</strong></td><td>formnovalidate</td><td>formnovalidate 属性覆盖 <form> 元素的 novalidate 属性。</td></tr><tr><td>formtarget<strong>New</strong></td><td>_blank _self _parent _top <em>framename</em></td><td>规定表示提交表单后在哪里显示接收到响应的名称或关键词。(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)</td></tr><tr><td>height<strong>New</strong></td><td><em>pixels</em></td><td>规定 <input>元素的高度。(只针对type&#x3D;”image”)</td></tr><tr><td>list<strong>New</strong></td><td><em>datalist_id</em></td><td>属性引用 <datalist> 元素，其中包含 <input> 元素的预定义选项。</td></tr><tr><td>max<strong>New</strong></td><td><em>number date</em></td><td>属性规定 <input> 元素的最大值。</td></tr><tr><td>maxlength</td><td><em>number</em></td><td>属性规定 <input> 元素中允许的最大字符数。</td></tr><tr><td>min<strong>New</strong></td><td><em>number date</em></td><td>属性规定 <input>元素的最小值。</td></tr><tr><td>multiple<strong>New</strong></td><td>multiple</td><td>属性规定允许用户输入到 <input> 元素的多个值。</td></tr><tr><td>name</td><td><em>text</em></td><td>name 属性规定 <input> 元素的名称。</td></tr><tr><td>pattern<strong>New</strong></td><td><em>regexp</em></td><td>pattern 属性规定用于验证 <input> 元素的值的正则表达式。</td></tr><tr><td>placeholder<strong>New</strong></td><td><em>text</em></td><td>placeholder 属性规定可描述输入 <input> 字段预期值的简短的提示信息 。</td></tr><tr><td>readonly</td><td>readonly</td><td>readonly 属性规定输入字段是只读的。</td></tr><tr><td>required<strong>New</strong></td><td>required</td><td>属性规定必需在提交表单之前填写输入字段。</td></tr><tr><td>size</td><td><em>number</em></td><td>size 属性规定以字符数计的 <input> 元素的可见宽度。</td></tr><tr><td>src</td><td><em>URL</em></td><td>src 属性规定显示为提交按钮的图像的 URL。 (只针对 type&#x3D;”image”)</td></tr><tr><td>step<strong>New</strong></td><td><em>number</em></td><td>step 属性规定 <input> 元素的合法数字间隔。</td></tr><tr><td>type</td><td>button checkbox color date datetime datetime-local email file hidden image month number password radio range reset search submit tel text time url week</td><td>type 属性规定要显示的 <input> 元素的类型。</td></tr><tr><td>value</td><td><em>text</em></td><td>指定 <input> 元素 value 的值。</td></tr><tr><td>width</td><td><em>pixels</em></td><td>width 属性规定 <input> 元素的宽度。 (只针对type&#x3D;”image”)</td></tr></tbody></table><ol start="3"><li><strong><textarea> 标签定义一个多行的文本输入控件。</strong></li></ol><blockquote><p>文本区域中可容纳无限数量的文本，其中的文本的默认字体是等宽字体（通常是 Courier）。</p><p>可以通过 cols 和 rows 属性来规定 textarea 的尺寸大小，不过更好的办法是使用 CSS 的 height 和 </p><p>width 属性</p><p>本身自己就是可扩展的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">我是一个文本框。</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>4.</strong>  <strong><select> 元素用来创建下拉列表。</strong></p><p><select> 元素中的 <option> 标签定义了列表中的可用选项。</p><p><strong>属性：</strong> </p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autofocus</td><td>autofocus</td><td>规定在页面加载时下拉列表自动获得焦点。</td></tr><tr><td>disabled</td><td>disabled</td><td>当该属性为 true 时，会禁用下拉列表。</td></tr><tr><td>form</td><td><em>form_id</em></td><td>定义 select 字段所属的一个或多个表单。</td></tr><tr><td>multiple</td><td>multiple</td><td>当该属性为 true 时，可选择多个选项。</td></tr><tr><td>name</td><td><em>text</em></td><td>定义下拉列表的名称。</td></tr><tr><td>required</td><td>required</td><td>规定用户在提交表单前必须选择一个下拉列表中的选项。</td></tr><tr><td>size</td><td><em>number</em></td><td>规定下拉列表中可见选项的数目。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;mercedes&quot;</span>&gt;</span>Mercedes<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>参考文档：</strong> <a href="https://www.runoob.com/tags/ref-byfunc.html"><strong>https://www.runoob.com/tags/ref-byfunc.html</strong></a></p></style></strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历(递归And迭代)</title>
      <link href="/post/a93b3d34.html"/>
      <url>/post/a93b3d34.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p>以  1二叉树为例讲解：</p><p>​2   3</p><p>4  5    67</p><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>按照递归调用的机制，我们按照只要遍历到就打印的方式得到的数据为： </p><p>​<strong>【1，2，4，4，4，2，5，5，5，2，1，3，6，6，6，3，7，7，7，3，1】</strong></p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>​ 我们将前序遍历所得到的数据都是在调用递归机制的元素<strong>首次</strong>出现的位置，那么按照前序遍历：【中 - 左 - 右】的顺序即可完成</p><p>所以我们得到的就是【1，2，4，5，3，6，7，1】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.left.prefix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.right.prefix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>​中序遍历所得到的数据都是在调用递归机制的元素<strong>第二次</strong>出现的位置，那么按照前序遍历：【左 - 中 - 右】的顺序即可完成</p><p>所以我们得到的就是【4，2，5，1，6，3，7】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.left.infix();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.right.infix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>​后序遍历所得到的数据都是在调用递归机制的元素<strong>最后一次</strong>出现的位置，那么按照前序遍历：【左 - 右 - 中】的顺序即可完成</p><p>所以我们得到的就是【4，5，2，6，7，3，1】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffix</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.left.suffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.right.suffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>​首先我们来了解一下递归的实现： 每一次递归调用都会把函数的局部变量、参数和返回值等都压入调用栈，然后在结束本层递归操作的时候，从栈顶弹出上一次递归的各项参数，这也是为什么递归可以返回上一层位置的原因。</p><p>​那么由此我们也可以不用递归，知道了递归调用的本质实现方法，我们就可以自己用栈实现。</p><h4 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>​**思路 ： **</p><p>​前序遍历是 【中 -&gt; 左 -&gt; 右】那么我们就可以从根节点加入栈，然后将右孩子 加入栈 最后再将左孩子 压入栈 ，这样我们得到的出栈顺序就是 【中 -&gt; 左 -&gt; 右】</p><ol><li><strong>将root根节点压入栈</strong></li><li><strong>进入循环，出栈</strong></li><li><strong>打印出栈节点的val</strong></li><li><strong>判断右孩子是否为null ，如果不是，将右孩子压入栈</strong></li><li><strong>判断左孩子是否为null， 如果不是，将左孩子压入栈</strong></li><li>循环【3-&gt;5】当栈为空时 退出循环，得到结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>**思路： **</p><p>​中序遍历和前序遍历有所不同，中序遍历的顺序是【中- &gt; 左 - &gt; 右 】。</p><ol><li><strong>先将所有左边的节点全部入栈，直到left&#x3D;&#x3D; null为止，否则一直顺序的进栈</strong></li><li><strong>当left为null时，出栈 ，然后将出栈的出栈的节点的val打印</strong></li><li><strong>将节点右移</strong></li><li>当【temp(临时节点) 为空， 并且栈也为空时】退出循环， 否则继续【1- &gt; 3】步骤。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span> || !s.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">                s.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node = s.pop();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>后序遍历的顺序是【左 -&gt; 右 -&gt; 中】，与前两者不同，我们需要两个栈 ，栈s1  和 s2 </p><p>其实经过第一轮的入栈出栈之后，得到的结果就是后序遍历结果的反转数，所以再次入栈出栈后我们就可以得到后序遍历的完整结果</p><ol><li><strong>先将根节点压入栈，然后进入循环</strong></li><li><strong>进入循环后先将栈s1 中的元素出栈，并入s2栈</strong></li><li><strong>判断左孩子是否为null ，如果不是，将左孩子压入栈s1</strong></li><li><strong>判断右孩子是否为null， 如果不是，将右孩子压入栈s1</strong></li><li><strong>【当栈s1为空时】退出循环，否则继续【2- &gt; 4】</strong></li><li><strong>将栈s2顺序出栈，并打印</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; s2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        s1.push(node);</span><br><span class="line">        <span class="keyword">while</span>(!s1.isEmpty())&#123;</span><br><span class="line">            node = s1.pop();</span><br><span class="line">            s2.push(node);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                s1.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                s1.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s2.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> s2.pop();</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树(AVL树)</title>
      <link href="/post/33c84c32.html"/>
      <url>/post/33c84c32.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>​平衡二叉树 ：（Balanced Binary Tree）又被称为AVL树（有别于AVL算法），且具有以下性质：</p><p>​它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。这个方案很好的解决了二叉查找树退化成链表的问题，把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。</p><p><em><strong>在讲解平衡二叉树之前我们先了解以下树的高度以及层的概念</strong></em></p><p> <img src="https://img-blog.csdnimg.cn/71fd1f1c39b14271a8ebf877b33eede1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpY2hhMzcwNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="树结构"></p><p>​<u>（图片引用于网络）</u></p><h2 id="查询树的高度"><a href="#查询树的高度" class="headerlink" title="查询树的高度"></a>查询树的高度</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>通过递归实现查询当前节点的左右子树的最大高度，然后再 + 1（加上节点本身），此时就是树的最大高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span>:left.height(),right == <span class="literal">null</span> ? <span class="number">0</span>:right.height()) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询左右子树的高度"><a href="#查询左右子树的高度" class="headerlink" title="查询左右子树的高度"></a>查询左右子树的高度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询左子树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left.height();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询右子树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right.height();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树实现"><a href="#平衡二叉树实现" class="headerlink" title="平衡二叉树实现"></a>平衡二叉树实现</h2><h3 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h3><p>节点的左子树的高度即h(左)  和 右子树即h(右)的差值大于1 。</p><p>具体来说就是 <strong>h(右) - h(左)  &gt;  1</strong></p><p>当满足这个情况时我们就需要进行左旋转</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>new 一个新的节点newNode ，value 为当前节点的value</li><li>设置newNode的left节点  为当前节点的left</li><li>设置newNode 的right节点  为当前节点的right的left节点</li><li>将当前节点的value设置为  当前节点的right的value</li><li>把当前节点的right 设置为 当前节点的right 的right</li><li>把当前节点的left设置为 newNode</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左旋转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//new 一个新的节点，值为当前节点的val</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">    <span class="comment">//将当前节点的left节点 设置为newNode的left</span></span><br><span class="line">    newNode.left = <span class="built_in">this</span>.left;</span><br><span class="line">    <span class="comment">//把当前节点this的right的left节点 设置为newNode的right</span></span><br><span class="line">    newNode.right = <span class="built_in">this</span>.right.left;</span><br><span class="line">    <span class="comment">//把当前节点的val修改成 当前节点的right的val</span></span><br><span class="line">    <span class="built_in">this</span>.val = <span class="built_in">this</span>.right.val;</span><br><span class="line">    <span class="comment">//把当前节点的left设置为 newNode</span></span><br><span class="line">    <span class="built_in">this</span>.left = newNode;</span><br><span class="line">    <span class="comment">//把当前节点的right设置为 当前节点的right的right</span></span><br><span class="line">    <span class="built_in">this</span>.right = <span class="built_in">this</span>.right.right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h3><p>当前节点的左子树的高度，即h(左)  和 右子树即h(右)的差值大于1 。</p><p>具体来说就是 <strong>h(左) - h(右)  &gt;  1</strong></p><p>当满足这个情况时我们就需要进行右旋转</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ol><li>new 一个新的节点newNode ，value 为当前节点的value</li><li>设置newNode的right节点  为当前节点的right</li><li>设置newNode 的left节点  为当前节点的left的right节点</li><li>将当前节点的value设置为  当前节点的left的value</li><li>把当前节点的left设置为 当前节点的left 的left</li><li>把当前节点的right设置为 newNode</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//new新的节点 ，值为this.val</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">    <span class="comment">//newNode 的right节点为当前节点的right节点</span></span><br><span class="line">    newNode.right = <span class="built_in">this</span>.right;</span><br><span class="line">    <span class="comment">//newNode 的left节点 为当前节点的left的right节点</span></span><br><span class="line">    newNode.left = <span class="built_in">this</span>.left.right;</span><br><span class="line">    <span class="comment">//修改当前节点的val为 当前节点的left 的val</span></span><br><span class="line">    <span class="built_in">this</span>.val = <span class="built_in">this</span>.left.val;</span><br><span class="line">    <span class="comment">//修改当前节点的left 为 当前节点的left 的 left</span></span><br><span class="line">    <span class="built_in">this</span>.left = <span class="built_in">this</span>.left.left;</span><br><span class="line">    <span class="comment">//修改当前节点的right 为newNode</span></span><br><span class="line">    <span class="built_in">this</span>.right = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h3><h4 id="双旋转出现的原因"><a href="#双旋转出现的原因" class="headerlink" title="双旋转出现的原因"></a>双旋转出现的原因</h4><p>以数组【10，11，7，6，8，9】为例</p><p>如下图可以看到，以<strong>节点8为根节点的right树高度 - left树的高度 &gt; 1</strong> </p><p>这样如果我们还是按照之前的做法势必无法得到平衡二叉树。所以我们就需要<strong>先将以节点8 为根节点的二叉树进行左旋转使它成为平衡二叉树之后，再对整棵树进行右旋转</strong>， 这样我们才能使整棵树都是平衡二叉树 </p><p><img src="https://img-blog.csdnimg.cn/5af8a359c3bc4a9e92bb92fa3d6bbfaa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif6KaB57-x57-U,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>​(<u>图片引用于csdn博主菜鸟要翱翔</u>)</p><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>​如果当前树需要进行左旋转（即(rightHeight() - leftHeight() &gt; 1)） </p><p>那么就需要<strong>判断右节点的rightHeight 是否 &lt;  rightHeight</strong> </p><p>如果满足， 那么就<strong>先将以right节点为根节点的树进行右旋转 ，然后再将整个树进行左旋转</strong></p><p>​<strong>同理</strong></p><p>​当前树需要进行右旋转（即(leftHeight()  - rightHeight() &gt; 1)） </p><p>那么就需要<strong>判断左节点的rightHeight 是否 &gt;  leftHeight</strong> </p><p>如果满足， 那么就<strong>先将以left节点为根节点的树进行左旋转 ，然后再将整个树进行右旋转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//当前节点的右子树的右子树高度 &lt; 当前节点的右子树的左子树高度</span></span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.rightHeight() &lt; right.leftHeight())&#123;</span><br><span class="line">            <span class="comment">//先将右子树进行右旋转 ，然后再将所有的树进行左旋转</span></span><br><span class="line">            right.rightRotate();</span><br><span class="line">            leftRotate();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            leftRotate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//当前节点的左子树的右子树高度 &gt; 当前节点的左子树的左子树高度</span></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.leftHeight() &lt; left.rightHeight())&#123;</span><br><span class="line">            <span class="comment">//先将左子树进行左旋转 ，然后再将整棵树进行右旋转</span></span><br><span class="line">            left.leftRotate();</span><br><span class="line">            rightRotate();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            rightRotate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左旋转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//new 一个新的节点，值为当前节点的val</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">        <span class="comment">//将当前节点的left节点 设置为newNode的left</span></span><br><span class="line">        newNode.left = <span class="built_in">this</span>.left;</span><br><span class="line">        <span class="comment">//把当前节点this的right的left节点 设置为newNode的right</span></span><br><span class="line">        newNode.right = <span class="built_in">this</span>.right.left;</span><br><span class="line">        <span class="comment">//把当前节点的val修改成 当前节点的right的val</span></span><br><span class="line">        <span class="built_in">this</span>.val = <span class="built_in">this</span>.right.val;</span><br><span class="line">        <span class="comment">//把当前节点的left设置为 newNode</span></span><br><span class="line">        <span class="built_in">this</span>.left = newNode;</span><br><span class="line">        <span class="comment">//把当前节点的right设置为 当前节点的right的right</span></span><br><span class="line">        <span class="built_in">this</span>.right = <span class="built_in">this</span>.right.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//new新的节点 ，值为this.val</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">        <span class="comment">//newNode 的right节点为当前节点的right节点</span></span><br><span class="line">        newNode.right = <span class="built_in">this</span>.right;</span><br><span class="line">        <span class="comment">//newNode 的left节点 为当前节点的left的right节点</span></span><br><span class="line">        newNode.left = <span class="built_in">this</span>.left.right;</span><br><span class="line">        <span class="comment">//修改当前节点的val为 当前节点的left 的val</span></span><br><span class="line">        <span class="built_in">this</span>.val = <span class="built_in">this</span>.left.val;</span><br><span class="line">        <span class="comment">//修改当前节点的left 为 当前节点的left 的 left</span></span><br><span class="line">        <span class="built_in">this</span>.left = <span class="built_in">this</span>.left.left;</span><br><span class="line">        <span class="comment">//修改当前节点的right 为newNode</span></span><br><span class="line">        <span class="built_in">this</span>.right = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//当前节点的右子树的右子树高度 &lt; 当前节点的右子树的左子树高度</span></span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.rightHeight() &lt; right.leftHeight())&#123;</span><br><span class="line">                <span class="comment">//先将右子树进行右旋转 ，然后再将所有的树进行左旋转</span></span><br><span class="line">                right.rightRotate();</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//当前节点的左子树的右子树高度 &gt; 当前节点的左子树的左子树高度</span></span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.leftHeight() &lt; left.rightHeight())&#123;</span><br><span class="line">                <span class="comment">//先将左子树进行左旋转 ，然后再将整棵树进行右旋转</span></span><br><span class="line">                left.leftRotate();</span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询左子树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.height();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询右子树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right.height();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span>:left.height(),right == <span class="literal">null</span> ? <span class="number">0</span>:right.height()) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//中序遍历二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int[] arr = &#123;4,3,6,5,7,8&#125;;</span></span><br><span class="line">       <span class="comment">// int[] arr = &#123;10,12,8,9,7,6&#125;;</span></span><br><span class="line">         <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        <span class="type">AVLTree</span> <span class="variable">avl</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AVLTree</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">                avl.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        avl.root.infix();</span><br><span class="line">        System.out.println(<span class="string">&quot;树的高度 :&quot;</span> + avl.root.height());</span><br><span class="line">        System.out.println(<span class="string">&quot;树的左子树高度 :&quot;</span> + avl.root.leftHeight());</span><br><span class="line">        System.out.println(<span class="string">&quot;树的右子树高度 :&quot;</span> + avl.root.rightHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            root = node;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;3]<br>Node[val&#x3D;6]<br>Node[val&#x3D;7]<br>Node[val&#x3D;8]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;11]<br>Node[val&#x3D;12]<br>Node[val&#x3D;14]<br>Node[val&#x3D;22]<br>Node[val&#x3D;23]<br>Node[val&#x3D;33]<br>Node[val&#x3D;33]<br>Node[val&#x3D;34]<br>Node[val&#x3D;44]<br>Node[val&#x3D;54]<br>Node[val&#x3D;55]<br>树的高度 :5<br>树的左子树高度 :3<br>树的右子树高度 :4</p><p>进程已结束,退出代码0</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的了解SpringMVC吗？</title>
      <link href="/post/b50e0645.html"/>
      <url>/post/b50e0645.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae4a3a96038c421a87307d7b53906f58~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="你真的了解SpringMVC吗 ?"></p><h1 id="介绍MVC"><a href="#介绍MVC" class="headerlink" title="介绍MVC"></a>介绍MVC</h1><blockquote><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p></blockquote><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><blockquote><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p></blockquote><h3 id="MVC的工作流程："><a href="#MVC的工作流程：" class="headerlink" title="MVC的工作流程："></a>MVC的工作流程：</h3><p><strong>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果 找到相应的View视图，渲染数据后最终响应给浏览器</strong></p><h3 id="三层架构分为"><a href="#三层架构分为" class="headerlink" title="三层架构分为:"></a>三层架构分为:</h3><p><strong>表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</strong></p><h3 id="SpringMVC的特点"><a href="#SpringMVC的特点" class="headerlink" title="SpringMVC的特点"></a>SpringMVC的特点</h3><ul><li>Spring 家族原生产品，与 IOC 容器等基础设施无缝对接</li><li>基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理</li><li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li><li>代码清新简洁，大幅度提升开发效率 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li><li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="SpringMVC处理请求案例"><a href="#SpringMVC处理请求案例" class="headerlink" title="SpringMVC处理请求案例"></a>SpringMVC处理请求案例</h1><ol><li>首先创建web工程，可以直接选择webapp进行创建，也可以自己手动创建</li><li>配置web.xml文件 （注意这里的servlet-name必须要与WE-INF下的XXX-servlet.xml文件中的XXX名称相同）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d6748fb74994e1d9ddd27e9cf5700b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>配置SpringMVC-servlet.xml文件 （注意文件中的视图前缀下的文件名&#x2F;WEB-INF&#x2F;templates&#x2F;就是在templates下创建的文件）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫描控制层组件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com_Ray.springMVC.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器</span></span><br><span class="line"><span class="comment">        作用：解析视图 ，使用之后就可以使用springmvc为我们提供的方式来进行视图渲染，并实现页面跳转</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                逻辑视图：/WEB-INF/templates/(前缀)  index - .html(后缀)</span></span><br><span class="line"><span class="comment">                            == 物理视图(全地址) - 视图前缀 - 视图后缀</span></span><br><span class="line"><span class="comment">                    物理视图（需要访问的网页）--&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建Controller控制层的相关代码，用于接受请求和进行<strong>请求转发</strong>和跳转</li><li>模块名+Controller 类其中方法名加 <strong>@RequestMapping（“&#x2F;”）标签就是作为请求映射的标签，其中（“&#x2F;”）:</strong> 表示的是绝对路径为<a href="https://link.juejin.cn/?target=http://localhost:8080/SpringMVC/">http://localhost:8080/SpringMVC/</a> 上下文的这个请求 <strong>返回值return作用就是跳转至需要跳转的页面，内容：“逻辑视图名称”</strong></li><li>pom.xml中的配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java_workSpace_SSM<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">webAppSourceDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/$&#123;pom.artifactId&#125;-$&#123;pom.version&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">webAppSourceDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>如果想要将配置文件放在类路径下的resources下，那么就可以这样设置</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e8ca26169cb4553b2f8378b28cb5596~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--a</span></span><br><span class="line"><span class="comment">    - SpringMVC 的前端控制器DispatcherServlet</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    - Servlet that dispatches requests to the Spring managed block servlets</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这里的servlet-name一定要与WEB_INF下的配置文件XXX-servlet.xml中的XXX名字相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--初始化的作用：将我们的配置文件放到resources路径下--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ContextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- URL space mappings ============================================= --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--表示所有的请求都需要进行过滤 （被前端控制器处理）  *.do :表示后缀处理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结简单的运行原理及过程"><a href="#总结简单的运行原理及过程" class="headerlink" title="总结简单的运行原理及过程"></a>总结简单的运行原理及过程</h3><ol><li><strong>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被</strong> <strong>前端控制器 DispatcherServlet</strong> <strong>处理。</strong></li><li><strong>前端控制器会</strong> <strong>读取SpringMVC的核心配置文件</strong> <strong>，通过</strong> <strong>扫描组件</strong> <strong>找到控制器， 将请求地址和控制器中@RequestMapping注解的</strong> <strong>value属性值进行匹配</strong></li><li><strong>若匹配成功，该注解所标识的控制器方法就是处理请求的方法。</strong></li><li><strong>处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会 被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视 图所对应页面</strong></li></ol><h3 id="具体如何处理一个请求★★★★★："><a href="#具体如何处理一个请求★★★★★：" class="headerlink" title="具体如何处理一个请求★★★★★："></a>具体如何处理一个请求★★★★★：</h3><ol><li><strong>@RequestMapping注解功能：</strong> <em>从注解名称上我们可以看到，@RequestMapping注解的作用就是</em> <em>将请求和处理请求的控制器方法关联 起来，建立映射关系。</em> <em>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</em></li><li><strong>@RequestMapping注解位置</strong>★★★(类与方法) <strong>：</strong></li></ol><p><em>@RequestMapping</em> <em><strong>标识一个类</strong></em> <em>：设置映射请求的请求路径的</em> <em><strong>初始信息</strong></em>**</p><p><em>@RequestMapping</em> <em><strong>标识一个方法</strong></em> <em>：设置映射请求请求路径的</em> <em><strong>具体信息</strong></em>**</p><p><strong>如果说两个都设置了RequestMApping , 那么就是在</strong> <strong>访问方法上的请求时需要加上类上的RequestMapping的地址</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26ecbed871a4b92904785d83fc7f71f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Controller</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/test/&quot;</span>)</span><br><span class="line">public class EmployeeController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private EmployeeDao employeeDao;</span><br><span class="line">    <span class="comment">//查询所有的员工信息</span></span><br><span class="line"><span class="comment">//请求地址问 ： /test/employee</span></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">&quot;/employee&quot;</span>)</span><br><span class="line">    public String <span class="built_in">selectAll</span>(Model model)&#123;</span><br><span class="line">        <span class="selector-tag">Collection</span>&lt;<span class="selector-tag">Employee</span>&gt; <span class="selector-tag">employeeAll</span> = <span class="selector-tag">employeeDao</span><span class="selector-class">.getAll</span>();</span><br><span class="line">        <span class="selector-tag">model</span><span class="selector-class">.addAttribute</span>(<span class="string">&quot;employeeAll&quot;</span>,employeeAll);</span><br><span class="line">        <span class="selector-tag">return</span> &quot;<span class="selector-tag">emp_list</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>@RequestMapping注解的value属性：（可以设置多个）</strong> <strong>:</strong> 为数组属性，即为浏览器所发送请求的请求路径匹配的value属性中的任何一个值(只要一个满足就可以)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的员工信息</span></span><br><span class="line"><span class="meta">@GetMapping</span>(&#123;<span class="string">&quot;/test/employee&quot;</span>,<span class="string">&quot;test/hello&quot;</span>,<span class="string">&quot;...&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">selectAll</span>(<span class="params">Model model</span>)&#123;</span><br><span class="line">    <span class="title class_">Collection</span>&lt;<span class="title class_">Employee</span>&gt; employeeAll = employeeDao.<span class="title function_">getAll</span>();</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;employeeAll&quot;</span>,employeeAll);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp_list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>@RequestMapping注解的method属性（</strong> <strong>也是数组</strong> <strong>）：</strong> <strong>表示请求方式(</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bdbd74fe29a404b89d4d84de69de79d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"> <strong>) mathod&#x3D;{RequestMethod.POST ，RequestMethod.GET } 作用： 通过请求方式匹配请求</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9a2e534cf3f4d28b5e40a049efe4d43~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>注： 1、对于<strong>处理指定请求方式</strong>的控制器方法，SpringMVC中提供了</p><p>@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有<strong>get，post，put，delete</strong> 但是<strong>目前浏览器只支持get和post</strong>，若在form表单提交时，为method设置了其他请求方式的字符 串（put或delete），则按照默认的请求方式get处理 若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter</p><ol><li><strong>@RequestMapping注解的param属性作用 :</strong></li></ol><p><strong>通过请求参数匹配请求，即浏览器发送的请求的请求参数必须满足params属性到的设置</strong></p><p>注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数 和请求映射的匹配关系</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d08608e235b49b8bb294c5a3965f02a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>对于params属性的设置： <strong>如果params属性设置了值</strong>，那么请求参数就必须加上对应的值 (否则报400错误) 下面是<strong>两种方式 :</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52c6793694bf4ded948d0b16e534bb15~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>一定不能携带password</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6891a97a388547728bcdeb27c5e95bb0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>@RequestMapping注解的header属性（用法和param用法一模一样）:</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8266874e0c2c495d912ec5a7b896648e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="SpringMVC支持ant风格的路径"><a href="#SpringMVC支持ant风格的路径" class="headerlink" title="SpringMVC支持ant风格的路径"></a>SpringMVC支持ant风格的路径</h3><p><strong>？：表示任意的单个字符</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d639aece2464130be4b297424028994~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>? 就会被解析成和前后字符相同的字符 ，但是不能匹配特殊字符（比如 ？ ）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12a5cab029bb4a8e803ebcf2cda4b2e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>*<strong>：表示任意的0个或多个字符</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dbea62f919445a8a9254088c681248e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>以下两种都可以 （但是不能为 &#x2F; ）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c6c6ad345de4b7996e8cf4b3c6ae4f3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4de7b25162e8483c96a117f4e27fa244~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>******* <em><strong>：表示任意层数的任意目录 注意：在使用</strong>时，</em>* <strong>只能使用&#x2F;</strong>&#x2F;xxx的方式** <strong>（</strong> <strong>&#x2F;</strong>&#x2F;中间不能出现其他字符** <strong>）</strong></p><h3 id="SpringMVC中支持路径中的占位符"><a href="#SpringMVC中支持路径中的占位符" class="headerlink" title="SpringMVC中支持路径中的占位符"></a>SpringMVC中支持路径中的占位符</h3><p>原始方式： &#x2F;deleteUser?id&#x3D;1</p><p><strong>rest方式：</strong> <strong>&#x2F;user&#x2F;delete&#x2F;1</strong>****</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0b2b66a99e14a1b8dd80bbfa8d96305~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>其中的admin&#x2F;1 都是参数 ： 需要进行赋值</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66cf2efccbc540be8249fdf0782d64e5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h1><h3 id="通过servletAPI获取（HttpServletRequest的方式）"><a href="#通过servletAPI获取（HttpServletRequest的方式）" class="headerlink" title="通过servletAPI获取（HttpServletRequest的方式）"></a>通过servletAPI获取（HttpServletRequest的方式）</h3><h3 id><a href="#" class="headerlink" title></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/013f3ea372e2493ebd53bcf5de1f72d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></h3><h3 id="通过控制器方法的形参获取请求参数"><a href="#通过控制器方法的形参获取请求参数" class="headerlink" title="通过控制器方法的形参获取请求参数"></a>通过控制器方法的形参获取请求参数</h3><p><em>*<em>*</em>*在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet中就会将请求参数赋值给相应的形参****</em>*</p><p>如果参数名与形参不一致，那么就可以通过参数注解@RequestParam （“参数”）对应形参的方法</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae85033355aa408fa7d90a419929f2c0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="RequestParam注解的三个属性"><a href="#RequestParam注解的三个属性" class="headerlink" title="@RequestParam注解的三个属性"></a>@RequestParam注解的三个属性</h3><p>@RequestParam是<strong>将请求参数和控制器方法的形参创建映射关系</strong></p><p>@RequestParam注解一共有三个属性：</p><ul><li>value：指定为形参赋值的请求参数的参数名</li><li>required：设置是否必须传输此请求参数，默认值为true</li><li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值 为””时，则使用默认值为形参赋值</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/451d5603a9de4fe7a68852c317c6bb65~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>@RequestHeader ：</strong> <strong>将请求头信息和控制器方法的形参绑定</strong></p><p>注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><p><strong>逻辑简写</strong></p><p>@RequestMapping(“ &#x2F;XXX” )</p><p>pubic String getHeader( @RequestParam（value&#x3D; “name”…）String name @RequestHeader(value &#x3D; “referer” ) String referer ){</p><p>sout(“name &#x3D; “ + name);</p><p>sout(“referer &#x3D; “+ referer);</p><p>return “XXX”; &#x2F;&#x2F;请求跳转的逻辑页面</p><p>}</p><p><strong>@Cookievalue :</strong> <strong>将cookie数据和控制请求的形参绑定</strong></p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><hr><h3 id="经常用的方法–通过实体类中的属性名与请求参数的名一致-来获取请求参数"><a href="#经常用的方法–通过实体类中的属性名与请求参数的名一致-来获取请求参数" class="headerlink" title="经常用的方法–通过实体类中的属性名与请求参数的名一致 来获取请求参数"></a>经常用的方法–通过实体类中的属性名与请求参数的名一致 来获取请求参数</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab9f4594d1914c998bf868f2107739e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保证User类中的属性名与请求参数中的参数保持一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="string">&quot;/param/pojo&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> String pojoRequest(User user)&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决请求参数获取乱码的问题"><a href="#解决请求参数获取乱码的问题" class="headerlink" title="解决请求参数获取乱码的问题 :"></a>解决请求参数获取乱码的问题 :</h2><h2 id="此时不能通过request-setCharacterEnCoding-”UTF-8“"><a href="#此时不能通过request-setCharacterEnCoding-”UTF-8“" class="headerlink" title="此时不能通过request.setCharacterEnCoding(”UTF-8“)"></a>此时不能通过request.setCharacterEnCoding(”UTF-8“)</h2><ol><li><strong>可以将请求设置为get，因为get会自动设置成UTF-8模式</strong></li><li><strong>或者在web.xml中设置处理编码的过滤器【一定要匹配在其他配置之前】（四个）</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acee6d9efbd84df1b3d8ea4f5e08163d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="往request域对象中共享数据"><a href="#往request域对象中共享数据" class="headerlink" title="往request域对象中共享数据"></a>往request域对象中共享数据</h2><h3 id="使用serletAPI向request域对象共享数据"><a href="#使用serletAPI向request域对象共享数据" class="headerlink" title="使用serletAPI向request域对象共享数据"></a>使用serletAPI向request域对象共享数据</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/305cb854a18c4700832f2f44de6434cd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="使用ModelAndView向request域对象中共享数据★★★★"><a href="#使用ModelAndView向request域对象中共享数据★★★★" class="headerlink" title="使用ModelAndView向request域对象中共享数据★★★★"></a>使用ModelAndView向request域对象中共享数据★★★★</h3><p>使用这个就必须将请求方法的返回值 设置为modelAndiew</p><p>其实不管是使用String也好，还是servletAPI也好，还是其他的 model也好，最后在底层都会被封装成ModelAndView 对象★★★★</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/781774357a25429d889ce2019e9f6d98~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">&quot;/test/mav&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span>()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置逻辑视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d907e2ba4e94b63abc2c8d61e296506~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="使用model向request域对象中共享数据"><a href="#使用model向request域对象中共享数据" class="headerlink" title="使用model向request域对象中共享数据"></a>使用model向request域对象中共享数据</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11066282f9354fdea59f58235efea599~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/test/model&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">testModel</span>(<span class="params">Model model</span>)&#123;</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;testModel&quot;</span>,<span class="string">&quot;hello,model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44b0f0a988a44087a25ed64807f8f845~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="使用map向request域对象中共享数据"><a href="#使用map向request域对象中共享数据" class="headerlink" title="使用map向request域对象中共享数据"></a>使用map向request域对象中共享数据</h3><h3 id="使用modelmap向request域对象中共享数据"><a href="#使用modelmap向request域对象中共享数据" class="headerlink" title="使用modelmap向request域对象中共享数据"></a>使用modelmap向request域对象中共享数据</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/010c21c9d7424ad096d4f976ecf018c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="往session-x2F-application域对象中共享数据"><a href="#往session-x2F-application域对象中共享数据" class="headerlink" title="往session&#x2F;application域对象中共享数据"></a>往session&#x2F;application域对象中共享数据</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eabd92347f3949b0b585bc54d2be033e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试   向session域中共享数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">session</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/test/session&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">testSession</span>(<span class="params">HttpSession session</span>)&#123;</span><br><span class="line">    session.<span class="title function_">setAttribute</span>(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/test/application&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">testApplication</span>(<span class="params">HttpSession session</span>)&#123;</span><br><span class="line">    <span class="title class_">ServletContext</span> servletContext = session.<span class="title function_">getServletContext</span>();</span><br><span class="line">    servletContext.<span class="title function_">setAttribute</span>(<span class="string">&quot;testApplication&quot;</span>,<span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37c8f6daeb04c05a7d54497844e8c5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>注意其中的text&#x3D; ”${session.testSessionScope}”</strong></p><p><strong>和text&#x3D; ”${session.testApplication}”</strong></p><hr><h1 id="Spring-MVC中的视图"><a href="#Spring-MVC中的视图" class="headerlink" title="Spring MVC中的视图"></a>Spring MVC中的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图 当工程引入jstl的依赖，转发视图会自动转换为JstlView 若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视 图解析器解析之后所得到的是ThymeleafView</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a117c059906645ffa746aa0025bb6c6d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>从图中我们可以看出，所有的我们需要的控制器中的方法都是通过前端显示器DispacherServlet中的反射调用，然后被封装到madelandView对象中</p><p><em><strong>当我们的视图名称中没有任何前缀的话就默认创建的为 themleafView ， 如果以forword作为视图前缀的默认就是InternalResourceView （转发视图），如果是以redirect作为视图前缀就默认创建的重定向视图</strong></em></p><p><strong>三种视图：</strong></p><h3 id="ThymeleafView-："><a href="#ThymeleafView-：" class="headerlink" title="ThymeleafView ："></a>ThymeleafView ：</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置 的视图解析器解析，视图名称拼接视图前缀和视图</p><p>后缀所得到的最终路径，会通过转发的方式实现跳转</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/537a8b548e354541b5ee3ef9a12d6d35~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="InternalResourceView-：转发视图"><a href="#InternalResourceView-：转发视图" class="headerlink" title="InternalResourceView ：转发视图"></a>InternalResourceView ：转发视图</h3><p>SpringMVC中<strong>默认的转发视图是InternalResourceView</strong></p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视 图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部 分作为最终路径通过转发的方式实现跳转</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ac798b4ce6548b7a8b24611702b9bef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="RedirectView-：-默认的重定向视图"><a href="#RedirectView-：-默认的重定向视图" class="headerlink" title="RedirectView ： 默认的重定向视图"></a>RedirectView ： 默认的重定向视图</h3><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不 会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最 终路径通过重定向的方式实现跳转</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736e62b2bb8f4c86916faa5c580c37a5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="视图控制器-view-controller"><a href="#视图控制器-view-controller" class="headerlink" title="视图控制器 view-controller"></a>视图控制器 view-controller</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d46f2bb74ba044c097ce7d0eb805d251~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>作用是：为当前的请求直接设置视图名称，实现页面跳转</strong></p><hr><h1 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h1><p>REST：Representational State Transfer，<strong>表现层资源状态转移</strong></p><p><strong>资源</strong></p><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。</p><p>每个资源是服务器上一个 可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、 数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端 应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个 资源可以由一个或多个URI来标识。</p><p>URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴 趣的客户端应用，可以通过资源的URI与其进行交互</p><p><strong>资源的表述</strong></p><p>是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交 换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格 式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><p><strong>状态转移</strong></p><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资 源的表述，来间接实现操作资源的目的。</p><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：<strong>GET、POST、PUT、DELETE。</strong></p><p>它们分别对应四种基本操作：<strong>GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</strong></p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个<strong>单词使用斜杠分开</strong>，<strong>不使用问号键值对方式携带请求参数</strong>，而是将要发送给服务器的<strong>数据作为 URL 地址的一部分，以保证整体风格的一致性。</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dba8008bd87c4b99aa2a7d4c263f9572~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>由于目前的浏览器只支持get 和post方式的请求，如何发送put和delete请求呢 ？</strong></p><h3 id="HiddenHttpMethodFilter-（处理delete和put请求）"><a href="#HiddenHttpMethodFilter-（处理delete和put请求）" class="headerlink" title="HiddenHttpMethodFilter （处理delete和put请求）"></a>HiddenHttpMethodFilter （处理delete和put请求）</h3><p>HiddenHttpMethodFilter 处理put和delete请求的条件：</p><p><strong>a&gt; 当前请求的请求方式必须为post</strong></p><p><strong>b&gt; 当前请求必须传输请求参数_method，并且value值必须为要处理的put &#x2F; delete</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da0ec1a8875844ba9e3cd4a1eca64a18~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>满足以上条件，HiddenHttpMethodFilter 过滤器就会将当前请求的请求方式转换为请求参数 _method的值，因此请求参数_method的值才是最终的请求方式</p><h3 id="在web-xml中设置HiddenHttpMethodFilter"><a href="#在web-xml中设置HiddenHttpMethodFilter" class="headerlink" title="在web.xml中设置HiddenHttpMethodFilter"></a>在web.xml中设置HiddenHttpMethodFilter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置请求处理的过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c4080396c7c4e368e2e67a42746ba5e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>在themleaf中，删除操作不能直接将请求参数传进去，必须将请求参数和路径地址进行一下的修改才行</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fcf3d8fe3874c63868088efd8c63b1b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>进行修改操作时的数据回显，首先要设置input隐藏域，将真正的请求方式写入 and 将id写入，然后对于其他的个个属性进行数据回显</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0334f1ada177434e8e6d47cc428a45c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>对于单选框（性别等）的数据回显用</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c59f484b7194ebe87744aea6de1a3dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>在controller层的操作，</strong> <strong>先查寻，再进行修改</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec823625c2d24c1884c4f5e2e0a3d6ef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6a9b5637f704477ae558ed67e24ba1e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>进行删除操作时</strong></li></ol><p>要进行确认是否修改</p><h1 id="Spring中实现文件上传和下载"><a href="#Spring中实现文件上传和下载" class="headerlink" title="Spring中实现文件上传和下载"></a>Spring中实现文件上传和下载</h1><h3 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h3><p>ReponseEntity用于控制器方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以作为一个模板，以后只需要改一些内容即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test/down&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span></span><br><span class="line">            IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;WEB-INF/img&quot;</span>);</span><br><span class="line">        realPath = realPath + File.separator +<span class="string">&quot;5.png&quot;</span>;</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//创建输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">        <span class="comment">//创建字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        <span class="comment">//将流读到字节数组中</span></span><br><span class="line">        is.read(bytes);</span><br><span class="line">        <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        <span class="comment">//设置要下载方式以及下载文件的名字 key为固定的</span></span><br><span class="line">        headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=5.png&quot;</span>);</span><br><span class="line">        <span class="comment">//设置响应状态码</span></span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">        <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">        <span class="comment">//关闭输入流</span></span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h3><p><strong>要求：</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3d1661101bf41f3a8589c97c51773a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>操作：</p><ol><li>创建表单</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6189c78ac9ac43e1aa42d7529820c7d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>配置需要的xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>开启图片解析器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    图片解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>上传文件</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;test/up&quot;)</span><br><span class="line">  public String upPhotos(MultipartFile photo,HttpSession session) throws IOException &#123;</span><br><span class="line">      String <span class="attr">filename</span> = photo.getOriginalFilename()<span class="comment">;</span></span><br><span class="line">      System.out.println(filename)<span class="comment">;</span></span><br><span class="line">     //如果出现重名的情况就做如下操作</span><br><span class="line">      String <span class="attr">substring</span> = filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>))<span class="comment">;</span></span><br><span class="line">      String <span class="attr">uuid</span> = UUID.randomUUID().toString()<span class="comment">;</span></span><br><span class="line">      <span class="attr">filename</span> = uuid + substring<span class="comment">;</span></span><br><span class="line">      //这样设置的名字就与其有所差别，不会让文件内容被覆盖</span><br><span class="line">      </span><br><span class="line">      //获取servletContext对象</span><br><span class="line">      ServletContext <span class="attr">servletContext</span> = session.getServletContext()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      //获取当前工程的真实路径</span><br><span class="line">      String <span class="attr">photoPath</span> = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>)<span class="comment">;</span></span><br><span class="line">      //创建photoPath对应的file对象</span><br><span class="line">      File <span class="attr">file</span> = new File(photoPath)<span class="comment">;</span></span><br><span class="line">      if (!file.exists())&#123;</span><br><span class="line">          //如果没有直接创建</span><br><span class="line">          file.mkdir()<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      String <span class="attr">finalPath</span> = photoPath + File.separator + filename<span class="comment">;</span></span><br><span class="line">      //上传文件(转移文件到指定的位置)</span><br><span class="line">      photo.transferTo(new File(finalPath))<span class="comment">;</span></span><br><span class="line">      return &quot;success&quot;<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>结果(生成图片)</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/146cd63b3dd44aa89c0efe6bce5d9cfd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><ol><li>拦截器(interceptor)是springmvc中的一个组件，是运行在DispatcherServlet之后，运行在Controller之前的</li><li>拦截器可以决定对某些符合条件的进行拦截或者放行，所以，通常用于对一些具有相同运行条件的功能进行约束</li></ol><p>Spring 中的拦截器用于拦截控制器方法的执行1</p><p>拦截器需要实现HandlerInterceptor</p><p>拦截器必须在SpringMVC的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    图片解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过</span></span><br><span class="line"><span class="comment">    mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><ol><li><strong>preHandle</strong>：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，中断处理流程，即不调用控制器方法，不执行后序的内容</li><li><strong>postHandle</strong>：控制器方法执行之后执行postHandle()</li><li><strong>afterCompletion</strong>：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</li></ol><h3 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h3><p>①若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会<strong>按照配置的顺序</strong>执行，而postHandle()和afterCompletion()会按照配置的反序执行</p><p>②<strong>若某个拦截器的preHandle()返回了false</strong></p><p>preHandle()返回false<strong>和它之前的拦截器的preHandle()</strong> 都会执行，<em>postHandle()都不执行</em>，<strong>返回false 的拦截器之前的拦截器的afterCompletion()会执行</strong></p><h3 id="演示实例—登录检查"><a href="#演示实例—登录检查" class="headerlink" title="演示实例—登录检查"></a>演示实例—登录检查</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a88d2080cfd4cc6a9596d098097c5d8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在处理器执行之前调用(non-Javadoc)</span></span><br><span class="line"><span class="comment"> * 1. 获取session</span></span><br><span class="line"><span class="comment"> * 2. 读取session中的uid的值</span></span><br><span class="line"><span class="comment"> * 如果为null，表示没有登录，那么直接重定向到登录界面，同时返回false，不需要执行后面的流程了</span></span><br><span class="line"><span class="comment"> * 如果不为null，表示已经登录了，那么直接返回true，继续执行后面的拦截器或者处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">HttpSession session=request.getSession();   <span class="comment">//获取session</span></span><br><span class="line">Object uid=session.getAttribute(<span class="string">&quot;uid&quot;</span>);  <span class="comment">//读取session中的对象</span></span><br><span class="line"><span class="comment">//如果uid存在，那么即可登录完成</span></span><br><span class="line"><span class="keyword">if</span> (uid!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//返回true，登录成功就需要执行后续的流程</span></span><br><span class="line">&#125;</span><br><span class="line">response.sendRedirect(request.getContextPath()+<span class="string">&quot;/user/login.do&quot;</span>);  <span class="comment">//重定向到登录界面</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//返回false，后面的流程也不用执行了，直接中断</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/029eb7a6da6f4af688a6ed756bad5a37~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="拦截器和过滤器的区别-主要的区别"><a href="#拦截器和过滤器的区别-主要的区别" class="headerlink" title="拦截器和过滤器的区别(主要的区别)"></a>拦截器和过滤器的区别(主要的区别)</h2><ol><li>拦截器是springmvc中，仅仅当使用springmvc才可以使用拦截器，过滤器是Java EE体系中的，无论使用哪种框架都可以使用过滤器</li><li>拦截器在DispatcherServlet之后，在处理器之前执行，过滤器在DispatcherServlet之前执行</li><li>过滤器会在所有的servlet之前执行(所有的请求都会执行)，而拦截器会在springmvc中DispatcherServlet之后执行，所以过滤器在项目中可以过滤任何请求（只要是配置了对应的路径），而拦截器只会在DispatcherServlet处理的请求的基础之上进行拦截</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当多种请求都需要做相同或者极为相似的任务时，可以使用拦截器</li><li>开发好拦截器，那么需要在springmvc的配置文件中配置</li><li>在<a href="https://link.juejin.cn/?target=">mvc:interceptors</a>可以有如果若干个<a href="https://link.juejin.cn/?target=">mvc:interceptor</a>,即是配置若干个拦截器，配置的多个拦截器将会形成<strong>拦截器链</strong>，如果配置多个拦截器对同一个路径都会拦截，那么会按照配置的节点顺序执行。</li></ul><h3 id="异常处理的组件"><a href="#异常处理的组件" class="headerlink" title="异常处理的组件"></a>异常处理的组件</h3><p>如果报错就会直接跳转至该异常处理的组件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14aad479531f411493022eb19cbf8dab~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="SpringMVC的各个组件及其执行流程"><a href="#SpringMVC的各个组件及其执行流程" class="headerlink" title="SpringMVC的各个组件及其执行流程"></a>SpringMVC的各个组件及其执行流程</h1><h2 id="SpringMVC的常用组件"><a href="#SpringMVC的常用组件" class="headerlink" title="SpringMVC的常用组件"></a>SpringMVC的常用组件</h2><ol><li>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供 作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</li><li>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供 作用：根据请求的url、method等信息查找Handler，即控制器方法</li><li>Handler：处理器，需要工程师开发 作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</li><li>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供 作用：通过HandlerAdapter对处理器（控制器方法）进行执行</li><li>ViewResolver：视图解析器，不需要工程师开发，由框架提供 作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView</li><li>View：视图 作用：将模型数据通过页面展示给用户</li></ol><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><p>2.1. 不存在</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再判断是否配置了mvc:<span class="keyword">default</span>-servlet-handler</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果没配置，则控制台报映射查找不到，客户端展示404错误</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,<span class="selector-tag">HTML</span>），找不到客户端也会展示<span class="number">404</span>错误</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>2.2. 存在则执行以下流程</p><p>根据该URI，调用HandlerMappingrequestmapping进行匹配 获得该Handler配置的所有相关的对象（包括Handler对象以及 Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet 根据获得的<span class="built_in">Handler</span>(控制器方法)，选择一个合适的HandlerAdapter。</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果成功获得HandlerAdapter，此时将开始执行拦截器的<span class="built_in">preHandler</span>(…)方法【正向】</span><br></pre></td></tr></table></figure><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提取<span class="built_in">Request</span>中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e70a1037f9d84d2e90382c37cc3a7f4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此时将开始执行拦截器的postHandle(...)方法【逆向】。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行 HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model 和View，来渲染视图。</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">渲染视图完毕执行拦截器的<span class="built_in">afterCompletion</span>(…)方法【逆向】。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将渲染结果返回给客户端。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合实现CRUD</title>
      <link href="/post/5f70b419.html"/>
      <url>/post/5f70b419.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  关于SSM的整合及其实现CRUD功能和分页功能</p></blockquote><h1 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h1><p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1160530d03a4e05a117774a5ebec396~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p> 各个依赖的配置 ，直接复制即可</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --</span></span><br><span class="line"><span class="comment">    &lt;build</span></span><br><span class="line"><span class="comment">        &lt;!-- 构建过程中用到的插件 --</span></span><br><span class="line"><span class="comment">        &lt;plugins</span></span><br><span class="line"><span class="comment">            &lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --</span></span><br><span class="line"><span class="comment">            &lt;plugin</span></span><br><span class="line"><span class="comment">                &lt;groupIdorg.mybatis.generator&lt;/groupId</span></span><br><span class="line"><span class="comment">                &lt;artifactIdmybatis-generator-maven-plugin&lt;/artifactId</span></span><br><span class="line"><span class="comment">                &lt;version1.3.0&lt;/version</span></span><br><span class="line"><span class="comment">                &lt;!-- 插件的依赖 --</span></span><br><span class="line"><span class="comment">                &lt;dependencies</span></span><br><span class="line"><span class="comment">                    &lt;!-- 逆向工程的核心依赖 --</span></span><br><span class="line"><span class="comment">                    &lt;dependency</span></span><br><span class="line"><span class="comment">                        &lt;groupIdorg.mybatis.generator&lt;/groupId</span></span><br><span class="line"><span class="comment">                        &lt;artifactIdmybatis-generator-core&lt;/artifactId</span></span><br><span class="line"><span class="comment">                        &lt;version1.3.2&lt;/version</span></span><br><span class="line"><span class="comment">                    &lt;/dependency</span></span><br><span class="line"><span class="comment">                    &lt;!-- 数据库连接池 --</span></span><br><span class="line"><span class="comment">                    &lt;dependency</span></span><br><span class="line"><span class="comment">                        &lt;groupIdcom.mchange&lt;/groupId</span></span><br><span class="line"><span class="comment">                        &lt;artifactIdc3p0&lt;/artifactId</span></span><br><span class="line"><span class="comment">                        &lt;version0.9.2&lt;/version</span></span><br><span class="line"><span class="comment">                    &lt;/dependency</span></span><br><span class="line"><span class="comment">                    &lt;!-- MySQL驱动 --</span></span><br><span class="line"><span class="comment">                    &lt;dependency</span></span><br><span class="line"><span class="comment">                        &lt;groupIdmysql&lt;/groupId</span></span><br><span class="line"><span class="comment">                        &lt;artifactIdmysql-connector-java&lt;/artifactId</span></span><br><span class="line"><span class="comment">                        &lt;version8.0.26&lt;/version</span></span><br><span class="line"><span class="comment">                    &lt;/dependency</span></span><br><span class="line"><span class="comment">                &lt;/dependencies</span></span><br><span class="line"><span class="comment">            &lt;/plugin</span></span><br><span class="line"><span class="comment">        &lt;/plugins</span></span><br><span class="line"><span class="comment">    &lt;/build</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!--    Spring的版本，不需要一个个管理，直接配置好，然后用$&#123;&#125;来引用--</span></span><br><span class="line"><span class="comment">    &lt;properties</span></span><br><span class="line"><span class="comment">        &lt;spring.version5.3.1&lt;/spring.version</span></span><br><span class="line"><span class="comment">    &lt;/properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;dependencies</span></span><br><span class="line"><span class="comment">        &lt;!--上下文依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-context&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--管理bean的依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-beans&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--springmvc--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-web&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-webmvc&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--事务解析器(事务管理器)的那个类，就在jdbc中，所以需要引用这个依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-jdbc&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--管理切面的依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-aspects&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--Spring整和Junit测试的--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-test&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- Mybatis核心 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.mybatis&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdmybatis&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version3.5.7&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--mybatis和spring的整合包，会提供一些特殊的类--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.mybatis&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdmybatis-spring&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version2.0.6&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- 连接池 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcom.alibaba&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIddruid&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.0.9&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- junit测试 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdjunit&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdjunit&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version4.12&lt;/version</span></span><br><span class="line"><span class="comment">            &lt;scopetest&lt;/scope</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- MySQL驱动 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdmysql&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdmysql-connector-java&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version8.0.16&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- log4j日志 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdlog4j&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdlog4j&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.2.17&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --</span></span><br><span class="line"><span class="comment">        &lt;!--分页插件--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcom.github.pagehelper&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdpagehelper&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version5.2.0&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- 日志 slf4g --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdch.qos.logback&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdlogback-classic&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.2.3&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- ServletAPI 前端控制器就是间接继承里面的httpServlet --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdjavax.servlet&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdjavax.servlet-api&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version3.1.0&lt;/version</span></span><br><span class="line"><span class="comment">            &lt;scopeprovided&lt;/scope</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--处理json数据的依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcom.fasterxml.jackson.core&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdjackson-databind&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version2.12.1&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--实现文件上传的依赖，下载不需要--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcommons-fileupload&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdcommons-fileupload&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.3.1&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- Spring5和Thymeleaf整合包 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.thymeleaf&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdthymeleaf-spring5&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version3.0.12.RELEASE&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/dependencies</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p> web项目启动的时候,首先对web.xml文件进行一个加载,只有此文件没有异常的时候,我们加载的web项目才算是真正的跑起来,而web.xml文件的内容加载也是由一定的顺序的.</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;web-app version=<span class="string">&quot;2.4&quot;</span></span></span><br><span class="line"><span class="meta">         xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="meta">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="meta">         xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 配置Spring的编码过滤器 --</span></span><br><span class="line"><span class="meta">    &lt;filter</span></span><br><span class="line"><span class="meta">        &lt;filter-nameCharacterEncodingFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;filter-classorg.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class</span></span><br><span class="line"><span class="meta">        &lt;init-param</span></span><br><span class="line"><span class="meta">            &lt;param-nameencoding&lt;/param-name</span></span><br><span class="line"><span class="meta">            &lt;param-valueUTF-8&lt;/param-value</span></span><br><span class="line"><span class="meta">        &lt;/init-param</span></span><br><span class="line"><span class="meta">        &lt;init-param</span></span><br><span class="line"><span class="meta">            &lt;param-nameforceEncoding&lt;/param-name</span></span><br><span class="line"><span class="meta">            &lt;param-valuetrue&lt;/param-value</span></span><br><span class="line"><span class="meta">        &lt;/init-param</span></span><br><span class="line"><span class="meta">    &lt;/filter</span></span><br><span class="line"><span class="meta">    &lt;filter-mapping</span></span><br><span class="line"><span class="meta">        &lt;filter-nameCharacterEncodingFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;url-pattern/*&lt;/url-pattern</span></span><br><span class="line"><span class="meta">    &lt;/filter-mapping</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 配置处理请求方式PUT和DELETE的过滤器 --</span></span><br><span class="line"><span class="meta">    &lt;filter</span></span><br><span class="line"><span class="meta">        &lt;filter-nameHiddenHttpMethodFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;filter-classorg.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class</span></span><br><span class="line"><span class="meta">    &lt;/filter</span></span><br><span class="line"><span class="meta">    &lt;filter-mapping</span></span><br><span class="line"><span class="meta">        &lt;filter-nameHiddenHttpMethodFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;url-pattern/*&lt;/url-pattern</span></span><br><span class="line"><span class="meta">    &lt;/filter-mapping</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 配置SpringMVC的前端控制器 --</span></span><br><span class="line"><span class="meta">    &lt;servlet</span></span><br><span class="line"><span class="meta">        &lt;servlet-nameSpringMVC&lt;/servlet-name</span></span><br><span class="line"><span class="meta">        &lt;servlet-classorg.springframework.web.servlet.DispatcherServlet&lt;/servlet-class</span></span><br><span class="line"><span class="meta">        &lt;!-- 设置SpringMVC的配置文件的位置和名称 --</span></span><br><span class="line"><span class="meta">        &lt;init-param</span></span><br><span class="line"><span class="meta">            &lt;param-namecontextConfigLocation&lt;/param-name</span></span><br><span class="line"><span class="meta">            &lt;param-valueclasspath:SpringMVC.xml&lt;/param-value</span></span><br><span class="line"><span class="meta">        &lt;/init-param</span></span><br><span class="line"><span class="meta">        &lt;!--将DispatcherServlet的初始化时间提前到服务器启动时--</span></span><br><span class="line"><span class="meta">        &lt;load-on-startup1&lt;/load-on-startup</span></span><br><span class="line"><span class="meta">    &lt;/servlet</span></span><br><span class="line"><span class="meta">    &lt;servlet-mapping</span></span><br><span class="line"><span class="meta">        &lt;servlet-nameSpringMVC&lt;/servlet-name</span></span><br><span class="line"><span class="meta">        &lt;url-pattern/&lt;/url-pattern</span></span><br><span class="line"><span class="meta">    &lt;/servlet-mapping</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 设置Spring的配置文件的位置和名称 --</span></span><br><span class="line"><span class="meta">    &lt;context-param</span></span><br><span class="line"><span class="meta">        &lt;param-namecontextConfigLocation&lt;/param-name</span></span><br><span class="line"><span class="meta">        &lt;param-valueclasspath:Spring.xml&lt;/param-value</span></span><br><span class="line"><span class="meta">    &lt;/context-param</span></span><br><span class="line"><span class="meta">    &lt;!-- 配置Spring的监听器 ：作用再Spring服务启动时加载Spring的配置文件来获取ioc容器--</span></span><br><span class="line"><span class="meta">    &lt;listener</span></span><br><span class="line"><span class="meta">        &lt;listener-classorg.springframework.web.context.ContextLoaderListener&lt;/listener-class</span></span><br><span class="line"><span class="meta">    &lt;/listener</span></span><br><span class="line"><span class="meta">&lt;/web-app</span></span><br><span class="line"><span class="meta">        </span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC-xml"><a href="#SpringMVC-xml" class="headerlink" title="SpringMVC.xml"></a>SpringMVC.xml</h2><h3 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h3><ol><li><strong>用户发送请求，被 SpringMVC 的前端控制器 DispatcherServlet 拦截，配置拦截器</strong></li><li><strong>由 DispatcherServlet 查询HanderMapping，找到处理请求的Controller</strong></li><li><strong>Controller调用业务逻辑进行处理后，返回ModelAndView，进行试图控制</strong></li><li><strong>DispatcherServlet 查询视图解析器，找到ModelAndView指定的视图</strong></li><li><strong>视图负责将结果显示到客户端</strong></li></ol><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:mvc=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="meta">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">   &lt;!--扫描组件- SpringMVC只需要扫描控制层组件--</span></span><br><span class="line"><span class="meta">    &lt;context:component-scan base-package=<span class="string">&quot;SSM.controller&quot;</span>&lt;/context:component-scan</span></span><br><span class="line"><span class="meta">    &lt;!--配置视图解析器--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="meta">          class=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;order&quot;</span> value=<span class="string">&quot;1&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;characterEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;templateEngine&quot;</span></span></span><br><span class="line"><span class="meta">            &lt;bean class=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span></span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;templateResolver&quot;</span></span></span><br><span class="line"><span class="meta">                    &lt;bean class=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;!-- 视图前缀 --</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/</span></span><br><span class="line"><span class="meta">                        &lt;!-- 视图后缀 --</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.html&quot;</span>/</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;templateMode&quot;</span> value=<span class="string">&quot;HTML5&quot;</span>/</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;characterEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span> /</span></span><br><span class="line"><span class="meta">                    &lt;/bean</span></span><br><span class="line"><span class="meta">                &lt;/property</span></span><br><span class="line"><span class="meta">            &lt;/bean</span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--配置文件（图片）上传的解析器--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;multipartResolver&quot;</span> class=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;mvc:interceptors--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;mvc:interceptor--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;        对于path的路径中， /* 只能拦截根目录下的一层路径， /**可以拦截目录下所有的路径&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;mvc:mapping path=<span class="string">&quot;/**&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;            exclude除了XXX之外，需要拦截的请求路径&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;mvc:exclude-mapping path=<span class="string">&quot;/abc&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;配置拦截器的实现类，实现HandlerInterceptor(处理程序拦截器)接口&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;bean class=<span class="string">&quot;SSM.interceptor.FirstInterceptor&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;            &lt;ref bean=<span class="string">&quot;firstInterceptor&quot;</span>/&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;/mvc:interceptor--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;/mvc:interceptors--</span></span><br><span class="line"><span class="meta">    &lt;!-- 配置默认的servlet处理静态资源 --</span></span><br><span class="line"><span class="meta">    &lt;mvc:default-servlet-handler /</span></span><br><span class="line"><span class="meta">    &lt;!-- 开启MVC的注解驱动 --</span></span><br><span class="line"><span class="meta">    &lt;mvc:annotation-driven /</span></span><br><span class="line"><span class="meta">&lt;!--    &amp;lt;!&amp;ndash; 配置访问首页的视图控制 &amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">    &lt;mvc:view-controller path=<span class="string">&quot;/&quot;</span> view-name=<span class="string">&quot;index&quot;</span>&lt;/mvc:view-controller</span></span><br><span class="line"><span class="meta">    &lt;mvc:view-controller path=<span class="string">&quot;/to/add&quot;</span> view-name=<span class="string">&quot;add&quot;</span>&lt;/mvc:view-controller</span></span><br><span class="line"><span class="meta">    &lt;mvc:view-controller path=<span class="string">&quot;/update&quot;</span> view-name=<span class="string">&quot;update&quot;</span>&lt;/mvc:view-controller</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;mvc:view-controller path=<span class="string">&quot;/update2&quot;</span> view-name=<span class="string">&quot;update&quot;</span>&lt;/mvc:view-controller--</span></span><br><span class="line"><span class="meta">&lt;/beans</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="Spring-xml"><a href="#Spring-xml" class="headerlink" title="Spring.xml"></a>Spring.xml</h2><h3 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>IOC容器、aop、装载bean、spring事务。</p></li><li><p>配置Mapper接口扫描，通过SqlSession创建 代理实现类对象，并将这些对象交给IOC容器来管理.省去dao层。</p></li><li><p>实现对MyBatis相关组件修改，可代替mybatis的配置文件</p></li></ol><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="meta">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--    扫描处理controller层之外的其他层--</span></span><br><span class="line"><span class="meta">    &lt;context:component-scan base-package=<span class="string">&quot;SSM&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;!--排除对控制层组件的扫描--</span></span><br><span class="line"><span class="meta">        &lt;context:exclude-filter type=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/context:component-scan</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--配置事务管理器--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--开启事务的管理驱动 ,将使用@Annotation标识的方法或类中所有的方法进行事务管理--</span></span><br><span class="line"><span class="meta">    &lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;!--    配置数据源的扫描--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta">    &lt;!--配置SqlSessionFactory工厂</span></span><br><span class="line"><span class="meta">   配置sqlSessionBean ：可以帮助我们直接在Spring的ioc中获取sqlSessionFactory对象</span></span><br><span class="line"><span class="meta">   --</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;bean class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>--</span></span><br><span class="line"><span class="meta">&lt;!--        设置mybatis核心配置文件的bean--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;typeAliasesPackage&quot;</span> value=<span class="string">&quot;SSM.pojo.Employee&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">        &lt;!--将下划线映射为小驼峰--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;configurationProperties&quot;</span> value=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">        &lt;!--  这个标签设置原因是因为，映射文件所在的包，和mapper所在的包不一致时才设置</span></span><br><span class="line"><span class="meta">    &lt;property name=<span class="string">&quot;mapperLocations&quot;</span> value=<span class="string">&quot;classpath:mappers/*.xml&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;plugins&quot;</span>--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;array--</span></span><br><span class="line"><span class="meta">&lt;!--                &lt;bean class=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>--</span></span><br><span class="line"><span class="meta">&lt;!--                &lt;/bean--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;/array--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;/bean--</span></span><br><span class="line"><span class="meta">    &lt;!--配置SqlSessionFactory工厂</span></span><br><span class="line"><span class="meta">    配置sqlSessionBean ：可以帮助我们直接在Spring的ioc中获取sqlSessionFactory对象</span></span><br><span class="line"><span class="meta">    --</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;sqlSessionFactory&quot;</span> class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;configurationProperties&quot;</span> value=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">     &lt;/bean</span></span><br><span class="line"><span class="meta">    &lt;!--配置mapper接口的扫描，可以将指定包下的所有mapper接口，通过SqlSession创建</span></span><br><span class="line"><span class="meta">    代理实现类对象，并将这些对象交给IOC容器来管理--</span></span><br><span class="line"><span class="meta">    &lt;bean class=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;basePackage&quot;</span> value=<span class="string">&quot;SSM.mapper&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta">&lt;/beans</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-config-xml"><a href="#MyBatis-config-xml" class="headerlink" title="MyBatis-config.xml"></a>MyBatis-config.xml</h2><h3 id="作用：-3"><a href="#作用：-3" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>mybatis是对jdbc的封装，它让数据库底层操作变的透明。</p></li><li><p>mybatis的操作都是围绕一个sqlSessionFactory实例展开的。</p></li><li><p>mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库进行的sql语句映射。</p></li><li><p>在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession对象，再执行sql命令。</p></li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;!--MyBatis的核心配置文件--</span></span><br><span class="line"><span class="meta">&lt;configuration</span></span><br><span class="line"><span class="meta">    &lt;settings</span></span><br><span class="line"><span class="meta">        &lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从数据库列名 A_COLUMN 到属性名 aColumn 的类似映射 --</span></span><br><span class="line"><span class="meta">        &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;true&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/settings</span></span><br><span class="line"><span class="meta">    &lt;!--    引入properties文件  , 这样的话,以后就可以直接在当前文件中时使用 的方式来访问驱动类--</span></span><br><span class="line"><span class="meta">    &lt;typeAliases</span></span><br><span class="line"><span class="meta">        &lt;!--::用下面这个标签 他的别名就是pojo中的类名 ,且不区分大小写--</span></span><br><span class="line"><span class="meta">        &lt;package name=<span class="string">&quot;SSM.pojo&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/typeAliases</span></span><br><span class="line"><span class="meta">&lt;!--    将下划线映射为驼峰--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;settings--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;true&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;/settings--</span></span><br><span class="line"><span class="meta">    &lt;!--配置分页插件--</span></span><br><span class="line"><span class="meta">    &lt;plugins</span></span><br><span class="line"><span class="meta">        &lt;!--设置分页插件--</span></span><br><span class="line"><span class="meta">        &lt;plugin interceptor=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/plugin</span></span><br><span class="line"><span class="meta">    &lt;/plugins</span></span><br><span class="line"><span class="meta">    &lt;!--设置连接数据库的环境--</span></span><br><span class="line"><span class="meta">    &lt;environments default=<span class="string">&quot;development&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;!--          id  与default的内容是一样的--</span></span><br><span class="line"><span class="meta">        &lt;environment id=<span class="string">&quot;development&quot;</span></span></span><br><span class="line"><span class="meta">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/</span></span><br><span class="line"><span class="meta">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span></span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/</span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/</span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">            &lt;/dataSource</span></span><br><span class="line"><span class="meta">        &lt;/environment</span></span><br><span class="line"><span class="meta">    &lt;/environments</span></span><br><span class="line"><span class="meta">    &lt;!--mybatis映射文件--</span></span><br><span class="line"><span class="meta">    &lt;mappers</span></span><br><span class="line"><span class="meta">        &lt;!--</span></span><br><span class="line"><span class="meta">    这个的要求是:1. 映射文件所在的包 和mapper接口所在的包一样</span></span><br><span class="line"><span class="meta">               2. 映射文件的名字和mapper接口的名字保持一致</span></span><br><span class="line"><span class="meta">--</span></span><br><span class="line"><span class="meta">        &lt;package name=<span class="string">&quot;SSM.mapper&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/mappers</span></span><br><span class="line"><span class="meta">&lt;/configuration</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="log4j-xml"><a href="#log4j-xml" class="headerlink" title="log4j.xml"></a>log4j.xml</h2><h3 id="作用：-暂时不明"><a href="#作用：-暂时不明" class="headerlink" title="作用：(暂时不明)"></a>作用：(暂时不明)</h3><ol><li><p>ConsoleAppender: 日志输出到控制台；</p></li><li><p>FileAppender：输出到文件；</p></li><li><p>RollingFileAppender：输出到文件，文件达到一定阈值时，自动备份日志文件;</p></li><li><p>DailyRollingFileAppender：可定期备份日志文件，默认一天一个文件，也可设置为每分钟一个、每小时一个；</p></li><li><p>WriterAppender：可自定义日志输出位置</p></li></ol><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE log4j:configuration SYSTEM <span class="string">&quot;log4j.dtd&quot;</span></span></span><br><span class="line"><span class="meta">&lt;log4j:configuration xmlns:log4j=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span></span></span><br><span class="line"><span class="meta">    &lt;appender name=<span class="string">&quot;STDOUT&quot;</span> class=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;param name=<span class="string">&quot;Encoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span> /</span></span><br><span class="line"><span class="meta">        &lt;layout class=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span></span></span><br><span class="line"><span class="meta">            &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">%m (%F:%L) \n&quot;</span> /</span></span><br><span class="line"><span class="meta">        &lt;/layout</span></span><br><span class="line"><span class="meta">    &lt;/appender</span></span><br><span class="line"><span class="meta">    &lt;logger name=<span class="string">&quot;java.sql&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;level value=<span class="string">&quot;debug&quot;</span> /</span></span><br><span class="line"><span class="meta">    &lt;/logger</span></span><br><span class="line"><span class="meta">    &lt;logger name=<span class="string">&quot;org.apache.ibatis&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;level value=<span class="string">&quot;info&quot;</span> /</span></span><br><span class="line"><span class="meta">    &lt;/logger</span></span><br><span class="line"><span class="meta">    &lt;root</span></span><br><span class="line"><span class="meta">        &lt;level value=<span class="string">&quot;debug&quot;</span> /</span></span><br><span class="line"><span class="meta">        &lt;appender-ref ref=<span class="string">&quot;STDOUT&quot;</span> /</span></span><br><span class="line"><span class="meta">    &lt;/root</span></span><br><span class="line"><span class="meta">&lt;/log4j:configuration</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h2><h3 id="作用：-4"><a href="#作用：-4" class="headerlink" title="作用："></a>作用：</h3><p> 实现MyBatis逆向工程的配置文件，具体操作详见 <strong>本人前面的文章</strong></p><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span></span></span><br><span class="line"><span class="meta">&lt;generatorConfiguration</span></span><br><span class="line"><span class="meta">        &lt;!--</span></span><br><span class="line"><span class="meta">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="meta">        MyBatis3Simple: 生成基本的CRUD（简洁版）</span></span><br><span class="line"><span class="meta">        MyBatis3: 生成带条件的CRUD（终极版）</span></span><br><span class="line"><span class="meta">--</span></span><br><span class="line"><span class="meta">        &lt;context id=<span class="string">&quot;DB2Tables&quot;</span> targetRuntime=<span class="string">&quot;MyBatis3&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 1. 数据库的连接信息 --</span></span><br><span class="line"><span class="meta">                &lt;jdbcConnection driverClass=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="meta">                    connectionURL=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="meta">                    userId=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="meta">                    password=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="meta">                &lt;/jdbcConnection</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 2. javaBean 数据库表对应的实体类--</span></span><br><span class="line"><span class="meta">                &lt;javaModelGenerator targetPackage=<span class="string">&quot;SSM.pojo&quot;</span> targetProject=<span class="string">&quot;.\src\main\java&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span> /</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;trimStrings&quot;</span> value=<span class="string">&quot;true&quot;</span> /</span></span><br><span class="line"><span class="meta">                &lt;/javaModelGenerator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 3. SQL映射文件的生成策略 --</span></span><br><span class="line"><span class="meta">                &lt;sqlMapGenerator targetPackage=<span class="string">&quot;SSM.mapper&quot;</span> targetProject=<span class="string">&quot;.\src\main\resources&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span> /&lt;!--作用: 是否启动子包--</span></span><br><span class="line"><span class="meta">                &lt;/sqlMapGenerator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        &lt;!--        4. java客户端生成器--</span></span><br><span class="line"><span class="meta">                &lt;!-- 4. Mapper接口的生成策略 --</span></span><br><span class="line"><span class="meta">                &lt;javaClientGenerator type=<span class="string">&quot;XMLMAPPER&quot;</span> targetPackage=<span class="string">&quot;SSM.mapper&quot;</span> targetProject=<span class="string">&quot;.\src\main\java&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span> /</span></span><br><span class="line"><span class="meta">                &lt;/javaClientGenerator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 5. 逆向分析的表 --</span></span><br><span class="line"><span class="meta">                &lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --</span></span><br><span class="line"><span class="meta">                &lt;!-- domainObjectName属性指定生成出来的实体类的类名 --</span></span><br><span class="line"><span class="meta">                &lt;table tableName=<span class="string">&quot;t_emp&quot;</span> domainObjectName=<span class="string">&quot;Employee&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;/context</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;/generatorConfiguration</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>  以Employee实例为例</p><p>  具体的字段： emp_id , emp_name , age , gender , email</p><p>  对应属性： empId , empName , age , gender , email</p><h2 id="列表功能"><a href="#列表功能" class="headerlink" title="列表功能"></a>列表功能</h2><h3 id="实现详解："><a href="#实现详解：" class="headerlink" title="实现详解："></a>实现详解：</h3><ol><li><p>当服务器启动时，首先加载出index.html页面，我们进行点击进入列表页面时。此时前端就会发送一个请求到我们的controller层。</p></li><li><p>此时controller层组件就会匹配相对应的控制器方法，我们的请求为“&#x2F;employee” ， 匹配到后控制层就进行操作</p></li><li><p>因为控制层实现了service的自动装箱，所以通过就可以直接调用service层的方法处理需求</p></li><li><p>同时因为我们再Spring.xml中实现了对mapper接口的扫描，我们就不需要再进行调用DAO层，直接就可以操作数据库(已经通过SqlSession创建代理实现类对象)</p></li><li><p>同样的service层实现了对mapper的自动装箱，此时就可以直接调用mapper接口中的方法，对数据库进行操作，实现查询所有用户的功能返回给Controller层的方法中</p></li><li><p>在控制层我们就可以调用Model来实现数据向request域对象中共享数据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">addAttribute</span>(<span class="string">&quot;list&quot;</span>,list);</span><br></pre></td></tr></table></figure></li><li><p>最后将数据返回到前端</p></li></ol><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">table</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span><span class="attr">员工列表</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th编号</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th姓名</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th年龄</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th性别</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th邮箱</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th操作</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span>&lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/to/add&#125;&quot;</span><span class="attr">添加员工</span>&lt;/<span class="attr">a</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;list&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empId&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empName&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.age&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/delete/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">删除</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/update/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">修改</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">table</span></span></span><br><span class="line"><span class="tag"></span></span><br></pre></td></tr></table></figure><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line">@RequestMapping(<span class="keyword">value</span> = <span class="string">&quot;/employee&quot;</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAllEmployee</span>(<span class="params">Model model</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee list = employeeService.getAllEmployee();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> EmployeeMapper mapper;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="function">Employee <span class="title">getAllEmployee</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.getAllEmployee();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line">List&lt;<span class="function">Employee <span class="title">getAllEmployee</span>()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;getAllEmployee&quot;</span> resultType=<span class="string">&quot;Employee&quot;</span></span><br><span class="line">        <span class="keyword">select</span> emp_id, emp_name,age,gender,email <span class="keyword">from</span> t_emp</span><br><span class="line">&lt;/<span class="keyword">select</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><h3 id="实现详解：-1"><a href="#实现详解：-1" class="headerlink" title="实现详解："></a>实现详解：</h3><ol><li>前面的步骤基本一样，前端发送请求到控制器层，Controller匹配相应的控制器方法进行实现</li><li>在前端传回的pageNum时，我们需要将Num交给service层，在service层开启分页功能，然后继续再service层查询到所有员工信息，再将数据交给PageInfo，通过他来获取分页相关的数据，最后返回pageInfo对象</li><li>最后将数据通过Model共享到Request域中，实现数据分页的显示</li></ol><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">table</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span><span class="attr">员工列表</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th编号</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th姓名</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th年龄</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th性别</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th邮箱</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th操作</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span>&lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/to/add&#125;&quot;</span><span class="attr">添加员工</span>&lt;/<span class="attr">a</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;page.list&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empId&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empName&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.age&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/delete/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">删除</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/update/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">修改</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">table</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span></span></span><br><span class="line"><span class="tag">&lt;!<span class="attr">--</span>        &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee/page/1&#125;&quot;</span><span class="attr">首页</span>&lt;/<span class="attr">a--</span></span></span><br><span class="line"><span class="tag">&lt;!<span class="attr">--</span>        &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27; + $&#123;page.prePage&#125;&#125;&quot;</span><span class="attr">上一页</span>&lt;/<span class="attr">a--</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span>&lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee/page/1&#125;&quot;</span><span class="attr">首页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.prePage&#125;&#125;&quot;</span><span class="attr">上一页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">span</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">span</span> <span class="attr">th:each</span>=<span class="string">&quot;num : $&#123;page.navigatepageNums&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum==num&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;[&#x27;+$&#123;num&#125;+&#x27;]&#x27;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#d51313;&quot;</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum!=num&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;num&#125; &quot;</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">span</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasNextPage&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.nextPage&#125;&#125;&quot;</span><span class="attr">下一页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.pages&#125;&#125;&quot;</span><span class="attr">末页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">span</span></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">div</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">body</span></span></span><br><span class="line"><span class="tag"></span></span><br></pre></td></tr></table></figure><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">&quot;/employee/page/&#123;pageNum&#125;&quot;</span>,method = <span class="title class_">RequestMethod</span>.<span class="property">GET</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getAllEmployeeByDev</span>(<span class="params"><span class="meta">@PathVariable</span>(<span class="string">&quot;pageNum&quot;</span>) Integer pageNum, Model model</span>)&#123;</span><br><span class="line">        <span class="title class_">PageInfo</span>&lt;<span class="title class_">Employee</span> page =employeeService.<span class="title function_">getAllEmployeeByDev</span>(pageNum);</span><br><span class="line">        model.<span class="title function_">addAttribute</span>(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">PageInfo</span>&lt;<span class="title class_">Employee</span> <span class="title function_">getAllEmployeeByDev</span>(<span class="params">Integer pageNum</span>) &#123;</span><br><span class="line">    <span class="comment">//开启分页公能</span></span><br><span class="line">    <span class="title class_">PageHelper</span>.<span class="title function_">startPage</span>(pageNum,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//查询所有的员工信息</span></span><br><span class="line">    <span class="title class_">List</span>&lt;<span class="title class_">Employee</span> list = mapper.<span class="title function_">getAllEmployee</span>();</span><br><span class="line">    <span class="comment">//获取分页相关的数据</span></span><br><span class="line">    <span class="title class_">PageInfo</span>&lt;<span class="title class_">Employee</span> pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;(list,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="title class_">List</span>&lt;<span class="title class_">Employee</span> <span class="title function_">getAllEmployee</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">select</span> <span class="attr">emp_id</span>, <span class="attr">emp_name</span>,<span class="attr">age</span>,<span class="attr">gender</span>,<span class="attr">email</span> <span class="attr">from</span> <span class="attr">t_emp</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&lt;/<span class="attr">select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"></span></span></span><br></pre></td></tr></table></figure><h2 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h2><h3 id="实现详解"><a href="#实现详解" class="headerlink" title="实现详解"></a>实现详解</h3><ol><li>前端通过点击添加功能的标签，将页面跳转到添加页面，添加页面通过form表单将数据input完成后回响给控制层，控制层通过匹配action的值匹配到相应的控制器方法</li><li>控制器方法将得到的数据封装到Employee类中，然后再通过service将数据保存到数据库</li><li>最后通过重定向将页面跳转到列表页面</li></ol><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">td</span>&lt;<span class="selector-tag">a</span> <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;/<span class="selector-tag">to</span>/<span class="selector-tag">add</span>&#125;&quot;添加员工&lt;/<span class="selector-tag">a</span>&lt;/<span class="selector-tag">td</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span></span><br><span class="line">    &lt;<span class="selector-tag">form</span> <span class="selector-tag">th</span>:<span class="selector-tag">action</span>=&quot;@&#123;/<span class="selector-tag">addEmp</span>&#125;&quot; <span class="selector-tag">method</span>=&quot;<span class="selector-tag">post</span>&quot;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>  修改添加上去  &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">hidden</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">_method</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">put</span>&quot;<span class="selector-tag">--</span></span><br><span class="line">        姓名: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">text</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">empName</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">AA</span>&quot;&lt;<span class="selector-tag">br</span></span><br><span class="line">        年龄: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">text</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">age</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="number">11</span>&quot;</span><br><span class="line">        &lt;<span class="selector-tag">br</span></span><br><span class="line">        性别: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">radio</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">gender</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">M</span>&quot;<span class="selector-tag">M</span></span><br><span class="line">        &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">radio</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">gender</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">F</span>&quot;<span class="selector-tag">F</span></span><br><span class="line">        &lt;<span class="selector-tag">br</span></span><br><span class="line">        <span class="selector-tag">email</span>: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">text</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">email</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">XXX</span>@<span class="selector-tag">qq</span><span class="selector-class">.com</span>&quot;</span><br><span class="line">        &lt;<span class="selector-tag">br</span></span><br><span class="line">        &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">submit</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">addEmp</span>&quot;</span><br><span class="line">    &lt;/<span class="selector-tag">form</span></span><br><span class="line">&lt;/<span class="selector-tag">body</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span> (value = <span class="string">&quot;/addEmp&quot;</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmp</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeService.addEmp(employee);</span><br><span class="line">    <span class="comment">//重定向至原来的页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addEmp</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.insert(employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line">&lt;!--  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee record)</span>;--</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span></span><br><span class="line">    insert into <span class="title function_">t_emp</span><span class="params">(emp_name,age,gender,email)</span>    values(#&#123;empName&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line">    &lt;/insert</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h2><h3 id="实现详解-1"><a href="#实现详解-1" class="headerlink" title="实现详解"></a>实现详解</h3><ol><li>前端通过点击对应用户后面的修改按钮将所要修改的数据传到控制层由相关的控制层方法接收后开始在数据库中查询用户</li><li>将查询到的用户信息通过Model共享到request域中，然后通过请求转发到修改页面将需要修改的数据显示出来</li><li>修改完成后通过form表单提交数据，通过action匹配控制层中的相应控制器方法，再通过service将数据修改后保存，实现数据的修改</li><li>最后重定向回当初的页面</li></ol><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;&#x27;/update/&#x27;+<span class="variable">$&#123;employee.empId&#125;</span>&#125;&quot;</span>修改&lt;/a</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.otg&quot;</span></span><br><span class="line">&lt;<span class="built_in">head</span></span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &lt;title修改&lt;/title</span><br><span class="line">&lt;/head</span><br><span class="line">    &lt;body</span><br><span class="line">        &lt;form th:action=<span class="string">&quot;@&#123;/updateEmp&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span></span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;put&quot;</span></span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;empId&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.empId&#125;</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">            姓名: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;empName&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.empName&#125;</span>&quot;</span>&lt;br</span><br><span class="line">            年龄: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.age&#125;</span>&quot;</span></span><br><span class="line">            &lt;br</span><br><span class="line">            性别: &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;M&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.gender&#125;</span>&quot;</span>M</span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;F&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.gender&#125;</span>&quot;</span> F</span><br><span class="line">            &lt;br</span><br><span class="line">            email: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.email&#125;</span>&quot;</span></span><br><span class="line">            &lt;br</span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;update&quot;</span></span><br><span class="line">        &lt;/form</span><br><span class="line">    &lt;/body</span><br><span class="line">&lt;/html</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/update/&#123;empId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getEmpById</span>(<span class="params"><span class="meta">@PathVariable</span>(<span class="string">&quot;empId&quot;</span>) Integer empId,Model model</span>)&#123;</span><br><span class="line">    <span class="comment">//首先查询到id为要删除的人的id，然后将数据共享到add页面 ，最后实现的添加</span></span><br><span class="line">    <span class="comment">//employeeService.updateEmp();</span></span><br><span class="line">    <span class="title class_">Employee</span> employee = employeeService.<span class="title function_">getById</span>(empId);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(employee);</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;employee&quot;</span>,employee);</span><br><span class="line">    <span class="comment">//        将数据共享到add页面显示出来，然后进行修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/update&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">Employee</span> <span class="title function_">getById</span>(<span class="params">Integer id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.<span class="title function_">selectByPrimaryKey</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="title class_">Employee</span> <span class="title function_">selectByPrimaryKey</span>(<span class="title class_">Integer</span> empId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line">&lt;!--      <span class="title class_">Employee</span> <span class="title function_">selectByPrimaryKey</span>(<span class="title class_">Integer</span> empId);--</span><br><span class="line">&lt;select id=&quot;selectByPrimaryKey&quot; resultType=&quot;Employee&quot;</span><br><span class="line">    select emp_id, emp_name,age,gender,email from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">&lt;/select</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">//修改回显的数据Controller层</span><br><span class="line">@RequestMapping(value = &quot;/updateEmp&quot;, method = RequestMethod.PUT)</span><br><span class="line">public String updateEmployee(Employee employee)&#123;</span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    return &quot;redirect:/employee/page/1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//service层</span><br><span class="line">@Override</span><br><span class="line">public void save(Employee employee) &#123;</span><br><span class="line">    mapper.save(employee);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">&lt;!--      Employee save(Employee employee);--</span><br><span class="line">    &lt;update id=&quot;save&quot;</span><br><span class="line">      update t_emp set emp_name = #&#123;empName&#125; ,age = #&#123;age&#125; ,gender = #&#123;gender&#125;,email = #&#123;email&#125; where emp_id = #&#123;empId&#125;</span><br><span class="line">    &lt;/update</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h2><h3 id="实现详解-2"><a href="#实现详解-2" class="headerlink" title="实现详解"></a>实现详解</h3><ol><li>前端通过点击对应用户后面的删除按钮，将要删除的用户的id传入Contrller层，找到对应的控制器方法，通过service调用mapper接口中的方法实现在数据库中删除用户信息</li><li>通过重定向返回对应的页面</li></ol><h4 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;&#x27;/delete/&#x27;+<span class="variable">$&#123;employee.empId&#125;</span>&#125;&quot;</span>删除&lt;/a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后端代码-4"><a href="#后端代码-4" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/delete/&#123;empId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;empId&quot;)</span> Integer empId)</span>&#123;</span><br><span class="line">    employeeService.deleteEmp(empId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee/page/1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">    mapper.deleteEmp(empId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer empId)</span>;</span><br><span class="line"></span><br><span class="line">&lt;!--  <span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer empId)</span>;--</span><br><span class="line">&lt;delete id=<span class="string">&quot;deleteEmp&quot;</span></span><br><span class="line">    delete from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> #&#123;empId&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统---文件与用户</title>
      <link href="/post/5f2109f0.html"/>
      <url>/post/5f2109f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户相关的指令"><a href="#用户相关的指令" class="headerlink" title="用户相关的指令"></a>用户相关的指令</h1><ol><li><strong>关机&amp;重启操作</strong></li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now <span class="comment">//立即关机</span></span><br><span class="line">shutdown -h <span class="number">1</span>  <span class="comment">//1分钟后关机</span></span><br><span class="line">shutdown -r now <span class="comment">//重启</span></span><br><span class="line">halt <span class="comment">//关机</span></span><br><span class="line">reboot <span class="comment">//现在重启计算机</span></span><br><span class="line">sync<span class="comment">//把数据同步到磁盘上</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65765d04bac745ec93e2ac1b5b840dbd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>用户登录和注销（su - tom）</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dfb9f6c95ef4616a202db0b3724ba8e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f079d0ffb7c24622b1e9600ad92cedd2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - tom</span><br><span class="line">su - root</span><br><span class="line">logout   <span class="comment">//退出系统</span></span><br></pre></td></tr></table></figure><ol><li><strong>用户管理- 添加用户</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84842a443c064d50a07b5a068b41752b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>注意： 在home目录下创建</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/470fd0b9d2d54b2fa82dc35271632b56~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>修改密码</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fea78a9784914ec183a04992582ea95f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>显示当前用户在哪个目录下【 输入： <strong>pwd</strong>】</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/335da09c7a4e498c9f517153113f31d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>删除用户</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbe64bfdb6bb4a16a7f5274dca5a3db1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>注意： 在root环境下，并且地址为home目录下才能删除，但是这样删除会保留删除用户的home目录</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f29737736b9047938774339489b5ff3a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>使用【userdel -r tom】可以删除该用户的home目录</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fdde666026f4fd2bf186e1f38eff947~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>查询用户信息指令</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b17c4fd04084b49abfd93a5e02a78d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>查询当前用户</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c16a487e886c4c1eb2271e7d41a3d143~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>用户组</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d84cebdc5875418ea78f185115d7925b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>用户和组相关文件</strong> <strong>（暂时不明）</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d9552c889e94cc7966e0e18303f060b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用XXX代替用户</span></span><br><span class="line"><span class="selector-tag">useradd</span> <span class="selector-tag">XXX</span><span class="comment">//添加用户XXX</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">useradd</span> <span class="selector-tag">-d</span> <span class="selector-tag">XXX</span>  <span class="comment">//给新用户创建指定家目录</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">userdel</span> <span class="selector-tag">XXX</span> <span class="comment">//删除用户XXX ，但无法删除家目录，并且必须按ctrl + D 来登出，然后才能删除</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">userdel</span> <span class="selector-tag">-r</span> <span class="selector-tag">XXX</span>  <span class="comment">//删除XXX用户的home目录</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">id</span> <span class="selector-tag">XXX</span> <span class="comment">//查询用户XXX的信息</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">who</span> <span class="selector-tag">am</span> <span class="selector-tag">i</span>  <span class="comment">//查询当前用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将用AAA代替组名</span></span><br><span class="line"><span class="selector-tag">groupadd</span> <span class="selector-tag">AAA</span><span class="comment">//新增组</span></span><br><span class="line"><span class="selector-tag">groupdel</span> <span class="selector-tag">AAA</span> <span class="comment">//删除组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">usermod</span> <span class="selector-tag">-g</span> <span class="selector-tag">AAA</span> <span class="selector-tag">XXX</span>  <span class="comment">//增加用户XXX到组AAA上</span></span><br></pre></td></tr></table></figure><h1 id="Linux运行级别"><a href="#Linux运行级别" class="headerlink" title="Linux运行级别"></a>Linux运行级别</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> <span class="number">0</span> <span class="comment">//关机</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">1</span> <span class="comment">//单用户【找回丢失的密码】</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">2</span> <span class="comment">//多用户状态没有网络服务</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">3</span> <span class="comment">//多用户状态有网络服务</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">4</span> <span class="comment">//系统未使用保留给用户</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">5</span> <span class="comment">//图形界面</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">6</span> <span class="comment">//系统重启</span></span><br></pre></td></tr></table></figure><ol><li><strong>指定运行级别</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e20ec89a570749f9b9ad4d22d9d5d17d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>帮助指令</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/792fbdc9dd494f85a82ec1be841878b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="文件目录类指令"><a href="#文件目录类指令" class="headerlink" title="文件目录类指令"></a>文件目录类指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>   //显示当前目录的所有内容</span><br><span class="line"><span class="built_in">ls</span> -a//显示当前目录的所有文件包括隐藏的</span><br><span class="line"><span class="built_in">ls</span> -l  //以列表的形式显示所有信息</span><br><span class="line"><span class="built_in">pwd</span>  //显示当前目录的绝对路径</span><br><span class="line"><span class="built_in">cd</span> ~home //返回到root目录</span><br><span class="line"><span class="built_in">cd</span> /home //到home目录</span><br><span class="line"><span class="built_in">rmdir</span> XXX //删除目录</span><br><span class="line"><span class="built_in">rm</span> rf /home/animal//删除一个空目录</span><br><span class="line"><span class="built_in">touch</span> XXX//创建一个文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r <span class="built_in">test</span>/ newtest //使用<span class="built_in">cp</span>指令将当前目录<span class="built_in">test</span>/的所有文件复制到新的目录newtest下</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58158d3e3c0e4806b0bc0ea30ad0228c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d463c269e7e45ec8123cb9507284d64~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f007ee25fe5d44c0b2cf56d53f1b9948~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cba38732e5743ba926826109f9f9b3f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58025c71727840329c0ec726899c716e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="more指令"><a href="#more指令" class="headerlink" title="more指令"></a>more指令</h3><p>主要在文本编辑器中进行操作</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44e63cb4b52743d18b34a9ec282f42c3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="Less指令"><a href="#Less指令" class="headerlink" title="Less指令"></a>Less指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c0391a63a9a490496b7e5049d60f168~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="echo指令"><a href="#echo指令" class="headerlink" title="echo指令"></a>echo指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8dfd56a9b024650a7134e88789213b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a>tail指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc9ce4a7bb174ead930b4a546aecc1a0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="gt-指令-和-gt-gt-指令"><a href="#gt-指令-和-gt-gt-指令" class="headerlink" title="&gt; 指令 和 &gt;&gt;指令"></a>&gt; 指令 和 &gt;&gt;指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31de0f0d5ade486393123d874bc58da8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="In指令"><a href="#In指令" class="headerlink" title="In指令"></a>In指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04250b67327f4447958ea01c8f5e7700~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> oldFile newFile //文件重命名</span><br><span class="line"><span class="built_in">mv</span> /temp/moveFile /targetFolder  //移动文件与目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> XXX //查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -r  //递归删除整个文件夹</span><br><span class="line"><span class="built_in">rm</span> -f//强制删除不提示</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span>指令 ：查看所有的历史指令记录</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉排序树(BST)</title>
      <link href="/post/ffb573e.html"/>
      <url>/post/ffb573e.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉排序树（Binary-Sort-Tree）"><a href="#二叉排序树（Binary-Sort-Tree）" class="headerlink" title="二叉排序树（Binary Sort Tree）"></a>二叉排序树（Binary Sort Tree）</h1><blockquote><p>前言： 二叉排序树是二叉树中十分重要的一种，又称二叉查找树（Binary Search Tree），亦称<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/7077855?fromModule=lemma_inlink">二叉搜索树</a>。是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink">数据结构</a>中的一类。在一般情况下，查询效率比链表结构要高。</p></blockquote><h2 id="Node节点类代码"><a href="#Node节点类代码" class="headerlink" title="Node节点类代码"></a>Node节点类代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day7_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找要删除的节点并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回要删除的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  Node <span class="title function_">searchNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.val == index)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到要删除的节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//情况一： 当前节点就是要删除节点的父节点</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.val == index) ||(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.val == index))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//左节点不为空，并且左节点就是parent</span></span><br><span class="line">            <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(index);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(index);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树的添加功能"><a href="#二叉排序树的添加功能" class="headerlink" title="二叉排序树的添加功能"></a>二叉排序树的添加功能</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>每传进来一个node节点，我们就与当前节点进行比较</p><ol><li><p>node的val值  &lt;  当前节点的val值：</p><p>​向左进行递归，一直递归到this.left &#x3D;&#x3D; null时，加入node节点</p></li><li><p>node的val值 &gt;&#x3D; 当前节点的val值：</p><p>​向右进行递归，知道this.right &#x3D;&#x3D; null时，加入node节点</p></li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//添加节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>结果：</strong></em></p><p>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;3]<br>Node[val&#x3D;5]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;12]</p><h2 id="二叉排序树删除功能详解"><a href="#二叉排序树删除功能详解" class="headerlink" title="二叉排序树删除功能详解"></a>二叉排序树删除功能详解</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>首先分三种情况进行处理：</p><p>① 所删除的节点为叶子节点（left 和right 节点上为空）</p><p>② 所删除的节点为非叶子节点，并且left 或 right节点上只有一个不为空</p><p>③ 所删除的节点为非叶子节点，并且left 和 right 都不为空</p><p><em><strong>在处理这三种情况之前，先再Node节点类中增添方法，用来查询要删除的目标节点targetNode 以及targetNode的父节点 parent节点</strong></em></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找要删除的节点并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回要删除的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  Node <span class="title function_">searchNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.val == index)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.searchNode(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.searchNode(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到要删除的节点的父节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除的节点的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回父节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="comment">//情况一： 当前节点就是要删除节点的父节点</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.val == index) ||(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.val == index))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//左节点不为空，并且左节点就是parent</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况一：删除的是叶子节点"><a href="#情况一：删除的是叶子节点" class="headerlink" title="情况一：删除的是叶子节点"></a>情况一：删除的是叶子节点</h4><h5 id="步骤：【"><a href="#步骤：【" class="headerlink" title="步骤：【"></a>步骤：【</h5><ol><li>找到目标节点targetNode  及其它的父节点 parent </li><li>确定targetNode是parent的left节点 还是right 节点</li><li>parent.left &#x3D; null 或 parent.right &#x3D; null ;</li></ol><p>】</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.searchNode(index);</span><br><span class="line"><span class="keyword">if</span> (targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;没有找到要删除的节点！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">    root = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> root.searchParent(index);</span><br><span class="line"><span class="comment">//要删除的是叶子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent.left!= <span class="literal">null</span> &amp;&amp; parent.left.val == targetNode.val)&#123;</span><br><span class="line">        parent.left = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right != <span class="literal">null</span> &amp;&amp; parent.right.val == targetNode.val ) &#123;</span><br><span class="line">        parent.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况二：要删除的节点只有一个子节点"><a href="#情况二：要删除的节点只有一个子节点" class="headerlink" title="情况二：要删除的节点只有一个子节点"></a>情况二：要删除的节点只有一个子节点</h4><h5 id="步骤【"><a href="#步骤【" class="headerlink" title="步骤【"></a>步骤【</h5><ol><li><p>找到父节点和targetNode目标节点后</p></li><li><p>先判断targetNode的left 和right 是否为空 ，如果不为空再判断是否有parent节点，因为很可能这个节点是root节点 ，root节点没有parent节点</p></li><li><p>接下来就是四种判断 </p><p>targetNode 有左节点 ，targetNode是parent的左节点；—–&gt;  parent.left &#x3D; targetNode.left;</p></li></ol><p>​targetNode 有左节点 ，targetNode是parent的右节点；—–&gt; parent.right &#x3D; targetNode.left;</p><p>​targetNode 有右节点 ，targetNode是parent的左节点；—–&gt;parent.left &#x3D; targetNode.right;</p><p>​targetNode 有右节点 ，targetNode是parent的右节点；—–&gt;parent.right &#x3D; targetNode.right;</p><p>】</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//要删除的节点有左子节点</span></span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                parent.left = targetNode.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right = targetNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = targetNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                parent.left = targetNode.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right = targetNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = targetNode.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况三：要删除的节点只有一个子节点"><a href="#情况三：要删除的节点只有一个子节点" class="headerlink" title="情况三：要删除的节点只有一个子节点"></a>情况三：要删除的节点只有一个子节点</h4><p>这种情况我们有两种解决办法</p><h5 id="步骤-【"><a href="#步骤-【" class="headerlink" title="步骤 【"></a>步骤 【</h5><p>​<strong>方法一：</strong>以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</p><p>​<strong>方法二：</strong>以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</p><p>】</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">//要删除的是有两个子节点的节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  方法一：以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</span></span><br><span class="line"><span class="comment">                  方法二：以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                int tempMin = 0;</span></span><br><span class="line"><span class="comment">//                Node tempNode = targetNode.right;</span></span><br><span class="line"><span class="comment">//                while(tempNode.left != null)&#123;</span></span><br><span class="line"><span class="comment">//                    tempNode = tempNode.left;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                tempMin = tempNode.val;</span></span><br><span class="line"><span class="comment">//                deleteNode(tempMin);</span></span><br><span class="line"><span class="comment">//                targetNode.val = tempMin;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempNode</span> <span class="operator">=</span> targetNode.left;</span><br><span class="line">                <span class="keyword">while</span>(tempNode.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    tempNode = tempNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempMax = tempNode.val;</span><br><span class="line">                deleteNode(tempMax);</span><br><span class="line">                targetNode.val = tempMax;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="main方法代码"><a href="#main方法代码" class="headerlink" title="main方法代码"></a>main方法代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] =&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">BinarySortTree</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        b.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    b.infix(b.root);</span><br><span class="line">    b.deleteNode(<span class="number">3</span>);</span><br><span class="line">    b.deleteNode(<span class="number">12</span>);</span><br><span class="line">    b.deleteNode(<span class="number">5</span>);</span><br><span class="line">    b.deleteNode(<span class="number">1</span>);</span><br><span class="line">    b.deleteNode(<span class="number">7</span>);</span><br><span class="line">    b.deleteNode(<span class="number">9</span>);</span><br><span class="line">    b.deleteNode(<span class="number">10</span>);</span><br><span class="line">    b.deleteNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;删除之后~~~&quot;</span>);</span><br><span class="line">    b.infix(b.root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体代码实现："><a href="#整体代码实现：" class="headerlink" title="整体代码实现："></a>整体代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day7_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] =&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">BinarySortTree</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            b.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        b.infix(b.root);</span><br><span class="line">        b.deleteNode(<span class="number">3</span>);</span><br><span class="line">        b.deleteNode(<span class="number">12</span>);</span><br><span class="line">        b.deleteNode(<span class="number">5</span>);</span><br><span class="line">        b.deleteNode(<span class="number">1</span>);</span><br><span class="line">        b.deleteNode(<span class="number">7</span>);</span><br><span class="line">        b.deleteNode(<span class="number">9</span>);</span><br><span class="line">        b.deleteNode(<span class="number">10</span>);</span><br><span class="line">        b.deleteNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后~~~&quot;</span>);</span><br><span class="line">        b.infix(b.root);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除二叉树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.searchNode(index);</span><br><span class="line">            <span class="keyword">if</span> (targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;没有找到要删除的节点！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> root.searchParent(index);</span><br><span class="line">            <span class="comment">//要删除的是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(parent.left!= <span class="literal">null</span> &amp;&amp; parent.left.val == targetNode.val)&#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right != <span class="literal">null</span> &amp;&amp; parent.right.val == targetNode.val ) &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的是有两个子节点的节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  方法一：以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</span></span><br><span class="line"><span class="comment">                  方法二：以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                int tempMin = 0;</span></span><br><span class="line"><span class="comment">//                Node tempNode = targetNode.right;</span></span><br><span class="line"><span class="comment">//                while(tempNode.left != null)&#123;</span></span><br><span class="line"><span class="comment">//                    tempNode = tempNode.left;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                tempMin = tempNode.val;</span></span><br><span class="line"><span class="comment">//                deleteNode(tempMin);</span></span><br><span class="line"><span class="comment">//                targetNode.val = tempMin;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempNode</span> <span class="operator">=</span> targetNode.left;</span><br><span class="line">                <span class="keyword">while</span>(tempNode.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    tempNode = tempNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempMax = tempNode.val;</span><br><span class="line">                deleteNode(tempMax);</span><br><span class="line">                targetNode.val = tempMax;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//要删除的节点有左子节点</span></span><br><span class="line">                    <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                            parent.left = targetNode.left;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            parent.right = targetNode.left;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                            parent.left = targetNode.right;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            parent.right = targetNode.right;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">(Node root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root.infix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>删除3 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;5]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;12]<br>删除3,12,5,1 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>删除3,12,5,1,7,9 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;10]<br>删除所有的之后<br>空树！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web项目整合---实现增删查改</title>
      <link href="/post/44f9189b.html"/>
      <url>/post/44f9189b.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于web项目中如何实现增删查改的操作"><a href="#关于web项目中如何实现增删查改的操作" class="headerlink" title="关于web项目中如何实现增删查改的操作"></a>关于web项目中如何实现增删查改的操作</h1><p>这里我们以一个书城项目为例讲解</p><h2 id="首先了解javaEE的三层架构"><a href="#首先了解javaEE的三层架构" class="headerlink" title="首先了解javaEE的三层架构"></a>首先了解javaEE的三层架构</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03ac4472cdda46b29e155c4891cca09a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"> 由图中我们可以看出,javaEE的三层架构严格的规定了项目中的每个模块,每个层需要完成的事情,这样会使项目的变得非常简洁,按部就班的完成每一部分,我们的项目也就很容易的完成,当然这这里说的只是针对非常简单的项目,对于大型项目就另当别论了。</p><h2 id="增删查改之—-增Create"><a href="#增删查改之—-增Create" class="headerlink" title="增删查改之—-增Create"></a>增删查改之—-增Create</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d0986b395245b689252d8e6b43cb15~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>从图中我们可以看出,当客户端用户输入完数据之后请求就会发送给服务器,当服务器端BooServlet接受到来自add.html页面的请求后就会做出相应的相应,通过反射调用Add(req,resp)方法</p><p>在Add方法中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected void add(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //1. 获取请求参数，封装成Book对象</span><br><span class="line">    String <span class="attr">name</span> = req.getParameter(<span class="string">&quot;name&quot;</span>)<span class="comment">;</span></span><br><span class="line">    String <span class="attr">author</span> = req.getParameter(<span class="string">&quot;author&quot;</span>)<span class="comment">;</span></span><br><span class="line">    BigDecimal <span class="attr">price</span> = BigDecimal.valueOf(Double.parseDouble(req.getParameter(<span class="string">&quot;price&quot;</span>)))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">sales</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;sales&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">stock</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;stock&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Book <span class="attr">book</span> = new Book(null, name, author, price, sales, stock, null)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    //2. 调用bookService.addBook(book)将数据保存入数据库</span><br><span class="line">    bookService.addBook(book)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    //3. 跳转回图书列表页面----又出现表单重复提交的bug</span><br><span class="line">    resp.sendRedirect(req.getContextPath() + &quot;/bookServlet?<span class="attr">action</span>=page&amp;page<span class="literal">No</span>=<span class="string">&quot;+req.getParameter(&quot;</span>page<span class="literal">No</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">复制代码</span></span><br></pre></td></tr></table></figure><p>这就是一个简单add方法的实现</p><h2 id="增删查改之—-查Read"><a href="#增删查改之—-查Read" class="headerlink" title="增删查改之—-查Read"></a>增删查改之—-查Read</h2><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fecaab1016447959d65038754887258~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><ol><li>在index上点击跳转到manager页面的请求，然后manager页面上显示响应【bookServlet？action&#x3D;list】，然后服务器端就会收到响应</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20fb6e0f76ac451ab13b44fd40ca2741~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>服务器端收到响应就会调用BookServlet的doPost方法，在doPost方法中显示的action收到的是list，然后后端就会调用list方法</p></li><li><p>在list方法中有三个步骤【</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span>  通过BookService调用BookDao中的查询所有图书的方法（queryBooks），然后queryBooks再次调用BaseDao抽象类中的queryForList方法查找到所有图书。</span><br><span class="line"><span class="bullet">2.</span> 将查询到的所有图书保存到request域中</span><br><span class="line"><span class="bullet">3.</span>  通过请求转发，将保存的数据回传给前端book<span class="emphasis">_manager.jsp页面</span></span><br><span class="line"><span class="emphasis">4.  book_</span>manager.jsp页面收到转发的请求，通过el表达式，将数据显示出来</span><br><span class="line"><span class="bullet">5.</span>  最后，数据就会完美的呈现在面前</span><br></pre></td></tr></table></figure></li></ol><p>】</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 通过BookService查询所有的图书</span></span><br><span class="line">    List&lt;Book&gt; books = bookService.queryBooks();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 保存所有的图书到request域中</span></span><br><span class="line"></span><br><span class="line">    req.setAttribute(<span class="string">&quot;books&quot;</span>,books);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 请求转发到book_manager.jsp</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;book_manager.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增删查改之—-改Update"><a href="#增删查改之—-改Update" class="headerlink" title="增删查改之—-改Update"></a>增删查改之—-改Update</h2><h3 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df30b25f71e74671a2e22e63088b475c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>首先点击修改，他将会调用doPost方法，将action值赋值为getBook</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40626b38033c47b2a91bd6ab7c9aa606~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>通过getBook()方法将id为XXX的数据获取出来然后显示在book_edit页面上。步骤有【</p><p>1&gt;  获取请求的参数信息–图书编号</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/172491c3edf24da8b9f52161b8b2902e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>2&gt; 调用BookService下的queryBookById()获取该图书的所有信息</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa79a8b38678487f9dde6b5aeec568db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>3&gt; 将数据保存在request作用域中</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e62b1a858f5b4d62804f5cf5b8eb22b0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>4&gt; 请求转发到book_edit页面 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc37668e4b4b42c3af63e149622708b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><p>】</p><ol><li>通过上述步骤，在book_edit页面就会显示要修改的数据，接下来要做的就是将要修改的数据保存起来，然后再回传给客户端</li><li>将book_edit页面的隐藏域的value值修改为动态获取的值<strong>因为book_edit页面会是实现两个操作，修改与保存，所以回传的action值就因该动态的获取是add&#x2F;update(判断的方法是id是否为空；添加的id为空)</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/099ca85f1c7547ddaa7ac71a4f3a109a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>这里我们回传的action值为update，所以再次回到BookServlet程序，这里我们调用的是doGet方法，然后通doGet在调用doPost 。通过doPost，因为action的值为update，所以这里我们调用update方法</strong>*</p><ol><li><p>在update方法中要实现以下的及步骤【</p><p>1&gt; 获取请求参数，封装成Book对象<strong>不能忘记id，修改的时候id值是存在的，我们得获取但是不能修改</strong></p><p>2&gt;通过BookService调用BookDao中的修改图书的方法（updateBook），然后updateBook再次调用BaseDao抽象类中的update方法将数据库中的数据修改保存</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/844acec9c4e94da696d91d1f440ce771~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>3&gt; 重定向跳转回原来的页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/411d93a1b17f4924a865951761780423~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void update(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //获取请求参数，封装成Book对象</span><br><span class="line">    Integer <span class="attr">id</span>= Integer.valueOf(req.getParameter(<span class="string">&quot;id&quot;</span>))<span class="comment">;</span></span><br><span class="line">    String <span class="attr">name</span> = req.getParameter(<span class="string">&quot;name&quot;</span>)<span class="comment">;</span></span><br><span class="line">    String <span class="attr">author</span> = req.getParameter(<span class="string">&quot;author&quot;</span>)<span class="comment">;</span></span><br><span class="line">    BigDecimal <span class="attr">price</span> = BigDecimal.valueOf(Double.parseDouble(req.getParameter(<span class="string">&quot;price&quot;</span>)))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">sales</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;sales&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">stock</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;stock&quot;</span>))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    Book <span class="attr">book</span> = new Book(id, name, author, price, sales, stock, null)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    bookService.updateBook(book)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    //请求重定向</span><br><span class="line">    resp.sendRedirect(req.getContextPath() + &quot;/bookServlet?<span class="attr">action</span>=page&amp;page<span class="literal">No</span>=<span class="string">&quot;+req.getParameter(&quot;</span>page<span class="literal">No</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="增删查改之—-删Delete"><a href="#增删查改之—-删Delete" class="headerlink" title="增删查改之—-删Delete"></a>增删查改之—-删Delete</h2><h3 id="思维导图-3"><a href="#思维导图-3" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bb36979638145b79e0673ca7437d6b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>服务器获取客户端要删除的数据的id</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b6c6734964240eba039f5ba5254a0db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>将请求发送至服务器，然后后端调用doPost方法，action传的值为delete</p></li><li><p>doPost方法，在其中执行这几步骤【</p><p>1&gt; 获取请求参数 id</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78c54fe73375454ebef06947711cee71~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>2&gt;通过BookService调用BookDao中的添加图书的方法（deleteBookById），然后adeleteBookById再次调用BaseDao抽象类中的update方法将数据库中的数据删除</p><p>3&gt;重定向跳转回原来的页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4afd8aff7e854767ae72aa2345af54bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><p>】</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求参数 id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="comment">//2. 调用BookService.deleteBookById()删除数据</span></span><br><span class="line">    bookService.deleteBookById(id);</span><br><span class="line">    <span class="comment">//3. 重定向跳转回原来的页面</span></span><br><span class="line"></span><br><span class="line">    resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/bookServlet?action=page&amp;pageNo=&quot;</span>+req.getParameter(<span class="string">&quot;pageNo&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线索化二叉树</title>
      <link href="/post/e71d88af.html"/>
      <url>/post/e71d88af.html</url>
      
        <content type="html"><![CDATA[<h1 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h1><blockquote><p>前言：</p><p>​对于线索化二叉树来说，他的后序线索化二叉树的遍历是其最难的地方，需要很多的辅助节点</p><p>​对于中序、前序线索化二叉树相对来说比较简单。</p></blockquote><h2 id="Node节点类的代码："><a href="#Node节点类的代码：" class="headerlink" title="Node节点类的代码："></a>Node节点类的代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * l 作用 ：标注left节点，若有值则为 0 无值,但经过序列化复制后为 1</span></span><br><span class="line"><span class="comment">     * r 作用 ：标注right节点，若有值则为 0 无值,但经过序列化复制后为 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> l;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">public</span> Node parent;  <span class="comment">//用于后序序列化遍历时使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.prefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.prefix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.suffix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.suffix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, left节点是否为空=&quot;</span> + l +</span><br><span class="line">                <span class="string">&quot;, right节点是否为空=&quot;</span> + r +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  <span class="comment">//0为有值 / 1为线索化后有值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前序线索化二叉树"><a href="#前序线索化二叉树" class="headerlink" title="前序线索化二叉树"></a>前序线索化二叉树</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路"><a href="#线索化思路" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>左移至最左边，判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li><li>向左右分别递归移动当前节点</li></ol><h5 id="线索化遍历思路"><a href="#线索化遍历思路" class="headerlink" title="线索化遍历思路"></a>线索化遍历思路</h5><p>​根左右，所以从根节点开始，沿着左子树进行处理，当子节点的left指针类型是null时，给其left赋值，然后标注为此node的l&#x3D; 1 说明到了最左子节点，然后处理子节点的right指针指向的节点，可能是右子树，也可能是后继节点，无论是哪种类型继续按照上面的方式（先沿着左子树处理，找到子树的最左子节点，然后处理right指针指向），以此类推，直到节点的right指针为空，说明是最后一个，遍历完成。 </p><h4 id="前序线索化"><a href="#前序线索化" class="headerlink" title="前序线索化"></a>前序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序线索化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先处理左节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;</span><br><span class="line">        node.l = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再处理右节点</span></span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = node;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    <span class="keyword">if</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">        prefixSearch(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    <span class="keyword">if</span>(node.r == <span class="number">0</span>)&#123;</span><br><span class="line">        prefixSearch(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前序线索化的遍历"><a href="#前序线索化的遍历" class="headerlink" title="前序线索化的遍历"></a>前序线索化的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序线索化二叉树的遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序线索化二叉树"><a href="#中序线索化二叉树" class="headerlink" title="中序线索化二叉树"></a>中序线索化二叉树</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路-1"><a href="#线索化思路-1" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>向左递归移动当前节点</li><li>判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li><li>向右递归移动当前节点</li></ol><h5 id="遍历思路"><a href="#遍历思路" class="headerlink" title="遍历思路"></a>遍历思路</h5><p>​左根右，因此第一个节点一定是最左子节点，先找到最左子节点，依次沿着right指针指向进行处理（无论是指向子节点还是指向后继节点），直到节点的right指针为空，说明是最后一个，遍历完成。 </p><h4 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用中序线索化将节点连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node : 为当前节点</span></span><br><span class="line"><span class="comment"> *        temp : 为当前节点的后面的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line"><span class="comment">//首先，如果当前节点为空，那么就不用继续连接</span></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左递归找到最left的节点</span></span><br><span class="line">    infixSearch(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//来处理当前节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;   <span class="comment">//如果当前节点的left为空，那么就说明已经递归到最left的节点了</span></span><br><span class="line">        node.l = <span class="number">1</span>;         <span class="comment">//标注，当前节点为叶子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后面的节点不能为空 。 因为他必须遍历到最left边（最左边的叶子节点）才能开始使用temp节点</span></span><br><span class="line">    <span class="keyword">if</span> (temp!= <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动辅助节点</span></span><br><span class="line">    temp = node;</span><br><span class="line">    <span class="comment">//右递归找到最right的节点</span></span><br><span class="line">    infixSearch(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序线索化的遍历"><a href="#中序线索化的遍历" class="headerlink" title="中序线索化的遍历"></a>中序线索化的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序线索化遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//首先创建一个临时节点，用于遍历所有的节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//先循环到最left</span></span><br><span class="line">        <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(node);</span><br><span class="line">        <span class="comment">//然后判断，继续循环其他的</span></span><br><span class="line">        <span class="keyword">while</span>(node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序线索化二叉树"><a href="#后序线索化二叉树" class="headerlink" title="后序线索化二叉树"></a>后序线索化二叉树</h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路-2"><a href="#线索化思路-2" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>向左递归移动当前节点</li><li>向右递归移动当前节点</li><li>判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li></ol><h5 id="线索化遍历思路-1"><a href="#线索化遍历思路-1" class="headerlink" title="线索化遍历思路"></a>线索化遍历思路</h5><p>​后序遍历线索化二叉树最为复杂，通用的二叉树数节点存储结构不能够满足后序线索化，因此我们扩展了节点的数据结构，增加了父节点的指针。后序的遍历顺序是：左右根，先找到最左子节点，沿着right后继指针处理，当right不是后继指针时，并且上一个处理节点是当前节点的右节点，则处理当前节点的右子树，遍历终止条件是：当前节点是root节点，并且上一个处理的节点是root的right节点。</p><h4 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序线索化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    suffixSearch(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    suffixSearch(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先处理左节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;</span><br><span class="line">        node.l = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再处理右节点</span></span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序线索化遍历★★★★★"><a href="#后序线索化遍历★★★★★" class="headerlink" title="后序线索化遍历★★★★★"></a>后序线索化遍历★★★★★</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序线索化遍历★★★★★</span></span><br><span class="line"><span class="comment"> * 与前面的有所不用，终止为临时节点到root节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root; <span class="comment">//辅助指针1</span></span><br><span class="line">    <span class="comment">//先循环走到最左边</span></span><br><span class="line">    <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//辅助指针2</span></span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果节点被序列化，那么就右移，同时移动辅助指针2</span></span><br><span class="line">        <span class="keyword">if</span> (node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">            pre = node;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果当前node节点有右节点，那么</span></span><br><span class="line">            <span class="keyword">if</span>(node.right == pre)&#123;</span><br><span class="line">                System.out.println(node);</span><br><span class="line">                <span class="keyword">if</span>(node == root)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = node;</span><br><span class="line">                node = node.parent; <span class="comment">// 回到父节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">                <span class="keyword">while</span> (node != <span class="literal">null</span> &amp;&amp; node.l == <span class="number">0</span>)&#123;</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅识Spring AOP</title>
      <link href="/post/8b9a3af8.html"/>
      <url>/post/8b9a3af8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><blockquote><p>引言(just I think)： <strong>因为java是面向对象编程，而面向对象是纵向继承机制，无法集中注意力到核心代码中，所以我们需要调用其他的机制来解决非核心代码的包装,将其从核心代码块中解耦出来</strong></p></blockquote><blockquote><p>首先我们从spring官网了解一下他们对AOP思想的介绍</p><p>官网地址：<a href="https://link.juejin.cn/?target=https://docs.spring.io/spring-framework/docs/2.5.5/reference/aop.html">docs.spring.io&#x2F;spring-fram…</a></p><p>面向方面编程 <em>(AOP) 通过提供另一种思考程序结构的方式来补充面向对象编程 (OOP)。OOP 中模块化的关键单元是类，而在 AOP 中，模块化的单元是</em>方面 <em>。方面使关注点模块化，例如跨越多种类型和对象的事务管理。（此类关注点在 AOP 文献中通常称为</em>横切关注点。）</p><p>Spring 的关键组件之一是<em>AOP 框架</em>。虽然 Spring IoC 容器不依赖于 AOP，这意味着您不需要使用 AOP，但 AOP 补充了 Spring IoC 以提供非常强大的中间件解决方案。</p></blockquote><h3 id="具体概念"><a href="#具体概念" class="headerlink" title="具体概念"></a>具体概念</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术  。*</span>**</span></span><br></pre></td></tr></table></figure><h3 id="AOP的相关相关术语："><a href="#AOP的相关相关术语：" class="headerlink" title="AOP的相关相关术语："></a>AOP的相关相关术语：</h3><ol><li><ol><li><strong>横切关注点</strong></li></ol></li></ol><p>就是从每个<strong>核心方法中</strong>抽取出来的非核心代码（既<strong>非核心业务逻辑</strong>），最后放入一个类中（<strong>这个类叫切面</strong>），不同的业务逻辑实现不同的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个概念不是语法层面天然存在的，而是根据附加功能（核心方法中的非核心代码）的逻辑上的需要：有十个附加功能（核心方法中的非核心代码），就有十个横切关注点。  </span><br></pre></td></tr></table></figure><ol><li><ol><li><strong>通知</strong></li></ol></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5883866603f1469ca4c2c9971796bee6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>简单地说就是在切面中，非核心业务也就是我们需要做的事，被封装成为一个方法（该方法叫通知）—-通知就是横切关注点的实现。</p><ol><li><strong>切面</strong></li></ol><p><em>封装横切关注点或者说是通知的类</em></p><ol><li><strong>目标</strong></li></ol><p><em>被代理的目标对象</em></p><ol><li><strong>代理</strong></li></ol><p><em>向目标对象应用通知之后创建的代理对象（不需要我们自己创建，封装的就是）AOP帮助我们创建</em></p><ol><li><strong>连接点</strong></li></ol><p><em>这也是一个纯逻辑概念，不是语法定义的。 把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉 点就是连接点</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fafd3911b50d40cb828bf8cbd5e6667d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em>从哪里套出来的就放回哪里，不改变元代码的逻辑</em></p><ol><li><strong>切入点</strong></li></ol><p><em>定位连接点的方式（位置）。</em></p><h3 id><a href="#" class="headerlink" title></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5112a18e0fc441c3a6f917333fbcbb8f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></h3><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><em><strong>简化代码：</strong></em> 把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。</li><li><em><strong>代码增强：</strong></em> 把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。</li></ul><h2 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h2><h3 id="技术说明："><a href="#技术说明：" class="headerlink" title="技术说明："></a>技术说明：</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93510564dc644f568d41641b73d0f4d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="几种动态代理"><a href="#几种动态代理" class="headerlink" title="几种动态代理"></a>几种动态代理</h3><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。</li><li>cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最 终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><p>通过阅读官方文档我们可以知道 :</p><p>Spring AOP <strong>默认使用标准的 J2SE</strong>* <strong>动态代理</strong>* 作为 AOP 代理。这使得任何接口（或接口集）都可以被代理。</p><h3 id="启用AOP顺序"><a href="#启用AOP顺序" class="headerlink" title="启用AOP顺序"></a>启用AOP顺序</h3><ol><li><strong>将目标对象和切面交给IOC容器管理（注解+扫描）</strong></li><li><strong>将切面类和目标类作为容器中的组件，所以加@Component</strong></li><li><strong>将当前组件用@Aspect注解标注为切面</strong></li><li><strong>开启基于注解的aop (</strong> 开启AspectJ的自动代理，为目标对象自动生成代理 <strong>)</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    作用： 开启基于注解的aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>配置好切入点表达式 ：</strong></li></ol><p><strong>声明一个方法，然后使用@Poincut注解来进行声明公共的切入点表达式 可)</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fb3a34826364f6b8182e1ac33922ad2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点表达式的重用******重点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    execution(权限修饰符 返回值 项目. 包/ *  . 类/ * .方法 (..) )</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com_Ray.such.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/735ab7047ed34ec3b81fb740df6a0df2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="AOP的各种通知详解"><a href="#AOP的各种通知详解" class="headerlink" title="AOP的各种通知详解"></a>AOP的各种通知详解</h3><p>各种通知的执行顺序：</p><blockquote><p>Spring版本5.3.x以前：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置通知 -<span class="punctuation">-&gt;</span>目标操作-<span class="punctuation">-&gt;</span> 后置通知-<span class="punctuation">-&gt;</span> 返回通知 / 异常通知</span><br></pre></td></tr></table></figure><p>Spring版本5.3.x以后：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置通知-<span class="punctuation">-&gt;</span> 目标操作-<span class="punctuation">-&gt;</span> 返回通知 / 异常通知-<span class="punctuation">-&gt;</span> 后置通知</span><br></pre></td></tr></table></figure></blockquote><ol><li><strong>前置语法：</strong></li></ol><p><strong>使用@Before注解标识，在被代理的目标方法前执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接点所对应方法的方法名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//2.  获取连接点所对应方法的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法名为： &quot;</span> + signature.getName()+ <span class="string">&quot;,参数为： &quot;</span> + Arrays.toString(args));</span><br><span class="line"><span class="comment">//        System.out.println(&quot;前置通知！&quot;);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>joinPoint 作为前置通知的方法的参数 ，可以获取连接点多对应的方法的签名信息（）</p><ol><li><strong>后置语法</strong></li></ol><p><strong>注解 ：@After（“point Cut（）”）在方法执行之后的finally中执行</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62e3ee1668eb4ef2a9d356096830114f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>返回通知</strong></li></ol><p><strong>注解： @AfterReturn（“point Cut（）“） 在目标对象执行之后执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回通知！</span></span><br><span class="line"><span class="comment"> * 在目标方法返回值之后的一个通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    System.out.println(<span class="string">&quot;方法： &quot;</span> + signature.getName()+<span class="string">&quot;执行返回通知&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>异常通知</strong></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@AfterThrowing(<span class="keyword">value</span> = <span class="string">&quot;pointCut()&quot;</span>,throwing = <span class="string">&quot;ex&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterThrow</span>(<span class="params">JoinPoint joinPoint, Throwable ex</span>)</span>&#123;</span><br><span class="line">    Signature signature = joinPoint.getSignature();</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;方法： &quot;</span> + signature.getName()+<span class="string">&quot;的异常通知:&quot;</span> + ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>环绕通知---@Around( )</strong></li></ol><p><em><strong>设置环绕通知之后就可以将所有前面的通知都涵盖进去</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54ec3fe2cdfb4bd3b267bfe2020faa1a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h2><p><strong>其基本与基于注解实现一样</strong></p><h3 id="配置xml环境"><a href="#配置xml环境" class="headerlink" title="配置xml环境"></a>配置xml环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:componentscan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcutref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;validateBeforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统学习</title>
      <link href="/post/6ea88167.html"/>
      <url>/post/6ea88167.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux操作系统"><a href="#linux操作系统" class="headerlink" title="linux操作系统"></a>linux操作系统</h1><h2 id="Linux的目录结构："><a href="#Linux的目录结构：" class="headerlink" title="Linux的目录结构："></a>Linux的目录结构：</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e0acf91abf541d08f5fd445614c0ed3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5e2a1000f4947d796b0596adbdc7122~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10e80a9586674529a8b50e920b781cc8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84409ad7377c4593b8b2ad616f6f47ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="树状图解"><a href="#树状图解" class="headerlink" title="树状图解"></a>树状图解</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ec3d8f97b5941cb843a829b470c4e0d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed935c1b0b7d4f8a9697a1ab668ac48b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="vi-x2F-vim的学习"><a href="#vi-x2F-vim的学习" class="headerlink" title="vi &#x2F; vim的学习"></a>vi &#x2F; vim的学习</h1><h2 id="什么是vi-x2F-vim，为什么我们需要学习"><a href="#什么是vi-x2F-vim，为什么我们需要学习" class="headerlink" title="什么是vi&#x2F; vim，为什么我们需要学习"></a>什么是vi&#x2F; vim，为什么我们需要学习</h2><p><strong>原因：</strong></p><ol><li><p>鸟哥的原因</p></li><li><ol><li>所有的Unix Like 系统都会内建vi 文书编辑器，其他的文书编辑器则不一定会存在；</li><li>很多个别软体的编辑介面都会主动呼叫vi (例如未来会谈到的crontab , visudo , edquota等指令)；</li><li>vim 具有程式编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程式设计；</li><li>因为程式简单，编辑速度相当快速。</li></ol></li><li><p><strong>有太多Linux 上面的指令都预设使用vi 作为资料编辑的介面，所以你必须、一定要学会 vi ，否则很多指令你根本就无法操作呢！</strong></p></li></ol><p><strong>什么是vi &#x2F; vim：</strong></p><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="https://link.juejin.cn/?target=https://www.vim.org/">www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h1 id="各种模式的切换"><a href="#各种模式的切换" class="headerlink" title="各种模式的切换"></a>各种模式的切换</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65f28fc1e02f491cbfedb42ed7b1ce39~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>各种模式解释：</p><ol><li>一般模式&#x2F;正常模式</li></ol><p>第一种：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88af663538104644908e005eb64930f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>第二种： 就是进入遍历模式，但是没有输入( i &#x2F; a的情况下 )</p><ol><li>编辑模式（输入i, I, o, O, a, A, r, R的情况下）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2df0a2f67c714011b91a631835f668bf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>命令模式</li></ol><p>就是进入编辑模式之后，输入完成按esc键，然后在输入 ：或者 &#x2F; 就会进入命令模式<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6931fb0e976243ee8e2c19ba174ffbdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="vim快捷键练习"><a href="#vim快捷键练习" class="headerlink" title="vim快捷键练习"></a>vim快捷键练习</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d74202aa35d44f9a7f46c0323a79a8c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>对于复制元素 命令： (x) yy,然后输入p &#x2F;&#x2F;x为我们需要向下拷贝的行数</li></ol><p>同样的对于拷贝&#x2F;复制 ，我们必须是在一般模式&#x2F;正常模式下进行</p><p><strong>操作方法：</strong> 【 现输入x(行数) ，然后再按yy，（接下来就是移动光标，比如我们向向下复制这几行元素，就必须在进行完上述操作后将光标移动到下面），最后在按p<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0254d9c3c4064001af77ef5c5c333bf3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img">最后呈现效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4b306cf85364ddf96c01ae9533dda41~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>】</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>删除当前行：输入dd</li></ol><p>(x) dd,然后输入p &#x2F;&#x2F;x为我们需要向下删除的行数</p><p>光标移动到当前行，然后输入5dd就会删除当前行下面的5行元素</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/087720ebad5f4d51a86bdd346568c9b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83da363939084ac3a6670c54c687c8c1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>在命令模式下进行</p><p>完成进入编辑模式后</p><p>操作： 输入 &#x2F;+关键字，然后按回车 —&gt; 就会在编辑页面出现查找的内容，输入 n就会查找下一个</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52bf7ac5b504f9085cce96077ec2c2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果：（输入n 就是查找下一个 ）<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5141613ff604e6d925d279432fee277~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="设置文件行号"><a href="#设置文件行号" class="headerlink" title="设置文件行号"></a>设置文件行号</h3><p>在命令模式下</p><p>操作： 进入命令行，输入:set nu</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac8ab4b6afee41f2beec046e95bfac79~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如果不想展示则输入 set nonu 就会取消行号设置</p><h3 id="快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下"></a>快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下</h3><p>直接输入 大写的G(最末行) 或者小写的gg(首行)</p><p>撤销编辑时的输入操作 在一般模式下&#x2F;正常模式下</p><p>输入 u</p><h3 id="快速定位到某一行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某一行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某一行 在一般模式下&#x2F;正常模式下"></a>快速定位到某一行 在一般模式下&#x2F;正常模式下</h3><p>操作： 输入 行号 –&gt; 在输入 shift + g （建议先打开行号）</p><h3 id="vim的键盘图"><a href="#vim的键盘图" class="headerlink" title="vim的键盘图"></a>vim的键盘图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c67f76506a491e93006c8adfd569a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0460b70928145bdb71c473cd3672c52~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><hr><h1 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h1><h3 id="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"><a href="#第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等" class="headerlink" title="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"></a>第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等</h3><table><thead><tr><th>移动游标的方法</th><th></th></tr></thead><tbody><tr><td>h 或向左方向键(←)</td><td>游标向左移动一个字元</td></tr><tr><td>j 或向下方向键(↓)</td><td>游标向下移动一个字元</td></tr><tr><td>k 或向上方向键(↑)</td><td>游标向上移动一个字元</td></tr><tr><td>l 或向右方向键(→)</td><td>游标向右移动一个字元</td></tr><tr><td>如果你将右手放在键盘上的话，你会发现hjkl 是排列在一起的，因此可以使用这四个按钮来移动游标。如果想要进行多次移动的话，例如向下移动30 列，可以使用”30j” 或”30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td>[Ctrl] + [f]</td><td>萤幕『向下』移动一页，相当于[Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>萤幕『向上』移动一页，相当于[Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>萤幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>萤幕『向上』移动半页</td></tr><tr><td>+</td><td>游标移动到非空白字元的下一列</td></tr><tr><td>-</td><td>游标移动到非空白字元的上一列</td></tr><tr><td>n</td><td>那个n 表示『数字』，例如20 。按下数字后再按空白键，游标会向右移动这一列的n 个字元。例如20 则游标会向后面移动20 个字元距离。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一列的最前面字元处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一列的最后面字元处(常用)</td></tr><tr><td>H</td><td>游标移动到这个萤幕的最上方那一列的第一个字元</td></tr><tr><td>M</td><td>游标移动到这个萤幕的中央那一列的第一个字元</td></tr><tr><td>L</td><td>游标移动到这个萤幕的最下方那一列的第一个字元</td></tr><tr><td>G</td><td>移动到这个档案的最后一列(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第n 列。例如20G 则会移动到这个档案的第20 列(可配合:set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一列，相当于1G 啊！(常用)</td></tr><tr><td>n</td><td>n 为数字。游标向下移动n 列(常用)</td></tr><tr><td>搜寻与取代</td><td></td></tr><tr><td>&#x2F;word</td><td>向游标之下寻找一个名称为word 的字串。例如要在档案内搜寻vbird 这个字串，就输入&#x2F;vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向游标之上寻找一个字串名称为word 的字串。</td></tr><tr><td>n</td><td>这个n 是英文按键。代表『重复前一个搜寻的动作』。举例来说， 如果刚刚我们执行&#x2F;vbird 去向下搜寻vbird 这个字串，则按下n 后，会向下继续搜寻下一个名称为vbird 的字串。如果是执行?vbird 的话，那么按下n 则会向上继续搜寻名称为vbird 的字串！</td></tr><tr><td>N</td><td>这个N 是英文按键。与n 刚好相反，为『反向』进行前一个搜寻动作。例如&#x2F;vbird 后，按下N 则表示『向上』搜寻vbird 。</td></tr><tr><td>使用&#x2F;word 配合n 及N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键字！</td><td></td></tr><tr><td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与n2 为数字。在第n1 与n2 列之间寻找word1 这个字串，并将该字串取代为 word2 ！举例来说，在100 到200 列之间搜寻vbird 并取代为VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！且在取代前显示提示字元给使用者确认(confirm) 是否需要取代！(常用)</td></tr><tr><td>删除、复制与贴上</td><td></td></tr><tr><td>x, X</td><td>在一列字当中，x 为向后删除一个字元(相当于[del] 按键)， X 为向前删除一个字元(相当于[backspace] 亦即是倒退键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除n 个字元。举例来说，我要连续删除10 个字元， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整列(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除游标所在的向下n 列，例如20dd 则是删除20 列 (常用)</td></tr><tr><td>d1G</td><td>删除游标所在到第一列的所有资料</td></tr><tr><td>dG</td><td>删除游标所在到最后一列的所有资料</td></tr><tr><td>d$</td><td>删除游标所在处，到该列的最后一个字元</td></tr><tr><td>d0</td><td>那个是数字的0 ，删除游标所在处，到该列的最前面一个字元</td></tr><tr><td>yy</td><td>复制游标所在的那一列(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制游标所在的向下n 列，例如20yy 则是复制20 列(常用)</td></tr><tr><td>y1G</td><td>复制游标所在列到第一列的所有资料</td></tr><tr><td>yG</td><td>复制游标所在列到最后一列的所有资料</td></tr><tr><td>y0</td><td>复制游标所在的那个字元到该列行首的所有资料</td></tr><tr><td>y$</td><td>复制游标所在的那个字元到该列行尾的所有资料</td></tr><tr><td>p, P</td><td>p 为将已复制的资料在游标下一列贴上，P 则为贴在游标上一列！举例来说，我目前游标在第20 列，且已经复制了10 列资料。则按下p 后， 那10 列资料会贴在原本的20 列之后，亦即由21 列开始贴。但如果是按下P 呢？那么原本的第20 列会被推到变成30 列。(常用)</td></tr><tr><td>J</td><td>将游标所在列与下一列的资料结合成同一列</td></tr><tr><td>c</td><td>重复删除多个资料，例如向下删除10 列，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>这个u 与[Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！(常用)</td></tr></tbody></table><h3 id="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般指令模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般指令模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th>进入插入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入插入模式(Insert mode)： i 为『从目前游标所在处插入』， I 为『在目前所在列的第一个非空白字元处开始插入』。(常用)</td></tr><tr><td>a, A</td><td>进入插入模式(Insert mode)： a 为『从目前游标所在的下一个字元处开始插入』， A 为『从游标所在列的最后一个字元处开始插入』。(常用)</td></tr><tr><td>o, O</td><td>进入插入模式(Insert mode)： 这是英文字母o 的大小写。o 为『在目前游标所在的下一列处插入新的一列』； O 为在目前游标所在处的上一列插入新的一列！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代游标所在的那一个字元一次；R会一直取代游标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字元时， 一定要在左下角处看到INSERT 或REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般指令模式中(常用)</td></tr></tbody></table><h3 id="第三部份：一般指令模式切换到指令列模式的可用按钮说明"><a href="#第三部份：一般指令模式切换到指令列模式的可用按钮说明" class="headerlink" title="第三部份：一般指令模式切换到指令列模式的可用按钮说明"></a>第三部份：一般指令模式切换到指令列模式的可用按钮说明</h3><table><thead><tr><th>指令列模式的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的资料写入硬碟档案中(常用)</td></tr><tr><td>:w!</td><td>若档案属性为『唯读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号(!) 在vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为:wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的资料储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的资料中，读入另一个档案的资料。亦即将『filename』 这个档案内容加到游标所在列后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将n1 到n2 的内容储存成filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开vi 到指令列模式下执行command 的显示结果！例如 『:! ls &#x2F;home』即可在vi 当中察看&#x2F;home 底下以ls 输出的档案资讯！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一列的字首显示该列的行号</td></tr><tr><td>:set nonu</td><td>与set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="参考说明："><a href="#参考说明：" class="headerlink" title="参考说明："></a>参考说明：</h1><p>文档学习:</p><p>​相关内容参考鸟哥Linux私房菜( <a href="https://link.juejin.cn/?target=https://linux.vbird.org/">linux.vbird.org&#x2F;</a> )</p><p>​视频学习：韩顺平Linux</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中的动态SQL技术</title>
      <link href="/post/c0b354ed.html"/>
      <url>/post/c0b354ed.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b1aefc3fff34f48a670f0cb2029b9a8~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="MyBatis中的动态SQL技术"></p><h1 id="MyBatis-之-动态SQL技术"><a href="#MyBatis-之-动态SQL技术" class="headerlink" title="MyBatis 之 动态SQL技术"></a>MyBatis 之 动态SQL技术</h1><p><strong>引言:</strong></p><blockquote><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p></blockquote><blockquote><p>这里我们使用的表为t_emp 对应的实体类名为Emp</p><p>字段: emp_name, emp_id ,age ,gender 对应的属性名 : empName , empId , age ,gender</p></blockquote><h2 id="First-if-标签"><a href="#First-if-标签" class="headerlink" title="First : if 标签"></a>First : if 标签</h2><p>if 标签只有一个test属性 只有test属性的表达式判定结果为true ,其中的内容才会被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp <span class="built_in">where</span></span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">             emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>但是这样做的局限性非常大 , 如果我们第一个if 不满足的话 ,那么就会导致后面满足条件的语句前面多出来一个and ,这个问题又无法解决 ,那么就用到了下面的where标签</p><h2 id="Second-where标签"><a href="#Second-where标签" class="headerlink" title="Second : where标签"></a>Second : where标签</h2><p>使用where 标签作用:</p><ol><li>如果标签中没有任何的条件满足 那么就不需要执行任何的功能 ;可以直接退出 , 如果满足 那么就执行里面的if 标签</li><li>可以将<strong>if中内容前面的没用的and去除 ( 内容后面的and 无法去除</strong>), 所以可以都添加 ;</li><li>如果 where 标签中有条件成立 , 他将会自动的添加where</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Third-trim-标签"><a href="#Third-trim-标签" class="headerlink" title="Third : trim 标签"></a>Third : trim 标签</h2><p><strong>trim标签中相关属性的作用</strong></p><ol><li>prefix &#x2F; suffix: 在内容前面 &#x2F; 后面添加指定内容</li><li>prefixOverrides &#x2F;suffixOverrides 在内容前面 &#x2F; 后面 去除某些指定内容</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;trim <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> prefixOverrides=<span class="string">&quot;and&quot;</span>&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fourth-choose-when-otherwise-标签"><a href="#Fourth-choose-when-otherwise-标签" class="headerlink" title="Fourth : choose - when - otherwise 标签"></a>Fourth : choose - when - otherwise 标签</h2><p>它和java中的switch语句十分相似 ,所以它只有一个when语句会被执行 ,如果都不满足 , 那么就会执行otherwise语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">        &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">            &lt;choose&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                 &lt;when <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;otherwise&gt;</span><br><span class="line">                &lt;/otherwise&gt;</span><br><span class="line">            &lt;/choose&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fifth-foreach-标签"><a href="#Fifth-foreach-标签" class="headerlink" title="Fifth : foreach 标签"></a>Fifth : foreach 标签</h2><p><strong>属性：</strong></p><ul><li>collection：设置要循环的数组或集合</li><li>item：表示集合或数组中的每一个数据</li><li>separator：设置循环体之间的分隔符</li><li>open：设置foreach标签中的内容的开始符</li><li>close：设置foreach标签中的内容的结束符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  批量添加员工信息  void insertMoreEmp(@Param (&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp values</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">             (null ,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)</span><br><span class="line">         <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">&lt;!--   批量删除的功能 void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where emp_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;empId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;empId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Sixth-SQL标签"><a href="#Sixth-SQL标签" class="headerlink" title="Sixth : SQL标签"></a>Sixth : SQL标签</h2><p>sql 标签 可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql <span class="attr">id</span>=<span class="string">&quot;Columns&quot;</span>&gt;</span><br><span class="line">    emp_id, emp_name,age ,gender</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">select &lt;include <span class="attr">refid</span>=<span class="string">&quot;Columns&quot;</span>&gt;&lt;/include&gt; from t_emp</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myFirstBlog</title>
      <link href="/post/23c7dc9f.html"/>
      <url>/post/23c7dc9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅识SpringIOC"><a href="#浅识SpringIOC" class="headerlink" title="浅识SpringIOC"></a>浅识SpringIOC</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9215b78ca8964c1680efc934f81b494e~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="浅识 Spring IOC "></p><h1 id="小小了解一下-Spring-家族"><a href="#小小了解一下-Spring-家族" class="headerlink" title="小小了解一下 Spring 家族"></a>小小了解一下 Spring 家族</h1><blockquote><blockquote><p><strong>官网地址：<a href="https://link.juejin.cn/?target=https://spring.io/">spring.io&#x2F;</a></strong></p><p><strong>项目列表：<a href="https://link.juejin.cn/?target=https://spring.io/projects">spring.io&#x2F;projects</a></strong></p></blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首 次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应 用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践</p></blockquote><p>通过上面的粗略介绍 ,我们可以简单的了解一下Spring家族的厉害之处下面就是我们今天学习的重点</p><p><strong>Spring IOC( Inversion of Control )反转控制</strong></p><h1 id="First-理解什么是IOC思想"><a href="#First-理解什么是IOC思想" class="headerlink" title="First : 理解什么是IOC思想"></a>First : 理解什么是IOC思想</h1><p>图示理解:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15d9384a4554425ae7fb19863b29445~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Spring IOC.png">文字解释:</p><ul><li><p>①获取资源的传统方式</p><blockquote><p>传统的方式是组件主动的从容器中获取所需要的资源，在这样的 模式下开发人员往往需要知道在具体容器中特定资源的获取方式</p></blockquote></li><li><p>②反转控制方式获取资源</p><blockquote><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源 的方式即可，极大的降低了学习成本，提高了开发的效率。</p></blockquote></li><li><p>③DI：Dependency Injection，翻译过来就是依赖注入</p><blockquote><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。相对于IOC而言，这种表述更直接。 所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p></blockquote></li></ul><h1 id="Second-在Spring中的IOC是怎么体现出来的"><a href="#Second-在Spring中的IOC是怎么体现出来的" class="headerlink" title="Second : 在Spring中的IOC是怎么体现出来的"></a>Second : 在Spring中的IOC是怎么体现出来的</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d1c91bca5214088b92b3b1ec7a6fadd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"><strong>Spring中的IOC有两种实现方式 :</strong></p><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h2><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用</p><h2 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h2><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。(原因显而易见, 我们无法控制内部)</p><h3 id="ApplicationContext的主要实现类"><a href="#ApplicationContext的主要实现类" class="headerlink" title="ApplicationContext的主要实现类"></a>ApplicationContext的主要实现类</h3><ul><li>ClassPathXmlApplicationContext :<ul><li>见名知意 它就是通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</li></ul></li><li>FileSystemXmlApplicationContext :<ul><li>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</li></ul></li><li>ConfigurableApplicationContext :<ul><li>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力。</li></ul></li><li>WebApplicationContext :<ul><li>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中。</li></ul></li></ul><h1 id="Third-基于XML-管理IOC容器"><a href="#Third-基于XML-管理IOC容器" class="headerlink" title="Third : 基于XML 管理IOC容器"></a>Third : 基于XML 管理IOC容器</h1><h5 id="首先是创建所有的项目都绕不过去的坑—-引入依赖"><a href="#首先是创建所有的项目都绕不过去的坑—-引入依赖" class="headerlink" title="首先是创建所有的项目都绕不过去的坑—-引入依赖"></a>首先是创建所有的项目都绕不过去的坑—-引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/670a2ff0267e4fae955f78df171a8e94~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="1-操作顺序及其思路"><a href="#1-操作顺序及其思路" class="headerlink" title="1. 操作顺序及其思路"></a>1. 操作顺序及其思路</h2><p>创建自定义组件类的时候一定要创建有参和无参构造器两个, <strong>良好的代码习惯是避免犯错的前提</strong> Spring底层默认是通过反射来调用自定义组件类中的无参构造器来创建组件对象的<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f578a4d0612e4e0eaed84eb017038393~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="2-获取Bean的方式"><a href="#2-获取Bean的方式" class="headerlink" title="2. 获取Bean的方式"></a>2. 获取Bean的方式</h2><ul><li>①方式一：根据id获取</li><li>②方式二：根据类型获取</li><li>③方式三：根据id和类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;Spring配置文件.xml&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据id获取 </span></span><br><span class="line"><span class="comment">由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据类型获取--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(自定义组件类.class);</span><br><span class="line"><span class="comment">&lt;!--根据id和类型--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;,自定义组件类.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取bean时注意点"><a href="#获取bean时注意点" class="headerlink" title="获取bean时注意点"></a>获取bean时注意点</h4><p>首先 : <em><strong>在根据类型获取对象时</strong></em> 创建的Bean 对象只能有一个。因为<strong>默认情况下</strong>我们bean中的scope属性的值为”singleton” 如果<strong>想要创建多个对象 ,那么就将scope的属性设置为”prototype”</strong></p><p>其次 :如果组件的类型是接口类型 ,那么就必须设置<em>接口的实现类的Bean是唯一的</em> ,否则报错</p><h2 id="3-DI-依赖注入"><a href="#3-DI-依赖注入" class="headerlink" title="3. DI 依赖注入"></a>3. DI 依赖注入</h2><blockquote><p>这里用的是Student组件类 属性: id , name , age , sex</p></blockquote><h4 id="①-setXXX-方法-注入"><a href="#①-setXXX-方法-注入" class="headerlink" title="① setXXX()方法 注入"></a>① setXXX()方法 注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="②-构造器-注入"><a href="#②-构造器-注入" class="headerlink" title="② 构造器 注入"></a>② 构造器 注入</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> class=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="③-特殊类型-引用类型-的-注入"><a href="#③-特殊类型-引用类型-的-注入" class="headerlink" title="③ 特殊类型(引用类型)的 注入"></a>③ 特殊类型(引用类型)的 注入</h4><blockquote><p>首先创建被引用的类的Bean</p><p>比如下面 :先创建Clazz类的Bean ,然后该Bean的id (clazzOne) 作为需要引用的属性值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第二种</strong>方法就是创建内部bean(不常用 , 做了解即可)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第三种</strong>方法: 级联属性赋值 <strong>(一定先引用某个bean为属性赋值，才可以使用级联方式更新属性)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;三班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="④-特殊类型-数组类型-注入"><a href="#④-特殊类型-数组类型-注入" class="headerlink" title="④ 特殊类型(数组类型) 注入"></a>④ 特殊类型(数组类型) 注入</h4><blockquote><p>在前面的基础上 新增属性 String [ ] hobbies;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑤-特殊类型-List集合类型-注入"><a href="#⑤-特殊类型-List集合类型-注入" class="headerlink" title="⑤ 特殊类型(List集合类型) 注入"></a>⑤ 特殊类型(List集合类型) 注入</h4><blockquote><p>在Clazz 类中新增 List &lt; Student &gt; students;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑥-特殊类型-Map集合类型-注入"><a href="#⑥-特殊类型-Map集合类型-注入" class="headerlink" title="⑥ 特殊类型(Map集合类型) 注入"></a>⑥ 特殊类型(Map集合类型) 注入</h4><blockquote><p>新创建教师类Teacher 在学生类中添加Map&lt; String , Teacher &gt;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--这里我们同样的创建Teacher类的Bean--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Fourth-Bean的生命周期"><a href="#Fourth-Bean的生命周期" class="headerlink" title="Fourth : Bean的生命周期"></a>Fourth : Bean的生命周期</h1><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73d418aa28394d74999365dbeb04020b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="具体的生命周期过程"><a href="#具体的生命周期过程" class="headerlink" title="具体的生命周期过程"></a>具体的生命周期过程</h4><ol><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作（由bean的后置处理器负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ol><h1 id="Fifth-FactoryBean"><a href="#Fifth-FactoryBean" class="headerlink" title="Fifth : FactoryBean"></a>Fifth : FactoryBean</h1><p><strong>FactoryBean是Spring提供的一种整合第三方框架的常用机制</strong>。和普通的bean不同，配置一个 FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是 getObject()方法的返回值。通过这种机制 **(反射机制)**，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p><strong>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88d02ea7834b4f47992d23da8e8eaa03~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;bean.UserFactoryBean&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Sixth-基于注解管理Bean★★★★★"><a href="#Sixth-基于注解管理Bean★★★★★" class="headerlink" title="Sixth : 基于注解管理Bean★★★★★"></a>Sixth : 基于注解管理Bean★★★★★</h1><blockquote><p>首先了解一下注解</p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测 到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p><strong>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行</strong>。</p><p><strong>常用的注解 :</strong></p><blockquote><p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组 @Service：将类标识为业务层组件 @Repository：将类标识为持久层组件</p></blockquote><p>对于上述的除了Component注解之外的其他三个注解 Spring使用IOC容器管理这些组件来说<strong>没有区别</strong>。所以@Controller、@Service、@Repository这 三个注解<strong>只是给开发人员看的，让我们能够便于分辨组件的作用。</strong></p></blockquote><h4 id="扫描组件的几种情况"><a href="#扫描组件的几种情况" class="headerlink" title="扫描组件的几种情况"></a>扫描组件的几种情况</h4><ul><li>include-filter : 包含扫描 , 只扫描谁</li><li>exclude-filter : 排除扫描 , 不扫描谁</li><li>如果没有那么就默认全部扫描</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">         https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描组件  :   让spring知道 ,什么加了注解</span></span><br><span class="line"><span class="comment">    通过包来进行识别 ,直接扫描spring ,然后她下面的所有的包 以及类都会被扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com_Ray.spring&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--                在实际的项目开发中, 我们需要进行选择性的扫描 ,所以这时我们就需要进行排除</span></span><br><span class="line"><span class="comment">        include-filter : 包含扫描 , 只扫描谁</span></span><br><span class="line"><span class="comment">            [需要在context:component-scan标签中添加属性 :use-default-filters=&quot;false&quot; ]</span></span><br><span class="line"><span class="comment">        exclude-filter : 排除扫描 , 不扫描谁</span></span><br><span class="line"><span class="comment">                type : 排除的类型(根据什么进行排除/或者只包括什么类型):</span></span><br><span class="line"><span class="comment">                    annotation(注解的类型)  aspectj(了解即可)</span></span><br><span class="line"><span class="comment">                    assignable(类的类型)    custom(了解即可)     regex(了解即可)</span></span><br><span class="line"><span class="comment">                expression : 放置全类名(或者注解全名)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com_Ray.spring.controller.UserController&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceInpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="基于注解自动装配之Autowried注解"><a href="#基于注解自动装配之Autowried注解" class="headerlink" title="基于注解自动装配之Autowried注解"></a>基于注解自动装配之Autowried注解</h3><p>首先 ,自动装配是: 通过我们指定的策略 ,为我们当前ioc容器所管理的bean中的成员变量进行赋值的操作</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bb1f1cb6a0549a2af230743bd62ac57~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>@Autowried注解标识的位置:</strong></p><ol><li>标识在成员变量上</li><li>set方法上</li><li>为当前变量赋值的有参构造器上</li></ol><h4 id="Autowried注解的原理"><a href="#Autowried注解的原理" class="headerlink" title="@Autowried注解的原理"></a>@Autowried注解的原理</h4><p><strong>场景参考:</strong><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b07a73061ffa47f6a85efca66b37307d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>原理 :</p><ol><li><strong>byType 根据类型来找到一个类型匹配的bean ,来为当前的属性自动进行赋值</strong></li></ol><p><em><strong>自动装配:</strong></em> <em><strong>根据指定的策略,在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的</strong></em> <em><strong>类类型或接口类型属性</strong></em> <em>赋值</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c64696fdf8a46e886263c37445ef7f4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>byName 把需要赋值的属性的名字来作为bean的id在ioc容器中去匹配到某一个bean来为当前的属性赋值</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2838e7fe41d647e6bdfab066db6e8c93~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em><strong>实现流程:</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9fa2b8a09f44b7cb8d2f3ec2e7a4747~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c711a4d811e4af08a993786552b6626~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h1 id="Finally-写在最后"><a href="#Finally-写在最后" class="headerlink" title="Finally : 写在最后"></a>Finally : 写在最后</h1><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>本站是本人的私人博客，所有的博客都是经过自己学习总结得出的。可能内容质量比较差，也许您有疑惑，或者说是博客哪里写的有问题，希望各位能够谅解！！！</p><p>如果您方便，也可以添加我的qq或微信指出我的不足。</p><h1 id="关于图片中的稀土掘金标签问题"><a href="#关于图片中的稀土掘金标签问题" class="headerlink" title="关于图片中的稀土掘金标签问题"></a>关于图片中的稀土掘金标签问题</h1><p> 因为从本地上传图片比较麻烦，有时也会出现图片加载失败的问题，所以为了方便起见，我先将文章发布到稀土掘金上，这样就可以直接复制图片，保证了图片不加载失败</p><h1 id="分享激励自己的一些话"><a href="#分享激励自己的一些话" class="headerlink" title="分享激励自己的一些话"></a>分享激励自己的一些话</h1><blockquote><p>这世上的事，认真不对，不认真也不对，执着不对，一切视为空气也不对。平平常常自自然然，如上山拜佛，见了佛像就磕头，磕了头，佛像还是佛像，你还是你，生活之累，就该少下来了</p></blockquote><blockquote><p>在这人世间，有些路是非得单独一个人去面对，单独一个人去跋涉的，路再长再远，夜再黑再暗，也得独自默默地的走下去。如果遇到了一个陪伴自己走了很长一段路的人，剩下的除了感恩还是感恩。</p></blockquote><blockquote><p>你身边全都是和你当年一样充满野心、充满激情、充满渴望的年轻人，他们把你的长处和你的短处拿出来放在显微镜下去研究，以你为标靶，你说你守天下难不难。</p></blockquote><blockquote><p>屏蔽力是一个人最高级的能力，任何消耗你的人和事，多看一眼都是不应该的。不敏感于他人的目光，不生活在别人的嘴里，做自己人生的评判管，才是最难得的清醒。</p></blockquote><blockquote><p>月亮代表崇高而不可企及的梦想，六便士则代表了生存，不得不赚取的卑微收入。多少人只是胆怯地抬头看一眼月亮，又继续低头追求温饱的六便士，二者是否可以和谐共处。一般情况下，每个对月亮充满渴望的人，都必须在生存线上苦苦挣扎，而那些为了六便士卑躬屈膝的人，慢慢地会觉得六便士就是月亮，就是人生的终极理想。</p></blockquote><h1 id="缺席打卡："><a href="#缺席打卡：" class="headerlink" title="缺席打卡："></a>缺席打卡：</h1><ol><li>2023.1.12日，暂无总结内容</li><li>2023.1.17日，在外面，有事未归</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
