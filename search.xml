<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nacos集群搭建</title>
      <link href="/post/bf8bcde.html"/>
      <url>/post/bf8bcde.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h1><p>官方Nacos集群图： </p><p><img src="/images/1690890694977-ea2493bc-4b6f-48da-ac35-8562dafd2a3d.png" alt="img"></p><p>其中包含3个nacos节点，然后一个<strong>负载均衡器代理3个Nacos</strong>。这里<strong>负载均衡器可以使用nginx。</strong></p><p>在生产环境中，所有的微服务都需要被注册发现到注册中心去。 同时还需要读取配置， 所以都需要去找Nacos。</p><p>就像下图一样 ：</p><p><img src="/images/1690891361563-f322ab6f-c917-412a-8b72-48fd4dd73f3c.png" alt="img"> </p><h2 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h2><p><img src="/images/1690892615490-b2513656-07e5-4fea-9953-3ce7f959330e.png" alt="img"></p><p><img src="/images/1690892636298-f50eb3b2-ad6e-43b9-aebc-9613b923f6e6.png" alt="img"></p><ol><li>新建配置</li></ol><p>DataID： 就是配置开发环境 xxx.yaml</p><ol><li>配置格式就是YAML</li><li>配置内容：</li></ol><p>内容就是做热更新配置是需要变的那种开关类型的配置（有热更新需求的）。 而不是数据库等没有什么需要做的那种配置。</p><h3 id="配置获取"><a href="#配置获取" class="headerlink" title="配置获取"></a>配置获取</h3><p>Spring项目的启动顺序</p><ol><li>项目启动</li><li><strong>读取本地的配置文件yml</strong></li><li>创建Spring容器</li><li>加载Bean</li><li>….</li></ol><p><img src="/images/1690893452446-c39b13a6-9a4a-491b-add6-e912c6fa3664.png" alt="img"></p><p>在nacos的配置管理中，在步骤2之前 需要将nacos的配置文件和本地配置文件做一个合并， 然后再去做后续的动作。但是问题来了 。nacos的地址是在application.yml文件中的，那这样就无法先将nacos的配置加载之后再读取本地配置文件application.yml了。 </p><p><strong>所以就需要将nacos的地址放在本地配置文件读取之前来操作。 在Spring中， bootstrap.yml配置文件在本地配置文件之前被读取。</strong></p><p><strong>bootstrap.yml的优先级比Application高很多。</strong></p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><strong>引入依赖</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>com.alibaba.cloud<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>cloud<span class="operator">-</span>starter<span class="operator">-</span>alibaba<span class="operator">-</span>nacos<span class="operator">-</span>config<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>添加bootstrap.yaml</strong></li></ol><p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: userservice # 服务名称</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev #开发环境，这里是dev </span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server<span class="operator">-</span>addr: localhost:<span class="number">8848</span> # Nacos地址</span><br><span class="line">      config:</span><br><span class="line">        file<span class="operator">-</span>extension: yaml # 文件后缀名</span><br></pre></td></tr></table></figure><blockquote><p> 这里<strong>会根据spring.cloud.nacos.server-addr获取nacos地址</strong>，再根据</p></blockquote><p>**${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}**<strong>作为文件id，来读取配置</strong>。</p><p>本例中，就是去读取userservice-dev.yaml：</p><p><img src="/images/1690893503873-901618fb-4808-4e59-a58a-a197caf6bf51.png" alt="img"></p><ol><li><strong>读取nacos配置</strong></li></ol><p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p><p><img src="/images/1690893552023-1f10abd1-452d-429a-a79a-2f9d7af87813.png" alt="img"></p><p>这里可以将@value注解换成@NacosValue</p><ol><li>最后访问即可看到效果。</li></ol><p><strong>提示：</strong> </p><p>可能会出错。 出错的继续看看视频的弹幕提示吧</p><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=26&spm_id_from=pageDriver&vd_source=fbbe87e6ad798358722a945dd1377672">https://www.bilibili.com/video/BV1LQ4y127n4/?p=26&amp;spm_id_from=pageDriver&amp;vd_source=fbbe87e6ad798358722a945dd1377672</a></p><p>依赖错误是最熬人的。</p><h2 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h2><h3 id="方法一：-RefreshScope"><a href="#方法一：-RefreshScope" class="headerlink" title="方法一：@RefreshScope"></a>方法一：@RefreshScope</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p><p><img src="/images/1690894628536-8d8c5dc3-d058-471e-9802-4a243db0288a.png" alt="img"></p><h3 id="方法二-推荐-：-使用-ConfigurationProperties注解代替-Value注解"><a href="#方法二-推荐-：-使用-ConfigurationProperties注解代替-Value注解" class="headerlink" title="方法二(推荐)： 使用@ConfigurationProperties注解代替@Value注解"></a>方法二(推荐)： <strong>使用@ConfigurationProperties注解代替@Value注解</strong></h3><p><strong>使用@ConfigurationProperties注解代替@Value注解。</strong></p><p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.user.config;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>采用约定大于配置的方式。</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>只要前缀名<span class="operator">+</span>变量名两者拼接跟 配置文件一致。就可以实现属性的自动注入</span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix <span class="operator">=</span> &quot;pattern&quot;)</span><br><span class="line">public class PatternProperties &#123;</span><br><span class="line">    private String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UserController中使用这个类代替@Value：</p><p><img src="/images/1690894691055-2d781dc7-9064-41c5-b444-7031b9a36545.png" alt="img"></p><p><strong>通过@ConfigurationProperties注入可以实现自动刷新。</strong></p><p><strong>而通过@Value 注解注入， 需要结合 @RefreshScope来刷新。</strong></p><h2 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h2><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p><ul><li><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml </li><li><code>[spring.application.name].yaml</code>，例如：userservice.yaml</li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>下面通过heima的一个案例来试配置共享</p><h3 id="1）添加一个环境共享配置"><a href="#1）添加一个环境共享配置" class="headerlink" title="1）添加一个环境共享配置"></a>1）添加一个环境共享配置</h3><p>我们在nacos中添加一个userservice.yaml文件：</p><p><img src="/images/1690895544892-cc385f69-4b6e-40ab-a242-6ea4656f4ca4.png" alt="img"></p><h3 id="2）在user-service中读取共享配置"><a href="#2）在user-service中读取共享配置" class="headerlink" title="2）在user-service中读取共享配置"></a>2）在user-service中读取共享配置</h3><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p><p><img src="/images/1690895552669-64c2de4d-82fe-4981-81c0-5eb1cd5c9d1c.png" alt="img"></p><p>在user-service服务中，修改UserController，添加一个方法：</p><p><img src="/images/1690895569389-f555b391-1fd4-4478-acb5-48d683b8a2cf.png" alt="img"></p><h3 id="3）运行两个UserApplication，使用不同的profile"><a href="#3）运行两个UserApplication，使用不同的profile" class="headerlink" title="3）运行两个UserApplication，使用不同的profile"></a>3）运行两个UserApplication，使用不同的profile</h3><p>修改UserApplication2这个启动项，改变其profile值：</p><p><img src="/images/1690895576977-16983ccf-9cf6-47cc-bd48-31f711cc2917.png" alt="img"></p><p><img src="/images/1690895582888-de8e1419-8353-453c-b5d0-f349a974f25b.png" alt="img"></p><p><strong>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</strong></p><p>启动UserApplication和UserApplication2</p><p>访问<a href="http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8081/user/prop，结果：</a></p><p><img src="/images/1690895594901-1a6edb41-0f81-441f-82f5-547acbab4535.png" alt="img"></p><p>访问<a href="http://localhost:8082/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8082/user/prop，结果：</a></p><p><img src="/images/1690895602908-5aec34f6-ed24-4ca5-8c56-d7143ed76155.png" alt="img"></p><p><strong>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</strong></p><h3 id="4）配置共享的优先级"><a href="#4）配置共享的优先级" class="headerlink" title="4）配置共享的优先级"></a>4）配置共享的优先级</h3><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="/images/1690895615923-4fed6621-7aef-4232-a0ad-2c4928f93dbd.png" alt="img"></p><p>微服务会从nacos中读取的配置文件</p><p><img src="/images/1690896089100-ec91f164-8bb3-4f79-97d5-c3a4e09ddc2f.png" alt="img"></p><h2 id="搭建Nacos集群"><a href="#搭建Nacos集群" class="headerlink" title="搭建Nacos集群"></a>搭建Nacos集群</h2><h1 id="Feign远程调用"><a href="#Feign远程调用" class="headerlink" title="Feign远程调用"></a>Feign远程调用</h1><p><strong>代替RestTemplate调用</strong></p><h2 id="RestTmplate存在的问题及其Fegin的介绍"><a href="#RestTmplate存在的问题及其Fegin的介绍" class="headerlink" title="RestTmplate存在的问题及其Fegin的介绍"></a>RestTmplate存在的问题及其Fegin的介绍</h2><p>•代码可读性差，编程体验不统一</p><p>•参数复杂URL难以维护</p><p> <strong>Feign</strong>是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><p><strong>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</strong></p><h2 id="Fegin的使用"><a href="#Fegin的使用" class="headerlink" title="Fegin的使用"></a>Fegin的使用</h2><h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>我们在order-service服务的pom文件中引入feign的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）添加注解"><a href="#2）添加注解" class="headerlink" title="2）添加注解"></a>2）添加注解</h3><p>在order-service的启动类添加注解开启Feign的功能：</p><p><img src="/images/1690974178981-3b7523b4-2919-4451-815f-b97fd64f3462.png" alt="img"></p><h3 id="3）编写Feign的客户端"><a href="#3）编写Feign的客户端" class="headerlink" title="3）编写Feign的客户端"></a>3）编写Feign的客户端</h3><p>在order-service中新建一个接口，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li><strong>服务名称：userservice</strong></li><li><strong>请求方式：GET</strong></li><li><strong>请求路径：&#x2F;user&#x2F;{id}</strong></li><li><strong>请求参数：Long id</strong></li><li><strong>返回值类型：User</strong></li></ul><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p><h3 id="4）测试"><a href="#4）测试" class="headerlink" title="4）测试"></a>4）测试</h3><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p><p><img src="/images/1690974531904-f69db470-7f8b-44ca-ac0b-bb059aca4c45.png" alt="img"></p><h3 id="5）总结"><a href="#5）总结" class="headerlink" title="5）总结"></a>5）总结</h3><p><strong>使用Feign的步骤：</strong></p><p><strong>① 引入依赖</strong></p><p><strong>② 添加@EnableFe ignClients注解</strong></p><p><strong>③ 编写FeignClient接口</strong></p><p><strong>④ 使用FeignClient中定义的方法代替RestTemplate</strong></p><h2 id="Feign的自定义配置"><a href="#Feign的自定义配置" class="headerlink" title="Feign的自定义配置"></a>Feign的自定义配置</h2><p>Feign可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，<strong>如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</strong></p><p>一般我们也就改一改日志级别就可以了。</p><h3 id="修改日志级别"><a href="#修改日志级别" class="headerlink" title="修改日志级别"></a>修改日志级别</h3><ol><li><strong>通过配置文件的方式修改</strong></li></ol><p><strong>基于配置文件修改feign的日志级别可以针对单个服务：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feign:  </span><br><span class="line">  client:</span><br><span class="line">    config: </span><br><span class="line">      userservice: # 针对某个微服务的配置</span><br><span class="line">        loggerLevel: FULL #  日志级别 </span><br></pre></td></tr></table></figure><p><strong>所有的：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feign:  </span><br><span class="line">  client:</span><br><span class="line">    config: </span><br><span class="line">      <span class="keyword">default</span>: # 这里用<span class="keyword">default</span>就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span><br><span class="line">        loggerLevel: FULL #  日志级别 </span><br></pre></td></tr></table></figure><p>而<strong>日志的级别分为四种：</strong></p><ul><li><strong>NONE：不记录任何日志信息，这是默认值。</strong></li><li><strong>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</strong></li></ul><p>最基本的只有请求 和 响应</p><p><img src="/images/1690975697515-8eced3aa-cd0c-4f2a-a4e5-46a3946064a6.png" alt="img"></p><ul><li><strong>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</strong></li><li><strong>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据</strong></li></ul><ol><li><strong>通过Java代码的方式修改</strong></li></ol><p>先声明一个类，然后声明一个Logger.Level的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class DefaultFeignConfiguration  &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Logger.Level feignLogLevel()&#123;</span><br><span class="line">        return Logger.Level.BASIC; // 日志级别为BASIC</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果要全局生效，将其放到启动类的<span class="meta">@EnableFeignClients</span>这个注解中：</span><br><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br><span class="line">如果是局部生效，则把它放到对应的<span class="meta">@FeignClient</span>这个注解中：</span><br><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Feign使用优化"><a href="#Feign使用优化" class="headerlink" title="Feign使用优化"></a>Feign使用优化</h3><p><strong>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</strong></p><p><strong>•URLConnection</strong>：默认实现，不支持连接池</p><p>•<strong>Apache HttpClient ：</strong>支持连接池</p><p>•<strong>OKHttp</strong>：支持连接池</p><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p><h3 id="优化实例：例如Apache的HttpClient"><a href="#优化实例：例如Apache的HttpClient" class="headerlink" title="优化实例：例如Apache的HttpClient"></a>优化实例：例如Apache的HttpClient</h3><ol><li><strong>引入依赖</strong></li></ol><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--httpClient的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>配置连接池</strong></li></ol><p>在order-service的application.yml中添加配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  client:</span><br><span class="line">    config:</span><br><span class="line">      default: # default全局的配置</span><br><span class="line">        loggerLevel: BASIC # 日志级别，BASIC就是基本的请求和响应信息</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true # 开启feign对HttpClient的支持</span><br><span class="line">    max-connections: 200 # 最大的连接数</span><br><span class="line">    max-connections-per-route: 50 # 每个路径的最大连接数</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li><strong>日志级别尽量用basic</strong></li><li><strong>使用HttpClient或OKHttp代替URLConnection</strong></li></ol><p><strong>① 引入feign-httpClient依赖</strong></p><p><strong>② 配置文件开启httpClient功能，设置连接池参数</strong></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p><p>Feign客户端：</p><p><img src="/images/1690976608389-ad2ca134-adbb-45a7-b75a-2ca27865dab2.png" alt="img"></p><p>UserController：</p><p><img src="/images/1690976618698-a4311378-3c23-4ad2-bef5-d2f84128ec4f.png" alt="img"></p><p>这样高度耦合的代码我们如何简化呢？ </p><h3 id="方法1：-继承方式"><a href="#方法1：-继承方式" class="headerlink" title="方法1： 继承方式"></a>方法1： 继承方式</h3><p><strong>一样的代码可以通过继承来共享：</strong></p><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都集成改接口</p><p><img src="/images/1690976695339-5ae2807e-8967-40c9-8033-a77525729d18.png" alt="img"><br> <strong>优点：</strong></p><ul><li>简单</li><li>实现了代码共享</li></ul><p><strong>缺点：</strong></p><ul><li>服务提供方、服务消费方紧耦合</li><li>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</li></ul><h3 id="方法2：-抽取方式"><a href="#方法2：-抽取方式" class="headerlink" title="方法2： 抽取方式"></a>方法2： 抽取方式</h3><p><strong>将Feign的Client抽取为独立模块</strong>，并且<strong>把接口有关的POJO、默认的Feign配置都放到这个模块中</strong>，<strong>提供给所有消费者使用</strong>。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="/images/1690976757737-304ae453-08f2-4f76-95e7-434f16415644.png" alt="img"></p><h2 id="基于抽取的方式实现耦合代码的合并"><a href="#基于抽取的方式实现耦合代码的合并" class="headerlink" title="基于抽取的方式实现耦合代码的合并"></a>基于抽取的方式实现耦合代码的合并</h2><h4 id="1）抽取"><a href="#1）抽取" class="headerlink" title="1）抽取"></a>1）抽取</h4><p>首先创建一个module，命名为feign-api</p><p>项目结构：</p><p><img src="/images/1690976821105-dce73b02-bf19-4ae9-b002-d25e3e9ff43a.png" alt="img"></p><p>在feign-api中然后引入feign的starter依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p><img src="/images/1690976833791-10ed3042-94f6-4f88-ae76-11340915bd3d.png" alt="img"></p><h4 id="2）在order-service中使用feign-api"><a href="#2）在order-service中使用feign-api" class="headerlink" title="2）在order-service中使用feign-api"></a>2）在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p><p>在order-service的pom文件中中引入feign-api的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.itcast.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p><h4 id="3）重启测试"><a href="#3）重启测试" class="headerlink" title="3）重启测试"></a>3）重启测试</h4><p>重启后，发现服务报错了：</p><p><img src="/images/1690976892029-f0845c46-fb63-4376-b59e-46e2469cec87.png" alt="img"></p><p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p><p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p><h4 id="4）解决扫描包问题"><a href="#4）解决扫描包问题" class="headerlink" title="4）解决扫描包问题"></a>4）解决扫描包问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">指定Feign应该扫描的包：</span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br><span class="line">方式二：</span><br><span class="line">指定需要加载的Client接口（FeignClient的字节码）：</span><br><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure><p><img src="/images/1690978760000-2e724e83-010e-4c88-88e0-41d1f6596503.png" alt="img"></p><h1 id="Gateway服务网关"><a href="#Gateway服务网关" class="headerlink" title="Gateway服务网关"></a>Gateway服务网关</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可靠数据传输(Rdt)的原理</title>
      <link href="/post/84f702e5.html"/>
      <url>/post/84f702e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="可靠数据传输（rdt）的原理★★-★-★-★"><a href="#可靠数据传输（rdt）的原理★★-★-★-★" class="headerlink" title="可靠数据传输（rdt）的原理★★ ★ ★ ★"></a>可靠数据传输（rdt）的原理★★ ★ ★ ★</h1><p><strong>background：</strong> </p><blockquote><p> <strong>rdt在应用层、传输层和数据链路层都很重要</strong>  </p><p> 是网络Top 10问题之一  </p><p> 信道的不可靠特点决定了可靠数据传输协议（ rdt ）的复杂性  </p></blockquote><h3 id="rdt所要面临的问题-也是人面临的问题-："><a href="#rdt所要面临的问题-也是人面临的问题-：" class="headerlink" title="rdt所要面临的问题(也是人面临的问题) ："></a>rdt所要面临的问题(也是人面临的问题) ：</h3><p><strong>&#x3D;&#x3D;在下层提供的服务不可靠的情况下， 本层的协议机制、协议实体要通过哪些时空资源的安排、要靠哪些机制的安排，要向上层提供可靠的服务。&#x3D;&#x3D;</strong></p><p><img src="/post/84f702e5/1690596858638-d70e0117-6ccb-476f-8d7c-1b7eb006b9ad.png" alt="img"></p><h2 id="可靠数据传输：-问题描述"><a href="#可靠数据传输：-问题描述" class="headerlink" title="可靠数据传输： 问题描述"></a>可靠数据传输： 问题描述</h2><p><img src="/post/84f702e5/1690596147186-7b48421c-4301-4e15-b1ed-382bd84f25f7.png" alt="img"></p><p>图片中的</p><p><strong>rdt_send() 和 deliver_data( ) 是本层和上层的接口</strong></p><p><strong>udt_send()  和 udt_rcv( ) 是本层协议实体 跟下层的原语的形式</strong></p><blockquote><p>原语：上层使用下层服务的形式</p></blockquote><p><strong>底层的可靠性与否决定了上层rdt的复杂性。</strong></p><p>逻辑的理解过程： </p><ol><li><strong>渐增式地开发可靠数据传输协议（ rdt ）的发送方和接收方</strong></li><li>只考虑<strong>单向数据传输</strong> - 但控制信息是双向流动的！</li><li>双向的数据传输问题实际上是2个单向数据传输问题的综合</li><li>使用<strong>有限状态机 (FSM)</strong> [描述协议工作状态的转移之类的]来描述发送方和接收方</li></ol><p><img src="/post/84f702e5/1690597396649-94a4d134-b349-47e2-b8f7-277b5e53bf8d.png" alt="img"></p><h2 id="Rdt1-0：-在可靠信道上的可靠数据传输"><a href="#Rdt1-0：-在可靠信道上的可靠数据传输" class="headerlink" title="Rdt1.0： 在可靠信道上的可靠数据传输"></a>Rdt1.0： 在可靠信道上的可靠数据传输</h2><ol><li><strong>下层的信道是完全可靠的</strong></li></ol><ul><li>没有比特出错</li><li>没有分组丢失</li></ul><ol><li><strong>发送方和接收方的FSM</strong></li></ol><ul><li>发送方将数据发送到下层信道</li><li>接收方从下层信道接收数据</li></ul><p><img src="/post/84f702e5/1690596299844-129f6445-9ae4-4874-95d4-8a6f1f68f81f.png" alt="img"></p><ol><li>发送方发送package</li><li>接收方接收后，校验是否出错， 如果不出错那么就发送一个<strong>控制报文（ACK），</strong>发送方就不用做什么了</li><li>如果出错， 那么就发送一个<strong>控制报文（NCK）,</strong> 然后发送方再将副本传输过去（检错重传）</li></ol><h2 id="Rdt2-0：具有比特差错的信道"><a href="#Rdt2-0：具有比特差错的信道" class="headerlink" title="Rdt2.0：具有比特差错的信道"></a>Rdt2.0：具有比特差错的信道</h2><p>Rdt1.0 的问题 ：</p><ul><li>下层信道可能会出错：将分组中的比特翻转 。可以用校验和来检测比特 差错  </li><li>怎样从差错中恢复：</li></ul><p><strong>Rdt2.0 的改进：</strong> </p><p> <strong>采用差错控制编码进行差错检测</strong>  </p><ol><li>发送方差错控制编码、缓存 </li><li>接收方使用编码检错</li><li>接收方的反馈：<strong>控制报文（ACK，NAK）</strong>：接收方-&gt;发送方 </li><li>发送方收到反馈相应的动作</li></ol><h3 id="有限状态机（FSM）描述："><a href="#有限状态机（FSM）描述：" class="headerlink" title="有限状态机（FSM）描述："></a><strong>有限状态机（</strong>FSM）描述：</h3><p><img src="/post/84f702e5/1690596446675-835e3e36-cbdc-4e39-b5e9-81cfb27fb77d.png" alt="img"></p><ol><li>发送方发送package</li><li>接收方接收后，校验是否出错， 如果不出错那么就发送一个<strong>控制报文（ACK），</strong>发送方就不用做什么了</li><li>如果出错， 那么就发送一个<strong>控制报文（NCK）,</strong> 然后发送方再将副本传输过去（检错重传）</li></ol><h3 id="Rdt2-0：-没有差错时的操作"><a href="#Rdt2-0：-没有差错时的操作" class="headerlink" title="Rdt2.0： 没有差错时的操作"></a>Rdt2.0： 没有差错时的操作</h3><p><img src="/post/84f702e5/1690598581363-25a4195b-6bb4-4c79-9e90-d2f511928c9e.png" alt="img"></p><h3 id="rdt2-0：有差错时"><a href="#rdt2-0：有差错时" class="headerlink" title="rdt2.0：有差错时"></a>rdt2.0：有差错时</h3><p><img src="/post/84f702e5/1690598586724-9f69db14-1b7c-4f8b-aa5e-5e723cc02f71.png" alt="img"></p><h2 id="rdt2-0的致命缺陷！-gt-rdt2-1"><a href="#rdt2-0的致命缺陷！-gt-rdt2-1" class="headerlink" title="rdt2.0的致命缺陷！-&gt; rdt2.1"></a>rdt2.0的致命缺陷！-&gt; rdt2.1</h2><h3 id="如果ACK-x2F-NAK出错？发送方该如何？"><a href="#如果ACK-x2F-NAK出错？发送方该如何？" class="headerlink" title="如果ACK&#x2F;NAK出错？发送方该如何？"></a>如果ACK&#x2F;NAK出错？发送方该如何？</h3><blockquote><p> 发送方不知道接收方发 生了什么事情！  然后也不知道如果操作</p></blockquote><p><strong>如何处理：</strong> </p><p> <strong>引入新的机制 ： 序号 （有点麻烦，因为要发送两次确认是否重复）</strong></p><ol><li>发送方在每个分组中加 入序号 </li><li>如果ACK&#x2F;NAK出错，<strong>发送方重传当前分组</strong> </li><li>接收方丢弃（不发给上 层）重复分组</li></ol><p>如果发送方出错 ：</p><p><img src="/post/84f702e5/1690598783706-5f9ca1eb-844f-472c-b794-8927c94f4da9.png" alt="img"></p><p> <strong>停止等待协议：</strong> <strong>发送方发送一个分组， 然后等待接收方的关于这个分组的应答</strong>  </p><h3 id="如果ACK-x2F-NAK出错，接收方如何处理？"><a href="#如果ACK-x2F-NAK出错，接收方如何处理？" class="headerlink" title="如果ACK&#x2F;NAK出错，接收方如何处理？"></a>如果ACK&#x2F;NAK出错，接收方如何处理？</h3><p> <strong>必须检测接收到的分组 是否是重复的</strong>  </p><blockquote><p><strong>注意：接收方并不知道 发送方是否正确收到了 其ACK&#x2F;NAK</strong>  </p></blockquote><p> <strong>发送方：</strong></p><ul><li><p>在分组中加入序列号</p></li><li><p><strong>两个序列号（0，1）</strong>就 足够了 </p></li><li><ul><li>一次只发送一个未经确认的分组</li></ul></li><li><p>必须检测ACK&#x2F;NAK是否 出错（需要EDC ）</p></li><li><p>状态数变成了两倍 </p></li><li><ul><li>必须记住当前分组的序列 号为0还是1</li></ul></li></ul><p><strong>接收方：</strong> </p><p> 必须检测接收到的分组 是否是重复的  </p><ul><li>状态会指示希望接收到的 分组的序号为0还是1</li></ul><blockquote><p>注意：接收方并不知道 发送方是否正确收到了 其ACK&#x2F;NAK</p><p>没有安排确认的确认  </p></blockquote><p><img src="/post/84f702e5/1690598872663-4a361820-98fd-44c2-9f17-e2ee95546a9e.png" alt="img"></p><p>如果说本次发送出错了 。然后接收方就给出 nak， 但是发送方没有停止等待继续发送错误的，因为要实现重复校验， 所以发送方将下一次的data发送过去了 ，结果就是接收方需要0 ， 但是你发送了个1。</p><p><strong>所以 上述的问题还是难以解决。我们就需要引入2.2</strong></p><h2 id="rdt2-1的运行"><a href="#rdt2-1的运行" class="headerlink" title="rdt2.1的运行"></a>rdt2.1的运行</h2><p><img src="/post/84f702e5/1690598936621-f8c50493-50dc-4ec8-b5ef-2433f188d613.png" alt="img"></p><p> 接收方不知道它最后发送的ACK&#x2F;NAK是否被正确地收到  </p><ul><li><p>发送方不对收到的ack&#x2F;nak给确认，没有所谓的确认的确认；</p></li><li><p><strong>接收方发送ack，如果后面接收方收到的是：</strong>    </p></li><li><ul><li><strong>老分组p0？则ack 错误</strong> </li><li><strong>下一个分组？P1，ack正确</strong></li></ul></li></ul><h2 id="rdt2-2：无NAK的协议"><a href="#rdt2-2：无NAK的协议" class="headerlink" title="rdt2.2：无NAK的协议"></a>rdt2.2：无NAK的协议</h2><ul><li><p>*<em>功能同rdt2.1，但只使用ACK(<strong><strong>ack 要编号</strong></strong>）</em>*</p></li><li><p><strong>接收方对最后正确接收的分组发ACK，以替代NAK</strong></p></li><li><p>接收方必须显式地包含被正确接收分组的序号</p></li><li><p>当收到重复的ACK（如：再次收到ack0）时，发送 方与收到NAK采取相同的动作：重传当前分组</p></li><li><p><strong>为后面的一次发送多个数据单位做一个准备</strong></p></li><li><ul><li>一次能够发送多个</li><li>每一个的应答都有：ACK，NACK；麻烦</li><li>使用对前一个数据单位的ACK，代替本数据单位的nak</li><li>确认信息减少一半，协议处理简单</li></ul></li></ul><p><img src="/post/84f702e5/1690600314902-6ecfa495-a41b-4ee9-bb27-219dc69d062e.png" alt="img"></p><p>&#x3D;&#x3D;<strong>就相当于如果出现错误， 接收方不返回NCK， 而是返回上一次的ACK。(<strong>你要这次的结果， 但是这次的结果是出错的。 所以我只能返回你上一次的正确结果咯。 所以由于停止等待协议， 这次的结果没有返回，那么就得重新放， 知道返回本次得ACK</strong>)</strong>&#x3D;&#x3D;</p><h3 id="rdt2-2的运行"><a href="#rdt2-2的运行" class="headerlink" title="rdt2.2的运行"></a>rdt2.2的运行</h3><p><img src="/post/84f702e5/1690600676105-e7cd653d-60fe-4aaa-930a-a797e16cf405.png" alt="img"></p><p><img src="/post/84f702e5/1690600689762-fb372aed-223d-475c-8fa6-19f8e85cff33.png" alt="img"></p><h3 id="rdt2-2bug：发送方和接收方片断"><a href="#rdt2-2bug：发送方和接收方片断" class="headerlink" title="rdt2.2bug：发送方和接收方片断"></a>rdt2.2bug：发送方和接收方片断</h3><p><img src="/post/84f702e5/1690600727082-da657206-32c8-426a-8c10-fffec28a33a9.png" alt="img"></p><h2 id="rdt3-0：具有比特差错和分组丢失的信道"><a href="#rdt3-0：具有比特差错和分组丢失的信道" class="headerlink" title="rdt3.0：具有比特差错和分组丢失的信道"></a>rdt3.0：具有比特差错和分组丢失的信道</h2><p> <strong>新的假设：下层信道可 能会丢失分组（数据 或ACK）</strong>  </p><ul><li>会死锁</li><li>机制还不够处理这种 状况：   • 检验和 • 序列号 • ACK • 重传</li></ul><p><strong>超时重传机制：</strong> </p><p> <strong>方法：发送方等待ACK一段 合理的时间</strong>  </p><blockquote><p><strong>链路层的timeout时间确定的 传输层timeout时间是适应式的</strong>  </p></blockquote><ul><li><p><strong>发送端超时重传：如果到时没有 收到ACK-&gt;重传</strong></p></li><li><p><strong>问题：</strong>如果分组（或ACK ）只 是被延迟了： </p></li><li><ul><li>重传将会导致数据重复，但 利用序列号已经可以处理这 个问题</li><li>接收方必须指明被正确接收 的序列号</li></ul></li><li><p>需要一个倒计数定时器</p></li></ul><p><img src="/post/84f702e5/1690600991494-47c065c8-b0cc-44a3-b536-1acf7fa9fcf1.png" alt="img"></p><p><strong>之前得2.0 我们知道</strong></p><p><strong>(<strong>你要这次的结果， 但是这次的结果是出错的。 所以我只能返回你上一次的正确结果咯。 所以由于停止等待协议， 这次的结果没有返回，那么就得重新放， 知道返回本次得ACK</strong>)</strong></p><p><strong>对于3.0 来说 ，他不会立马就重放本次结果， 他会等待不同（等着超时定时器的启动） 。超时定时器启动之后就会将再一个时间段内重放本次。</strong></p><blockquote><p><strong>相对2.0 来说就是反应慢了点而已，其他没啥了</strong></p></blockquote><h3 id="rdt3-0的运行"><a href="#rdt3-0的运行" class="headerlink" title="rdt3.0的运行"></a>rdt3.0的运行</h3><p><img src="/post/84f702e5/1690601008793-ca4ed59f-fcc4-4d91-8371-0ff6306a8cc8.png" alt="img"></p><p><strong>（c）超时定时器丢失</strong></p><p><strong>（d）情况就是超时计数器设置不合理</strong></p><p><img src="/post/84f702e5/1690601023384-cfe176f3-c843-457c-8df8-7b05d278ee5f.png" alt="img"> </p><h2 id="rdt3-0的性能"><a href="#rdt3-0的性能" class="headerlink" title="rdt3.0的性能"></a>rdt3.0的性能</h2><p><strong>rdt3.0可以工作，但链路容量比较大的情况下，性能很差</strong>  </p><ul><li>链路容量比较大，一次发一个PDU 的不能够充分利用链路的传输能力</li></ul><p>例题</p><p><img src="/post/84f702e5/1690601887470-a975a126-79ba-4756-a710-f5bf67f0ab2a.png" alt="img"></p><p><strong>上述也就是 99%的时间都是空的 ， 只有 0.00027%的时间才是在干正事。可想而知利用率是非常非常低的。</strong></p><h3 id="停等操作"><a href="#停等操作" class="headerlink" title="停等操作"></a>停等操作</h3><p><img src="/post/84f702e5/1690602080008-26860dd9-c784-404c-b74e-2d5f38a5adc7.png" alt="img"></p><p>停止等待协议 在局域网的场景下（往返反应是比较低 ，容量较小）一次发一个。</p><p>但是如果是长途的链路（链路容量非常大），此时一次只发送一个那么就是杀鸡用牛刀，且非常低效。那么就需要一次发送多个未经确认的分组。而且需要对这个分组做一个长比特的编号。 （这样才能区分不同的分组）。—<strong>-这种能一次发送多个未确认分组的协议叫流水线协议</strong></p><h3 id="流水线：提高链路利用率"><a href="#流水线：提高链路利用率" class="headerlink" title="流水线：提高链路利用率"></a>流水线：提高链路利用率</h3><p><img src="/post/84f702e5/1690602132208-da13fd7e-191f-490e-aff7-e924de2952e1.png" alt="img"></p><h2 id="流水线协议—（提高链路利用率）"><a href="#流水线协议—（提高链路利用率）" class="headerlink" title="流水线协议—（提高链路利用率）"></a>流水线协议—（提高链路利用率）</h2><blockquote><p>作为一个缓冲区： </p><p>目的是 发送方 发送的速率 和 接收方接收的速率是不一致的。</p><p>需要有一个缓冲来对抗这两者的速度不一致性。（就像从高速公路到市里的路段 需要过一个安检口一样）</p><p>我们<strong>把一次能够发送多个未经确认分组的协议叫做流水线协议</strong></p></blockquote><p><strong>流水线：允许发送方在未得到对方确认的情况下一次发送多个 分组</strong> </p><ul><li><p><strong>必须增加序号的范围:用多个bit表示分组的序号</strong></p></li><li><p><strong>在发送方&#x2F;接收方要有缓冲区</strong> </p></li><li><ul><li>• 发送方缓冲：未得到确认，可能需要重传；</li><li>• 接收方缓存：上层用户取用数据的速率≠接收到的数据速率；接收到的数据可 能乱序，排序交付（可靠）</li></ul></li></ul><p><img src="/post/84f702e5/1690602967581-34c222d7-99b1-42f4-8d51-e6359fbd4c52.png" alt="img"></p><blockquote><p>两种通用的流水线协议：<strong>回退N步(GBN)和选择重传(SR)</strong>  </p></blockquote><h3 id="通用：滑动窗口-slide-window-协议"><a href="#通用：滑动窗口-slide-window-协议" class="headerlink" title="通用：滑动窗口(slide window)协议"></a>通用：滑动窗口(slide window)协议</h3><p>发送方和接收方的窗口不一致。</p><ol><li><strong>发送缓冲区</strong></li></ol><ul><li>形式：内存中的一个区域，落入缓冲区的分组可以发送 </li><li>功能：用于存放已发送，但是没有得到确认的分组 </li><li>必要性：需要超时重发时可用</li></ul><ol><li><strong>发送缓冲区的大小：一次最多可以发送多少个未经确认的分组（上限）</strong></li></ol><ul><li>停止等待协议&#x3D;1</li><li>流水线协议 &gt; 1，合理的值，不能很大，链路利用率不能够超100%</li></ul><ol><li><strong>发送缓冲区中的分组</strong></li></ol><ul><li>未发送的：落入发送缓冲区的分组，可以连续发送出去； </li><li>已经发送出去的、等待对方确认的分组：发送缓冲区的分组只有得到确认 才能删除</li></ul><p> <strong>发送窗口滑动过程-相对表示方法</strong> </p><ul><li><strong>采用相对移动方式表示，分组不动</strong> </li><li><strong>可缓冲范围移动，代表一段可以发送的权力</strong></li></ul><p><img src="/post/84f702e5/1690603093451-74522bee-c768-4cdb-bd15-84bd76a8542e.png" alt="img"></p><blockquote><p> 图中的粉红色就是一个已发送但是未确认的窗口，两三个连在一块就构成了这个发送缓冲窗口的范围。</p></blockquote><ul><li><p><strong>&#x3D;&#x3D;发送窗口&#x3D;&#x3D;：发送缓冲区内容的一个范围</strong> </p></li><li><ul><li>&#x3D;&#x3D;那些<strong>已发送但是未经确认分组</strong>的序号构成的空间&#x3D;&#x3D;</li></ul></li><li><p>发送窗口的最大值&lt;&#x3D;发送缓冲区的值</p></li><li><p><strong>一开始：没有发送任何一个分组</strong></p></li><li><ul><li>后沿&#x3D;前沿 </li><li>之间为发送窗口的尺寸&#x3D;0</li></ul></li><li><p><strong>每发送一个分组，前沿前移一个单位</strong></p></li></ul><p><img src="/post/84f702e5/1690603167284-95f0ec63-55b2-46e5-9cdc-5fb726183a4d.png" alt="img"></p><p> <strong>发送窗口前沿移动的极限：不能够超过发送缓冲区</strong>  </p><p><img src="/post/84f702e5/1690603942569-9a3b92a7-d994-4836-8877-c5a4b832ff54.png" alt="img"><img src="/post/84f702e5/1690603987028-9fb9070e-0222-43cc-a9fb-0e1bea9bccfc.png" alt="img"></p><p> <strong>发送窗口后沿移动  就是发送窗口的移动</strong></p><ul><li><strong>条件：收到老分组的确认</strong></li><li><strong>结果：发送缓冲区罩住新的分组，来了分组可以发送</strong></li><li><strong>移动的极限：不能够超过前沿</strong></li></ul><p><img src="/post/84f702e5/1690604039564-4c785e3c-8c16-40ec-b5f4-b04ea52d6e52.png" alt="img"></p><p><img src="/post/84f702e5/1690604075258-b565100c-f3e9-4823-b051-32b3f1ee8434.png" alt="img"></p><h3 id="发送窗口的滑动"><a href="#发送窗口的滑动" class="headerlink" title="发送窗口的滑动"></a>发送窗口的滑动</h3><p>还得多听几遍： </p><p><a href="https://www.bilibili.com/video/BV1JV411t7ow/?p=26&spm_id_from=pageDriver&vd_source=fbbe87e6ad798358722a945dd1377672">https://www.bilibili.com/video/BV1JV411t7ow/?p=26&amp;spm_id_from=pageDriver&amp;vd_source=fbbe87e6ad798358722a945dd1377672</a>    【1：27分处】</p><ol><li>发送滑动窗口</li></ol><p><img src="/post/84f702e5/1690604127263-be43149a-2a72-4bd7-aaa7-9cf73114e237.png" alt="img"></p><p><strong>接收窗口 (receiving window)&#x3D;接收缓冲区</strong> </p><p><strong>接收窗口用于控制哪些分组可以接收；</strong> </p><p>• 只有收到的分组序号落入接收窗口内才允许接收 </p><p>• 若序号在接收窗口之外，则丢弃； </p><p><strong>接收窗口尺寸Wr&#x3D;1，则只能顺序接收；</strong></p><p><strong>接收窗口尺寸Wr&gt;1 ，则可以乱序接收</strong> </p><p>• 但提交给上层的分组，要按序  </p><p><img src="/post/84f702e5/1690604206019-6407264e-b8c4-4a07-af27-ff4f1f2782b0.png" alt="img"></p><h3 id="接收滑动窗口"><a href="#接收滑动窗口" class="headerlink" title="接收滑动窗口"></a>接收滑动窗口</h3><p><strong>接收窗口的滑动和发送确认</strong></p><p><strong>滑动：</strong> </p><p>• 低序号的分组到来，接收窗口移动； </p><p>• 高序号分组乱序到，缓存但不交付（因为要实现rdt，不允许失序），不滑动 </p><p><strong>发送确认：</strong> </p><p>• 接收窗口尺寸&#x3D;1 ； 发送连续收到的最大的分组确认（累计确认） </p><p>• 接收窗口尺寸&gt;1 ； 收到分组，发送那个分组的确认（非累计确认  <img src="/post/84f702e5/1690604325590-de134e90-18ac-449c-84a2-19f54b301fdd.png" alt="img"></p><p><img src="/post/84f702e5/1690604341016-a9478ec0-ec02-466d-b19a-cb3118b8f052.png" alt="img"></p><h3 id="正常情况下的2个窗口互动"><a href="#正常情况下的2个窗口互动" class="headerlink" title="正常情况下的2个窗口互动"></a>正常情况下的2个窗口互动</h3><p><strong>发送窗口</strong></p><ul><li>有新的分组落入发送缓冲区范围，发送-&gt;前沿滑动 </li><li>来了老的低序号分组的确认-&gt;后沿向前滑动-&gt;新的分组可以落入发送缓冲区的范围</li></ul><p><strong>接收窗口</strong></p><ul><li>收到分组，落入到接收窗口范围内，接收</li><li>由于是低序号 ，所以发送确认给对方</li></ul><p><strong>发送端上面来了分组-&gt;发送窗口滑动-&gt;接收窗口滑动-&gt;发确认</strong>  </p><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="异常情况下GBN-一种协议-的2窗口互动"><a href="#异常情况下GBN-一种协议-的2窗口互动" class="headerlink" title="异常情况下GBN(一种协议)的2窗口互动"></a>异常情况下GBN(一种协议)的2窗口互动</h3><p>异常情况的说明： </p><blockquote><ol><li>传输的分组在传输过程中出现了错误或者丢失</li><li>接收方给的ACK 确认没有给到发送方</li></ol></blockquote><p> <strong>发送窗口</strong> </p><ul><li>新分组落入发送缓冲区范围，发送-&gt;前沿滑动 </li><li>超时重发机制让发送端将发送窗口中的所有分组发送出去</li><li>来了老分组的重复确认-&gt;后沿不向前滑动-&gt;新的分组无法 落入发送缓冲区的范围（此时如果发送缓冲区有新的分组 可以发送）</li></ul><p><strong>接收窗口</strong> </p><ul><li>收到乱序分组，没有落入到接收窗口范围内，抛弃</li><li>（重复）发送老分组的确认，累计确认；</li></ul><h3 id="异常情况下SR（一种协议）的2窗口互动"><a href="#异常情况下SR（一种协议）的2窗口互动" class="headerlink" title="异常情况下SR（一种协议）的2窗口互动"></a>异常情况下SR（一种协议）的2窗口互动</h3><p>异常说明 ：</p><blockquote><p> 分组是乱序的到达接收方。</p></blockquote><p><strong>发送窗口</strong> </p><p>每发送一个，发送方就需要启动一个超时定时器， 哪个倒是就重新发送那个</p><ul><li>新分组落入发送缓冲区范围，发送-&gt;前沿滑动 </li><li><strong>超时重发机制让发送端将超时的分组重新发送出去</strong></li><li>来了乱序分组的确认-&gt;后沿不向前滑动-&gt;新的分组无法落 入发送缓冲区的范围（此时如果发送缓冲区有新的分组可 以发送）</li></ul><p><strong>接收窗口</strong></p><ul><li>收到乱序分组，落入到接收窗口范围内，接收。 然后关闭定时超时计数器</li><li>发送该分组的确认，单独确认；</li></ul><h3 id="GBN协议和SR协议的异同"><a href="#GBN协议和SR协议的异同" class="headerlink" title="GBN协议和SR协议的异同"></a>GBN协议和SR协议的异同</h3><p><strong>不同之处：</strong> </p><ul><li><strong>&#x3D;&#x3D;SR协议 大致就是那个分组超时了 ， 就单独发送那个分组。而GBN协议 则是， 如果某个分组超时了， 会将它的滑动窗口中的所有已发送、未发送的分组全部重新发送一边&#x3D;&#x3D;</strong></li></ul><p><strong>相同之处:</strong></p><ul><li><strong>发送窗口&gt;1</strong> </li><li><strong>一次能够可发送多个 未经确认的分组</strong></li></ul><h2 id="流水线协议：总结★★★★"><a href="#流水线协议：总结★★★★" class="headerlink" title="流水线协议：总结★★★★"></a>流水线协议：总结★★★★</h2><h3 id="Go-back-N-协议："><a href="#Go-back-N-协议：" class="headerlink" title="Go-back-N  协议："></a>Go-back-N  协议：</h3><ul><li><p><strong>发送端最多在流水线 中有N个未确认的分 组</strong> </p></li><li><p><strong>接收端只是发送累计 型确认cumulative ack</strong></p></li><li><ul><li>接收端如果发现gap， 不确认新到来的分组</li></ul></li><li><p><strong>发送端拥有对最老的 未确认分组的定时器</strong></p></li><li><ul><li>只需设置一个定时器 </li><li>当定时器到时时，重 传所有未确认分组</li></ul></li></ul><h4 id="GBN：发送方扩展的FSM"><a href="#GBN：发送方扩展的FSM" class="headerlink" title="GBN：发送方扩展的FSM"></a>GBN：发送方扩展的FSM</h4><p><img src="/post/84f702e5/1690606083987-222880d4-a559-41e6-bf1e-d67aa1c4774c.png" alt="img"></p><h4 id="GBN：接收方扩展的FSM"><a href="#GBN：接收方扩展的FSM" class="headerlink" title="GBN：接收方扩展的FSM"></a>GBN：接收方扩展的FSM</h4><p><img src="/post/84f702e5/1690606105945-b05201cf-82ee-4ca0-8311-3b59e0b82225.png" alt="img"></p><p><strong>只发送ACK：对顺序接收的最高序号的分组</strong></p><ul><li>可能会产生重复的ACK </li><li>只需记住expectedseqnum；接收窗口&#x3D;1</li></ul><p>• 只一个变量就可表示接收窗口 </p><p><strong>对乱序的分组：</strong> </p><ul><li>丢弃（不缓存）</li><li>在接收方不被缓存！ </li><li>对顺序接收的最高序号的分组进行确认-累计确认</li></ul><h4 id="运行中的GBN★★★★★★"><a href="#运行中的GBN★★★★★★" class="headerlink" title="运行中的GBN★★★★★★"></a>运行中的GBN★★★★★★</h4><p>这个图再加上老师的讲解 基本可以透彻的理解一丝了。</p><p><img src="/post/84f702e5/1690606181783-f64ee393-5d15-4b85-9395-4c0e970888a2.png" alt="img"></p><h4 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h4><p><img src="/post/84f702e5/1690606294758-c807559f-cb70-429a-ae10-31471a610cf5.png" alt="img"></p><h3 id="Selective-Repeat-协议"><a href="#Selective-Repeat-协议" class="headerlink" title="Selective Repeat 协议"></a>Selective Repeat 协议</h3><ul><li><p>发送端最多在流水线中 有N个未确认的分组 </p></li><li><p>接收方对每个到来的分 组单独确认<strong>individual ack（非累计确认）</strong> </p></li><li><p><strong>发送方为每个未确认的 分组保持一个定时器</strong> </p></li><li><ul><li>当超时定时器到时，只是 重发到时的未确认分组</li></ul></li></ul><h4 id="选择重传SR"><a href="#选择重传SR" class="headerlink" title="选择重传SR"></a>选择重传SR</h4><ol><li><strong>接收方对每个正确接收的分组，分别发送 ACKn（非累积确认）</strong></li></ol><ul><li>接收窗口&gt;1     • 可以缓存乱序的分组 </li><li>最终将分组按顺序交付给上层</li></ul><ol><li><strong>发送方只对那些没有收到ACK的分组进行重 发-选择性重发</strong></li></ol><ul><li>发送方为每个未确认的分组设定一个定时器</li></ul><ol><li><strong>发送窗口的最大值（发送缓冲区）限制发送 未确认分组的个数</strong></li></ol><h4 id="选择重传SR的运行★★★★★★"><a href="#选择重传SR的运行★★★★★★" class="headerlink" title="选择重传SR的运行★★★★★★"></a>选择重传SR的运行★★★★★★</h4><p>这个图再加上老师的讲解 基本也可以透彻的理解一丝了。</p><p><img src="/post/84f702e5/1690606318930-82aba626-86ca-47f3-b8a9-5b4144853f7a.png" alt="img"></p><h3 id="对比GBN和SR"><a href="#对比GBN和SR" class="headerlink" title="对比GBN和SR"></a>对比GBN和SR</h3><p><img src="/post/84f702e5/1690606349046-8b216429-7771-4911-ad54-bccead0958c9.png" alt="img"></p><p> <strong>适用范围</strong>  </p><ul><li><strong>出错率低：比较适合GBN，出错非常罕见，没有必 要用复杂的SR，为罕见的事件做日常的准备和复杂 处理</strong> </li><li><strong>链路容量大（延迟大、带宽大）：比较适合SR而不 是GBN，一点出错代价太大</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层Stu</title>
      <link href="/post/7985ef27.html"/>
      <url>/post/7985ef27.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述和传输层服务"><a href="#概述和传输层服务" class="headerlink" title="概述和传输层服务"></a>概述和传输层服务</h1><blockquote><p>本章学习的重点： </p><ol><li>理解传输层的工作原理<ol><li>多路复用&#x2F;解复用 </li><li>可靠数据传输</li><li>流量控制 (发送方和接收方的问题)</li><li>拥塞控制</li></ol></li><li>学习Internet的传输层协议<ol><li>UDP：无连接传输</li><li>TCP：面向连接的可靠传输</li><li>TCP的拥塞控制</li></ol></li></ol></blockquote><h2 id="传输服务和相关协议"><a href="#传输服务和相关协议" class="headerlink" title="传输服务和相关协议"></a>传输服务和相关协议</h2><p>** 为运行在不同主机上的应 用进程提供逻辑通信  **<br>** 传输协议运行在端系统  **</p><ul><li><strong>发送方：</strong>将应用层的报 文分成报文段，然后传 递给网络层 </li><li><strong>接收方：</strong>将报文段重组 成报文，然后传递给应 用层</li></ul><p>** 有多个传输层协议可供应 用选择 ** </p><ol><li>Internet: TCP 和 UDP</li></ol><h2 id="传输层和网络层比较"><a href="#传输层和网络层比较" class="headerlink" title="传输层和网络层比较"></a>传输层和网络层比较</h2><ol><li><strong>网络层服务： 主机之间的逻辑通信</strong></li><li><strong>传输层服务： 进程之间的逻辑通信</strong></li></ol><ul><li>依赖于网络层的服务  </li><li>并对网络层的服务进行 增强</li></ul><h2 id="Internet传输层协议"><a href="#Internet传输层协议" class="headerlink" title="Internet传输层协议"></a>Internet传输层协议</h2><p><img src="/images/1690373273674-708c290d-f8bf-424e-996a-3468fce79fd5.png" alt="image.png"></p><blockquote><p><strong>传输层向上层应用进程提供逻辑的通信服务</strong><br><strong>在物理上</strong>就是通过层间接口传给传输层，由传输层之间的相互配合 将massage 传输给对方的应用进程。</p></blockquote><h3 id="三个协议"><a href="#三个协议" class="headerlink" title="三个协议"></a>三个协议</h3><ol><li>** 可靠的、保序的传输： TCP  **</li></ol><p>原理 ： </p><ul><li>多路复用、解复用</li><li>拥塞控制</li><li>流量控制</li><li>建立连接</li></ul><ol start="2"><li>** 不可靠、不保序的传输：UDP  **</li></ol><blockquote><p>多路复用、解复用</p></blockquote><blockquote><p> 没有为尽力而为的IP服务添加更 多的其它额外服务  </p></blockquote><ol start="3"><li>**都不提供的服务：  **</li></ol><ul><li><strong>延迟保证（主机之间的延迟上层无法加强）</strong></li><li><strong>带宽保证（ip主机上的带宽无法加强）</strong></li></ul><h2 id="多路解复用的工作原理（TCP和UDP不同）"><a href="#多路解复用的工作原理（TCP和UDP不同）" class="headerlink" title="多路解复用的工作原理（TCP和UDP不同）"></a><strong>多路解复用的工作原理（TCP和UDP不同）</strong></h2><h3 id="TCP复用解复用"><a href="#TCP复用解复用" class="headerlink" title="TCP复用解复用"></a>TCP复用解复用</h3><ol><li>每个数据报有源IP地址和目标地 址 </li><li>每个数据报承载一个传输层报 文段 </li><li>每个报文段有一个源端口号和 目标端口号 (特定应用有著名的端口号)</li></ol><p>ip之间的传输说的是主机之间的信息传输， 如果想要实现进程之间的信息传输就需要加上端口号(port)</p><p><img src="/images/1690593173357-c0b30e06-d677-4a20-aa81-0ddda6ed0c5c.png" alt="img"></p><p>TCP绑定的是四元组的信息。</p><p>通过层间接口向下传输的是四元组 ，和 massage 。</p><p>Server端将数据报发出之后， 对方的IP就会接收到这个数据报开始解析， 在TCP部分就会解析TCP的头部，等等信息 。然后在向上传输</p><p> <strong>主机联合使用IP地址和端口号将报 文段发送给合适的套接字</strong>  </p><p>例子： </p><p>1. </p><p><img src="/images/1690594723957-ee220fe4-d4a8-4eae-98ea-291269b7958e.png" alt="img"></p><p>1. </p><p><img src="/images/1690594751725-5b29e3e0-d7ff-4b4e-adb2-d2e5362c05ce.png" alt="img"></p><p>3， 多线程的场景举例 ：</p><p><img src="/images/1690594815936-846a174f-8983-46e2-bca6-5c10112fdbd6.png" alt="img"></p><h3 id="UDP多路解复用"><a href="#UDP多路解复用" class="headerlink" title="UDP多路解复用"></a>UDP多路解复用</h3><p><strong>Server端：</strong> </p><ol><li>服务端通过APP的线程， 里面封装了要传输的massage 、 serverSocket 、对方的ip和udp端口的捆绑关系所在的结构体的指针(PID)</li><li>将上述的信息传输给UDP，UDP再往下就是将udp的datagram 、ip地址</li></ol><p><strong>Client端：</strong></p><ol><li>client接收到对方的ip打包传输过来的信息后，  <strong>先检查报文段的目标端口号  ， 然后 用该端口号将报文段定位给 套接字</strong>  </li><li>IP解析之后向上交的是 UDP datagram、源ip和目标ip等信息</li><li>udp 的datagram中 有源port 目标port ，通过这两个端口信息， 我们就可以将进程的对应关系找到了</li></ol><p><strong>如果两个不同源IP地址&#x2F;源端 口号的数据报，但是有相同的 目标IP地址和端口号，则被定 位到相同的套接字</strong>  </p><p><img src="/images/1690594641666-cf3c440e-ece4-45ae-894a-77b4a23f6511.png" alt="img"></p><h1 id="无连接传输：UDP"><a href="#无连接传输：UDP" class="headerlink" title="无连接传输：UDP"></a>无连接传输：UDP</h1><p> <strong>UDP: User Datagram Protocol  （用户数据报协议）</strong></p><p><strong>它只是增加了多了复用解复用， 除此之外， 并没有增加其他的</strong></p><ol><li><strong>尽力而为”的服务，报文段可能</strong></li></ol><p> 丢失 、送到应用进程的报文 段乱序 </p><ol><li><p><strong>无连接：</strong></p></li><li><ol><li>UDP发送端和接收端 之间没有握手</li><li>每个UD报文段都被 独立地处理</li></ol></li><li><p>UDP经常被用于 ：</p></li></ol><p> 流媒体（丢失不敏感， 速率敏感、应用可控制 传输速率）</p><p>DNS </p><p>SNMP  </p><h2 id="UDP：用户数据报协议"><a href="#UDP：用户数据报协议" class="headerlink" title="UDP：用户数据报协议"></a>UDP：用户数据报协议</h2><p> <strong>为什么要有UDP?</strong></p><blockquote><ol><li><p>不建立连接 （会增加延时 ）</p></li><li><p><strong>简单：</strong>在发送端和接收端没 有连接状态</p></li><li><p>报文段的头部很小(开销小)</p></li><li><p>无拥塞控制和流量控制： UDP可以尽可能快的发送报 文段</p></li><li><ol><li>应用-&gt;传输的速率&#x3D; 主机-&gt;网 络的速率</li></ol></li></ol></blockquote><p><strong>一个UDP数据报文段格式：</strong> </p><p><img src="/images/1690595214320-2b744bf2-16b9-4846-8d4c-d75814098861.png" alt="img">  </p><h2 id="UDP校验和"><a href="#UDP校验和" class="headerlink" title="UDP校验和"></a>UDP校验和</h2><p> <strong>目标：</strong> 检测在被传输报文段中的差错 (如比特反转)  , 如果出现差错， 那么就直接丢失。</p><p><strong>发送方：</strong> </p><ol><li>将报文段的内容视为16 比特的整数</li><li>校验和：报文段的加法 和 （1的补运算）  </li><li>发送方将校验和放在 UDP的校验和字段</li></ol><p><strong>接收方：</strong> </p><ol><li>计算接收到的报文段的校验 和  </li><li>检查计算出的校验和与校验 和字段的内容是否相等：</li></ol><ul><li>不相等––检测到差错 </li><li>相等––没有检测到差错 ，但也许还是</li></ul><h3 id="Such-as-不太懂"><a href="#Such-as-不太懂" class="headerlink" title="Such as(不太懂)"></a>Such as(不太懂)</h3><p><strong>注意：当数字相加时，在最高位的进位要回卷，再加 到结果上</strong> </p><p><img src="/images/1690595389749-f3929f7c-96c3-41de-be31-5bdcb5f1af61.png" alt="img"></p><p><strong>目标端：校验范围+校验和&#x3D;1111111111111111 通过校验</strong></p><p><strong>否则没有通过校验</strong>  </p><p> 注：求和时，必须将进位回卷到结果上  </p><p>要有进位回滚</p><p>回卷 和 校验和之间的和 就是仅为回滚的和。</p><h1 id="可靠数据传输的原理"><a href="#可靠数据传输的原理" class="headerlink" title="可靠数据传输的原理"></a>可靠数据传输的原理</h1><p>传送门： <a href="https://wclspace.xyz/post/84f702e5.html">https://wclspace.xyz/post/84f702e5.html</a></p><h1 id="面向连接的传输：-TCP"><a href="#面向连接的传输：-TCP" class="headerlink" title="面向连接的传输：  TCP"></a>面向连接的传输：  TCP</h1><h2 id="段结构"><a href="#段结构" class="headerlink" title="段结构"></a>段结构</h2><h2 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h2><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><h1 id="拥塞控制原理"><a href="#拥塞控制原理" class="headerlink" title="拥塞控制原理"></a>拥塞控制原理</h1><h1 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP&amp;&amp;UDP套接字编程</title>
      <link href="/post/452b164d.html"/>
      <url>/post/452b164d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><h2 id="应用的实现"><a href="#应用的实现" class="headerlink" title="应用的实现"></a>应用的实现</h2><p>应用是如何实现的 ？ </p><blockquote><p>答：  应用进程使用传输层提供的服务才能够交换报文，实现应用协议，实现应用  </p></blockquote><p>报文的传输是通过下层的通信及其下层的服务来完成<br>** TCP&#x2F;IP：应用进程使用 Socket API 访问传输服务   **<br>在什么地方将报文传输下去？  什么形式 ？<br><strong>地点：</strong>界面上的SAP(Socket）** 方式：**Socket API  </p><ul><li><strong>目标: 学习如何构建能借助sockets进行通信的C&#x2F;S应用程序</strong></li><li>**socket: 分布式应用进程之间的门，传输层协议提供的端到端 服务接口  **</li></ul><p><img src="/images/1690282078697-fd9bf6e1-2f86-4dc7-99d0-d52fc1b7b5d7.png" alt="image.png"></p><blockquote><p>具体的socket在下层收到之后如何来做， 是由后面的内容讲的<br>本章主要学习的是 ：<br>应用如何使用层间接口Socket上的SocketAPI来创建Socket 、使用Socket、操作Socket等等， 从而让两个应用进程之间可以逻辑的交换应用报文，实现应用协议， 实现各种的网络应用。</p></blockquote><p>我们都知道本层协议的实现是为了更好的向上层提供服务。而应用层是Top层，但是应用层也可以有上层 ，就比如是用户、其他应用等等。</p><h2 id="Socket的两种传输层类型"><a href="#Socket的两种传输层类型" class="headerlink" title="Socket的两种传输层类型"></a>Socket的两种传输层类型</h2><ul><li>**TCP: 可靠的、字节流的服务 **</li><li>**UDP: 不可靠（数据UDP数据报）服务  **</li></ul><h2 id="TCP套接字编程"><a href="#TCP套接字编程" class="headerlink" title="TCP套接字编程"></a>TCP套接字编程</h2><p>**套接字：应用进程与端到端传输协议（TCP或UDP）之间 的门户 **<br>**TCP服务：从一个进程向另一个进程可靠地传输字节流  **<br><img src="/images/1690282542024-8f44dccc-94e0-4cc4-bd27-9941a011c280.png" alt="image.png"></p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><blockquote><p> 服务器首先运行，等待连接建立  </p></blockquote><ol><li>** 服务器进程必须先处于运行状态 **</li></ol><blockquote><p>创建欢迎socket<br>和<strong>本地端口</strong>捆绑<br>在欢迎socket上阻塞式等待接收 用户的连接  </p></blockquote><p>** 客户端主动和服务器建立连接：（Accept接收其他人与他建立的连接）**<br>如果没有那就会阻塞</p><ol start="2"><li>** 创建客户端本地套接字（隐式捆 绑到本地port）  **</li></ol><blockquote><p>** 指定服务器进程的IP地址和端口 号，与服务器进程连接  **</p></blockquote><ol start="3"><li>** 当与客户端连接请求到来时  **</li></ol><blockquote><p>** 服务器接受来自用户端的请求 ，解除阻塞式等待，返回一个 新的socket（与欢迎socket不 一样），与客户端通信  **</p></blockquote><ul><li>允许服务器与多个客户端 通信</li><li>使用源IP和源端口来区分 不同的客户端</li></ul><ol start="4"><li>** 连接API调用有效时，客户端P与 服务器建立了TCP连接  **</li></ol><p>**注意： **</p><blockquote><p>本地的welcome Socket代表的是本地的80号端口和其他的几个值 ，通过这个端口来建立与其他client的连接<br><strong>80端口可以被不同的线程共享，有socket值来区分不同的线程</strong></p></blockquote><h3 id="TCP-Socket编程（C-x2F-S模式交互样例）"><a href="#TCP-Socket编程（C-x2F-S模式交互样例）" class="headerlink" title="TCP Socket编程（C&#x2F;S模式交互样例）"></a>TCP Socket编程（C&#x2F;S模式交互样例）</h3><ol><li>客户端从标准输入装置读 取一行字符，发送给服务 器 </li><li>服务器从socket读取字符 </li><li>服务器将字符转换成大写 ，然后返回给客户端</li><li>客户端从socket中读取一 行字符，然后打印出来<br><img src="/images/1690283231335-b7f51599-2131-4527-b456-b02875d65a95.png" alt="image.png"></li></ol><blockquote><p>** **实际上，这里描述了C-S之间交互的动作次序 140  </p></blockquote><p><strong>这里需要重新回顾</strong></p><h2 id="UDP套接字编程"><a href="#UDP套接字编程" class="headerlink" title="UDP套接字编程"></a>UDP套接字编程</h2><p>从进程的角度看u的udp编程： </p><blockquote><p>UDP 为客户端和服务器提供 不可靠的字节组的传送服务  </p></blockquote><blockquote><p>**UDP: 传送的数据可能乱序， 也可能丢失( 不可靠、无连接的 )  **</p></blockquote><p>** UDP: 在客户端和服务器之间 没有连接  **<br>• 没有握手<br>• 发送端在每一个报文中明确 地指定目标的IP地址和端口 号<br>• 服务器必须从收到的分组中 提取出发送端的IP地址和端 口号  </p><h3 id="Client-x2F-server-socket-交互-UDP-（过程图）"><a href="#Client-x2F-server-socket-交互-UDP-（过程图）" class="headerlink" title="Client&#x2F;server socket 交互: UDP  （过程图）"></a>Client&#x2F;server socket 交互: UDP  （过程图）</h3><p><img src="/images/1690285657845-ccb34bb3-d6b6-4b07-887e-e047b5c91939.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos注册中心</title>
      <link href="/post/173be129.html"/>
      <url>/post/173be129.html</url>
      
        <content type="html"><![CDATA[<h1 id="认识和安装Nacos"><a href="#认识和安装Nacos" class="headerlink" title="认识和安装Nacos"></a>认识和安装Nacos</h1><p>Nacos是阿里巴巴的产品，现在是SpringCloud中的一个组件。相比Eureka功能更加丰富，在国内受欢迎程度较高。</p><blockquote><p> 如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试运行：bash startup.sh -m standalone</p></blockquote><p> 安装nacos出现报错， 主要是配置数据库及其tomcat</p><blockquote><p> 参考： <a href="https://blog.csdn.net/qq_44377709/article/details/119154631">https://blog.csdn.net/qq_44377709/article/details/119154631</a></p></blockquote><p>登录地默认密码账户都是 ： nacos</p><h1 id="服务注册到nacos"><a href="#服务注册到nacos" class="headerlink" title="服务注册到nacos"></a>服务注册到nacos</h1><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>引入依赖</li></ol><p>在cloud-demo父工程的pom文件中的<dependencyManagement>中引入SpringCloudAlibaba的依赖：</dependencyManagement></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>com.alibaba.cloud<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>cloud<span class="operator">-</span>alibaba<span class="operator">-</span>dependencies<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>version<span class="operator">&gt;</span><span class="number">2.2</span><span class="number">.6</span>.<span class="keyword">RELEASE</span><span class="operator">&lt;</span><span class="operator">/</span>version<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>type<span class="operator">&gt;</span>pom<span class="operator">&lt;</span><span class="operator">/</span>type<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">scope</span><span class="operator">&gt;</span>import<span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">scope</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：（出现依赖错误地问题。已解决）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>com.alibaba.cloud<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>cloud<span class="operator">-</span>starter<span class="operator">-</span>alibaba<span class="operator">-</span>nacos<span class="operator">-</span>discovery<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>version<span class="operator">&gt;</span><span class="number">2.1</span><span class="number">.4</span>.<span class="keyword">RELEASE</span><span class="operator">&lt;</span><span class="operator">/</span>version<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>需要注释掉eureka的依赖</strong></p></blockquote><ol><li><strong>配置nacos地址</strong></li></ol><blockquote><p>在user-service和order-service的application.yml中添加nacos地址：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server<span class="operator">-</span>addr: localhost:<span class="number">8848</span></span><br></pre></td></tr></table></figure><ol><li>重启项目</li></ol><blockquote><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p></blockquote><p><strong>&#x3D;&#x3D;注意： 启动之前需要将nacos文件下的data删除， 然后再重新启动。成功启动&#x3D;&#x3D;</strong></p><p><img src="/images/1690097743207-90e373ee-1d97-45f2-a53b-9816e4357468.png" alt="img"></p><h1 id="服务分级存储模型"><a href="#服务分级存储模型" class="headerlink" title="服务分级存储模型"></a>服务分级存储模型</h1><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="/images/1690100886442-0aca8a29-cbbe-4db5-afa4-1014359ab0af.png" alt="img"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="/images/1690100904314-a8459626-2148-4ee7-baed-ab3a103930bf.png" alt="img"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li>添加新的集群 ，然后将这台服务器放置在HZ集群下。</li></ol><p><img src="/images/1690101272845-897d20bb-89cf-4bdf-97e9-2c510be77ac5.png" alt="img"></p><blockquote><p>修改user-service的application.yml</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server<span class="operator">-</span>addr: localhost:<span class="number">8848</span></span><br><span class="line">      discovery:</span><br><span class="line">        cluster<span class="operator">-</span>name: HZ # 集群名称</span><br></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="/images/1690101398302-3e7277dd-dfc9-4e98-b447-17ef48267dce.png" alt="img"></p><p><strong>&#x3D;&#x3D;注意： 是改了之后启动程序application 1、2。  然后再改cluster-name为SH， 再启动最后一个application3 这样才会出现application 1、2集群在SH , application3在HZ的这种效果。&#x3D;&#x3D;</strong> </p><h1 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h1><h1 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h1><h1 id="Nacos与Eureka的区别"><a href="#Nacos与Eureka的区别" class="headerlink" title="Nacos与Eureka的区别"></a>Nacos与Eureka的区别</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层续</title>
      <link href="/post/70dbcc05.html"/>
      <url>/post/70dbcc05.html</url>
      
        <content type="html"><![CDATA[<h1 id="DNS（域名解析系统）"><a href="#DNS（域名解析系统）" class="headerlink" title="DNS（域名解析系统）"></a>DNS（域名解析系统）</h1><p>前面说的都是应用层的协议 和相关案例</p><p>应用层协议 和 例子都是所有案例中最多的。 域名解析系统是<code>给其他应用应用的应用</code>通过其他应用来为应用提供服务。 </p><blockquote><p>dns提供的是： <strong>域名到 ip地址的转换</strong></p></blockquote><h2 id="DNS的重要性（必要性）"><a href="#DNS的重要性（必要性）" class="headerlink" title="DNS的重要性（必要性）"></a>DNS的重要性（必要性）</h2><ul><li><strong>IP地址标识主机、路由器</strong> </li><li>但IP地址不好记忆，不便人类使用(没有意义)</li><li><strong>人类一般倾向于使用一些有意义的字符串来标识 Internet上的设备(大实话)</strong></li></ul><blockquote><p>例如：<a href="mailto:&#113;&#x7a;&#x68;&#101;&#110;&#x67;&#x40;&#x75;&#115;&#116;&#99;&#46;&#101;&#x64;&#x75;&#x2e;&#99;&#110;">&#113;&#x7a;&#x68;&#101;&#110;&#x67;&#x40;&#x75;&#115;&#116;&#99;&#46;&#101;&#x64;&#x75;&#x2e;&#99;&#110;</a> 所在的邮件服务器 <a href="http://www.ustc.edu.cn/">www.ustc.edu.cn</a> 所在的web服务器</p></blockquote><ul><li>存在着“字符串”—– IP地址的转换的必要性</li><li>人类用户提供要访问机器的“字符串”名称</li><li>由DNS负责转换成为二进制的网络地址</li></ul><h2 id="DNS系统需要解决的问题"><a href="#DNS系统需要解决的问题" class="headerlink" title="DNS系统需要解决的问题"></a>DNS系统需要解决的问题</h2><p><strong>主要解决的问题就是域名到ip地址的转换</strong></p><ol><li>问题1：  如何命名设备</li></ol><blockquote><p> 需要通过一些有意义的字符串来标识设备。便于记忆</p><p>解决一个平面命名的重名问题<strong>：层次化命名</strong>  </p></blockquote><ol><li>问题2：如何完成(域名)名字到IP地址的转换</li></ol><blockquote><p>分布式的数据库维护和响应名字查询  </p></blockquote><ol><li>问题3：如何维护：增加或者删除一个域，需 要在域名系统中做哪些工作</li></ol><h2 id="DNS-Domain-Name-System-的发展历史"><a href="#DNS-Domain-Name-System-的发展历史" class="headerlink" title="DNS (Domain Name System)  的发展历史"></a>DNS (Domain Name System)  的发展历史</h2><h3 id="ARPANET-的名字解析-解决方案："><a href="#ARPANET-的名字解析-解决方案：" class="headerlink" title="ARPANET 的名字解析 解决方案："></a>ARPANET 的名字解析 解决方案：</h3><ol><li>主机名：没有层次的一个字符串（一个平面）</li><li>存在着<strong>一个（集中）维护站</strong>：<strong>维护着一张 主机名-IP地址 的映射文件：****Hosts.txt</strong> </li><li>每台主机定时从维护站取文件</li></ol><h3 id="上述ARPANET-的名字解析-解决方法所遇到的问题："><a href="#上述ARPANET-的名字解析-解决方法所遇到的问题：" class="headerlink" title="上述ARPANET 的名字解析 解决方法所遇到的问题："></a>上述ARPANET 的名字解析 解决方法所遇到的问题：</h3><p> <strong>当网络中主机数量很大时</strong></p><blockquote><p> 没有层次的主机名称很难分配</p><p>文件的管理、发布、查找都很麻烦  </p></blockquote><h2 id="DNS的总体设计思路和目标"><a href="#DNS的总体设计思路和目标" class="headerlink" title="DNS的总体设计思路和目标"></a>DNS的总体设计思路和目标</h2><h3 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h3><ul><li><strong>分层的、基于域的命名机制 （分层命名）</strong></li><li><strong>若干分布式的数据库完成名字到IP地址的转换</strong></li></ul><p><strong>通过上面的方式来解决名字到ip地址的转换关系。</strong> </p><ul><li><p>运行在UDP之上端口号为53的 <strong>应用</strong>服务 </p></li><li><p><strong>核心的Internet功能</strong>，但以应用层协议实现 </p></li><li><ul><li>在网络边缘处理复杂性</li></ul></li></ul><p><strong>互联网的很多核心功能都是在网络的边缘，通过端系统之上的应用进程来实现的。（复杂性体现在边上，  传输层及以上)</strong></p><h3 id="DNS的主要目的："><a href="#DNS的主要目的：" class="headerlink" title="DNS的主要目的："></a>DNS的主要目的：</h3><ol><li><strong>实现主机名-IP地址的转换(name&#x2F;IP translate)</strong> </li><li><strong>其它目的</strong></li></ol><ul><li>主机别名到规范名字的转换：Host aliasing</li><li><strong>邮件服务器别名到邮件服务器的正规名字的转换</strong>：Mail server aliasing</li><li>负载均衡：Load Distribution</li></ul><h2 id="解决的三个问题-："><a href="#解决的三个问题-：" class="headerlink" title="解决的三个问题 ："></a>解决的三个问题 ：</h2><h2 id="问题一-：-DNS名字空间-The-DNS-Name-Space"><a href="#问题一-：-DNS名字空间-The-DNS-Name-Space" class="headerlink" title="问题一 ： DNS名字空间(The DNS Name Space)"></a>问题一 ： DNS名字空间(The DNS Name Space)</h2><h3 id="DNS域名结构-："><a href="#DNS域名结构-：" class="headerlink" title="DNS域名结构  ："></a>DNS域名结构  ：</h3><ol><li>一个层面命名设备会有很多重名  </li><li>NDS采用层次树状结构的 命名方法  </li><li>Internet 根被划为几百个顶级域(top lever domains)</li></ol><blockquote><p>通用的</p><p>.com; .edu ; .gov ; .int ; .mil ; .net ; .org .firm ; .hsop ; .web ; .arts ; .rec ;  </p></blockquote><blockquote><p>国家级别的:</p><p>.cn ; .us ; .nl ; .jp  </p></blockquote><ol><li>每个(子)域下面可划分为若干子域(subdomains)</li><li>树叶是主机</li></ol><h3 id="DNS-根名字服务器"><a href="#DNS-根名字服务器" class="headerlink" title="DNS: 根名字服务器"></a>DNS: 根名字服务器</h3><p><img src="/images/1689853465079-9df524b0-8654-4fb0-af71-ecc7a794d7c4.png" alt="img"></p><p>全球只有这13个。中国这边没有。</p><p><strong>10个在美国、1个在英国、1个在瑞典、1个在荷兰</strong></p><blockquote><p> <strong>这是存在一些安全隐患的，我国只有相关的镜像</strong></p></blockquote><blockquote><p> <strong>创建一个新的域，必须征得它所属域的同意  。</strong></p></blockquote><h3 id="DNS名字空间-The-DNS-Name-Space"><a href="#DNS名字空间-The-DNS-Name-Space" class="headerlink" title="DNS名字空间(The DNS Name Space)"></a>DNS名字空间(The DNS Name Space)</h3><p><img src="/images/1689853497235-b247a473-afd0-4e59-a8f4-408b3ad01a4b.png" alt="img"></p><h4 id="域名（Domain-Name）"><a href="#域名（Domain-Name）" class="headerlink" title="域名（Domain Name）"></a>域名（Domain Name）</h4><ol><li><strong>从本域往上，直到树根</strong>  <strong>所有的都属于这个域名</strong></li><li>中间使用“.”间隔不同的级别</li></ol><blockquote><p> 例如：  ustc.edu.cn  、 auto.ustc.edu.cn …</p></blockquote><ol><li>域的域名：可以用于表示一个域  </li><li>主机的域名：一个域上的一个主机</li></ol><h4 id="域名的管理"><a href="#域名的管理" class="headerlink" title="域名的管理"></a>域名的管理</h4><p> <strong>一个域管理其下的子域  （前缀树)</strong></p><blockquote><p>.jp 被划分为 ac.jp co.jp  ；</p><p>.cn 被划分为 edu.cn com.cn  ；</p></blockquote><p><strong>创建一个新的域，必须征得它所属域的同意  （）</strong></p><h4 id="域与物理网络无关"><a href="#域与物理网络无关" class="headerlink" title="域与物理网络无关"></a>域与物理网络无关</h4><ul><li>域的划分是逻辑的，而不是物理的  </li><li>域遵从组织界限，而不是物理网络</li></ul><blockquote><p> 一个域的主机可以不在一个网络 。但是， 一个网络的主机不一定在一个域  </p></blockquote><h2 id="问题二：-解析问题-名字服务器-Name-Server"><a href="#问题二：-解析问题-名字服务器-Name-Server" class="headerlink" title="问题二：  解析问题-名字服务器(Name Server)"></a>问题二：  解析问题-名字服务器(Name Server)</h2><h3 id="一个名字服务器存在的相关问题"><a href="#一个名字服务器存在的相关问题" class="headerlink" title="一个名字服务器存在的相关问题"></a>一个名字服务器存在的相关问题</h3><blockquote><p> 可靠性问题：单点故障 </p><p>扩展性问题：通信容量 </p><p>维护问题：远距离的集中式数据库   </p></blockquote><h3 id="分布式解决一个名字服务器的问题：-‘划分’-区域-zone"><a href="#分布式解决一个名字服务器的问题：-‘划分’-区域-zone" class="headerlink" title="分布式解决一个名字服务器的问题： ‘划分’ 区域(zone)"></a>分布式解决一个名字服务器的问题： ‘划分’ 区域(zone)</h3><ol><li>区域的划分有区域管理者自己决定  </li><li>将DNS名字空间划分为互不相交的区域，每个区域都是 树的一部分  </li><li>名字服务器：</li></ol><p> <strong>每个区域都有一个名字服务器</strong>：维护着它所管辖区域的<strong>权威信息</strong> (authoritative record)  </p><p> <strong>权威名字服务器</strong>允许被放置在区域之外，以保障可靠性  </p><h3 id="将互联网名字空间划分为若干区域（Zone）"><a href="#将互联网名字空间划分为若干区域（Zone）" class="headerlink" title="将互联网名字空间划分为若干区域（Zone）"></a>将互联网名字空间划分为若干区域（Zone）</h3><p><img src="/images/1689854586089-58673bd3-fbb4-4d88-a1f0-ffad38879973.png" alt="img"></p><blockquote><p>权威DNS服务器：组织机构的DNS服务器， 提供组织机构服务器（如 Web和mail）可访问的主机和IP之间的映射  </p><p> 组织机构可以选择实现自己维护或由某个服务提供商来维护  </p></blockquote><h3 id="TLD服务器："><a href="#TLD服务器：" class="headerlink" title="TLD服务器："></a>TLD服务器：</h3><ol><li><strong>顶级域(TLD)服务器：</strong></li></ol><p><strong>负责顶级域名（如com, org, net, edu和gov）和所有国家级的顶级域名（如cn, uk, fr, ca, jp ）</strong></p><blockquote><p> 比如： Network solutions 公司维护com TLD服务器  </p><p>Educause公司维护edu TLD服务器  </p></blockquote><ol><li><strong>顶级域名字服务器需要 维护资源的记录</strong></li></ol><p> <strong>DNS ：保存资源记录(RR)的分布式数据库</strong>  </p><p><img src="/images/1689855152694-74ff1b35-d5c4-46f8-b2d0-7621b713f99e.png" alt="img"></p><p><strong>资源记录(resource records)</strong> </p><ul><li>作用：维护 域名-IP地址(其它)的映射关系 </li><li>位置：Name Server的分布式数据库中</li></ul><p><strong>RR格式: (domain_name, ttl, type,class,Value)</strong> </p><ul><li><ul><li>Domain_name: 域名 </li><li>ttl: time to live : 生存时间(权威，缓冲记录)</li><li>Class 类别 ：对于Internet，值为IN </li><li>Value 值：可以是数字，域名或ASCII串(服务器的别名)</li><li>Type 类别：资源记录的类型—见下页</li></ul></li></ul><p><img src="/images/1689855163416-2b93b98a-64fe-4293-9723-ef0f69656ad2.png" alt="img"></p><blockquote><p>key：子域, value：该子域的子域服务器</p></blockquote><blockquote><p> key：子域服务器,  value：该子域服务器IP地址</p></blockquote><p>举例： </p><p><img src="/images/1689855750185-3ca3728a-2a10-4853-84da-de6483f2cdec.png" alt="img"></p><h3 id="DNS大致工作过程"><a href="#DNS大致工作过程" class="headerlink" title="DNS大致工作过程"></a>DNS大致工作过程</h3><ol><li><strong>应用调用解析器(resolver)</strong></li><li>解析器作为客户 向Name Server发出查询报文 （封装在UDP段中）</li><li><strong>Name Server返回响应报文(name&#x2F;ip)</strong></li></ol><p><img src="/images/1689855339031-e912c7d4-294e-44de-b5a7-7ce2b8d8303e.png" alt="img"></p><p><strong>一个机器上线之后必须具备以下的几个信息 :</strong></p><p><strong>IP，掩码，网关，DNS</strong></p><blockquote><ol><li>ip地址是什么</li><li>子网掩码是什么 （）</li><li>localname server本地服务器() 是什么（名字的问题去解析 需要问哪个ip名字服务器.）</li><li>default getway默认网关（就是在一个局域网内部， 我的ip是这个，如果我想要出去这个局域网该走哪个路由器。  ）</li></ol></blockquote><h3 id="本地名字服务器（Local-Name-Server）"><a href="#本地名字服务器（Local-Name-Server）" class="headerlink" title="本地名字服务器（Local Name Server）"></a>本地名字服务器（Local Name Server）</h3><blockquote><p> 获取名字到ip的对应关系。</p></blockquote><ul><li><strong>并不严格属于层次结构</strong> </li><li>每个ISP (居民区的ISP、公司、大学）都有一 个本地DNS服务器</li></ul><blockquote><p> 也称为“默认名字服务器” </p></blockquote><ul><li>当一个主机发起一个DNS查询时，查询被送到 其本地DNS服务器</li></ul><blockquote><p> 起着代理的作用，将查询转发到层次结构中  </p></blockquote><h4 id="名字服务器（Name-Server）"><a href="#名字服务器（Name-Server）" class="headerlink" title="名字服务器（Name Server）"></a>名字服务器（Name Server）</h4><blockquote><p>名字解析的过程： </p><p>目标名字在本地服务器中(有缓存)</p><ol><li>查询的名字在该区域内部</li><li>缓存（cashing）</li></ol></blockquote><p><strong>没有缓存的话：</strong> </p><p> 当与本地名字服务器不能解析 名字时，联系根名字服务器 顺着根-TLD 一直找到 权威名字服务器  </p><p><strong>也就是向上查询</strong> </p><blockquote><p><a href="http://www.ustc.edu.cn/">www.ustc.edu.cn</a> : </p><p>假设一个他国的公司的一台设备需要解析上述的域名所对应的ip地址</p><ol><li>首先查询本地name server 有没有缓存（不在一个局域网八成是没有的。）</li><li>如果没有那么就向上递归查找， 看 .cn </li><li>.cn知道 .edu.cn的域名服务器。 </li><li>.edu.cn 又知道 ustc.edu.cn 的域名服务器。</li><li>到最后一直找打最终的域名对应的ip地址。</li></ol></blockquote><p><img src="/images/1689856426562-ae1610b1-d1eb-44f5-989b-ca28de85e026.png" alt="img"></p><p><strong>上述的查询方式是<strong><strong>递归查询</strong></strong>方式</strong></p><p><strong>还有一种查询方式是****迭代查询</strong></p><p><img src="/images/1689856781019-fb3a188f-e7c5-4910-8408-595bbdfdbe5d.png" alt="img"></p><p>假设 ： 主机cis.poly.edu 想知道 主机 gaia.cs.umass.edu 的IP地址</p><ol><li>根（及各级域名）服务器 返回的不是查询结果，而 是下一个NS的地址</li><li>最后由权威名字服务器给 出解析结果</li><li>当前联络的服务器给出可 以联系的服务器的名字 </li><li>“我不知道这个名字，但 可以向这个服务器请求”</li></ol><h3 id="DNS协议、-报文"><a href="#DNS协议、-报文" class="headerlink" title="DNS协议、 报文"></a>DNS协议、 报文</h3><p> <strong>DNS协议：查询和响应报文的报文格式相同</strong>  </p><p><img src="/images/1689856882215-3b27ad70-3074-4892-8af5-cb35fb20cf3d.png" alt="img"></p><p><img src="/images/1689856911033-63f64dd5-7c4f-4660-8f30-6e48a8701245.png" alt="img"></p><h3 id="提高性能-：-缓存"><a href="#提高性能-：-缓存" class="headerlink" title="提高性能 ： 缓存"></a>提高性能 ： 缓存</h3><p>一旦名字服务器学到了一个映射，就将该映射 缓存起来 </p><p>根服务器通常都在本地服务器中缓存着</p><p>使得根服务器不用经常被访问 </p><p><strong>目的：</strong>提高效率 </p><p>可能存在的问题：如果情况变化，缓存结果和 权威资源记录不一致</p><p><strong>解决方案：TTL（默认2天）</strong>  </p><h2 id="问题三：维护问题：新增一个域"><a href="#问题三：维护问题：新增一个域" class="headerlink" title="问题三：维护问题：新增一个域"></a>问题三：维护问题：新增一个域</h2><ol><li><strong>在上级域的名字服务器中增加两条记录，指向这个新增 的子域的域名 和 域名服务器的地址</strong></li><li><strong>在新增子域 的名字服务器上运行名字服务器，负责本域 的名字解析： 名字-&gt;IP地址</strong></li></ol><h3 id="例子：在com域中建立一个“Network-Utopia”"><a href="#例子：在com域中建立一个“Network-Utopia”" class="headerlink" title="例子：在com域中建立一个“Network Utopia”"></a>例子：在com域中建立一个“Network Utopia”</h3><ol><li><strong>到注册登记机构注册域名networkutopia.com</strong></li></ol><blockquote><p>1.1.  需要向该机构提供权威DNS服务器（基本的、和辅助的）的名字 和IP地址  </p><p>1.2.  登记机构在com TLD服务器中插入两条RR记录: (networkutopia.com, dns1.networkutopia.com, NS)(dns1.networkutopia.com, 212.212.212.1, A)  </p></blockquote><ol><li><strong>在networkutopia.com的权威服务器中确保有</strong></li></ol><ul><li>用于Web服务器的<a href="http://www.networkuptopia.com的类型为a的记录/">www.networkuptopia.com的类型为A的记录</a> </li><li>用于邮件服务器mail.networkutopia.com的类型为MX的记录</li></ul><h2 id="攻击DNS"><a href="#攻击DNS" class="headerlink" title="攻击DNS"></a>攻击DNS</h2><p><img src="/images/1689857270966-ad02bab2-2f0f-4508-ad2e-3ab252c88091.png" alt="img"></p><h1 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h1><p>之前介绍的例子都是CS模型的， 但是CS模型存在很多问题 。</p><p>比如： 可扩展性、可靠性等。 随着用户数量的不断增多， 用户都从服务器去获取服务（文件、视频检波等）， 一旦服务挂了。 所有应用都无法服务</p><p><strong>什么是P2P？</strong> </p><p><strong>大概就是一个节点既是服务器又是客户端。</strong></p><h2 id="纯P2P架构"><a href="#纯P2P架构" class="headerlink" title="纯P2P架构"></a>纯P2P架构</h2><ul><li><strong>没有（或极少）一直运行的 服务器</strong> </li><li><strong>任意端系统都可以直接通信</strong> </li><li><strong>利用peer的服务能力</strong> </li><li><strong>Peer节点间歇上网，每次IP 地址都有可能变化</strong></li></ul><p><img src="/images/1690075109752-61f9fad2-d84c-44f9-b5b2-50c309db660b.png" alt="img"></p><p>例子： </p><ol><li><strong>文件分发（BitTorrent）</strong></li><li><strong>流媒体（KanKan）【</strong>从其他的节点获取流量，不需要从其他的服务器去获取信息<strong>】</strong></li><li><strong>VoIP（Skype）【互联网打电话】</strong></li></ol><h2 id="文件分发（BitTorrent"><a href="#文件分发（BitTorrent" class="headerlink" title="文件分发（BitTorrent)"></a>文件分发（BitTorrent)</h2><h3 id="C-x2F-S-vs-P2P"><a href="#C-x2F-S-vs-P2P" class="headerlink" title="[C&#x2F;S vs P2P]"></a>[C&#x2F;S vs P2P]</h3><p>在cs模式中， 一般都是由服务器提供上载， 客户端提供下载，有些客户端也能够提供上载服务 ，但是速率十分慢， 所以可以忽略不记。</p><p>而p2p模式则不是。 它是将一个节点既是客户端又是服务器端</p><ol><li><strong>问题: 从一台服务器分发文件（大小F）到N个peer 需要多少时间？</strong></li></ol><p>从peer节点上下载能力是有限的</p><p><img src="/images/1690075419788-26f1ed44-197c-4cc5-b9d5-b8bbcc447cc1.png" alt="img"></p><p>下载下线就是说下载最慢的时间</p><h3 id="文件分发时间：-C-x2F-S模式"><a href="#文件分发时间：-C-x2F-S模式" class="headerlink" title="文件分发时间： C&#x2F;S模式"></a>文件分发时间： C&#x2F;S模式</h3><p> <strong>服务器传输：</strong> 都是由服务器 发送给peer，服务器必须顺序 传输（上载）N个文件拷贝:  </p><ul><li><strong>发送一个copy: F&#x2F;us</strong></li><li><strong>发送N个copy： NF&#x2F;u</strong></li></ul><p><img src="/images/1690075638103-c8909d51-5397-418f-93e6-ea3a00b8ca87.png" alt="img"></p><p> <strong>客户端:</strong> 每个客户端必须下 载一个文件拷贝  </p><ul><li>dmin &#x3D; 客户端最小的下载速率 </li><li>下载带宽最小的客户端下载的 时间：F&#x2F;dmin</li></ul><p><img src="/images/1690075647233-c9ddf255-5f98-4112-95fd-37e88d5eae4c.png" alt="img"></p><h3 id="文件分发时间-P2P模式"><a href="#文件分发时间-P2P模式" class="headerlink" title="文件分发时间: P2P模式"></a>文件分发时间: P2P模式</h3><p><strong>服务器传输：</strong>最少需要上载一份拷贝  </p><ul><li>发送一个拷贝的时间：F&#x2F;u</li></ul><p><img src="/images/1690075885007-1ed3293e-bb6c-4b74-b18c-9b5f99b7b430.png" alt="img"></p><p><strong>客户端：</strong> 每个客户端必须下载一 个拷贝  </p><ul><li>最小下载带宽客户单耗时：: F&#x2F;dmin</li></ul><p> <strong>所有客户端总体下载量NF  （N是要下载n份，</strong> <strong>一个文件的大小是F<strong><strong>，所以</strong></strong>总的下载量是NF****）</strong></p><ul><li><strong>最大<strong><strong>上载带宽</strong></strong>是：Us + Σui</strong> （<strong>Us: 服务器的上载带宽  +  每个peer节点的上载带宽）</strong> </li><li>除了服务器可以上载，其他所有的peer节点都可以上载</li></ul><p><img src="/images/1690075892603-fb53b0da-b29e-4514-a70b-172dcce23798.png" alt="img"></p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p><strong>Client-server VS P2P的例子</strong></p><blockquote><p> 如果说当服务器充足的时候，想要提高效率的话， 客户端的下载能力是瓶颈， 但是如果当服务器数量不能再增加，但是客户端又要增加的时候， 那么此时服务器的上载能力则是瓶颈。 毕竟客户端的数量是远远大于服务器端的数量的。</p></blockquote><p> <strong>客户端上载速率 &#x3D; u, F&#x2F;u &#x3D; 1 小时, Us &#x3D; 10u, dmin ≥ Us</strong>  </p><p><img src="/images/1690075936172-01857519-e868-4e01-9b9d-29a9a3745233.png" alt="img"></p><blockquote><p> 从上述可以看出。 纯clent-server模式， 一旦客户端的数量达到一定的程度， 他的速率就完全定格了（因为服务器的数量有限， 所以此时决定速率的就是服务器的上载速率。 ）</p></blockquote><p><strong>而我们使用的p2p（peer to peer） 也就是我们常说的人人为我我为人人。每个peer ，它既可以上载也可以作为clent进行下载。 效率会随着机器数量的add 而不断的 add。 效率完全取决于用户数量。 十分适合现在的体系</strong></p><h2 id="P2P文件分发：-BitTorrent"><a href="#P2P文件分发：-BitTorrent" class="headerlink" title="P2P文件分发： BitTorrent"></a>P2P文件分发： BitTorrent</h2><p>p2p的管理模式</p><ul><li><p>非结构化p2p（分布式散列表）： 每个peer之间构成的关系（上传下载），互通有无，就构成了一个有序的覆盖网（类似于环、树的关系）</p></li><li><p>结构化P2P： peer节点之间构成的覆盖关系是任意的、无序的。</p></li><li><p>文件被分为一个个块256KB </p></li><li><p>网络中的这些peers发送接收文件块，相互服务</p></li></ul><p><img src="/images/1690076025443-41bd95c4-7e81-4412-8ef1-e33f4394f6df.png" alt="img"></p><p><strong>Peer加入torrent</strong></p><ul><li>一开始没有块，但是将会通 过其他节点处累积文件块</li><li>向跟踪服务器注册，获得 peer节点列表，和部分peer 节点构成邻居关系 (“连接 ”)</li></ul><p><img src="/images/1690077579874-5ee4c700-6e58-4cbb-9ac5-a8437bb94b09.png" alt="img"></p><ul><li>当peer下载时，该peer可以同时向其他节点提供上载服务</li><li>Peer可能会变换用于交换块的peer节点 </li><li><strong>扰动churn :</strong>  peer节点可能会上线或者下线</li><li>一旦一个peer拥有整个文件，它会（自私的）离开或者保 留（利他主义）在torrent中</li></ul><h2 id="BitTorrent-请求，发送文件块"><a href="#BitTorrent-请求，发送文件块" class="headerlink" title="BitTorrent: 请求，发送文件块"></a>BitTorrent: 请求，发送文件块</h2><p> <strong>请求块：</strong></p><ul><li><p>在任何给定时间，不同 peer节点拥有一个文件块 的子集</p></li><li><p>周期性的，Alice节点向 邻居询问他们拥有哪些块 的信息 </p></li><li><p>Alice向peer节点请求它 希望的块，稀缺的块</p></li></ul><p> <strong>发送块：一报还一报titfor-tat</strong> </p><ul><li><p><strong>Alice向4个peer发送块，这些 块向它自己提供最大带宽的服 务</strong></p></li><li><ul><li>其他peer被Alice阻塞 (将不会 从Alice处获得服务) </li><li>每10秒重新评估一次：前4位</li></ul></li><li><p><strong>每个30秒：随机选择其他peer 节点，向这个节点发送块</strong></p></li><li><ul><li>“优化疏通” 这个节点 </li><li>新选择的节点可以加入这个top 4</li></ul></li></ul><h3 id="BitTorrent-tit-for-tat"><a href="#BitTorrent-tit-for-tat" class="headerlink" title="BitTorrent: tit-for-tat"></a>BitTorrent: tit-for-tat</h3><p>(1) Alice “优化疏通” Bob </p><p>(2) Alice 变成了Bob的前4位提供者; Bob答谢Alice </p><p>(3) Bob 变成了Alice的前4提供者  </p><p><img src="/images/1690077707729-700def34-2d80-4724-ae4a-85ee3feb404c.png" alt="img"></p><h2 id="P2P文件共享"><a href="#P2P文件共享" class="headerlink" title="P2P文件共享"></a>P2P文件共享</h2><p>应用例子： </p><p><img src="/images/1690077858758-d9c84074-7e0b-405f-b4f7-51349a395de4.png" alt="img"></p><p><strong>P2P文件共享需要解决的有两个问题：</strong> </p><ol><li>如何定位所需资源（目录服务的问题）</li><li>如何处理对等方的加入与离开（节点的管理问题）</li></ol><p><strong>已知的解决方案：</strong> </p><ul><li>集中</li><li>分散</li><li>半分散</li></ul><h3 id="P2P：集中式目录"><a href="#P2P：集中式目录" class="headerlink" title="P2P：集中式目录"></a>P2P：集中式目录</h3><p> 最初的“Napster”设计 </p><ul><li><p>\1) 当对等方连接时，它告知 中心服务器： </p></li><li><ul><li>IP地址</li><li>内容</li></ul></li><li><p>\2) Alice查询 “双截棍.MP3”(资源) </p></li><li><p>\3) Alice从Bob处请求文件 （下载or其他）</p></li><li><p>Bob响应并处理请求</p></li></ul><p><img src="/images/1690078051659-1ccd4ae6-24bf-45c5-8b7a-57d68f97afb1.png" alt="img"></p><h3 id="P2P：集中式目录中存在的问题"><a href="#P2P：集中式目录中存在的问题" class="headerlink" title="P2P：集中式目录中存在的问题"></a>P2P：集中式目录中存在的问题</h3><ul><li>单点故障（目录服务器挂了怎么办）</li><li>性能瓶颈 （clent-server问题，很多的clent对应一个serveer）</li><li>侵犯版权</li></ul><p>文件传输是分散的， 而定位内容则是高度 集中的  </p><h3 id="完全分布式（一个实例-查询洪泛：Gnutella-）"><a href="#完全分布式（一个实例-查询洪泛：Gnutella-）" class="headerlink" title="完全分布式（一个实例 查询洪泛：Gnutella  ）"></a>完全分布式（一个实例 查询洪泛：Gnutella  ）</h3><blockquote><p> 解决的两个问题： </p><ol><li>如何定位所需资源（目录服务的问题）</li><li>如何处理对等方的加入与离开（节点的管理问题）</li></ol></blockquote><ul><li><p><strong>全分布式</strong></p></li><li><ul><li>没有中心服务器</li></ul></li><li><p><strong>开放文件共享协议</strong> </p></li><li><p><strong>许多Gnutella客户端 实现了Gnutella协议</strong></p></li><li><ul><li>类似HTTP有许多的 浏览器</li></ul></li></ul><p> <strong>覆盖网络：图</strong>  </p><blockquote><ol><li>如果X和Y之间有一个 TCP连接，则二者之间 存在一条边</li><li>所有活动的对等方和边 就是覆盖网络 </li><li>边并不是物理链路 </li><li>给定一个对等方，通常 所连接的节点少于10个</li></ol></blockquote><h2 id="Gnutella-协议"><a href="#Gnutella-协议" class="headerlink" title="Gnutella:  协议"></a>Gnutella:  协议</h2><ul><li><strong>在已有的TCP连接上 发送查询报文</strong> </li><li><strong>对等方转发查询报文</strong> </li><li><strong>以反方向返回查询命 中报文</strong>  </li><li><strong>文件传输：HTTP</strong></li></ul><p><img src="/images/1690078422126-22092a48-aeac-4747-8a14-2ed1a74b3691.png" alt="img"></p><p> 可扩展性： 限制范围的 洪泛查询  </p><h3 id="Gnutella：对等方加入"><a href="#Gnutella：对等方加入" class="headerlink" title="Gnutella：对等方加入"></a>Gnutella：对等方加入</h3><ol><li>对等方X必须首先发现某些已经在覆盖网络中的其他对<br>等方：使用可用对等方列表<br>自己维持一张对等方列表（经常开机的对等方的IP）<br>联系维持列表的Gnutella站点</li><li>X接着试图与该列表上的对等方建立TCP连接，直到与<br>某个对等方Y建立连接</li><li>X向Y发送一个Ping报文，Y转发该Ping报文</li><li>所有收到Ping报文的对等方以Pong报文响应<br>IP地址、共享文件的数量及总字节数</li><li>X收到许多Pong报文，然后它能建立其他TCP连接</li></ol><h3 id="Gnutella：-对等方离开"><a href="#Gnutella：-对等方离开" class="headerlink" title="Gnutella： 对等方离开"></a>Gnutella： 对等方离开</h3><p>个人理解： 可以通过加TTL</p><h3 id="半分散（-利用不匀称性：KaZaA-）"><a href="#半分散（-利用不匀称性：KaZaA-）" class="headerlink" title="半分散（ 利用不匀称性：KaZaA  ）"></a>半分散（ 利用不匀称性：KaZaA  ）</h3><ol><li><p>每个对等方要么是一个 组长，要么隶属于一个 组长 </p></li><li><ol><li>对等方与其组长之间有 TCP连接</li><li>组长对之间有TCP连接</li></ol></li><li><p>组长跟踪其所有的孩子 的内容</p></li><li><p>组长与其他组长联系</p></li><li><ol><li>转发查询到其他组长</li><li>获得其他组长的数据拷贝</li></ol></li></ol><p><img src="/images/1690079011466-63f26173-9ca5-4c90-aab7-39577eb0d7c5.png" alt="img"></p><h3 id="KaZaA：查询"><a href="#KaZaA：查询" class="headerlink" title="KaZaA：查询"></a>KaZaA：查询</h3><ol><li><p>每个文件有一个<strong>散列标识码和一个描述符</strong></p></li><li><p><strong>客户端向其组长发送关键字查询</strong></p></li><li><p>组长用匹配进行响应：</p></li><li><ol><li><strong>对每个匹配：元数据、散列标识码和IP地址</strong></li></ol></li><li><p>如果组长将查询转发给其他组长，其他组长也以匹配进行响应</p></li><li><p>客户端选择要下载的文件 </p></li><li><ol><li><strong>向拥有文件的对等方发送一个带散列标识码的 HTTP请求</strong></li></ol></li></ol><h4 id="Kazaa小技巧"><a href="#Kazaa小技巧" class="headerlink" title="Kazaa小技巧"></a>Kazaa小技巧</h4><ol><li>请求排队</li></ol><ul><li>限制并行上载的数量  </li><li>确保每个被传输的文件从上载节点接收一定量的带宽</li></ul><ol><li>激励优先权</li></ol><ul><li>鼓励用户上载文件  </li><li>加强系统的扩展性</li></ul><ol><li>并行下载</li></ol><ul><li>从多个对等方下载同一个文件的不同部分</li></ul><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><blockquote><p>随着网络得普及， 视频类业务占据着流量市场得大部分带宽， 人数也是占有量最大得。<br>如何让用户之间能够同步得播放视频等成为了互联网得最大挑战之一。</p></blockquote><p> 单个超级服务器无法提供服务。<br><strong>解决方案： 分布式应用层可解决， 应用层面的基础设施。</strong></p><h2 id="多媒体视频"><a href="#多媒体视频" class="headerlink" title="多媒体视频"></a>多媒体视频</h2><p> 视频：固定速度显示的图像序列。</p><h3 id="网络视频特点："><a href="#网络视频特点：" class="headerlink" title="网络视频特点："></a>网络视频特点：</h3><ul><li>高码率：&gt;10x于音频,高的网络带 宽需求 </li><li>可以被压缩 </li><li>90%以上的网络流量是视频</li></ul><p>** 数字化图像：像素的阵列  （ **每个像素被若干bits表示  <strong>）</strong><br> 编码：使用图像内和图像间的 冗余来降低编码的比特数  </p><ul><li>空间冗余(图像内) </li><li>时间冗余(相邻的图像间)</li></ul><p><img src="/images/1690198738978-e504ca97-f569-469d-afe3-1466ec69620c.png" alt="image.png"></p><ul><li>**CBR: (constant bit rate): 以固定速率编码 **</li><li><strong>VBR: (variable bit rate): 视频编码速率随 时间的变化而变化</strong></li><li>例子: <ul><li>MPEG 1 (CD-ROM) 1.5 Mbps </li><li>MPEG2 (DVD) 3-6 Mbps</li><li>MPEG4 (often used in Internet, &lt; 1 Mbps)</li></ul></li></ul><p><img src="/images/1690198819309-2cf12e82-7412-4f73-8c81-24f6adf77e87.png" alt="image.png"></p><h2 id="存储视频得流化服务（Streaming）"><a href="#存储视频得流化服务（Streaming）" class="headerlink" title="存储视频得流化服务（Streaming）"></a>存储视频得流化服务（Streaming）</h2><p><img src="/images/1690198854981-af118a65-ca90-4b84-9dd2-b191f0014765.png" alt="image.png"></p><h3 id="多媒体流化服务-：-DASH"><a href="#多媒体流化服务-：-DASH" class="headerlink" title="多媒体流化服务 ： DASH"></a>多媒体流化服务 ： DASH</h3><p><strong>DASH: Dynamic, Adaptive Streaming over HTTP</strong></p><blockquote><p>用户在播放视频时边下载边播放， 减少因为网络原因得卡顿。<br>相当于我们看虎牙直播 ，如果当前得网络不支持4k， 那么就会切换成1080p</p></blockquote><p>**服务器: **</p><ul><li>将视频文件分割成多个块</li><li>每个块独立存储，编码于不同码率（8-10种[1080p、4k等等 ] ）</li><li>告示文件（manifest file）: 提供不同块的URL</li></ul><p>**客户端: **</p><ul><li>先获取告示文件</li><li>周期性地测量服务器到客户端的带宽</li><li>查询告示文件,在一个时刻请求一个块，HTTP头部指定字 节范围<ul><li>如果带宽足够，选择最大码率的视频块</li><li>会话中的不同时刻，可以切换请求不同的编码块 (取 决于当时的可用带宽)</li></ul></li></ul><h4 id="“智能”客户端-客户端自适应决定（动态自适应）"><a href="#“智能”客户端-客户端自适应决定（动态自适应）" class="headerlink" title="“智能”客户端: 客户端自适应决定（动态自适应）"></a>“智能”客户端: 客户端自适应决定（动态自适应）</h4><ol><li>什么时候去请求块 (不至于缓存挨饿，或者溢出)</li><li>请求什么编码速率的视频块 (当带宽够用时，请求高质 量的视频块) </li><li>哪里去请求块 (可以向离自己近的服务器发送URL，或 者向高可用带宽的服务器请求)</li></ol><h2 id="Content-Distribution-Networks-（CDN）"><a href="#Content-Distribution-Networks-（CDN）" class="headerlink" title="Content Distribution Networks （CDN）"></a>Content Distribution Networks （CDN）</h2><p><strong>CDN： 内容分发网络</strong></p><blockquote><p>大家都是从一个或者说微缩非常少的服务器上去流化服务的化会带来什么问题？ （也就是高并发情况）</p></blockquote><p>**挑战: **服务器如何通过网络向上百万用户同时 流化视频内容 (上百万视频内容)?<br>以下的几种方法…</p><h3 id="使用单个，-超大的超级服务中心-“megaserver”出现的问题"><a href="#使用单个，-超大的超级服务中心-“megaserver”出现的问题" class="headerlink" title="使用单个， 超大的超级服务中心 “megaserver”出现的问题"></a>使用单个， 超大的超级服务中心 “megaserver”出现的问题</h3><blockquote><p>通过服务器自身的提升来提高效率</p></blockquote><ul><li>服务器到客户端路径上跳数较多，瓶颈链路的带宽 小导致停顿 </li><li>“二八规律”决定了网络同时充斥着同一个视频的 多个拷贝，效率低（付费高、带宽浪费、效果差） </li><li>单点故障点，性能瓶颈 </li><li>周边网络的拥塞</li></ul><blockquote><p>** 相当简单，但是这个方法不可扩展  **</p></blockquote><h3 id="通过CDN，全网部署缓存节点，存储服务内容，就近为用户提供服务，提高用户体验"><a href="#通过CDN，全网部署缓存节点，存储服务内容，就近为用户提供服务，提高用户体验" class="headerlink" title="通过CDN，全网部署缓存节点，存储服务内容，就近为用户提供服务，提高用户体验"></a>通过CDN，全网部署缓存节点，存储服务内容，就近为用户提供服务，提高用户体验</h3><blockquote><p>CDN： 内容分发网络<br>CDN的运营商将节点部署按照一定的部署策略将节点部署到世界各地， 然后如果某个商户（假设抖音）， 上传视频给用户去看， 视频就会上传的很多节点上， 然后不同地方的用户设备通过就近原则找到自己附件的节点 ，然后将视频拉去到本地。然后给用户看。</p></blockquote><p><strong>enter deep: 将CDN服务器深入到许多接入网</strong></p><ul><li>更接近用户，数量多，离用户近，管理困难</li><li>Akamai, 1700个位置</li></ul><p>**bring home: 部署在少数(10个左右)关键位置，如将服务器簇安装于POP附近（离若干1stISP POP较近） **</p><ul><li>采用租用线路将服务器簇连接起来 </li><li>Limelight</li></ul><blockquote><p>**用户如何知道访问的内容是从哪里访问的呢？ **</p><ol><li><strong>告示文件（manifest file）: 提供不同块的URL</strong></li><li><strong>通过域名解析的重定向</strong></li></ol></blockquote><p>**CDN: 在CDN节点中存储内容的多个拷贝 **<br>• e.g. Netflix stores copies of MadMen<br>** 用户从CDN中请求内容  **</p><ul><li>重定向到最近的拷贝，请求内容 </li><li>如果网络路径拥塞，可能选择不同的拷贝</li></ul><p><img src="/images/1690200518007-b0efcf00-27c1-4418-94a2-0479091f710d.png" alt="image.png"></p><p><strong>CDN网络的特点就是： 采用主机-主机之间的服务来加速内容访问。</strong><br><img src="/images/1690200634518-59cbeee8-471d-47cb-acb8-8423a00a90c9.png" alt="image.png"><br> <strong>OTT 挑战: 在拥塞的互联网上复制内容</strong> </p><ul><li>从哪个CDN节点中获取内容？ </li><li>用户在网络拥塞时的行为？ </li><li>在哪些CDN节点中存储什么内容？</li></ul><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>** Bob(客户端)请求视频<a href="http://netcinema.com/6Y7B23V">http://netcinema.com/6Y7B23V</a> **</p><ul><li>**视频存储在CDN，位于<a href="http://kingcdn.com/NetC6y&B23V">http://KingCDN.com/NetC6y&amp;B23V</a>  **</li></ul><p><img src="/images/1690201042248-2f001c40-b7c4-44f2-9e3d-13ff0c604f91.png" alt="image.png"></p><h3 id="最早的网络视频点播服务（网飞）Netflix"><a href="#最早的网络视频点播服务（网飞）Netflix" class="headerlink" title="最早的网络视频点播服务（网飞）Netflix"></a>最早的网络视频点播服务（网飞）Netflix</h3><p><img src="/images/1690201657518-43cbaa9b-b5f6-4518-bee0-a910520752d7.png" alt="image.png"><br>将自己制作的内容发给很多的CDN运营商， 通过这些运营商来传播自己的内容。</p><h1 id="TCP套接字（Socket）编程"><a href="#TCP套接字（Socket）编程" class="headerlink" title="TCP套接字（Socket）编程"></a>TCP套接字（Socket）编程</h1><h1 id="UDP套接字编程"><a href="#UDP套接字编程" class="headerlink" title="UDP套接字编程"></a>UDP套接字编程</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/post/3c40bcf4.html"/>
      <url>/post/3c40bcf4.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p> <strong>网络应用的原理：网络应用协议的概念和 实现方面</strong>  </p><ul><li>传输层的服务模型</li><li>客户-服务器模式</li><li>对等模式(peer-to-peer)</li><li>内容分发网络</li></ul><p> <strong>网络应用的实例：互 联网流行的应用层协 议</strong> </p><p>HTTP 、FTP 、SMTP &#x2F; POP3 &#x2F; IMAP 、DNS  </p><p><strong>编程： 网络应用程序</strong></p><p>Socket API</p><p>传输层向应用层提供的原语 也是Socket API</p><h2 id="创建一个新的网络应用"><a href="#创建一个新的网络应用" class="headerlink" title="创建一个新的网络应用"></a>创建一个新的网络应用</h2><p><img src="/images/1689596843278-18fed0a9-be44-468f-bb8f-cd9a02bacc44.png" alt="img"> </p><ol><li>编程</li></ol><ul><li><p>在不同的端系统上运行 </p></li><li><p>通过网络基础设施提供的服 务，应用进程彼此通信 </p></li><li><p>如Web: </p></li><li><ul><li>Web 服务器软件与浏览器软件 通信</li></ul></li></ul><ol><li>网络核心中没有应用层软件</li></ol><ul><li>网络核心没有应用层功能 </li><li>网络应用只在端系统上存在 ，快速网络应用开发和部署</li></ul><h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><h2 id="网络应用的体系结构"><a href="#网络应用的体系结构" class="headerlink" title="网络应用的体系结构"></a>网络应用的体系结构</h2><ol><li><strong>客户-服务器模式（C&#x2F;S:client&#x2F;server）</strong> </li><li><strong>对等模式(P2P:Peer To Peer)</strong> </li><li><strong>混合体：客户-服务器和对等体系结构</strong></li></ol><h3 id="1-客户-服务器-C-x2F-S-体系结构"><a href="#1-客户-服务器-C-x2F-S-体系结构" class="headerlink" title="1. 客户-服务器(C&#x2F;S)体系结构"></a>1. <strong>客户-服务器(C&#x2F;S)体系结构</strong></h3><p><strong>服务器:</strong> </p><ul><li><p>一直运行 </p></li><li><p>固定的IP地址和周知的端 口号（约定）</p></li><li><p>扩展性：服务器场</p></li><li><ul><li>数据中心进行扩展</li><li>扩展性差(缺点)</li></ul></li></ul><p>如果说当用户达到一定的量， 那么服务器的性能是会下降的， 但是那也是正常的y&#x3D;ax的下降速率 ，但是C&#x2F;S模型当用户达到一定的数量会呈现指数级下降。</p><p><strong>客户端:</strong></p><ul><li>主动与服务器通信</li><li>与互联网有间歇性的连接</li><li>可能是动态IP 地址</li><li>不直接与其它客户端通信</li></ul><h3 id="2-对等体系结构（P2P）"><a href="#2-对等体系结构（P2P）" class="headerlink" title="2. 对等体系结构（P2P）"></a>2. 对等体系结构（P2P）</h3><p>随着用户的增加， 下滑的速率基本保持不变。</p><ul><li><strong>（几乎）没有一直运行的服务 器</strong> </li><li>任意<strong>端系统之间可以进行通信</strong> </li><li><strong>每一个节点既是客户端又是服 务器</strong></li><li>自扩展性-新peer节点带来新的 服务能力，当然也带来新的服 务请求 </li><li>参与的主机间歇性连接且可以 改变IP 地址 </li><li>难以管理 （缺点）</li><li>例子: Gnutella，迅雷</li></ul><h3 id="3-混合体系统结构（客户-服务器和对等体系结构）"><a href="#3-混合体系统结构（客户-服务器和对等体系结构）" class="headerlink" title="3. 混合体系统结构（客户-服务器和对等体系结构）"></a>3. 混合体系统结构（<strong>客户-服务器和对等体系结构</strong>）</h3><p><strong>Napster</strong> </p><ul><li><p><strong>文件搜索：集中</strong></p></li><li><ul><li>主机在中心服务器上注册其资源 </li><li>主机向中心服务器查询资源位置</li></ul></li><li><p><strong>文件传输：P2P</strong> </p></li><li><ul><li>任意Peer节点之间</li></ul></li></ul><p><strong>即时通信</strong></p><ul><li><p><strong>在线检测：集中</strong> </p></li><li><ul><li>当用户上线时，向中心服务器注册其IP地址</li><li>用户与中心服务器联系，以找到其在线好友的位置</li></ul></li><li><p><strong>两个用户之间聊天：P2P</strong></p></li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p><strong>进程 ：在主机上运行的应用程序</strong></p><ul><li><p>在同一个主机内，使用 进程间通信机制通信（ 操作系统定义）  </p></li><li><p>不同主机，通过交换报 文（Message）来通信  </p></li><li><ul><li>使用OS提供的通信服务</li><li>按照应用协议交换报文。</li></ul></li></ul><p><strong>客户端进程： 发送通信的进程</strong></p><p><strong>服务器进程： 等待连接的进程</strong></p><p> <strong>注意：P2P架构的应用也 有客户端进程和服务器进 程之分</strong>  </p><h3 id="分布是进程通信需要解决的问题？"><a href="#分布是进程通信需要解决的问题？" class="headerlink" title="分布是进程通信需要解决的问题？"></a>分布是进程通信需要解决的问题？</h3><p><img src="/images/1689597800841-82c4c01e-99d7-4aad-b655-35b9704bcce8.png" alt="img"></p><ol><li><strong>进程标示和寻址问题（服务用户）</strong></li></ol><p><strong>利用进程表示自己， 让其他用户知道你的id 、地址 等 信息</strong></p><p><strong>让进程自己处于唯一的 ，而不是</strong></p><ol><li><strong>传输层-应用层提供服务是如何（服务）</strong></li></ol><p><strong>应用通过层间接口借助传输层提供的服务向对方发送数据报文。</strong></p><p><strong>位置 ： ：层间界面的SAP （TCP&#x2F;IP ：socket）</strong>  </p><p><strong>形式 ： ：应用程序接口API （TCP&#x2F;IP ：socket API）</strong>  </p><ol><li><strong>如何使用传输层提供的服务，实现应用进 程之间的报文交换，实现应用（用户使用服务）</strong></li></ol><p><strong>- 定义应用层协议：报文格式，解释，时序等</strong>  </p><p><strong>- 编制程序，使用OS提供的API ，调用网络基础设施提 供通信服务传报文，实现应用时序等；</strong>  </p><h3 id="解决问题1：-对进程进行编址（addressing）"><a href="#解决问题1：-对进程进行编址（addressing）" class="headerlink" title="解决问题1：  对进程进行编址（addressing）"></a>解决问题1：  对进程进行编址（addressing）</h3><p><strong>进程为了接收报文，必须有一个标识  ( 即：SAP（发送也需要标示）  )</strong></p><p><strong>这个标识由三部分组成</strong></p><ol><li><strong>主机：  唯一的 32位IP地址</strong>  </li><li><strong>所采用的传输层协议：TCP or UDP</strong>  </li><li><strong>端口号（Port Numbers）</strong></li></ol><p><strong>知名端口：</strong> </p><p> HTTP: TCP 80 Mail: TCP25 ftp:TCP 2  </p><p><strong>一个进程： 用IP + Port 标示端节点</strong></p><p><strong>本质上 一对主机进程之间的通信由2个端节点构 成</strong>  </p><h3 id="解决问题2：-传输层提供的服务-需要穿过层间的信息"><a href="#解决问题2：-传输层提供的服务-需要穿过层间的信息" class="headerlink" title="解决问题2： 传输层提供的服务-需要穿过层间的信息"></a>解决问题2： 传输层提供的服务-需要穿过层间的信息</h3><p><img src="/images/1689598452174-34986f63-0c26-4b38-bb44-00cf18fd4c04.png" alt="img"></p><ol><li><strong>层间接口必须要携带的信息</strong></li></ol><ul><li>要传输的报文（对于本层来说：SDU）</li><li>谁传的：对方的应用进程的标示：IP+TCP(UDP) 端口</li><li>传给谁：对方的应用进程的标示：对方的IP+TCP(UDP)端口号</li></ul><ol><li><strong>传输层实体（tcp或者udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装</strong></li></ol><ul><li>源端口号，目标端口号，数据等</li><li>将IP地址往下交IP实体，用于封装IP数据报：源IP,目标IP</li></ul><h3 id="解决问题2：-如何使用传输层提供的服务实现应用"><a href="#解决问题2：-如何使用传输层提供的服务实现应用" class="headerlink" title="解决问题2：  如何使用传输层提供的服务实现应用"></a>解决问题2：  如何使用传输层提供的服务实现应用</h3><p><img src="/images/1689600541503-a5ecb685-94b9-4729-96d1-144c775939c6.png" alt="img"></p><ul><li>定义应用层协议：报文格式，解释，时序等  </li><li>编制程序，通过API调用网络基础设施提供通信 服务传报文，解析报文，实现应用时序等</li></ul><h3 id="传输层提供的服务-层间信息的代表-（★★TCPSocket★★）"><a href="#传输层提供的服务-层间信息的代表-（★★TCPSocket★★）" class="headerlink" title="传输层提供的服务-层间信息的代表 （★★TCPSocket★★）"></a>传输层提供的服务-层间信息的代表 （★★TCPSocket★★）</h3><p>上述的问题2 所实现的方法，需要传输的东西太多了 。如何减少发送的报文呢！我们用Socket API</p><p>ping只是调用网络层的ICMP，网络层就可以搞定，和应用层没啥关系</p><ul><li>如果Socket API 每次传输报文，都携带如此多 的信息，太繁琐易错，不便于管理  </li><li><strong>用个代号标示通信的双方或者单方</strong>：socket  【就像OS打开文件返回的句柄一样  】</li></ul><p><strong>TCP Socket(一个本地标识)</strong></p><p><strong>TCP服务，两个进程之间的通信需要之前要建立连接</strong></p><ul><li><strong>两个进程通信会持续一段时间，通信关系稳定</strong>  </li><li><strong>穿过层间接口的信息量最小</strong></li></ul><p><strong>可以用一个整数表示两个应用实体之间的通信关系 ，本地标示  .</strong></p><p><strong>这个整数就是四元组 ：</strong> </p><p><strong>四元组:源端系统ip、源端系统port、目标端系统ip、目标端系统port</strong></p><p><strong>TCP：四元组，UDP：二元组（我和对方的ip）</strong></p><h2 id="TCP之上的套接字（socket）"><a href="#TCP之上的套接字（socket）" class="headerlink" title="TCP之上的套接字（socket）"></a>TCP之上的套接字（socket）</h2><p><strong>对于使用面向连接服务（TCP）的应用而言，嵌套字是4元组的一个****具有本地意义的标识</strong></p><ul><li><strong>4元组：(源IP，源port，目标IP，目标port)</strong>  </li><li><strong>唯一的指定了一个会话（2个进程之间的会话关系）</strong> </li><li>应用使用这个标示，与远程的应用进程通信</li><li>不必在每一个报文的发送都要指定这4元组</li><li>就像使用操作系统打开一个文件，OS返回一个文件句 柄一样，以后使用这个文件句柄，而不是使用这个文件 的目录名、文件名</li><li>简单，便于管理</li></ul><p><img src="/images/1689599695037-c05e7708-aabd-4a5f-b72d-f0eef24f575c.png" alt="img"></p><p><strong>TCP连接建立的过程:</strong> </p><p>下图两个进程之间的通信。</p><p>S: 表示Socket的值</p><p><strong>TCP Socket ： 代表的就是两个进程的会话关系。</strong></p><p><img src="/images/1689599862367-ab0bd2ca-5a6a-411c-89cc-73b786eadc45.png" alt="img"></p><h2 id="UDP-Socket（udp上的会话关系）"><a href="#UDP-Socket（udp上的会话关系）" class="headerlink" title="UDP Socket（udp上的会话关系）"></a>UDP Socket（udp上的会话关系）</h2><p> UDP服务，两个进程之间的通信需要之前无需建立连接  </p><ul><li>每个报文都是独立传输的</li><li>前后报文可能给不同的分布式进程</li></ul><p>因此。 <strong>只能用一个整数表示本应用实体的标示  【</strong>因为这个报文可能传给另外一个分布式进程 ·1  】</p><ul><li>穿过层间接口的信息大小最小</li></ul><p><strong>要提供的二元组：  本IP、本端口  ； 但是传输 报文时：必须要提供对方IP，port</strong> </p><p><strong>传输的步骤(特点)：</strong> </p><ol><li>UDP套接字指定了应用所在的一个端节点（end point） </li><li>在发送数据报时，采用创建好的本地套接字（标示 ID），就不必在发送每个报文中指明自己所采用的 ip和port </li><li>但是在发送报文时，必须要指定对方的ip和udp port(另外一个段节点)</li></ol><p><img src="/images/1689600396855-46055ab0-201a-4ba7-a562-5d4c0be1c007.png" alt="img"></p><h2 id="套接字（Socket）"><a href="#套接字（Socket）" class="headerlink" title="套接字（Socket）"></a>套接字（Socket）</h2><ul><li>进程向套接字发送报文或从套接字接收报文  </li><li>套接字 &lt;-&#x3D;&#x3D;-&gt; 门户</li></ul><p> 发送进程将报文推出门户，发送进程依赖于传输层设施在另外一侧的 门将报文交付给接受进程  </p><p> 接收进程从另外一端的门户收到报文（依赖于传输层设施  ）</p><p><img src="/images/1689600474581-06b316b8-125f-4966-9536-3a8e40dea559.png" alt="img"></p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议 :"></a>应用层协议 :</h2><p><strong>定义了：运行在不同端系统上 的应用进程如何相互交换报文</strong>  </p><ul><li>交换的报文类型：请求和应答报 文</li><li>各种报文类型的语法：报文中的 各个字段及其描述</li><li>字段的语义：即字段取值的含义 </li><li>进程何时、如何发送报文及对报 文进行响应的规则</li></ul><p><strong>应用协议仅仅是应用的一个组成部分一个Web应用包括：：</strong> </p><p>Http协议， web客户端，web服务器，HTML 等等 </p><p>协议分为： </p><ul><li>公开协议：</li></ul><p>由RFC文档定义 ；允许相互操作； 如http</p><ul><li>专用协议：</li></ul><p>协议不公开； 如Skype</p><h2 id="应用需要传输层提供什么样的服务？"><a href="#应用需要传输层提供什么样的服务？" class="headerlink" title="应用需要传输层提供什么样的服务？"></a>应用需要传输层提供什么样的服务？</h2><p><strong>这种服务主要有四部分衡量指标：</strong> </p><ol><li>数据丢失率</li></ol><ul><li>有些应用则要求100%的可 靠数据传输（如文件）</li><li>有些应用（如音频）能容忍 一定比例以下的数据丢失</li></ul><ol><li>吞吐</li></ol><ul><li>一些应用（如多媒体）必须 需要最小限度的吞吐，从而 使得应用能够有效运转 </li><li>一些应用能充分利用可供使 用的吞吐(弹性应用</li></ul><ol><li>延迟</li></ol><p>一些应用 出于有效性考虑，对 数据传输有严格的时间限制  </p><p> Internet 电话、交互式游戏  等</p><ol><li>安全性</li></ol><p> 机密性 ； 完整性 ； 可认证性（鉴别）  </p><h3 id="常见的应用对传输服务的要求："><a href="#常见的应用对传输服务的要求：" class="headerlink" title="常见的应用对传输服务的要求："></a>常见的应用对传输服务的要求：</h3><p><img src="/images/1689601177930-48126c7b-1450-43cc-871c-e3787f3623df.png" alt="img"></p><h2 id="Internet-传输层提供的服务"><a href="#Internet-传输层提供的服务" class="headerlink" title="Internet 传输层提供的服务"></a>Internet 传输层提供的服务</h2><h3 id="1-TCP-服务："><a href="#1-TCP-服务：" class="headerlink" title="1.  TCP 服务："></a>1.  TCP 服务：</h3><ul><li><strong>可靠的传输服务</strong> </li><li>流<strong>量控制：</strong>发送方不会淹 没接受方</li><li><strong>拥塞控制：</strong>当网络出现拥 塞时，能抑制发送方</li><li><strong>不能提供的服务：</strong>时间保 证、最小吞吐保证和安全</li><li><strong>面向连接：</strong>要求在客户端 进程和服务器进程之间建 立连接</li></ul><h3 id="2-UDP服务"><a href="#2-UDP服务" class="headerlink" title="2. UDP服务"></a>2. UDP服务</h3><ul><li>不可靠数据传输</li><li>不提供的服务：可靠， 流量控制、拥塞控制、 时间、带宽保证、建立 连接</li></ul><h3 id="UDP服务存在的必要性"><a href="#UDP服务存在的必要性" class="headerlink" title="UDP服务存在的必要性"></a>UDP服务存在的必要性</h3><ul><li><p><strong>能够区分不同的进程，而IP服务不能</strong> </p></li><li><ul><li>在IP提供的主机到主机端到端功能的基础上，区分了主机的 应用进程</li></ul></li><li><p><strong>无需建立连接，省去了建立连接时间，适合事务性的 应用</strong> </p></li><li><p><strong>不做可靠性的工作，例如检错重发，适合那些对实时 性要求比较高而对正确性要求不高的应用</strong></p></li><li><ul><li>因为为了实现可靠性（准确性、保序等），必须付出时间代 价（检错重发）</li></ul></li><li><p><strong>没有拥塞控制和流量控制，应用能够按照设定的速度 发送数据</strong></p></li><li><ul><li>而在TCP上面的应用，应用发送数据的速度和主机向网络发送 的实际速度是不一致的，因为有流量控制和拥塞控制</li></ul></li></ul><h2 id="Internet应用及其应用层协议和传输协议"><a href="#Internet应用及其应用层协议和传输协议" class="headerlink" title="Internet应用及其应用层协议和传输协议"></a>Internet应用及其应用层协议和传输协议</h2><p><img src="/images/1689601351513-d962ba06-e8e5-4cb0-a183-04c0c95161f7.png" alt="img"></p><h2 id="安全TCP"><a href="#安全TCP" class="headerlink" title="安全TCP"></a>安全TCP</h2><p><strong>TCP &amp; UDP都是不安全的，他们在传输过程中都不提供任何的安全性， 都是明文传输的， 明文通过互联网传输 ，甚至密码</strong>  </p><h3 id="如何增加安全性-？"><a href="#如何增加安全性-？" class="headerlink" title="如何增加安全性 ？"></a>如何增加安全性 ？</h3><ol><li><strong>SSL  ：  在TCP上面实现，提供加密的TCP连接</strong></li></ol><p><strong>基本上是在应用层， 但是也可以在传输层。</strong></p><ol><li><strong>SSL socket API</strong></li></ol><p> 应用通过API将明文交 给socket，SSL将其加 密在互联网上传输  </p><h1 id="Web-and-HTTP"><a href="#Web-and-HTTP" class="headerlink" title="Web and HTTP"></a>Web and HTTP</h1><p>相关术语：</p><p>Web页：由一些对象组成 </p><p>对象可以是HTML文件、JPEG图像、Java小程序、声 音剪辑文件等</p><p>Web页含有一个基本的HTML文件，该基本HTML文 件又包含若干对象的引用（链接） </p><p>通过<strong>URL</strong>对每个对象进行引用 </p><p><strong>访问协议，用户名，口令字，端口等；</strong>  </p><p><strong>URL格式：</strong></p><p><img src="/images/1689677274513-61bc860b-50d6-4ae6-a2b7-3a3bdd53a06b.png" alt="img"></p><p>互联网中的所有指向都是通过这种对象的形式呈现的网状。</p><p><strong>我们想要找到某一个内容从这个网状结构中 ，就需要通过搜索引擎来建立索引，然后通过我们输入的关键字作为索引， 他就会将匹配的内容给你。</strong></p><h2 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h2><p>Http： 超文本传输协议</p><p>包括：</p><ul><li><strong>Web的应用层协议</strong>  </li><li><strong>客户&#x2F;服务器模式</strong></li></ul><p>客户: 请求、接收和显示 Web对象的浏览器</p><p>服务器: 对请求进行响应， 发送对象的Web服务器  </p><p><img src="/images/1689677407643-6c98f7ce-c2a9-47f2-83e3-c00624bd107c.png" alt="img"></p><p>协议有： </p><ul><li><strong>HTTP 1.0: 在RFC 1945中描述</strong> </li><li><strong>HTTP 1.1: 在RFC 2068中描述</strong></li></ul><h3 id="HTTP是跑在TCP之上的（步骤）★★★★★"><a href="#HTTP是跑在TCP之上的（步骤）★★★★★" class="headerlink" title="HTTP是跑在TCP之上的（步骤）★★★★★"></a>HTTP是跑在TCP之上的（步骤）★★★★★</h3><ol><li><strong>首先， 客户发起一个与服务器的 TCP连接 (建立套接字) ， 端口号为 80</strong>  </li><li><strong>服务器接受客户的TCP连 接</strong>  </li><li><strong>然后， 在浏览器(HTTP客户端) 与 Web服务器(HTTP服 务器 server)交换HTTP 报文 (应用层协议报文  ）</strong></li><li><strong>最后， TCP连接关闭</strong></li></ol><p><strong>解释：</strong> </p><p>服务器端建立的时候会有一个Socket 用来守护80 端口。（假装叫Socket1） </p><p>客户端通过请求发送到服务器之后 ，服务器端会产生Socket （叫Socket2） ，这个Socket代表的就是这个客户端和 当前服务器端建立的会话关系。</p><p><strong>之后来的请求同样会建立会话关系（Socket i）</strong></p><p><strong>刚开始建立的Socket1并不会有动作， 他会等待其他浏览器的请求， 来建立并发的会话关系</strong></p><p>上述的Socket处理请求就类似于： 他（Socket1）是大堂经理，来客人后，把客人分给手下具体营业员管理（Socket i）</p><p> <strong>HTTP是无状态的。服务器并不维护关 于客户的任何信息</strong>  </p><p> <strong>维护状态的协议很复杂！</strong></p><ul><li><strong>必须维护历史信息(状态)</strong></li><li><strong>如果服务器&#x2F;客户端死机，它 们的状态信息可能不一致， 二者的信息必须是一致</strong></li><li><strong>无状态的服务器能够支持更 多的客户端</strong></li></ul><h2 id="HTTP连接"><a href="#HTTP连接" class="headerlink" title="HTTP连接"></a>HTTP连接</h2><h3 id="非持久HTTP-三次握手初讲"><a href="#非持久HTTP-三次握手初讲" class="headerlink" title="非持久HTTP(三次握手初讲)"></a>非持久HTTP(三次握手初讲)</h3><ul><li>最多只有一个对象在 TCP连接上发送</li><li>下载多个对象需要多 个TCP连接</li><li>HTTP&#x2F;1.0使用非持 久连接</li></ul><p><strong>在一个Web浏览器和一个Web服务器想要建立连接的时候（HTTP 1.0 版本）</strong></p><ol><li>首先借助SocketAPI 告诉下面的TCP要根对方建立连接了（发送请求） </li><li>然后这个请求还会回来（建立确认）， 然后进行交互才能完成。</li><li>借者就是发送HTTP请求， 然后响应等等</li></ol><p><img src="/images/1689679117233-dbb21c00-c0bc-47cd-9c21-302134365d2d.png" alt="img"></p><p><img src="/images/1689679134409-ee90033c-0174-4f94-bc31-7ad7dad12adb.png" alt="img"></p><h4 id="响应时间模型"><a href="#响应时间模型" class="headerlink" title="响应时间模型"></a>响应时间模型</h4><p> <strong>往返时间RTT（round-trip time）：</strong>一个小的分组从客 户端到服务器，在回到客户 端的时间（传输时间忽略） </p><p><strong>响应时间：</strong> </p><ul><li>一个RTT用来发起TCP连接</li><li>一个 RTT用来HTTP请求并 等待HTTP响应 </li><li>文件传输时间</li></ul><p><strong>共：2RTT+传输时间</strong>  </p><p><strong>传输是把分组打出去的时间，传播是分组在介质中运行的时间</strong></p><p><img src="/images/1689679487549-997c625f-852b-4a46-9728-bae3d83d40a3.png" alt="img"></p><h3 id="持久HTTP"><a href="#持久HTTP" class="headerlink" title="持久HTTP"></a>持久HTTP</h3><ul><li>多个对象可以在一个 （在客户端和服务器 之间的）TCP连接上 传输 </li><li>在相同客户端和服务器之间的后 续请求和响应报文通过相同的连 接进行传送  </li><li>客户端在遇到一个引用对象的时 候，就可以尽快发送该对象的请 求  </li><li>HTTP&#x2F;1.1 默认使用 持久连接</li></ul><h4 id="非持久的缺点："><a href="#非持久的缺点：" class="headerlink" title="非持久的缺点："></a>非持久的缺点：</h4><ul><li>每个对象要2个 RTT </li><li>操作系统必须为每个TCP连接分 配资源</li><li>但浏览器通常打开并行TCP连接 ，以获取引用对象</li></ul><h4 id="一-流水线方式的持久HTTP"><a href="#一-流水线方式的持久HTTP" class="headerlink" title="(一) 流水线方式的持久HTTP"></a>(一) 流水线方式的持久HTTP</h4><ul><li><strong>客户端只能在收到前一个响应后 才能发出新的请求</strong></li><li>每个引用对象花费一个RTT  </li><li><strong>HTTP&#x2F;1.1 默认使用 持久连接</strong></li></ul><p>类似于并行的方式吧，</p><h4 id="二-非流水线方式的持久HTTP"><a href="#二-非流水线方式的持久HTTP" class="headerlink" title="(二) 非流水线方式的持久HTTP"></a>(二) 非流水线方式的持久HTTP</h4><ul><li>HTTP&#x2F;1.1的默认模式 </li><li><strong>客户端遇到一个引用对象就立即 产生一个请求</strong></li><li>所有引用（小）对象只花费一个 RTT是可能的</li></ul><h2 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h2><p><strong>两种类型的HTTP报文：请求、响应</strong> </p><p>HTTP请求报文:  </p><ul><li>ASCII (人能阅读)</li></ul><p><img src="/images/1689680176256-bb40d49c-6e2f-4803-9f3b-4a63a18a99c8.png" alt="img"></p><h3 id="通用的请求报文格式"><a href="#通用的请求报文格式" class="headerlink" title="通用的请求报文格式"></a>通用的请求报文格式</h3><p><img src="/images/1689680213969-ea7dd295-bc0e-43bf-8bae-04167c6d44d5.png" alt="img"></p><h4 id="一-Post方式-："><a href="#一-Post方式-：" class="headerlink" title="(一) Post方式 ："></a>(一) Post方式 ：</h4><ul><li>网页通常包括表单输 入 </li><li>包含在实体主体 (entity body )中的 输入被提交到服务器</li></ul><h4 id="二-URL方式："><a href="#二-URL方式：" class="headerlink" title="(二) URL方式："></a>(二) URL方式：</h4><ul><li>方法：GET</li><li>输入通过请求行的 URL字段上载</li></ul><p><img src="/images/1689680292541-cb66f607-f642-4846-a83e-542482de0f43.png" alt="img"></p><h3 id="方法类型："><a href="#方法类型：" class="headerlink" title="方法类型："></a>方法类型：</h3><h4 id="一-HTTP-x2F-1-0"><a href="#一-HTTP-x2F-1-0" class="headerlink" title="(一) HTTP&#x2F;1.0"></a>(一) HTTP&#x2F;1.0</h4><p> GET 、 POST、HEAD </p><p>要求服务器在响应报文中 不包含请求对象 –&gt; 故障 跟踪  </p><h4 id="二-HTTP-x2F-1-1"><a href="#二-HTTP-x2F-1-1" class="headerlink" title="(二)  HTTP&#x2F;1.1"></a>(二)  HTTP&#x2F;1.1</h4><p> <strong>除了 GET、 POST、HEAD之外还有</strong> </p><p><strong>PUT ：</strong>将实体主体中的文件上载 到URL字段规定的路径 </p><p><strong>DELETE ：</strong> 删除URL字段规定的文件  </p><h2 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h2><p><img src="/images/1689680822355-f0a9cff7-b827-4699-b57b-4018bf061e70.png" alt="img"></p><h3 id="响应状态码："><a href="#响应状态码：" class="headerlink" title="响应状态码："></a>响应状态码：</h3><p> 位于服务器客户端的响应报文中的首行  </p><p>常见的几种状态码</p><p> <strong>200 OK</strong> </p><p>请求成功，请求对象包含在响应报文的后续部分 </p><p><strong>301 Moved Permanently</strong></p><p>请求的对象已经被永久转移了；新的URL在响应报文的Location: 首部行中指定 </p><p>客户端软件自动用新的URL去获取对象 </p><p><strong>400 Bad Request</strong> </p><p>一个通用的差错代码，表示该请求不能被服务器解读 </p><p><strong>404 Not Found</strong> </p><p>请求的文档在该服务上没有找到 505 HTTP Version Not Supported  </p><h3 id="Trying-out-HTTP-client-side-for-yourself"><a href="#Trying-out-HTTP-client-side-for-yourself" class="headerlink" title="Trying out HTTP (client side) for yourself"></a>Trying out HTTP (client side) for yourself</h3><p>在自己的linux操作系统上发送连接 </p><p><img src="/images/1689680948635-2eef487a-b6e2-4c41-acd6-78f63c039363.png" alt="img"></p><h2 id="用户-服务器状态：cookies"><a href="#用户-服务器状态：cookies" class="headerlink" title="用户-服务器状态：cookies"></a>用户-服务器状态：cookies</h2><p>Http协议实际上是一个无状态的协议。 服务器不会维护客户端的状态， 请求只会解析封装响应给你， 而不会管这个用户(客户端）是否以后会访问.。这就慢慢的衍生出了cookie。</p><p> 大多数主要的门户网站使用 cookies  </p><h3 id="Cookies的四个组成部分："><a href="#Cookies的四个组成部分：" class="headerlink" title="Cookies的四个组成部分："></a>Cookies的四个组成部分：</h3><ul><li><strong>1) 在HTTP响应报文中有 一个cookie的首部行</strong> </li><li><strong>2) 在HTTP请求报文含有 一个cookie的首部行</strong></li><li><strong>3) 在用户端系统中保留有 一个cookie文件，由用 户的浏览器管理</strong> </li><li><strong>4) 在Web站点有一个后 端数据库</strong></li></ul><p><strong>例如：</strong></p><ol><li>Susan总是用同一个PC使 用Internet Explore上 网</li><li>她第一次访问了一个使 用了Cookie的电子商务 网站</li><li>当最初的HTTP请求到达 服务器时，该Web站点 产生一个唯一的ID，并 以此作为索引在它的后 端数据库中产生一个项</li></ol><p><img src="/images/1689681486294-1ea0a388-f989-4da0-af86-f84d09579696.png" alt="img"></p><h3 id="Cookie能带来什么？"><a href="#Cookie能带来什么？" class="headerlink" title="Cookie能带来什么？"></a>Cookie能带来什么？</h3><p>  用户验证 、购物车 、 推荐 、 用户状态 (Web e-mail)  </p><p> <strong>如何维持状态：</strong></p><ul><li>协议端节点：在多个事务上 ，发送端和接收端维持状态</li><li>cookies: http报文携带状 态信息</li></ul><p> <strong>Cookies与隐私</strong>  </p><ul><li>Cookies允许站点知道许多关于 用户的信息</li><li>可能将它知道的东西卖给第三 方 </li><li>使用重定向和cookie的搜索引 擎还能知道用户更多的信息</li><li>如通过某个用户在大量站点 上的行为，了解其个人浏览 方式的大致模式 </li><li>广告公司从站点获得信息</li></ul><h2 id="Web缓存（代理服务器）"><a href="#Web缓存（代理服务器）" class="headerlink" title="Web缓存（代理服务器）"></a>Web缓存（代理服务器）</h2><p><strong>目标：</strong>不访问<strong>原始服务器</strong>，就满足客户的请求</p><p><strong>操作：</strong></p><ol><li><p>用户设置浏览器： 通 过缓存访问Web </p></li><li><p>浏览器将所有的HTTP 请求发给缓存</p></li><li><ol><li>在缓存中的对象：缓存 直接返回对象</li><li>如对象不在缓存，缓存 请求原始服务器，然后 再将对象返回给客户端</li></ol></li></ol><p><img src="/images/1689681785300-4aa31dba-6f16-458d-a01b-989183093933.png" alt="img"></p><p><strong>缓存即是客户端又是服务器端</strong></p><p><strong>通常 缓存是由ISP安装 (大学、公司、居民区ISP)</strong>  </p><h3 id="为什么要使用Web缓存-？"><a href="#为什么要使用Web缓存-？" class="headerlink" title="为什么要使用Web缓存  ？"></a>为什么要使用Web缓存  ？</h3><ul><li><strong>降低客户端的请求响应时 间</strong></li><li><strong>可以大大减少一个机构内 部网络与Internent接链路上的流量</strong></li><li><strong>互联网大量采用了缓存： 可以使较弱的ICP也能够 有效提供内容</strong></li></ul><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p><img src="/images/1689682192181-d0e98056-3325-455e-a8c9-a9f7ad8e9212.png" alt="img"></p><p><img src="/images/1689682250652-32063801-0bd3-4e4c-bdab-846bcb1d2f79.png" alt="img"></p><p><img src="/images/1689682261137-83c667b3-a5a0-44cd-9575-95e7a1d3cf6e.png" alt="img"></p><h1 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP : 文件传输协议"></a>FTP : 文件传输协议</h1><p>早期通过ftp来分享文件，内容等， 现在我们是通过网盘、 云盘等。</p><p>现在的ftp已经很少用了</p><p><img src="/images/1689765422723-982bc3e2-084d-4814-ac41-f95e3193fcf6.png" alt="img"></p><ul><li><p><strong>向远程主机上传输文件或从远程主机接收文件</strong></p></li><li><p><strong>客户&#x2F;服务器模式</strong> </p></li><li><ul><li>客户端：发起传输的一方 </li><li>服务器：远程主机</li></ul></li><li><p><strong>ftp: RFC 959</strong> </p></li><li><p><strong>ftp服务器：端口号为21</strong></p></li></ul><h2 id="FTP-控制连接与数据连接分开"><a href="#FTP-控制连接与数据连接分开" class="headerlink" title="FTP: 控制连接与数据连接分开"></a>FTP: 控制连接与数据连接分开</h2><ol><li><strong>FTP客户端与FTP服务器通过端口21</strong>联系<strong>，并使用TCP为传输 协议</strong> </li><li>客户端通过控制连接获得身份 确认 </li><li>客户端通过控制连接发送命令 浏览远程目录</li><li>收到一个文件传输命令时，服 务器打开一个到客户端的数据 连接</li><li>一个文件传输完成后，服务器 关闭连接</li></ol><p>书上是服务器用自己的20号端口与客户进程建立数据传送连接</p><p><img src="/images/1689765608857-c9e55177-2e0c-4fd2-9774-36cec17a1903.png" alt="img"></p><ol><li>服务器打开第二个TCP数据连接用 来传输另一个文件</li><li>控制连接： 带外（ “out of band” ）传送 </li><li>FTP服务器维护用户的状态信息： 当前路径、用户帐户与控制连接对 应 有状态</li></ol><h2 id="FTP命令、响应"><a href="#FTP命令、响应" class="headerlink" title="FTP命令、响应"></a>FTP命令、响应</h2><h3 id="相关命令样例："><a href="#相关命令样例：" class="headerlink" title="相关命令样例："></a>相关命令样例：</h3><ul><li>在<strong>控制连接上以ASCII</strong>文本 方式传送 </li><li><strong>USER username</strong></li><li><strong>PASS password</strong> </li><li>LIST：请服务器返回远程主机当前目录的文件列表 </li><li>RETR filename：从远程主机的当前目录检索文件 (gets) </li><li>STOR filename：向远程主机的当前目录存放文件 (puts)</li></ul><h3 id="相关返回码样例："><a href="#相关返回码样例：" class="headerlink" title="相关返回码样例："></a>相关返回码样例：</h3><ul><li>状态码 和1 状态信息（同HTTP ）</li></ul><p><img src="/images/1689765757893-aa89057d-24d4-4f70-998f-dca368484fe5.png" alt="img"></p><h1 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h1><p><img src="/images/1689765815073-4a74b9f9-703b-4bc7-ae93-022be45b0c9d.png" alt="img"></p><p> <strong>3个主要组成部分：</strong> </p><p><strong>用户代理 、 邮件服务器 、 简单邮件传输协议：SMTP</strong>  </p><p><strong>简要描述：</strong> </p><p>用户通过用户代理 完成对邮件的编写 等操作 ，然后将邮件发送给邮件服务器， 邮件服务器就会将该邮件发送给目标邮件服务器。 目标用户通过登录客户端软件（QQ邮箱等用户代理）来阅读用户代理从用户服务器上拉去的邮件。</p><p>他们之间遵守的协议就是SMTP协议。</p><h3 id="组成一：-用户代理"><a href="#组成一：-用户代理" class="headerlink" title="组成一： 用户代理"></a>组成一： 用户代理</h3><p> 又名 “邮件阅读器”</p><p><strong>撰写、编辑和阅读邮件的客户端软件。</strong>如Outlook、Foxmail </p><p>输出和输入邮件保存在服务器 上  </p><h3 id="组成二：-邮件服务器"><a href="#组成二：-邮件服务器" class="headerlink" title="组成二： 邮件服务器"></a>组成二： <strong>邮件服务器</strong></h3><p> <strong>邮件服务器作用：</strong> </p><ul><li><p><strong>邮箱中管理和维护发送给用户 的邮件</strong></p></li><li><p><strong>输出报文 队列保持待发送邮件 报文</strong></p></li><li><p>邮件服务器之间的SMTP协议 ：发送email报文 </p></li><li><ul><li>客户：发送方邮件服务器 </li><li>服务器：接收端邮件服务 器</li></ul></li></ul><p><img src="/images/1689766524175-26628183-6c0c-451c-8383-84ddccbdbe58.png" alt="img"></p><h3 id="组成三：-简单邮件传输协议：SMTP"><a href="#组成三：-简单邮件传输协议：SMTP" class="headerlink" title="组成三：  简单邮件传输协议：SMTP"></a>组成三：  <strong>简单邮件传输协议：SMTP</strong></h3><ul><li><p><strong>使用TCP在客户端和服务器之间传送报文，端口号为25</strong></p></li><li><p>直接传输：从发送方服务器到接收方服务器</p></li><li><p>传输的3个阶段： 握手 、传输报文 、关闭 </p></li><li><p>命令&#x2F;响应交互</p></li><li><ul><li>命令：ASCII文本 </li><li>响应：状态码和状态信息</li></ul></li><li><p><strong>报文必须为7位ASCII码</strong></p></li></ul><p>规范了邮件的内容必须是在七位ASCⅡ码范围内（最原始的。）</p><h2 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h2><p><strong>Alice给Bob发送报文</strong></p><p><img src="/images/1689767035146-c879dd66-a6b5-4bd6-b882-1387761fc4f8.png" alt="img"></p><p>简单的交互</p><p><img src="/images/1689767137134-645671dd-fe0c-46a1-a16e-1940bf873497.png" alt="img"></p><p>上述的这种传输就是纯明文之间的传输 ，不做任何的保护措施， 也就是说黑客是可以随时截胡这些内容， 并且可见的。</p><h2 id="SMTP：总结"><a href="#SMTP：总结" class="headerlink" title="SMTP：总结"></a>SMTP：总结</h2><ul><li><strong>SMTP使用持久连接</strong> </li><li><strong>SMTP要求报文（首部 和主体）为7位ASCII编 码</strong></li><li><strong>SMTP服务器使用 CRLF.CRLF决定报文的 尾部</strong></li></ul><p><strong>HTTP比较 ：</strong></p><ul><li>HTTP：拉（pull） </li><li>SMTP：推（push）</li></ul><p><strong>二者都是ASCII形式的命令&#x2F;响应交互、状态码</strong></p><ul><li>HTTP：每个对象封装在各自 的响应报文中 </li><li>SMTP：多个对象包含在一个 报文中</li></ul><h3 id="邮件的报文格式"><a href="#邮件的报文格式" class="headerlink" title="邮件的报文格式"></a>邮件的报文格式</h3><p><img src="/images/1689767574612-9c235111-2677-4e69-9776-454c01fa5164.png" alt="img"></p><p><strong>报文格式 ： 多媒体扩展</strong></p><p><img src="/images/1689767592138-d6436dde-8c6f-4b1d-9024-ab5a64262fd6.png" alt="img"></p><h3 id="邮件访问协议："><a href="#邮件访问协议：" class="headerlink" title="邮件访问协议："></a>邮件访问协议：</h3><p><img src="/images/1689767642210-0aea289a-f768-42dc-986a-11c737bdfbe3.png" alt="img"></p><p><strong>SMTP: 传送到接收方的邮件服务器</strong></p><p><strong>邮件访问协议：从服务器访问邮件</strong>  </p><ul><li><p>POP：邮局访问协议（Post Office Protocol）[RFC 1939] </p></li><li><ul><li>用户身份确认 (代理&lt;–&gt;服务器) 并下载</li></ul></li><li><p>IMAP：Internet邮件访问协议（Internet Mail Access Protocol）[RFC 1730]  或者也可以是HTTP协议</p></li><li><ul><li>更多特性 (更复杂) ； 在服务器上处理存储的报文</li></ul></li><li><p><strong>HTTP：H****otmail , Yahoo! Mail等</strong></p></li></ul><h2 id="扩展PoP3协议-："><a href="#扩展PoP3协议-：" class="headerlink" title="扩展PoP3协议 ："></a>扩展PoP3协议 ：</h2><p><img src="/images/1689768143070-03ba6070-c127-4ab6-9527-e46ed1a92f25.png" alt="img"></p><p> <strong>POP3（续）</strong></p><ul><li><p><strong>先前的例子使用 “下载 并删除”模式。</strong> </p></li><li><ul><li><strong>如果改变客户机，Bob不 能阅读邮件</strong></li></ul></li><li><p><strong>“下载并保留”：不同 客户机上为报文的拷贝</strong></p></li><li><p><strong>POP3在会话中是无状态 的</strong>  </p></li><li><p><strong>本地管理文件夹</strong></p></li></ul><p> <strong>IMAP</strong> </p><ul><li><p>IMAP服务器将每个报文 与一个文件夹联系起来</p></li><li><p>允许用户用目录来组织 报文 </p></li><li><p>允许用户读取报文组件</p></li><li><p>IMAP在会话过程中保留 用户状态：</p></li><li><ul><li>目录名、报文ID与目录名 之间映射</li></ul></li></ul><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h1 id="Email-1"><a href="#Email-1" class="headerlink" title="Email"></a>Email</h1><h1 id="DNS-1"><a href="#DNS-1" class="headerlink" title="DNS"></a>DNS</h1><h1 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h1><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><h1 id="TCP套接字（Socket）编程"><a href="#TCP套接字（Socket）编程" class="headerlink" title="TCP套接字（Socket）编程"></a>TCP套接字（Socket）编程</h1><h1 id="UDP套接字编程"><a href="#UDP套接字编程" class="headerlink" title="UDP套接字编程"></a>UDP套接字编程</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka注册中心</title>
      <link href="/post/4b22b3d7.html"/>
      <url>/post/4b22b3d7.html</url>
      
        <content type="html"><![CDATA[<p>​远程调用的问题</p><ul><li>服务消费者该如何获取服务提供者的地址信息？</li><li>如果有多个服务提供者，消费者该如何选择？</li><li>消费者如何得知服务提供者的健康状态？</li></ul><p><img src="/images/1689408640955-b3808d99-5498-41b2-bc9f-71495108c6b4.png" alt="img"></p><h2 id="Eureka的作用"><a href="#Eureka的作用" class="headerlink" title="Eureka的作用"></a>Eureka的作用</h2><p><strong>消费者该如何获取服务提供者具体信息？</strong></p><ul><li>提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉取提供者信息</li></ul><p><strong>如果有多个服务提供者，消费者该如何选择？</strong></p><ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul><p><strong>消费者如何感知服务提供者健康状态？</strong></p><ul><li>服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>消费者就可以拉取到最新的信息</li></ul><p><strong>在Eureka架构中，微服务角色有两类：</strong></p><p><strong>EurekaServer：服务端，注册中心</strong></p><ul><li>记录服务信息</li><li>心跳监控</li></ul><p><strong>EurekaClient：客户端Provider：服务提供者，例如案例中的 user-service</strong></p><ul><li>注册自己的信息到EurekaServer</li><li>每隔30秒向EurekaServer发送心跳</li></ul><p><strong>consumer：服务消费者，例如案例中的 order-service</strong></p><ul><li>根据服务名称从EurekaServer拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul><h1 id="eureka原理"><a href="#eureka原理" class="headerlink" title="eureka原理"></a>eureka原理</h1><h4 id="请求进入Eureka之后会进行的操作"><a href="#请求进入Eureka之后会进行的操作" class="headerlink" title="请求进入Eureka之后会进行的操作"></a>请求进入Eureka之后会进行的操作</h4><ol><li>所有进入的微服务线程&#x2F;用户&#x2F;消费者 ，在进入系统， 找服务的提供者&#x2F;服务端 ，获取信息的时候，<strong>都需要先进入Eureka ，将自己的信息注册给Eureka注册中心</strong>， Eureka就会将其的信息保存起来。 </li><li><strong>如果某个线程&#x2F;用户 想要进行服务， 只需要将所需要的服务告诉Eureka ，然后让Eureka来帮助该线程&#x2F;用户来完成。</strong></li></ol><p><img src="/images/1689409022912-445c198f-7c59-4d78-80bd-c01fc1e01ae7.png" alt="img"></p><ol><li>Eureka查询后 ，获取到了三个服务器端的入口，经过负载均衡后 ，就会调出一个最适合的来交给注册中心。 然后给用户来执行。</li></ol><p>经过负载均衡后为什么获取的就是最适合的呢，因为我们服务器端，每隔30s就会给注册中心发送自己的状态，如果装服务停止， 那么就将其从服务器例表中剔除， 后面获取服务请求的时候就不可能获取到夯机的服务器。 </p><h1 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h1><p>项目为黑马程序员提供的</p><h1 id="1-搭建EurekaServer"><a href="#1-搭建EurekaServer" class="headerlink" title="1. 搭建EurekaServer"></a>1. 搭建EurekaServer</h1><p>搭建Eureka的服务端</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li>引入eureka-server依赖</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.springframework.cloud<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>cloud<span class="operator">-</span>starter<span class="operator">-</span>netflix<span class="operator">-</span>eureka<span class="operator">-</span>server<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>在启动类上添加@EnableEurekaServer注解</p></li><li><p><strong>在application.yml中配置eureka地址</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">10086</span></span><br><span class="line">spring:</span><br><span class="line">application:</span><br><span class="line">name: eurekaserver # 服务名称</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service<span class="operator">-</span>url: # Eureka自己也是个服务，注册到别人的同时也需要注册到自己的里面</span><br><span class="line">      defaultZone: http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">10086</span><span class="operator">/</span>eureka<span class="operator">/</span></span><br></pre></td></tr></table></figure><p>注册Eureka中， 是为了将来Eureka集 群通信去用的。</p><p><img src="/images/1689411965007-d98d38ff-130a-49a6-8085-fc01943d6179.png" alt="img"></p><h1 id="2-服务注册"><a href="#2-服务注册" class="headerlink" title="2. 服务注册"></a>2. 服务注册</h1><p>将user-service、order-service都注册到eureka</p><h2 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h2><ol><li>在user-service项目引入spring-cloud-starter-netflix-eureka-client的依赖</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">     <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.springframework.cloud<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">     <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>cloud<span class="operator">-</span>starter<span class="operator">-</span>netflix<span class="operator">-</span>eureka<span class="operator">-</span>server<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line"> <span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在application.yml文件，编写下面的配置：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">application:</span><br><span class="line">name: userservice</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service<span class="operator">-</span>url: # Eureka自己也是个服务，注册到别人的同时也需要注册到自己的里面</span><br><span class="line">      defaultZone: http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">10086</span><span class="operator">/</span>eureka<span class="operator">/</span></span><br></pre></td></tr></table></figure><h1 id="3-服务发现"><a href="#3-服务发现" class="headerlink" title="3. 服务发现"></a>3. 服务发现</h1><p>在order-service中完成服务拉取，然后通过负载均衡挑选一个服务，实现远程调用</p><p><img src="/images/1689412962895-7e37b98b-f2d2-4435-bcfb-f0524fed8b10.png" alt="img"></p><h2 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h2><ol><li>服务拉取是基于服务名称获取服务列表，然后在对服务列表做负载均衡</li></ol><p><strong>修改OrderService的代码，修改访问的url路径，用服务名代替ip、端口：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url <span class="operator">=</span> &quot;http://userservice/user/&quot; <span class="operator">+</span> order.getUserId();</span><br></pre></td></tr></table></figure><ol><li>在order-service项目的启动类OrderApplication中的RestTemplate添加负载均衡注解：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建RestTemplate并且注入Spring容器</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable">@Bean</span></span><br><span class="line">  <span class="variable">@LoadBalanced</span> <span class="comment">/*添加负载均衡注解*/</span></span><br><span class="line">  public RestTemplate restTemplate()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/post/7c4ca347.html"/>
      <url>/post/7c4ca347.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>了解基本术语和概念。 掌握网络的基本原理。</p></blockquote><h1 id="什么是Internet"><a href="#什么是Internet" class="headerlink" title="什么是Internet ?"></a>什么是Internet ?</h1><h2 id="从具体的构成角度"><a href="#从具体的构成角度" class="headerlink" title="从具体的构成角度"></a>从具体的构成角度</h2><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ul><li><strong>主机及其上面运行的应用程序（主机节点）</strong></li><li>路由器、交换机等<strong>网络交换设备（中专节点、交换节点）</strong></li></ul><h3 id="边：-通信的链路"><a href="#边：-通信的链路" class="headerlink" title="边： 通信的链路"></a>边： 通信的链路</h3><ul><li><strong>接入网链路：</strong> 主机连接到互联网的链路</li><li><strong>主干链路</strong>： 路由器间的链路</li></ul><h2 id="Internet（互联网-的组成"><a href="#Internet（互联网-的组成" class="headerlink" title="Internet（互联网)的组成"></a>Internet（互联网)的组成</h2><p><img src="/images/1689163395784-2a605762-c548-4105-8baf-d44918aea255.png" alt="image.png"></p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><strong>协议控制发送、接收消息</strong></li></ul><blockquote><p>如 TCP \ IP\HTTP\FTP等等</p></blockquote><ul><li>I<strong>nternet： 网络的网络</strong></li><li><strong>Internet标准</strong></li></ul><blockquote><p>RFC: 请求评述<br>IETF : 互联网工程认证组织</p></blockquote><h2 id="从服务的角度"><a href="#从服务的角度" class="headerlink" title="从服务的角度"></a>从服务的角度</h2><ul><li><strong>使用通信设施进行通信的分布式应用</strong></li></ul><blockquote><p>Web、email、分布式游戏、电子商务、社交网络等</p></blockquote><ul><li><strong>通信基础设施为 apps（分布式应用）提供给通信服务（编程接口）</strong></li></ul><blockquote><p>为app提供服务 ，类似于邮政服务（面向连接 和 无连接）； 将发送和接收数据的apps与互联网连接起来。</p></blockquote><p><img src="/images/1689164916269-ffcaf1d1-7c97-4b61-a076-997beee86869.png" alt="image.png"></p><blockquote><p>分布式应用是网络存在的理由</p></blockquote><h1 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议?"></a>什么是协议?</h1><blockquote><p>协议定义了在两个或者两个<strong>通信实体</strong>之间交换的<strong>报文格式 和 次序</strong>， 以及在<strong>报文传输和 &#x2F; 或接收或其他事件方面所采取的动作</strong>。</p></blockquote><p><img src="/images/1689164680296-bef9c481-5470-4802-8b7d-89661deeaede.png" alt="image.png"></p><h1 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h1><p>在了解网络边缘之前我们先来看看网络结构</p><h2 id="网络结构的组成"><a href="#网络结构的组成" class="headerlink" title="网络结构的组成"></a>网络结构的组成</h2><ul><li>**网络边缘： **<ul><li>主机</li><li>应用程序（cliet and server）</li></ul></li><li><strong>网络核心：</strong><ul><li>互联着的路由器</li><li>网络的网络</li></ul></li><li>**接入网、物理媒体： **<ul><li>有线或者无线通信链路</li></ul></li></ul><p><img src="/images/1689165685385-fe42b498-d9a1-437e-9894-da10a0c7af56.png" alt="image.png"></p><h2 id="网络边缘-1"><a href="#网络边缘-1" class="headerlink" title="网络边缘"></a>网络边缘</h2><ol><li><strong>端系统（也就是我们的主机）</strong><ul><li>包括：</li><li>运行的程序</li><li>Web、 email</li><li>在网络的边缘</li></ul></li><li><strong>客户&#x2F;服务器模式</strong><ul><li>客户端向服务器的请求、接收服务</li><li>如Web浏览器&#x2F;服务器： email客户端&#x2F;服务器</li></ul></li><li><strong>对等（peer - peer）模式</strong><ul><li>很少的（甚至没有）专门的服务器</li><li>如Gnutella、KaZaA、 Emule</li></ul></li></ol><p><img src="/images/1689166343682-2d241264-a354-4f13-a5e2-f3db485d55c9.png" alt="image.png"></p><h2 id="网络边缘：-采用网络设施的面向连接服务"><a href="#网络边缘：-采用网络设施的面向连接服务" class="headerlink" title="网络边缘： 采用网络设施的面向连接服务"></a>网络边缘： 采用网络设施的面向连接服务</h2><h3 id="目标：-在端系统之间传输数据-连接的"><a href="#目标：-在端系统之间传输数据-连接的" class="headerlink" title="目标： 在端系统之间传输数据(连接的)"></a>目标： 在端系统之间传输数据(连接的)</h3><ul><li><strong>握手： 在传输数据之前做好准备</strong><ul><li>人类协议中 ，互相问好让我们两个人认识，建立朋友关系 </li><li>在网络协议中， 两个<strong>通信主机之间为连接</strong>建立状态（做相关准备，缓存等）</li></ul></li><li><strong>TCP -传输控制协议（Transmission Control Protocol）</strong><ul><li>Internet上面向连接的服务</li></ul></li></ul><h3 id="TCP服务"><a href="#TCP服务" class="headerlink" title="TCP服务"></a>TCP服务</h3><ul><li><strong>特性1. ：可靠地、按顺序地传送数据</strong><ul><li>确认和重传</li></ul></li><li><strong>特性2. 流量控制</strong><ul><li>发送方不会淹没接收方</li></ul></li><li><strong>特性3. 拥塞控制</strong><ul><li>当网络拥塞时， 发送方降低发送地速率</li></ul></li></ul><h2 id="网络边缘：-采用基础设施地无连接服务"><a href="#网络边缘：-采用基础设施地无连接服务" class="headerlink" title="网络边缘： 采用基础设施地无连接服务"></a>网络边缘： 采用基础设施地无连接服务</h2><h3 id="目标：-在端系统之间传输数据（无连接的）"><a href="#目标：-在端系统之间传输数据（无连接的）" class="headerlink" title="目标： 在端系统之间传输数据（无连接的）"></a>目标： 在端系统之间传输数据（无连接的）</h3><ul><li>无连接服务</li></ul><h3 id="UDP–-用户数据报协议-User-Datagram-Protocol"><a href="#UDP–-用户数据报协议-User-Datagram-Protocol" class="headerlink" title="UDP– 用户数据报协议( User Datagram Protocol)"></a>UDP– 用户数据报协议( User Datagram Protocol)</h3><ul><li><strong>无连接</strong></li><li><strong>不可靠数据传输</strong></li><li><strong>无流量控制</strong></li><li><strong>无拥塞控制</strong></li></ul><h4 id="使用TCP地应用"><a href="#使用TCP地应用" class="headerlink" title="使用TCP地应用"></a>使用TCP地应用</h4><p>http(Web) , FTP(文件传送) SMTP（email）</p><h4 id="使用UDP地应用"><a href="#使用UDP地应用" class="headerlink" title="使用UDP地应用"></a>使用UDP地应用</h4><p><strong>流媒体、 远程会议、DNS、 Internet电话</strong></p><h1 id="网络核心：分组交换、线路交换"><a href="#网络核心：分组交换、线路交换" class="headerlink" title="网络核心：分组交换、线路交换"></a>网络核心：分组交换、线路交换</h1><p><img src="/images/1689172084080-69cc19dd-76a3-42a1-9ca4-27ceda07841d.png" alt="image.png"><br><strong>网络核心：路由器的网状网络</strong></p><h3 id="基本问题：数据怎样通过网络进行-传输？"><a href="#基本问题：数据怎样通过网络进行-传输？" class="headerlink" title="基本问题：数据怎样通过网络进行 传输？"></a>基本问题：数据怎样通过网络进行 传输？</h3><p>**答： **</p><ol><li>电路交换：为每个呼叫预留一条 专有电路：如电话网</li><li>分组交换：  <ol><li>将要传送的数据分成一个个单位： 分组 </li><li>将分组从一个路由器传到相邻路由器（hop），一段段最终从源端传 到目标端 </li><li>每段：采用链路的最大传输能力（ 带宽）</li></ol></li></ol><p><img src="/images/1689168392378-18c70fdb-951b-41b3-a295-f56e816bdd7a.png" alt="image.png"></p><h2 id="网络核心—-电路交换"><a href="#网络核心—-电路交换" class="headerlink" title="网络核心—-电路交换"></a>网络核心—-电路交换</h2><h3 id="端到端的资源被分配给从源端-到目标端的呼叫-“call”"><a href="#端到端的资源被分配给从源端-到目标端的呼叫-“call”" class="headerlink" title="端到端的资源被分配给从源端 到目标端的呼叫 “call”"></a>端到端的资源被分配给从源端 到目标端的呼叫 “call”</h3><p><img src="/images/1689168551876-cdf3829a-6008-4990-b29c-ba0dfb2905e9.png" alt="image.png"> 图中，每段链路有4条线路：</p><ul><li>该呼叫采用了上面链路的第2 个线路，右边链路的第1个线 路（piece）  </li><li>**独享资源：不同享 **<ul><li>**每个呼叫一旦建立起来就能够 保证性能 **</li></ul></li><li>**如果呼叫没有数据发送，被分配 的资源就会被浪费 (no sharing) **</li><li>**通常被传统电话网络采用  **</li></ul><blockquote><p>可以理解：我们对两个电脑互相插入网线，然后让他们两个互相ping他们的ip， 或者更为直接的说就是两个电脑之间通过蓝牙或者其他的媒介建立连接， 然后互相传输数据。</p></blockquote><h3 id="为呼叫预留端-端资源"><a href="#为呼叫预留端-端资源" class="headerlink" title="为呼叫预留端-端资源"></a>为呼叫预留端-端资源</h3><blockquote><p>也就是我们在传输的过程中需要某些媒介（比如从两地传送东西就需要车、汽油、通行证等等），这一步要做的就是为这次传输预留所需要的资源。 </p></blockquote><ul><li> 链路带宽、交换能力 </li><li> 专用资源：不共享 </li><li> 保证性能 </li><li> 要求建立呼叫连接</li></ul><p><img src="/images/1689168838100-7f4d3b11-03db-48fb-9ad2-431a494be408.png" alt="image.png"></p><h3 id="网络资源（如宽带）被分成片"><a href="#网络资源（如宽带）被分成片" class="headerlink" title="网络资源（如宽带）被分成片"></a>网络资源（如宽带）被分成片</h3><blockquote><p>分法：  频分(FDM) (Frequencydivision multiplexing)  、波分(WDM) a(Wave-division multiplexing)  、时分(TDM) (Time-division multiplexing)  等</p></blockquote><ul><li> 为呼叫分配片 </li><li> 如果某个呼叫没有数据， 则其资源片处于空闲状态 （不共享）</li></ul><p><img src="/images/1689169047173-ec94e1d0-6960-45fa-b40b-71988d22baef.png" alt="image.png"><br><strong>这个资源的分发暂时不太明白</strong><br><strong>举例：</strong><br><img src="/images/1689169361258-b11f0efb-841d-4c0d-8417-c686d85c015a.png" alt="image.png"></p><h3 id="电路交换其实不适合计算机之间的通信"><a href="#电路交换其实不适合计算机之间的通信" class="headerlink" title="电路交换其实不适合计算机之间的通信"></a>电路交换其实不适合计算机之间的通信</h3><p>**原因： **</p><ol><li>连接建立时间长</li><li>计算机之间的通信有突发性，如果使用线路交换，则浪费的片较多<ol><li>即使这个呼叫没有数据传输 ，其所占据的片也不能够被别的呼叫使用</li></ol></li><li>可靠性不高</li></ol><h2 id="网络核心—-分组交换"><a href="#网络核心—-分组交换" class="headerlink" title="网络核心—- 分组交换"></a>网络核心—- 分组交换</h2><p><img src="/images/1689169627702-e791b7e5-a469-4ce7-8626-ceb5e2dc4cf3.png" alt="image.png"></p><h3 id="以分组为单位存储—转发方式"><a href="#以分组为单位存储—转发方式" class="headerlink" title="以分组为单位存储—转发方式"></a>以分组为单位存储—转发方式</h3><ul><li>**网络带宽资源不再分分为一个 个片，传输时使用全部带宽 **</li><li>**主机之间传输的数据被分为一 个个分组  **</li></ul><h3 id="资源共享，-按需使用："><a href="#资源共享，-按需使用：" class="headerlink" title="资源共享， 按需使用："></a>资源共享， 按需使用：</h3><ul><li><strong>存储-转发：分组每次移 动一跳（ hop ）</strong> <ul><li>在转发之前，节点必须收到 整个分组 </li><li>延迟比线路交换要大 </li><li>排队时间</li></ul></li></ul><h3 id="分组交换：-存储–-转发"><a href="#分组交换：-存储–-转发" class="headerlink" title="分组交换： 存储– 转发"></a>分组交换： 存储– 转发</h3><p><img src="/images/1689169820072-a0ccf53e-1b81-48c2-8809-7a286181df7d.png" alt="image.png"></p><ul><li>** 被传输到下一个链路之前， 整个分组必须到达路由器： 存储-转发 **</li><li>** 在一个速率为R bps的链路 ，一个长度为L bits 的分组 的存储转发延时：L&#x2F;R s **</li></ul><blockquote><p>比如： L&#x3D; 7.5 mbits  ;; R &#x3D;1.5 mbits 那么3次存储转发的延时为15s</p></blockquote><h3 id="分组交换：-排队延迟-和丢失"><a href="#分组交换：-排队延迟-和丢失" class="headerlink" title="分组交换： 排队延迟 和丢失"></a>分组交换： 排队延迟 和丢失</h3><p><img src="/images/1689169946880-5e714a1d-3a39-4e35-a42a-5c422d3b2f47.png" alt="image.png"></p><ol><li>**排队和延迟： **<ol><li>如果到达速率&gt;链路的输出速率: <ol><li>分组将会排队，等待传输 </li><li>如果路由器的缓存用完了，分组将会被抛弃</li></ol></li></ol></li></ol><h3 id="分组交换：-统计多路复用"><a href="#分组交换：-统计多路复用" class="headerlink" title="分组交换： 统计多路复用"></a>分组交换： 统计多路复用</h3><p><img src="/images/1689170545391-d76b861b-7249-4bc4-b984-f6bb55108493.png" alt="image.png"></p><h2 id="网络核心的关键功能"><a href="#网络核心的关键功能" class="headerlink" title="网络核心的关键功能"></a>网络核心的关键功能</h2><ol><li><strong>路由： （全局）</strong></li></ol><p><strong>决定分组采用的源到目标的路径</strong></p><ol start="2"><li><strong>转发： （局部）</strong></li></ol><p><strong>将分组从路由器的输入链路转移到输出链路</strong><br><img src="/images/1689170470098-369a19aa-bc89-4e3c-8400-a28d295539ba.png" alt="image.png"></p><h2 id="分组交换VS电路交换"><a href="#分组交换VS电路交换" class="headerlink" title="分组交换VS电路交换"></a>分组交换VS电路交换</h2><ol><li>** 同样的网络资源，分组交换允许更多用户使用网络！  **</li></ol><p>对比：<br>  <img src="/images/1689170705005-3aff3190-d60c-420f-bac8-82c3f149065b.png" alt="image.png"></p><ol start="2"><li>**分组交换是“突发数据的胜利者”  **</li></ol><ul><li>**适合于对突发式数据传输 **<ul><li>资源共享 </li><li>简单，不必建立呼叫** **</li></ul></li><li>**过度使用会造成网络拥塞：分组延时和丢失 **<ul><li>对可靠地数据传输需要协议来约束：拥塞控制</li></ul></li><li>**Q: 怎样提供类似电路交换的服务？ **<ul><li>保证音频&#x2F;视频应用需要的带宽 </li><li>一个仍未解决的问题(chapter 7)</li></ul></li></ul><h3 id="分组交换网络：-存储-转发"><a href="#分组交换网络：-存储-转发" class="headerlink" title="分组交换网络： 存储- 转发"></a>分组交换网络： 存储- 转发</h3><p><strong>分组交换: 分组的存储转发一段一段从源端传到目标端，按照有无网络层的连接，分成：</strong></p><ol><li><strong>数据报网络：</strong> <ul><li>分组的目标地址决定下一跳 </li><li>在不同的阶段，路由可以改变 </li><li>类似：问路 </li><li><strong>Internent</strong></li></ul></li><li><strong>虚电路网络：</strong></li></ol><ul><li>每个分组都带标签（虚电路标识 VC ID），标签决定下一跳 </li><li>在呼叫建立时决定路径，在整个呼叫中路径保持不变 </li><li>**路由器维持每个呼叫的状态信息 **</li><li>X.25 和ATM</li></ul><h3 id="数据报（datagram）的工作原理"><a href="#数据报（datagram）的工作原理" class="headerlink" title="数据报（datagram）的工作原理"></a>数据报（datagram）的工作原理</h3><ol><li>在通信之前,无须建立起一个连接,有数据就传输 </li><li>每一个分组都独立路由(路径不一样,可能会失序) </li><li>路由器根据分组的目标地址进行路由</li></ol><p><img src="/images/1689171873996-ec5102b2-829b-44a4-aef2-ba21283a9f7c.png" alt="image.png"></p><h3 id="虚电路（virtual-circuit）的工作原理"><a href="#虚电路（virtual-circuit）的工作原理" class="headerlink" title="虚电路（virtual circuit）的工作原理"></a>虚电路（virtual circuit）的工作原理</h3><blockquote><p>存储- 转发</p></blockquote><p><img src="/images/1689171952063-a8133e47-f629-48ff-b1e4-15d4feb564ea.png" alt="image.png"></p><h1 id="接入网、物理媒体"><a href="#接入网、物理媒体" class="headerlink" title="接入网、物理媒体"></a>接入网、物理媒体</h1><blockquote><p>如何<strong>将边缘接入核心</strong>就是接入网需要做的事情<br>以及我们需要知道接入网的物理媒介就是媒体</p></blockquote><h3 id="如何将端系统和边缘路由器连接？"><a href="#如何将端系统和边缘路由器连接？" class="headerlink" title="如何将端系统和边缘路由器连接？"></a>如何将端系统和边缘路由器连接？</h3><ol><li>住宅接入网络</li><li>单位接入网络</li><li>无线接入网络</li></ol><p>那么接入网络的带宽又是多少呢？ 这个网络是共享的还是专用的 ？<br><strong>两个接入的指标： 就是带宽以及共享&#x2F;专用</strong></p><h2 id="住宅接入-：-modem"><a href="#住宅接入-：-modem" class="headerlink" title="住宅接入 ： modem"></a>住宅接入 ： modem</h2><ol><li>**将上网数据调制加载音频信号上， 在电话线上传输，在局端将其中的 数据解调出来；反之亦然 **<ul><li>调频 </li><li>调幅</li><li>调相位</li><li>综合调制</li></ul></li><li><strong>拨号调制解调器 (相当于是电话线)</strong><ul><li>56Kbps 的速率直接接入路由器 (通常更低) </li><li>不能同时上网和打电话：不能 总是在线</li></ul></li></ol><h3 id="接入网：-digital-subscriber-line-（DSL）方式"><a href="#接入网：-digital-subscriber-line-（DSL）方式" class="headerlink" title="接入网： digital subscriber line （DSL）方式"></a>接入网： digital subscriber line （DSL）方式</h3><p><img src="/images/1689388104773-ee433e03-12a5-4ab1-a7d7-1ec3ad67dc94.png" alt="image.png"><br>** 通过采用现存的到交换局DSLAM的电话线  **<br>** 然后将数据传输到互联网上， 将语音传输到电话网上。**</p><ul><li>&lt; 2.5 Mbps上行传输速率(typically &lt; 1 Mbps) </li><li>&lt; 24 Mbps下行传输速率(typically &lt; 10 Mbps)</li></ul><h3 id="住宅接入：-电缆模式"><a href="#住宅接入：-电缆模式" class="headerlink" title="住宅接入： 电缆模式"></a>住宅接入： 电缆模式</h3><blockquote><p>越往上越是光纤 ， 越往下越是同轴电缆（HFC）</p></blockquote><p><img src="/images/1689388826455-6d735f35-fa34-4340-98ee-6f6a3c224869.png" alt="image.png"></p><h2 id="接入网-线缆网络-（单位接入）"><a href="#接入网-线缆网络-（单位接入）" class="headerlink" title="接入网: 线缆网络  （单位接入）"></a>接入网: 线缆网络  （单位接入）</h2><p><img src="/images/1689388235360-3c5b2dd7-7cc6-4499-8a07-b5e725340a03.png" alt="image.png"><br> 有线电视信号线缆双向改造<br>**FDM: **在不同频段传输不同信道的数据， 数字电视和上网数据（上下行）<br>对于有些有线的、比较普及的线路（电线等）， 其实是可以通过电线进行网络传输<br><img src="/images/1689388351979-6cfed955-73b0-4ac2-a212-ffc891cb2c90.png" alt="image.png"></p><ol><li>** HFC: hybrid fiber coax （混合光纤同轴电缆）**</li></ol><ul><li>** 带宽划分是非对称的:** 最高30Mbps的下行传输速率, 2 Mbps 上行传输 速率</li></ul><ol start="2"><li><strong>线缆和光纤</strong>网络将个家庭用户接入到 ISP 路由器 ** **</li><li>** 各用户共享到线缆头端的接入网络  **</li></ol><ul><li>**与DSL不同, DSL每个用户一个专用线路到CO（central office）  **</li></ul><p><strong>接入网： 家庭网络</strong><br><img src="/images/1689388901694-6383e65c-11d0-4bfb-bba3-7a9ea2d89734.png" alt="image.png"></p><h3 id="企业接入网络（Ethernet）"><a href="#企业接入网络（Ethernet）" class="headerlink" title="企业接入网络（Ethernet）"></a>企业接入网络（Ethernet）</h3><p><img src="/images/1689388947369-2d199222-bce0-4630-a959-b7af40daf123.png" alt="image.png"></p><ul><li>经常被企业或者大学等机构采用 </li><li>10 Mbps, 100Mbps, 1Gbps, 10Gbps传输率 </li><li>现在，端系统经常直接接到以太网络交换机上</li></ul><h4 id="无限接入网络"><a href="#无限接入网络" class="headerlink" title="#无限接入网络"></a>#无限接入网络</h4><p>**各无线端系统共享无线接入网络（端系统到无线路由器） **</p><ul><li>**通过基站或者叫接入点  **</li></ul><p><img src="/images/1689389032573-644ad2ff-7c91-4335-9d1f-0d8709fe8c27.png" alt="image.png"></p><h2 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a>物理媒体</h2><ul><li>**Bit: **在发送-接收对间传播 </li><li><strong>物理链路：</strong>连接每个发送-接 收对之间的物理媒体</li><li>**导引型媒体: **<ul><li>信号沿着固体媒介被导引：同 轴电缆、光纤、 双绞线</li></ul></li><li><strong>非导引型媒体：</strong><ul><li>开放的空间传输电磁波或者光 信号，在电磁或者光信号中承 载数字数据</li></ul></li><li>**双绞线 (TP) **</li></ul><p>**两根绝缘铜导线拧合 **<br>** 5类：100Mbps 以太网 ，Gbps 千兆位以太网  6类：10Gbps万兆以太网  **<br><img src="/images/1689389184747-cd76c10b-1c56-4403-a836-5b04d9034415.png" alt="image.png"></p><h3 id="物理媒体：-同轴电缆、-光纤"><a href="#物理媒体：-同轴电缆、-光纤" class="headerlink" title="物理媒体： 同轴电缆、 光纤"></a>物理媒体： 同轴电缆、 光纤</h3><p><strong>同轴电缆：</strong></p><ul><li>两根同轴的铜导线</li><li>双向</li><li>基带电缆： <ul><li>电缆上一个单个信道 </li><li>Ethernet</li></ul></li><li><strong>宽带电缆：</strong><ul><li>电缆上有多个信道</li><li>HFC</li></ul></li></ul><p><img src="/images/1689389556599-7c760838-a4e7-4f6f-a338-46ee6b2d73ed.png" alt="image.png"></p><p>**光纤和光缆： **</p><ul><li><strong>光脉冲</strong>，每个脉冲表示一个 bit，在玻璃纤维中传输 </li><li><strong>高速：</strong> 点到点的高速传输（如10 Gps-100Gbps传输速率 ） </li><li><strong>低误码率：</strong>在两个中继器之 间可以有很长的距离，不受 电磁噪声的干扰</li><li>** 安全  **</li></ul><h3 id="物理媒体：-无线链路"><a href="#物理媒体：-无线链路" class="headerlink" title="物理媒体： 无线链路"></a>物理媒体： 无线链路</h3><ul><li>**开放空间传输电磁波，携 带要传输的数据 **</li><li>**无需物理“线缆” **</li><li>**双向 **</li><li>传播环境效应：  反射  吸收  干扰</li></ul><p><strong>无线链路类型</strong></p><ul><li><strong>地面微波</strong></li><li><strong>LAN</strong></li><li><strong>wide-area</strong></li><li><strong>卫星</strong></li></ul><h1 id="Internet-x2F-ISP-结构"><a href="#Internet-x2F-ISP-结构" class="headerlink" title="Internet&#x2F;ISP 结构"></a>Internet&#x2F;ISP 结构</h1><p><strong>ISPs (Internet Service Providers)</strong></p><ul><li><p>** 端系统通过接入ISPs (Internet Service Providers)连 接到互联网**</p><ul><li>住宅，公司和大学的ISPs</li></ul></li><li><p>**接入ISPs相应的必须是互联的 **</p><ul><li>因此任何2个端系统可相互发送分组到对方</li></ul></li><li><p><strong>导致的“网络的网络”非常复杂</strong> </p><ul><li>发展和演化是通过经济的和国家的政策来驱动的</li></ul></li><li><p>让我们采用渐进方法来描述当前互联网的结构</p></li></ul><h2 id="互联网络结构：-网络中的网络"><a href="#互联网络结构：-网络中的网络" class="headerlink" title="互联网络结构： 网络中的网络"></a>互联网络结构： 网络中的网络</h2><blockquote><p>问题 ：给定数百万接入ISPs， 如何将他们互联到一块</p></blockquote><p><img src="/images/1689390022286-abcd910c-68af-4878-a266-5d3dadc110b2.png" alt="image.png"></p><blockquote><p> 问题: 给定数百万接入ISPs，如何将它们互联到一起  </p></blockquote><p><img src="/images/1689390046266-552a34ac-ea3c-4162-bc44-cb222e71e819.png" alt="image.png"></p><blockquote><p>选项: 将每个接入ISP都连接到全局ISP（全局范围内覆盖）？<br><strong>客户ISPs</strong>和<strong>提供者ISPs</strong>有经济合约  </p></blockquote><p><img src="/images/1689390086640-46d83280-59e9-4e72-b5c3-572c87c4b87d.png" alt="image.png"></p><h2 id="Internet结构：-network-of-networks"><a href="#Internet结构：-network-of-networks" class="headerlink" title="Internet结构： network of networks"></a>Internet结构： network of networks</h2><p><strong>松散的层次模型</strong><br>**中心： 第一层ISP( 如UUNet, BBN&#x2F;Genuity, Sprint, AT&amp;T）国家&#x2F;国际覆盖，速率极高  **</p><ul><li>直接与其他第一层ISP相连 </li><li>与大量的第二层ISP和其他客户网络相连</li></ul><p><img src="/images/1689394294068-cef85e29-861e-4ba5-90e9-fc07b49e889b.png" alt="image.png"><br><strong>第二层ISP: 更小些的 (通常是区域性的) ISP</strong> </p><ul><li>与一个或多个第一层ISPs，也可能与其他第二层ISP</li></ul><p><img src="/images/1689394443957-15aab005-1f73-40b5-afa9-cff1036553c2.png" alt="image.png"></p><h2 id="ISP之间的连接"><a href="#ISP之间的连接" class="headerlink" title="ISP之间的连接"></a>ISP之间的连接</h2><p><img src="/images/1689394481565-ad56bbc8-6567-4659-bfd8-13adf4beead0.png" alt="image.png"></p><ol><li>POP: 高层ISP面向客户网络的接入点，涉及费用结算 <ol><li>如一个低层ISP接入多个高层ISP，多宿（multi home）</li></ol></li><li>对等接入：2个ISP对等互接，不涉及费用结算  IXP：多个对等ISP互联互通之处，通常不涉及费用结算<ol><li>对等接入</li></ol></li><li>ICP自己部署专用网络，同时和各级ISP连接</li></ol><h1 id="性能：丢包、分组延时、吞吐量"><a href="#性能：丢包、分组延时、吞吐量" class="headerlink" title="性能：丢包、分组延时、吞吐量"></a>性能：丢包、分组延时、吞吐量</h1><h2 id="分组丢失和延时是怎么发生的-？"><a href="#分组丢失和延时是怎么发生的-？" class="headerlink" title="分组丢失和延时是怎么发生的  ？"></a>分组丢失和延时是怎么发生的  ？</h2><p> **在路由器缓冲区的分组队列 **</p><ul><li>分组到达链路的速率超过了链路输出的能力</li><li>分组等待排到队头、被传输</li></ul><p><img src="/images/1689396864685-58540b35-5412-4901-8ebf-c51ac2447316.png" alt="image.png"></p><blockquote><p>只有排在对头的 ，或者说是有可用缓存区的才会被传输， 剩下的都会被丢弃。</p></blockquote><h2 id="四种分组延时"><a href="#四种分组延时" class="headerlink" title="四种分组延时"></a>四种分组延时</h2><h3 id="节点处理延时："><a href="#节点处理延时：" class="headerlink" title="节点处理延时："></a>节点处理延时：</h3><ul><li>**检查 bit级差错 **</li><li>**检查分组首部和决定将分 组导向何处 **</li></ul><p><img src="/images/1689397068715-1dff0d1d-c422-4e62-a8de-66f22e9ee465.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1689398043362-7e6e9ba7-3975-4e69-bc3c-d92b321f2d7e.png#averageHue=%23fcf3f2&clientId=u7ec4b2b6-f7d8-4&from=paste&height=54&id=u146856c3&originHeight=67&originWidth=456&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=8099&status=done&style=none&taskId=uc457e8fd-3d3c-460e-8fde-3e15ea0523e&title=&width=364.8" alt="image.png"></p><ul><li><strong>dproc &#x3D; 处理延时</strong> <ul><li> 通常是微秒数量级或更少</li></ul></li><li><strong>dqueue &#x3D; 排队延时</strong> <ul><li> 取决于拥塞程度</li></ul></li><li><strong>dtrans &#x3D; 传输延时</strong> <ul><li> &#x3D; L&#x2F;R, 对低速率的链路而言很大（如拨号），通常为微秒级 到毫秒级</li></ul></li><li>**dprop &#x3D; 传播延时 **<ul><li> 几微秒到几百毫秒</li></ul></li></ul><h3 id="排队延时"><a href="#排队延时" class="headerlink" title="排队延时"></a>排队延时</h3><ul><li><strong>在输出链路上等待传输的 时间</strong></li><li>**依赖于路由器的拥塞程度  **</li></ul><p>【R&#x3D;链路带宽 (bps) 】【L&#x3D;分组长度 (bits) 】【a&#x3D;分组到达队列的平均 速率】<br>** 流量强度 &#x3D; La&#x2F;R**<img src="/images/1689397992789-8d62f122-cef7-4790-acf3-d070fc73b11c.png" alt="image.png"></p><ul><li>** La&#x2F;R ~ 0: 平均排队延时很小 **</li><li>** La&#x2F;R -&gt; 1: 延时变得很大 **</li><li>** La&#x2F;R &gt; 1: 比特到达队列的速率超过了从该队 列输出的速率，平均排队延时将趋向无穷大！    **</li></ul><h3 id="传输延时"><a href="#传输延时" class="headerlink" title="传输延时:"></a>传输延时:</h3><ul><li> R&#x3D;链路带宽(bps) </li><li> L&#x3D;分组长度(bits) </li><li> 将分组发送到链路上的 时间&#x3D; L&#x2F;R </li><li> 存储转发延时</li></ul><p><img src="/images/1689397163524-6f2aae25-cf86-45eb-8e70-524258a51332.png" alt="image.png"></p><h3 id="传播延时"><a href="#传播延时" class="headerlink" title="传播延时"></a>传播延时</h3><ul><li> d &#x3D; 物理链路的长度 </li><li> s &#x3D; 在媒体上的传播速度 (~2x108 m&#x2F;sec) </li><li> 传播延时 &#x3D; d&#x2F;s</li></ul><h2 id="Internet的延时和路由"><a href="#Internet的延时和路由" class="headerlink" title="Internet的延时和路由"></a>Internet的延时和路由</h2><blockquote><p>Internet的延时和路由是怎么样的？ </p></blockquote><p> **Traceroute 诊断程序: 提供从源端，经过路 由器，到目的的延时测量 **<br>**For all i: **</p><ul><li>沿着目的的路径，向每个路由器发送3个探测分组</li><li>路由器 i 将向发送方返回一个分组</li><li>发送方对发送和回复之间间隔计时</li></ul><p><img src="/images/1689400691063-8159c877-8c6d-4392-8dab-1fcfddcb5f14.png" alt="image.png"></p><blockquote><p>在linux下， 通过Traceroute [网址] ：就可以看到往返延时</p></blockquote><h2 id="分组丢失"><a href="#分组丢失" class="headerlink" title="分组丢失"></a>分组丢失</h2><ul><li> **链路的队列缓冲区容量有限 **</li><li>** 当分组到达一个满的队列时，该分组将会丢失 **</li><li><strong> 丢失的分组可能会被前一个节点或源端系统重 传，或根本不重传</strong></li></ul><p><img src="/images/1689401342676-bb17e843-38f6-4920-ba3d-ef8ee2b1c287.png" alt="image.png"></p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p><strong>吞吐量: 在源端和目标端之间传输的速率（数 据量&#x2F;单位时间）（有效的吞吐量）</strong><br><strong>瞬间吞吐量:</strong> 在一个时间点的速率<br><strong>平均吞吐量:</strong> 在一个长时间内平均值<br><img src="/images/1689401677998-8638c66a-efae-48b2-9b5a-ffabc63955d6.png" alt="image.png"></p><ul><li>Rs &lt; Rc 端到端平均吞吐是多少?</li></ul><blockquote><p>上下两个问题都是 ： 取决于最小的那一方<br>瓶颈链路   ： 端到端路径上，限制端到端吞吐的链路  </p></blockquote><ul><li>Rs &gt; Rc 端到端平均吞吐是多少?</li></ul><h3 id="吞吐量：-互联网场景"><a href="#吞吐量：-互联网场景" class="headerlink" title="吞吐量： 互联网场景"></a>吞吐量： 互联网场景</h3><p><img src="/images/1689401888317-f3e15370-dc3a-4bd7-ab69-4ef39a86ef45.png" alt="image.png"></p><h1 id="协议层次、服务模型"><a href="#协议层次、服务模型" class="headerlink" title="协议层次、服务模型"></a>协议层次、服务模型</h1><p><strong>网络是一个非常复杂的系统</strong></p><ul><li>网络功能繁杂：</li></ul><blockquote><p>数字信号的物理信 号承载、点到点、路由、rdt、进 程区分、应用等  </p></blockquote><ul><li>现在来看， 网络的许多构成元素设备：</li></ul><blockquote><p>主机、路由器、媒体链路、应用、协议、硬件、软件等等</p></blockquote><p>作为一个工程师， ** 如何组织和实现这个复 杂的网络功能？  **<br>采用分层的方式来实现这种复杂的网络功能。</p><h2 id="分层实现这种复杂的网络功能"><a href="#分层实现这种复杂的网络功能" class="headerlink" title="分层实现这种复杂的网络功能"></a>分层实现这种复杂的网络功能</h2><blockquote><p>类似于军队中的分配任务。一级一级向下分配任务， 由单个的任务实现从而达到上层的任务实现</p></blockquote><p> 层次化方式实现复杂网络功能: </p><ul><li><strong>将网络复杂的功能分层功能明确的层次，每一层实现了其中一个或一组 功能，功能中有其上层可以使用的功能：服务</strong></li><li>**本层协议实体相互交互执行本层的协议动作，目的是实现本层功能， 通过层间的接口为上层提供更好的服务 **</li><li><strong>在实现本层协议的时候，直接利用了下层所提供的服务 来实现数据报文的传输</strong></li><li>**本层的服务：借助下层服务实现的本层协议实体之间交互带来的新功能（上层可以利用的）+更下层所提供的服务  **</li></ul><h2 id="服务和服务访问点"><a href="#服务和服务访问点" class="headerlink" title="服务和服务访问点"></a>服务和服务访问点</h2><pre><code>  1. ** 服务( Service)：**低层实体向上层实体提供它们之间的 通信的能力  </code></pre><blockquote><ul><li>服务用户(service user) </li><li>服务提供者(service provider )</li></ul></blockquote><pre><code>  2.  **原语(primitive)：**上层使用下层服务的形式，高层使用 低层提供的服务，以及**低层向高层提供服务都是通过 服务访问原语来进行交互的**。</code></pre><blockquote><p>也就是**提供服务的形式 就是原语  **<br>服务访问者通过原语 来告诉 服务提供者 我需要你干什么 。<br>服务提供者也是通过原语来问服务访问者， 你要干嘛</p></blockquote><pre><code>  3.  **服务访问点 SAP (Services Access Point) ：**上层 使用下层提供的服务通过层间的接口—地点：** (也就是 ：下层的服务者区分上层服务访问者的信息)**</code></pre><blockquote><ul><li>例如： 邮箱</li><li>地址（address）： 下层的一个实体支撑着上层的多个实体， SAP有标志不同上层实体的作用</li><li>可以有不同的实现、队列</li><li>例子： 传输层的SAP：端口（port）</li></ul></blockquote><h2 id="服务的类型"><a href="#服务的类型" class="headerlink" title="服务的类型"></a>服务的类型</h2><blockquote><p>两种服务方式：  面向连接的服务和无连接的服务-方式  </p></blockquote><p>** 面向连接的服务( Connection-oriented Service)  **<br>** 无连接的服务(Connectionless Service)  **</p><h3 id="面向连接的服务方式"><a href="#面向连接的服务方式" class="headerlink" title="面向连接的服务方式"></a>面向连接的服务方式</h3><blockquote><p>用户在使用下层提供的服务之前， 需要进行握手， 来为后续的通信做出准备。 这就是面向连接的服务</p></blockquote><ul><li><strong>连接(Connection)：</strong>两个通信实体为进行通信而建立的一 种结合</li><li>面向连接的服务通信的过程：建立连接，通信，拆除连接 </li><li>面向连接的服务的例子：网络层的连接被成为虚电路 </li><li>适用范围：对于大的数据块要传输; 不适合小的零星报文</li><li>特点：保序 </li><li>服务类型: <ul><li>可靠的信息流 传送页面(可靠的获得,通过接收方的确认)</li><li>可靠的字节流 远程登录</li><li>不可靠的连接 数字化声音</li></ul></li></ul><h3 id="无连接的服务方式"><a href="#无连接的服务方式" class="headerlink" title="无连接的服务方式"></a>无连接的服务方式</h3><blockquote><p>两个应用进程采用UDP的方式进行交互， 在其通信之前不需要握手。 直接进行信息交换。</p></blockquote><ul><li><strong>无连接服务：</strong>两个对等层实体在通信前不需要建 立一个连接，不预留资源；不需要通信双方都是 活跃；(例：寄信)</li><li><strong>特点：</strong>不可靠、可能重复、可能失序 </li><li>IP分组，数据包； </li><li>适用范围：适合传送零星数据； </li><li><strong>服务类型</strong>：<ul><li>不可靠的数据报 电子方式的函件 </li><li>有确认的数据报 挂号信 </li><li>请求回答 信息查询  </li><li>、</li></ul></li></ul><h2 id="服务和协议"><a href="#服务和协议" class="headerlink" title="服务和协议"></a>服务和协议</h2><h3 id="服务和协议的区别"><a href="#服务和协议的区别" class="headerlink" title="服务和协议的区别"></a>服务和协议的区别</h3><ul><li><strong>服务(Service)：低层实体向上层实体提供它们之间的 通信的能力，是通过原语(primitive)来操作的，垂直 (上下层之间）</strong></li><li><strong>协议(protocol) ：对等层实体(peer entity)之间在相互 通信的过程中，需要遵循的规则的集合，水平 （同层之间）</strong></li></ul><h3 id="★服务与协议的联系★★★"><a href="#★服务与协议的联系★★★" class="headerlink" title="★服务与协议的联系★★★"></a>★服务与协议的联系★★★</h3><ul><li><strong>本层协议的实现要靠下层提供的服务来实现</strong></li><li>**本层实体通过协议为上层提供更高级的服务  **</li></ul><h2 id="数据单元（DU）"><a href="#数据单元（DU）" class="headerlink" title="数据单元（DU）"></a>数据单元（DU）</h2><p><img src="/images/1689477628468-ebb3f5db-5a06-402d-a690-949c7f41f287.png" alt="image.png"></p><blockquote><p>层次n向上层n+1 进行提供服务， 通过原语来区分上层服务。<br>上一层需要下层处理的数据或其他叫<strong>SDU (服务数据单元)</strong></p></blockquote><blockquote><p>在传输上下层之间有一个层间接口Interface， 所以需要加上一些控制信息， 这些控制信息叫做** ICI (接口控制信息)**</p></blockquote><blockquote><p>ICI  + SDU &#x3D;&#x3D;<strong>IDU （接口数据单元）</strong></p></blockquote><blockquote><p>上层的控制信息+ 本层服加的一些控制信息 &#x3D; （同步） 形成本层的<strong>PDU(协议数据单元)</strong></p></blockquote><blockquote><p><strong>1对多的关系：上层发送的一个(SDU)数据单元太大了，需要拆解成分组大小</strong></p></blockquote><p>每层交换的数据单元的称呼都是不一样的 ，但是表达的意思基本是一致的。 比如： </p><blockquote><p>应用层：报文；传输层：报文段或段；网络层：分组或数据报；链路层：侦；物理层：字节、位<br><img src="/images/1689480660098-84d75a2d-7cef-4a26-a0e7-197a569d26ff.png" alt="image.png"></p></blockquote><p><img src="/images/1689477672574-fee565bf-c2c3-41a3-b24a-01294ac92a9f.png" alt="image.png"></p><h2 id="分层处理和实现复杂系统的好处"><a href="#分层处理和实现复杂系统的好处" class="headerlink" title="分层处理和实现复杂系统的好处"></a>分层处理和实现复杂系统的好处</h2><ul><li><strong>概念化：</strong>结构清晰，便于标示网络组件，以及描述其 相互关系 <ul><li>分层参考模型</li></ul></li><li>**结构化：模块化更易于维护和系统升级 **（分而治之思想）<ul><li>改变某一层服务的实现不影响系统中的其他层次 </li><li>对于其他层次而言是透明的</li><li>便于交流和讨论</li></ul></li><li>如改变登机程序并不影响系统的其它部分<ul><li>改变2个秘书使用的通信方式不影响2个翻译的工作 </li><li>改变2个翻译使用的语言也不影响上下2个层次的工作</li></ul></li></ul><h3 id="分层思想被认为有害的地方？"><a href="#分层思想被认为有害的地方？" class="headerlink" title="分层思想被认为有害的地方？"></a>分层思想被认为有害的地方？</h3><p><strong>分层到若干个子系统， 子系统之间的信息交换的效率是非常低的</strong></p><blockquote><p><strong>总体好处 &gt; 坏处</strong></p></blockquote><h2 id="Internet中的协议栈★★★★★"><a href="#Internet中的协议栈★★★★★" class="headerlink" title="Internet中的协议栈★★★★★"></a>Internet中的协议栈★★★★★</h2><p><img src="/images/1689478941705-05da34f1-7e5d-42cf-82a8-3174502be509.png" alt="image.png"></p><h3 id="应用层-网络应用"><a href="#应用层-网络应用" class="headerlink" title="应用层: 网络应用"></a>应用层: 网络应用</h3><blockquote><p>**在传输层提供的可靠的传输基础上 为人类用户或者其他应用进程提供网络应用服务 **</p></blockquote><p><strong>如何保证这些服务之间的可靠性呢 ，那么这里就用到了应用层的协议：</strong></p><blockquote><p>FTP, SMTP, HTTP,DNS </p></blockquote><p>当然，应用层的协议有几千中， 以上仅是最重要的几个</p><h3 id="传输层-主机之间的数据传输"><a href="#传输层-主机之间的数据传输" class="headerlink" title="传输层: 主机之间的数据传输"></a>传输层: 主机之间的数据传输</h3><blockquote><p>**在网络层提供的端到端通信基础上，细分为进程 到 进程，将不可靠的通信变成可靠地通信 **</p></blockquote><p>**如何做到进程之间的区分 ？ **</p><blockquote><p>需要用到端口的机制</p></blockquote><p>**因为网络层传输的服务是不可靠的， 传输层如何保证这些服务之间的可靠性呢 ，那么这里就用到了传输协议—–TCP, UDP **</p><h3 id="网络层-为数据报从源到目的选择路由"><a href="#网络层-为数据报从源到目的选择路由" class="headerlink" title="网络层: 为数据报从源到目的选择路由"></a>网络层: 为数据报从源到目的选择路由</h3><blockquote><p>链路层传输的是相邻两点之间 ， 而我们需要的可不是相邻 ，而是全球范围内的通讯。</p></blockquote><p><img src="/images/1689479506812-20d31878-c485-442b-addf-82e10ef33fb2.png" alt="image.png"><br>网络的核心就是**源主机 和 目标主机之间的端对端的网络传输。 **<br><strong>同时这也是网络层要做的事。</strong></p><blockquote><p><strong>网络层 在链路层相邻两点传输的基础上， 传输以分组为单位的端对端的数据传输。</strong></p></blockquote><p>所以就需要</p><ul><li>主机主机之间的通信，端到端通信，不可靠 </li><li>**IP, 路由协议 **</li></ul><p><strong>所以网络层最重要的两个就是转发、路由</strong></p><h3 id="链路层-相邻网络节点间的数据传输"><a href="#链路层-相邻网络节点间的数据传输" class="headerlink" title="链路层: 相邻网络节点间的数据传输"></a>链路层: 相邻网络节点间的数据传输</h3><blockquote><p>两个网卡之间 通过一段链路 传输数据，然后连起来<br>链路层:   <strong>传输以 帧 为单位的数据 （在相邻两点之间 ）</strong><br><strong>在物理层提供的服务的基础上在相邻两点之间传输以 帧 为单位的数据</strong></p></blockquote><ul><li>2个相邻2点的通信，点到点通信，可靠或不可靠</li><li>**点对对协议PPP, 802.11(wifi), Ethernet **</li></ul><h3 id="物理层-线路上传送bit"><a href="#物理层-线路上传送bit" class="headerlink" title="物理层: **线路上传送bit **"></a>物理层: **线路上传送bit **</h3><blockquote><p>**在线路上传送bit （组合而成为帧）  **</p></blockquote><p>将所有的信息转换为物理信号， 承载在媒体之上。然后在端与端之间进行传输</p><h3 id="除了互联网（Internet）的五层参考模型之外的其他模型-ISO-x2F-OSI-参考模型"><a href="#除了互联网（Internet）的五层参考模型之外的其他模型-ISO-x2F-OSI-参考模型" class="headerlink" title="除了互联网（Internet）的五层参考模型之外的其他模型 :  ISO&#x2F;OSI 参考模型"></a>除了互联网（Internet）的五层参考模型之外的其他模型 :  ISO&#x2F;OSI 参考模型</h3><p><img src="/images/1689480242834-5b31b30f-3791-4c01-984a-e1c6f3a7668b.png" alt="image.png"></p><h4 id="表示层："><a href="#表示层：" class="headerlink" title="表示层："></a>表示层：</h4><p>** 允许应用解释传输的 **数据, e.g., 加密，压缩，机 器相关的表示转换  </p><h4 id="会话层："><a href="#会话层：" class="headerlink" title="会话层："></a>会话层：</h4><p>** 数据交换的同步，检 查点，恢复  **</p><h4 id="互联网协议栈是没有上述的两层"><a href="#互联网协议栈是没有上述的两层" class="headerlink" title="互联网协议栈是没有上述的两层"></a>互联网协议栈是没有上述的两层</h4><blockquote><p>虽然没有， 但是他们干的事情，在互联网协议栈中也是有的， 应用层自己去做。</p></blockquote><h2 id="封装和解封装"><a href="#封装和解封装" class="headerlink" title="封装和解封装"></a>封装和解封装</h2><p><img src="/images/1689480476579-5321ec03-c87c-4ca6-8faf-26e72a89f5aa.png" alt="image.png"></p><h2 id="各层次的协议数据单元"><a href="#各层次的协议数据单元" class="headerlink" title="各层次的协议数据单元"></a>各层次的协议数据单元</h2><ul><li>**应用层：报文(message) **</li><li><strong>传输层：报文段(segment)：TCP段，UDP数据报</strong></li><li><strong>网络层：分组packet（如果无连接方式：数据报 datagram</strong></li><li>**数据链路层：帧(frame) **</li><li>**物理层：位(bit)  **</li></ul><h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识微服务</title>
      <link href="/post/6c845d13.html"/>
      <url>/post/6c845d13.html</url>
      
        <content type="html"><![CDATA[<h1 id="单体架构与微服务架构的区别"><a href="#单体架构与微服务架构的区别" class="headerlink" title="单体架构与微服务架构的区别"></a>单体架构与微服务架构的区别</h1><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><p><img src="/images/1688992745502-af6d58bd-27bb-46df-87aa-c3d4dd05eaff.png" alt="img"></p><p>将所有的业务功能都集中在一个项目中开发， 打包成一个包部署。</p><p>优点： 就是成本低， 架构简单</p><p>缺点：  耦合度极高</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p><img src="/images/1688992835763-75903c12-f007-44ce-aedb-77ab1e2473eb.png" alt="img"></p><p>根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。</p><p>优点： 降低服务的耦合； 有利于升级拓展项目</p><h3 id="这样的微服务架构的问题一："><a href="#这样的微服务架构的问题一：" class="headerlink" title="这样的微服务架构的问题一："></a>这样的微服务架构的问题一：</h3><p>业务越多 ，项目结构越复杂， 那么服务与服务之间的业务关系调用就会越来越复杂。 </p><p>如此复杂的业务关系， 想要靠人来解决是不可能的， 所以微服务提供了一个组件—–注册中心</p><h3 id="注册中心解决问题一"><a href="#注册中心解决问题一" class="headerlink" title="注册中心解决问题一"></a>注册中心解决问题一</h3><p>注册中心可以记录微服务中 ，每个服务的IP、端口、及其他们的作用（能干什么）</p><p>如果一个服务想要调用另一个服务，那么想要知道该服务的作用， 就直接找到他的注册中心就可以得到对应的服务信息。</p><h3 id="出现的问题二：-多个服务引起的很多配置文件的修改问题"><a href="#出现的问题二：-多个服务引起的很多配置文件的修改问题" class="headerlink" title="出现的问题二： 多个服务引起的很多配置文件的修改问题"></a>出现的问题二： 多个服务引起的很多配置文件的修改问题</h3><p>随着服务的增多， 配置信息也会海量的上升， 对于我们的管理是非常不利的。所以微服务提供了配置中心， 他可以管理这些服务中的所有配置</p><h3 id="解决问题二-：配置中心解决。"><a href="#解决问题二-：配置中心解决。" class="headerlink" title="解决问题二 ：配置中心解决。"></a>解决问题二 ：配置中心解决。</h3><p>配置中心可以管理所有我们的配置文件。</p><p>如果以后需要有配置进行变更， 我们<strong>只需要通知配置中心即可 。它可以通知相关的微服务，实现配置的热更新。</strong></p><h3 id="问题三：-微服务过多，用户访问的时候不知道访问哪个"><a href="#问题三：-微服务过多，用户访问的时候不知道访问哪个" class="headerlink" title="问题三： 微服务过多，用户访问的时候不知道访问哪个"></a>问题三： 微服务过多，用户访问的时候不知道访问哪个</h3><p>微服务数量达到一定的数量 ，靠我们人为的去维护管理是不可能的， 同时也不是任何用户来都能够访问我们的服务。所以需要进行管理。</p><h3 id="服务网关-解决问题三"><a href="#服务网关-解决问题三" class="headerlink" title="服务网关 解决问题三"></a>服务网关 解决问题三</h3><p>服务网关可以实现对进入服务的用户身份进行认证管理</p><p>同时还可以将用户的请求 转发到具体的请求。（<strong>请求路由</strong>）</p><p>通过上述的服务网关， 我们就可以将得到的用户请求发送到对应的服务上， 然后服务就可以通过数据库等查询到对应的信息返回给用户。</p><h3 id="问题四：-不可能所有的请求都访问数据库吧-？"><a href="#问题四：-不可能所有的请求都访问数据库吧-？" class="headerlink" title="问题四： 不可能所有的请求都访问数据库吧 ？"></a>问题四： 不可能所有的请求都访问数据库吧 ？</h3><p>通过服务网关， 我们就可以将得到的用户请求发送到对应的服务上， 然后服务就可以通过数据库等查询到对应的信息返回给用户。</p><p>但是 ，这么多的请求， 这么多的服务。如果全部打到数据库上， 那么对于数据库的压力将是恐怖的。 所以我们需要将数据进行缓存。</p><h3 id="分布式缓存解决问题四。"><a href="#分布式缓存解决问题四。" class="headerlink" title="分布式缓存解决问题四。"></a>分布式缓存解决问题四。</h3><p>对于分布式的集群任务， 我们需要对应的缓存来缓解数据库的访问压力。所以就需要分布式缓存。</p><p>分布式集群的请求 ，先打到分布式缓存中， 缓存未命中，再访问数据库。</p><h3 id="问题五：-分布式集群中的请求往往覆盖多个服务，如何解决-？"><a href="#问题五：-分布式集群中的请求往往覆盖多个服务，如何解决-？" class="headerlink" title="问题五： 分布式集群中的请求往往覆盖多个服务，如何解决 ？"></a>问题五： 分布式集群中的请求往往覆盖多个服务，如何解决 ？</h3><p>对于分布式集群来说， 我们的请求可能需要调用不同的集群才能完成一个任务，那么如何处理分配这些请求的执行顺序（执行时间等等），如何分配这些时常，就是我们需要解决的问题。</p><p>如果无法很好的分配这些任务的执行 ， 对于系统的性能是有极大影响的</p><h3 id="消息队列解决问题五"><a href="#消息队列解决问题五" class="headerlink" title="消息队列解决问题五."></a>消息队列解决问题五.</h3><p>消息对列就可以很好的解决这些请求的调度。</p><p>提高服务的并发。</p><h3 id="问题六：-服务出现问题如何解决。"><a href="#问题六：-服务出现问题如何解决。" class="headerlink" title="问题六： 服务出现问题如何解决。"></a>问题六： 服务出现问题如何解决。</h3><p>如此庞大的集群， 一旦出现问题那将是致命的， 所以我们需要一些东西来维护定位，乃至追踪这些问题。 所以就引入了分布式服务日志 &amp;&amp; 系统监控链路追踪。</p><h3 id="分布式日志服务解决问题六"><a href="#分布式日志服务解决问题六" class="headerlink" title="分布式日志服务解决问题六"></a>分布式日志服务解决问题六</h3><p>通过分布式日志服务， 我们可以解决对于出现问题的定位， 但是我们还需要监控来定位乃至观察这些服务的运行情况， 这就用到了系统监控和链路追踪</p><h3 id="问题七：-微服务的部署"><a href="#问题七：-微服务的部署" class="headerlink" title="问题七： 微服务的部署"></a>问题七： 微服务的部署</h3><p>服务集群达到这样的量级， 如果还是通过人工部署那当然是不现实的， 所以就需要用到自动化集群的部署 </p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="Jenkins解决问题七"><a href="#Jenkins解决问题七" class="headerlink" title="Jenkins解决问题七"></a>Jenkins解决问题七</h3><p>通过Jenkins来实现对微服务进行自动化的编译， 基于Docker进行打包形成镜像。再通过K8s 或者 RANCHER这样的技术实现微服务的集成部署。</p><h2 id="微服务架构总结图"><a href="#微服务架构总结图" class="headerlink" title="微服务架构总结图"></a>微服务架构总结图</h2><p><img src="/images/1688995010678-73ad042e-59b4-4d33-808f-125916f61358.png" alt="img"></p><p><img src="/images/1688995233004-a1f18a75-ce10-4ec2-b128-30f9f43add8e.png" alt="img"></p><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1><h1 id="微服务技术的划分"><a href="#微服务技术的划分" class="headerlink" title="微服务技术的划分"></a>微服务技术的划分</h1><h2 id="微服务治理SpringCloud"><a href="#微服务治理SpringCloud" class="headerlink" title="微服务治理SpringCloud"></a>微服务治理SpringCloud</h2><p><strong>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：</strong><a href="https://spring.io/projects/spring-cloud"><strong>https://spring.io/projects/spring-cloud</strong></a><strong>。</strong></p><p><strong>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</strong></p><p><img src="/images/1688995099438-9fa692ec-1358-4262-bbd9-5bac8c343e63.png" alt="img"></p><h2 id="分布式的缓存"><a href="#分布式的缓存" class="headerlink" title="分布式的缓存"></a>分布式的缓存</h2><p><img src="/images/1688995284927-778374c6-ff94-4acc-b669-71114e2f1d56.png" alt="img"></p><h2 id="异步通信技术"><a href="#异步通信技术" class="headerlink" title="异步通信技术"></a>异步通信技术</h2><p><img src="/images/1688995299497-7eb1f526-c055-4469-952d-36dc5acbef27.png" alt="img"></p><h2 id="分布式搜索的技术"><a href="#分布式搜索的技术" class="headerlink" title="分布式搜索的技术"></a>分布式搜索的技术</h2><p><img src="/images/1688995330410-cce990a5-3093-4503-8edc-e61e16803894.png" alt="img"></p><h2 id="持续集成DevOps技术"><a href="#持续集成DevOps技术" class="headerlink" title="持续集成DevOps技术"></a>持续集成DevOps技术</h2><p><img src="/images/1688995366939-9d2715b3-bd76-4c96-a45e-4a521c92e5b9.png" alt="img"></p><h1 id="hm的学习大纲"><a href="#hm的学习大纲" class="headerlink" title="hm的学习大纲"></a>hm的学习大纲</h1><p><img src="/images/1688995589351-408af337-9032-4a67-9615-786f7b7e436d.png" alt="img"></p><p><img src="/images/1688995626482-72d19447-5678-46d9-9cec-5e9975d10745.png" alt="img"></p><p><img src="/images/1688995650922-a045dd11-ebef-4531-afe5-f26d8da50711.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统</title>
      <link href="/post/1b9c8662.html"/>
      <url>/post/1b9c8662.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="文件系统和文件"><a href="#文件系统和文件" class="headerlink" title="文件系统和文件"></a>文件系统和文件</h2><p><strong>文件系统: 一种用于持久性存储的系统抽象</strong></p><ul><li>在存储上: 组织,控制,导航,访问和检索数据</li><li>在大多数计算机系统包含文件系统</li><li>个人电脑,服务器,笔记本电脑</li><li>ipod,tivo,机顶盒,手机,电脑</li><li>google可能也是由一个文件系统构成的</li></ul><p><strong>文件: 文件系统中的一个单元的相关数据在操作系统中的抽象</strong></p><h3 id="文件系统的功能"><a href="#文件系统的功能" class="headerlink" title="文件系统的功能:"></a>文件系统的功能:</h3><ul><li><p><strong>1.</strong> <strong>分配文件磁盘空间</strong></p></li><li><ul><li>管理文件块(哪一块属于哪一个文件)</li><li>管理空闲空间(哪一块是空闲的)</li><li>分配算法(策略)</li></ul></li><li><p>2**. 管理文件集合**</p></li><li><ul><li><strong>定位</strong>文件及其内容</li><li><strong>命名:</strong> 通过名字找到文件的接口</li><li>最常见: <strong>分层文件系统</strong></li><li>文件系统类型(组织文件的不同方式)</li></ul></li><li><p><strong>3. 提供的便利及特征</strong></p></li><li><ul><li><strong>保护:</strong> 分层来保护数据安全</li><li><strong>可靠性,持久性</strong>: 保持文件的持久即使发生崩溃,媒体错误,攻击等</li></ul></li></ul><p><strong>文件和块:</strong></p><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性:"></a>文件属性:</h3><p>名称,类型,位置,大小,保护,创建者,创建时间,最久修改时间…</p><p><strong>文件头:</strong></p><p> 在存储元数据中保存了每个文件的信息,保存文件的属性,跟踪哪一块存储块属于逻辑上文件结构的哪个偏移</p><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><ol><li><strong>文件使用模式:</strong></li></ol><p>使用程序必须在使用前先”打开”文件 open(name, flag)</p><ol><li><strong>内核跟踪每个进程打开的文件:</strong></li></ol><ul><li>操作系统为每个进程维护一个打开文件表</li><li>一个打开文件描述符是这个表中的索引</li></ul><p><img src="/images/1688892126665-9f351ce8-0cb0-4291-a507-49c36f5fbc7a.png" alt="img"></p><ol><li><strong>需要元数据来管理打开文件:</strong></li></ol><ul><li><strong>文件指针:</strong> 指向最近的一次读写位置,每个打开了这个文件的进程都这个指针</li><li><strong>文件打开计数:</strong> 记录文件打开的次数 - 当最后一个进程关闭了文件时,允许将其从打开文件表中移除</li><li><strong>文件磁盘位置</strong>: 缓存数据访问信息</li><li><strong>访问权限:</strong> 每个程序访问模式信息</li></ul><p><strong>3_1. 用户视图:</strong> 持久的数据结构</p><p><strong>3_2. 系统访问接口</strong></p><p>字节的集合(UNIX)</p><p>系统不会关心你想存储在磁盘上的任何的数据结构</p><p><strong>3_3. 操作系统内部视角:</strong></p><p>块的集合(块是逻辑转换单元,而扇区是物理转换单元)</p><p>块大小&lt;&gt; 扇区大小: 在UNIX中, 块的大小是 4KB</p><h3 id="当用户说-给我2-12字节空间时会发生什么"><a href="#当用户说-给我2-12字节空间时会发生什么" class="headerlink" title="当用户说: 给我2-12字节空间时会发生什么?"></a>当用户说: 给我2-12字节空间时会发生什么?</h3><ol><li>获取字节所在的快</li><li>返回快内对应部分</li></ol><h3 id="如果要写2-12字节"><a href="#如果要写2-12字节" class="headerlink" title="如果要写2-12字节?"></a>如果要写2-12字节?</h3><ol><li>获取块</li><li>修改块内对应部分</li><li>写回块</li></ol><h3 id="在文件系统中的所有操作都是在整个块空间上进行的"><a href="#在文件系统中的所有操作都是在整个块空间上进行的" class="headerlink" title="在文件系统中的所有操作都是在整个块空间上进行的:"></a>在文件系统中的所有操作都是在整个块空间上进行的:</h3><p>getc() putc() 即使每次只访问1字节的数据,也会缓存目标数据4096字节(一个磁盘块)</p><h3 id="用户怎么访问文件"><a href="#用户怎么访问文件" class="headerlink" title="用户怎么访问文件:"></a>用户怎么访问文件:</h3><p><strong>在系统层面需要知道用户的访问模式</strong></p><ol><li><p>顺序访问: 按字节依次读取</p></li><li><ol><li>(几乎所有的访问都是这种方式)</li></ol></li><li><p>随机访问: 从中间读写</p></li><li><ol><li>(不常用,但是仍然重要,如: 虚拟内存支持文件,内存页存储在文件中;</li><li>更加快速,不希望获取文件中间的内容的时候也必须先获取块内所有字节)</li></ol></li><li><p>内容访问: 通过特征( 比较少用 )</p></li></ol><h3 id="文件内部结构"><a href="#文件内部结构" class="headerlink" title="文件内部结构"></a>文件内部结构</h3><ol><li><strong>无结构:</strong> 单词,比特的队列</li><li><strong>简单记录结构</strong>: 列；固定长度；可变长度</li><li><strong>复杂结构:</strong> 格式化的文档(word, PDF)； 可执行文件；…</li></ol><h3 id="文件访问的访问控制"><a href="#文件访问的访问控制" class="headerlink" title="文件访问的访问控制"></a>文件访问的访问控制</h3><p>多用户系统中的文件共享是很必要的</p><ol><li><strong>访问控制:</strong></li></ol><p>谁能够获得哪些文件的哪些访问权限</p><p>访问模式: 读,写,执行,删除,列举等</p><ol><li><strong>文件访问控制列表(ACL):</strong></li></ol><p>&lt;文件实体, 权限&gt;</p><ol><li><strong>UNIX模式:</strong></li></ol><ul><li>&lt;用户|组|所有人,读|写|可执行&gt;</li><li>用户ID识别用户,表明每个用户所允许的权限及保护模式</li><li>组ID允许用户组成组,并指定了组访问权限</li></ul><ol><li><strong>指定多用户,客户如何同时访问共享文件:</strong></li></ol><ul><li>和过程同步算法相似</li><li>因磁盘IO和网络延迟而设计简单</li></ul><h3 id="UNIX文件系统-UFS-语义"><a href="#UNIX文件系统-UFS-语义" class="headerlink" title="UNIX文件系统(UFS)语义:"></a>UNIX文件系统(UFS)语义:</h3><p>多个系统&#x2F;用户如何同时访问文件</p><p>对打开文件的写入内容立即对其他打开同一文件的其他用户可见</p><p>共享文件指针允许多用户同时读取和写入文件</p><p><strong>会话语义:</strong></p><p>写入内容只有当文件关闭时可见</p><p><strong>锁:</strong></p><p>一些操作系统和文件系统提供该功能</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><strong>文件以目录的方式组织起来</strong></p><p><strong>目录是一类特殊的文件:</strong> </p><p>每个目录都包含了一张表&lt;name, pointer to file header&gt;</p><p><strong>目录和文件的树形结构:</strong> </p><p>早期的文件系统是扁平的(只有一层目录)</p><p><strong>层次名称空间:</strong> </p><p><img src="/images/1688893070408-667233db-7404-448d-a751-4e20356b1cf5.png" alt="img"></p><p><strong>具体操作 ：</strong> </p><ul><li>搜索文件</li><li>创建文件</li><li>删除文件</li><li>枚举目录</li><li>重命名文件</li></ul><p><strong>操作系统应该只允许内核模式修改目录（root用户）</strong></p><p> 为 确保映射的完整性； 应用程序能够读目录(ls)</p><h3 id="文件名的线性列表-包含了指向数据块的指针"><a href="#文件名的线性列表-包含了指向数据块的指针" class="headerlink" title="文件名的线性列表,包含了指向数据块的指针:"></a>文件名的线性列表,包含了指向数据块的指针:</h3><p>编程简单 ； 执行耗时</p><p><strong>Hash表 - hash数据结构的线性表:</strong> </p><p>减少目录搜索时间；碰撞；固定大小</p><h3 id="文件名的解析"><a href="#文件名的解析" class="headerlink" title="文件名的解析"></a>文件名的解析</h3><p>逻辑名字转换成物理资源(如文件)的过程:</p><ul><li>在文件系统中: 到实际文件的文件名(路径)</li><li>遍历文件目录直到找到目标文件</li></ul><p><img src="/images/1688893379365-299d3a96-aaba-4275-850c-9251b3e370a5.png" alt="img"></p><h3 id="当前工作目录"><a href="#当前工作目录" class="headerlink" title="当前工作目录"></a>当前工作目录</h3><ol><li><strong>每个进程都会指向一个文件目录用于解析文件名</strong></li><li><strong>允许用户指定相对路径来代替绝对路径</strong></li><li><strong>一个文件系统需要先挂载才能被访问</strong></li><li><strong>一个未挂载的文件系统被挂载在挂载点上</strong></li></ol><p><img src="/images/1688893523398-77635847-db79-47d7-9583-e51c92fdd1f5.png" alt="img"></p><h2 id="文件别名"><a href="#文件别名" class="headerlink" title="文件别名"></a>文件别名</h2><ol><li><strong>两个或多个文件名关联同一个文件:</strong></li></ol><p><img src="/images/1688893602806-f6534e50-4f75-4eff-8f6f-9327996936a7.png" alt="img"></p><ol><li><strong>硬链接: 多个文件项指向一个文件</strong></li><li><strong>软链接: 以快捷方式指向其他文件</strong></li><li><strong>通过存储真实文件的逻辑名称来实现</strong></li></ol><h3 id="如果删除一个有别名的文件会如何呢"><a href="#如果删除一个有别名的文件会如何呢" class="headerlink" title="如果删除一个有别名的文件会如何呢?"></a>如果删除一个有别名的文件会如何呢?</h3><p>: 这个别名将成为一个悬空指针</p><ol><li><strong>Backpointers方案：</strong></li></ol><p><img src="/images/1688893703740-7bf3861c-5f09-4e59-b5d6-83cc52360b38.png" alt="img"></p><ol><li><strong>添加一个间接层： 目录项数据结构</strong></li></ol><ul><li>链接: 已存在文件的另外一个名字(指针)</li><li>链接处理: 跟随指针来定位文件</li></ul><p><img src="/images/1688893786855-457ca7f5-b40b-4d6e-8ec5-29ae068c56f6.png" alt="img"></p><p>相对于方案二 他会形成一个环。</p><p><strong>如何保证没有循环呢 ？</strong></p><ul><li>只允许到文件的链接, 不允许在子目录的链接</li><li>每增加一个新的链接都用循环检测算法确定是否合理</li><li>限制路径可遍历文件目录的数量</li></ul><h2 id="文件系统种类"><a href="#文件系统种类" class="headerlink" title="文件系统种类"></a>文件系统种类</h2><ol><li><strong>磁盘文件系统:</strong></li></ol><p> 文件存储在数据存储设备上,如磁盘; 例如: FAT,NTFS,ext2,3,ISO9660等</p><ol><li><strong>数据库文件系统:</strong></li></ol><p>文件根据其特征是可被寻址的; 例如: WinFS</p><ol><li><strong>日志文件系统:</strong></li></ol><p>记录文件系统的修改,事件; 例如: journaling file system</p><ol><li><strong>网络,分布式文件系统:</strong></li></ol><p> 例如: NFS,SMB,AFS,GFS</p><ol><li><strong>特殊,虚拟文件系统</strong></li></ol><p>网址等</p><ol><li><strong>文件可以通过网络被共享</strong></li></ol><p><img src="/images/1688894321755-b37f5b65-1b68-4a75-95cd-2f65cf839afe.png" alt="img"></p><ol><li><strong>分布式文件系统的问题</strong></li></ol><p><img src="/images/1688894335496-ce54dae6-db16-4afd-a068-a79c87c3ec71.png" alt="img"></p><h1 id="第二部分：-虚拟文件系统"><a href="#第二部分：-虚拟文件系统" class="headerlink" title="第二部分： 虚拟文件系统"></a>第二部分： 虚拟文件系统</h1><ol><li><p>分层结果</p></li><li><ol><li>上层： 虚拟文件系统</li><li>底层： 特定文件系统模块</li></ol></li></ol><p><img src="/images/1688894508865-c19fe2d3-938c-461f-9257-f4f10c189418.png" alt="img"></p><h2 id="虚拟文件系统的目标"><a href="#虚拟文件系统的目标" class="headerlink" title="虚拟文件系统的目标"></a>虚拟文件系统的目标</h2><p><strong>目的:</strong> <strong>对所有不同文件系统的抽象</strong></p><p><strong>功能:</strong></p><ul><li>提供相同的文件和文件系统接口</li><li>管理所有文件和文件系统关联的数据结构</li><li>高效查询例程,遍历文件系统</li><li>与特定文件系统模块的交互</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构:"></a>数据结构:</h2><ol><li><strong>卷[第四声]控制块(UNIX: “superblock”)</strong></li></ol><ul><li>每个文件系统一个</li><li>文件系统详细信息</li><li>块,块大小,空余块,计数,指针等</li></ul><ol><li><strong>文件控制块(UNIX: “vnode” or “inode”</strong>)</li></ol><ul><li>每个文件一个</li><li>文件详细信息</li><li>许可,拥有者,大小,数据库位置等</li></ul><ol><li><strong>目录节点(Linux: “dentry”)</strong></li></ol><ul><li>每个目录项一个(目录和文件)</li><li>将目录项数据结构及树形布局编码成树形数据结构</li><li>指向文件控制块,父节点,项目列表等</li></ul><p><img src="/images/1688894732562-9f9fc320-d988-46b6-924e-97290d641079.png" alt="img"></p><h3 id="文件系统数据结构-："><a href="#文件系统数据结构-：" class="headerlink" title="文件系统数据结构 ："></a>文件系统数据结构 ：</h3><ul><li><strong>卷控制块(每个文件系统一个)</strong></li><li><strong>文件控制块(每个文件一个)</strong></li><li><strong>目录节点(每个目录项一个)</strong></li></ul><h3 id="持续存储在二级存储中"><a href="#持续存储在二级存储中" class="headerlink" title="持续存储在二级存储中:"></a>持续存储在二级存储中:</h3><p> 在分配在存储设备中的数据块中</p><h3 id="当需要时加载进内存"><a href="#当需要时加载进内存" class="headerlink" title="当需要时加载进内存:"></a>当需要时加载进内存:</h3><ul><li>卷控制块: 当文件系统挂载时进入内存</li><li>文件控制块: 当文件被访问时进入内存</li><li>目录节点: 在遍历一个文件路径时进入内存</li></ul><h1 id="数据块缓存"><a href="#数据块缓存" class="headerlink" title="数据块缓存"></a>数据块缓存</h1><p><img src="/images/1688894994196-955a5451-82e5-4602-98fe-f41d3f8daaee.png" alt="img"></p><p>各种缓存方式</p><ol><li><strong>数据块按需读入内存:</strong></li></ol><ul><li>提供 read() 操作</li><li>预读: 预先读取后面的数据块</li></ul><ol><li><strong>数据块使用后被缓存:</strong></li></ol><ul><li>假设数据将会再次被使用</li><li>写操作可能被缓存和延迟写入</li></ul><ol><li><strong>两种数据块缓存方式:</strong></li></ol><ul><li><strong>普通缓冲区缓存</strong></li><li><strong>页缓存: 同一缓存数据块和内存页</strong></li></ul><p>分页要求: 当需要一个页时才将其载入内存</p><p>支持存储: 一个页(在虚拟地址空间中)可以被映射到一个本地文件中(在二级存储中)</p><p><img src="/images/1688895092293-421ccd1b-b8d5-40ca-b0a6-2097798ce2de.png" alt="img"></p><h2 id="文件数据块的页缓存"><a href="#文件数据块的页缓存" class="headerlink" title="文件数据块的页缓存"></a>文件数据块的页缓存</h2><ul><li>在虚拟内存中文件数据块被映射成页</li><li>文件的读写操作被转换成对内存的访问</li><li>可能导致缺页和&#x2F;或设置为脏页</li><li>问题： 页置换 – 从进程或文件页缓存中 ？</li></ul><p><img src="/images/1688895361139-8348c558-c809-456a-b190-392d00bcaeab.png" alt="img"></p><h1 id="打开文件的数据结构"><a href="#打开文件的数据结构" class="headerlink" title="打开文件的数据结构"></a>打开文件的数据结构</h1><p>我们都知道打开文件我们就可以对文件进行读写， 但是打开文件时操作系统干了那些事情就是这次需要学习的.</p><ol><li><strong>打开文件描述:</strong></li></ol><ul><li>每个被打开的文件一个</li><li>文件状态信息</li><li>目录项,当前文件指针,文件操作设置等</li></ul><ol><li><strong>打开文件表:</strong></li></ol><ul><li>一个进程一个</li><li>一个系统级的</li><li>每个卷控制块也会保存一个列表</li><li>所以如果有文件被打开将不能被卸载</li></ul><p><img src="/images/1688895511460-c73795a8-e7c7-4c7e-b839-5999557c9704.png" alt="img"></p><ol><li><strong>一些操作系统和文件系统提供该功能</strong></li><li><strong>调节对文件的访问</strong></li><li><strong>强制和劝告:</strong></li></ol><p>强制 - 根据锁保持情况和需求拒绝访问</p><p>劝告 - 进程可以查找锁的状态来决定怎么做</p><h1 id="文件分配"><a href="#文件分配" class="headerlink" title="文件分配"></a>文件分配</h1><p>打开文件后我们需要对文件进行相关的操作， 这些操作的背后是操作系统对内存&#x2F;文件等的分配数据块</p><h2 id="如何分配数据块"><a href="#如何分配数据块" class="headerlink" title="如何分配数据块"></a>如何分配数据块</h2><h3 id="分配方式"><a href="#分配方式" class="headerlink" title="分配方式:"></a>分配方式:</h3><ul><li><strong>连续分配</strong></li><li><strong>链式分配</strong></li><li><strong>索引分配</strong></li></ul><h3 id="指标"><a href="#指标" class="headerlink" title="指标:"></a>指标:</h3><ul><li><strong>高效: 如存储利用(外部碎片)</strong></li><li><strong>表现: 如访问速度</strong></li></ul><h3 id="一、方式一：连续分配"><a href="#一、方式一：连续分配" class="headerlink" title="一、方式一：连续分配:"></a>一、方式一：连续分配:</h3><p><strong>只需要知道 文件头指定起始块和长度</strong></p><p><strong>位置&#x2F;分配策略:</strong> 最先匹配,最佳匹配,…</p><p><strong>优势:</strong> 文件读取表现好;高效的顺序和随机访问</p><p><strong>缺点：</strong> 碎片;文件增长问题</p><p><img src="/images/1688895866112-408c2092-f86b-4daa-8e88-5ab92d518f3d.png" alt="img"></p><p>类似数组的形式。</p><h3 id="二、方式二：链式分配"><a href="#二、方式二：链式分配" class="headerlink" title="二、方式二：链式分配:"></a>二、方式二：链式分配:</h3><p><strong>文件以数据块<strong><strong>链表</strong></strong>方式存储</strong></p><p><strong>文件头包含了到第一块和最后一块的指针</strong></p><p><strong>优势:</strong> 创建,增大,缩小很容易;没有碎片</p><p><strong>劣势:</strong> 不可能进行真正的随机访问;可靠性</p><p><img src="/images/1688896004041-633cc1fc-32c0-48bf-b34d-c254f432f024.png" alt="img"></p><h3 id="三、索引分配"><a href="#三、索引分配" class="headerlink" title="三、索引分配:"></a>三、索引分配:</h3><p><strong>为每个文件创建一个名为索引数据块的非数据数据块(到文件数据块的指针列表)</strong></p><p><strong>文件头包含了索引数据块</strong></p><p><strong>优势:</strong> 创建,增大,缩小很容易;没有碎片;支持直接访问</p><p><strong>劣势:</strong> 当文件很小时,存储索引的开销大;处理大文件难</p><p><img src="/images/1688896119733-02b2d895-8527-4b51-8c2a-72e6350edb50.png" alt="img"></p><p>两种索引： </p><p><img src="/images/1688896262178-83536eed-180e-4904-a816-50a5b79681f8.png" alt="img"></p><p><strong>早期Unix阶段的文件索引块：</strong></p><p><img src="/images/1688896404187-7cd6b2d4-a8c7-4085-81fc-9078baad0d1c.png" alt="img"></p><p>可以看出如果文件容量小的很容易就能找到， 但是对于大容量的文件就非常麻烦， 对于性能及其数据块的开销等等都是有着很大的影响。</p><h1 id="空闲空间列表"><a href="#空闲空间列表" class="headerlink" title="空闲空间列表"></a>空闲空间列表</h1><p>站在磁盘的角度， 我们需要对文件进行分配空闲空间块， 对于空闲空间块一定是从空闲的磁盘块中来的。 但是空闲的磁盘块他不是属于文件的，与此同时他还需要被文件系统管理起来（类比我不是你们公司的人， 但是我需要和你们公司合作， 所以需要遵守贵公司的规定,,.,）</p><p>操作系统需要有效并且快速的将这些空闲的空间组织起来供文件系统去查找 及其分配等等 ，这些都是我们操作系统的文件系统需要去解决的问题。</p><h3 id="管理空闲空间块的使用程度："><a href="#管理空闲空间块的使用程度：" class="headerlink" title="管理空闲空间块的使用程度："></a>管理空闲空间块的使用程度：</h3><ol><li><strong>用位图代表空闲数据块列表:</strong></li></ol><p>11111101101110111 </p><p>如果 i &#x3D; 0表明数据块i 是空闲的, 反之是分配的</p><ol><li><strong>使用简单但是可能会是一个big vector:</strong></li></ol><ul><li>例如： 160GB disk →(有40MB的空闲块) 40M blocks → 5MB worth of bits（需要5MB来表示160GB磁盘的空闲情况）</li><li>然而,如果空闲空间在磁盘中均匀分布,那么再找到”0”之前需要扫描 磁盘上数据块总数 （n）&#x2F; 空闲块的数目（r）</li></ul><ol><li><strong>这个管理空闲空间的数据块空间 是需要保护</strong>:</li></ol><ul><li>指向空闲列表的指针</li><li>位图:</li></ul><p>必须保存在磁盘上; </p><p>在内存和磁盘拷贝可能有所不同; </p><p>不允许block[i]在内存中的状态为bit[i]&#x3D;1而在磁盘中bit[i]&#x3D;0</p><p><strong>解决:</strong></p><p>在磁盘上设置bit[i] &#x3D; 1;</p><p>分配block[i];</p><p>在内存中设置bit[i] &#x3D; 1</p><h1 id="多磁盘管理-RAID"><a href="#多磁盘管理-RAID" class="headerlink" title="多磁盘管理 -RAID"></a>多磁盘管理 -RAID</h1><p><img src="/images/1688897447010-9efbf65b-b27b-41bd-9b39-c4572eddb232.png" alt="img"></p><p><strong>通常磁盘通过分区来最大限度减小寻道时间:</strong></p><ul><li>一个分区是一个柱面的集合</li><li>每个分区都是逻辑上独立的磁盘</li></ul><p><strong>分区:   硬件磁盘的一种适合操作系统指定格式的划分</strong></p><p><strong>卷:      一个拥有一个文件系统实例的可访问的存储空间</strong></p><p><strong>(<strong>通常常驻在磁盘的单个分区上</strong>)</strong></p><p><img src="/images/1688897497005-576b968a-abc9-4b38-881e-4dc2fffeaed4.png" alt="img"></p><h2 id="提高磁盘数据可靠性及其性能"><a href="#提高磁盘数据可靠性及其性能" class="headerlink" title="提高磁盘数据可靠性及其性能"></a>提高磁盘数据可靠性及其性能</h2><ol><li><strong>使用多个并行磁盘来增加</strong>: 吞吐量(通过并行),可靠性和可用性(通过冗余)</li><li><strong>RAID - 冗余磁盘阵列:</strong></li></ol><p> 各种磁盘管理技术;RAID levels: 不同RAID分类,</p><p>如RAID-0,RAID-1,RAID-5</p><ol><li><strong>实现:</strong></li></ol><p>在操作系统内核: 存储,卷管理; RAID硬件控制器(IO)</p><h2 id="为什么我们可以通过RAID来提高磁盘效率呢？"><a href="#为什么我们可以通过RAID来提高磁盘效率呢？" class="headerlink" title="为什么我们可以通过RAID来提高磁盘效率呢？"></a>为什么我们可以通过RAID来提高磁盘效率呢？</h2><p>答 ：<strong>我们将数据放在相对独立的硬盘里面， 每个硬盘可以相对独立的并行工作。 这样就可以实现数据并行的访问。</strong> </p><p><img src="/images/1688897660422-3aa7dc83-9742-4b78-9e11-3926f86027c7.png" alt="img"></p><p><img src="/images/1688897781486-44fb2ba4-0f4f-4d6e-8c9a-0b8fafb35b9a.png" alt="img"> <img src="/images/1688897950550-12c0bf9b-ec62-420f-8e30-5d43943cd25c.png" alt="img"></p><p><img src="/images/1688898028508-1773e105-cfaa-48b1-a3be-dc92e99db071.png" alt="img"></p><h3 id="一、RAID-0"><a href="#一、RAID-0" class="headerlink" title="一、RAID-0"></a>一、RAID-0</h3><p>数据块分成多个子块, 存储在独立的磁盘中: 和内存交叉相似</p><p>通过更大的有效块大小来提供更大的磁盘带宽</p><h3 id="二、RAID-1"><a href="#二、RAID-1" class="headerlink" title="二、RAID-1"></a>二、RAID-1</h3><p>可靠性成倍增长</p><p>读取性能线性增加(向两个磁盘写入,从任何一个读取)</p><h3 id="三、RAID-4"><a href="#三、RAID-4" class="headerlink" title="三、RAID-4"></a>三、RAID-4</h3><p>数据块级磁带配有专用奇偶校验磁盘: 允许从任意一个故障磁盘中恢复</p><p>条带化和奇偶校验按byte-by-byte或者bit-by-bit: RAID-0,4,5: block-wise ;RAID-3: bit-wise</p><h3 id="四、RAID-5"><a href="#四、RAID-5" class="headerlink" title="四、RAID-5"></a>四、RAID-5</h3><p>每个条带快有一个奇偶校验块,允许有一个磁盘错误</p><h3 id="五、RAID-6"><a href="#五、RAID-6" class="headerlink" title="五、RAID-6"></a>五、RAID-6</h3><p>两个冗余块,有一种特殊的编码方式,允许两个磁盘错误</p><h1 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h1><p>磁盘性能优化的另一个层面（一个是RAID上一章） ： </p><p>通过重新组织IO的顺序来有效的减少磁盘的访问开销</p><p><img src="/images/1688898240156-6291ba85-07b2-4573-b567-1b5005b28edc.png" alt="img"></p><h2 id="磁盘的性能怎么来表示："><a href="#磁盘的性能怎么来表示：" class="headerlink" title="磁盘的性能怎么来表示："></a>磁盘的性能怎么来表示：</h2><ol><li><strong>读取或写入时,磁头必须被定位在期望的磁道,并从所期望的扇区开始</strong></li><li><strong>寻道时间:</strong> 定位到期望的磁道所花费的时间</li><li><strong>旋转延迟:</strong> 从扇区的开始处到到达目的处花费的时间</li></ol><p><strong>平均旋转延迟时间 &#x3D; 磁盘旋转一周时间的一半</strong></p><h3 id="IO传输时间表达式"><a href="#IO传输时间表达式" class="headerlink" title="IO传输时间表达式"></a>IO传输时间表达式</h3><p><img src="/images/1688898327274-814ba030-3344-4827-bd74-e3b7beddd3ae.png" alt="img"></p><h3 id="寻道时间是性能上区别的原因"><a href="#寻道时间是性能上区别的原因" class="headerlink" title="寻道时间是性能上区别的原因"></a>寻道时间是性能上区别的原因</h3><p>对单个磁盘,会有一个IO请求数目</p><p>如果请求是随机的,那么会表现很差</p><h3 id="如何解决这种磁盘上寻道时间的开销大的问题"><a href="#如何解决这种磁盘上寻道时间的开销大的问题" class="headerlink" title="如何解决这种磁盘上寻道时间的开销大的问题"></a>如何解决这种磁盘上寻道时间的开销大的问题</h3><h4 id="一-FIFO"><a href="#一-FIFO" class="headerlink" title="(一) FIFO"></a>(一) FIFO</h4><ol><li><strong>按顺序处理请求</strong></li><li><strong>公平对待所有进程</strong></li><li><strong>在有很多进程的情况下,接近随机调度的性能</strong></li></ol><p>虽然上述的FIFO是一种简洁的方式 ，但是它并不高效。 所以需要另一种方法 ：</p><h4 id="二-最短服务优先"><a href="#二-最短服务优先" class="headerlink" title="(二) 最短服务优先:"></a>(二) 最短服务优先:</h4><p>选择<strong>从磁臂当前位置需要移动最少</strong>的IO请求</p><p>总是选择最短寻道时间</p><p><img src="/images/1688898678870-eb4375fe-dff5-45a6-943d-d3675fa098e1.png" alt="img"></p><h4 id="三-skan方法（电梯的IO请求调度算法）"><a href="#三-skan方法（电梯的IO请求调度算法）" class="headerlink" title="(三) skan方法（电梯的IO请求调度算法） :"></a>(三) skan方法（电梯的IO请求调度算法） :</h4><ul><li><strong>磁臂在一个方向上移动,满足所有为完成的请求,直到磁臂到达该方向上最后的磁道</strong></li><li><strong>调换方向</strong></li></ul><p><img src="/images/1688898779781-e68efee2-0d0d-48ee-9462-46a20a8613b6.png" alt="img"></p><h4 id="四-c-skan方法"><a href="#四-c-skan方法" class="headerlink" title="(四) c-skan方法 :"></a>(四) c-skan方法 :</h4><ul><li><strong>限制了仅在一个方向上扫描</strong></li><li><strong>当最后一个磁道也被访问过了后,磁臂返回到磁盘的另外一端再次进行扫描</strong></li></ul><p><img src="/images/1688898846893-d5e48426-9c42-4ffa-a7cd-61e3f222ea56.png" alt="img"></p><h4 id="五-c-loop-c-skan改进-方法"><a href="#五-c-loop-c-skan改进-方法" class="headerlink" title="(五) c-loop(c-skan改进)方法:"></a>(五) c-loop(c-skan改进)方法:</h4><p><strong>磁臂先到达该方向上最后一个请求处,然后立即反转</strong></p><p><img src="/images/1688898900291-b05ef9d4-a755-4790-8063-b471ad8f228f.png" alt="img"></p><p>还有很多其他的方式： </p><p>SSTF、SCAN、CSCAN等几种调度算法。这几种就自己网上查具体实现的方式。</p><p>这几种算法也就是解决了机械硬盘的访问读写慢的问题， 性能的差异解决。 想要从根本上解决问题， 那么就买SSD固态硬盘吧…..</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁和进程通信</title>
      <link href="/post/90051203.html"/>
      <url>/post/90051203.html</url>
      
        <content type="html"><![CDATA[<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><p>一列系列阻塞的进程持有一种资源等待获取另一个阻塞的进程所占有的资源， 两个进程都因为没有获取到自己所需要的资源而不释放锁， 所以就会出现死锁问题。<br>类似行车道：<br><img src="/images/1688649030996-36214da4-16bf-4abd-9099-1d39c90caed5.png" alt="image.png"></p><h2 id="死锁的系统化模型"><a href="#死锁的系统化模型" class="headerlink" title="死锁的系统化模型"></a>死锁的系统化模型</h2><p>每个进程都使用</p><h3 id="可重复使用的资源"><a href="#可重复使用的资源" class="headerlink" title="可重复使用的资源"></a>可重复使用的资源</h3><ul><li>一个时间内只能一个进程使用并且不能被释放删除</li><li>进程获取资源 ，后来释放由其他进程使用</li><li>处理器、IO通道、主和副存储器等等</li><li>如果每个进程拥有一个资源并请求其他资源， 死锁就有可能发生</li></ul><h3 id="资源分配图"><a href="#资源分配图" class="headerlink" title="资源分配图"></a>资源分配图</h3><p><strong>一组顶点V和边E的集合</strong></p><ul><li><strong>V有两种类型 :</strong><ul><li>P&#x3D;{P1,P2,…,Pn},集合包括系统中的所有进程。</li><li>R&#x3D;{R1,R2,…,Rm},集合包括系统中的所有资源类型。</li></ul></li><li>requesting,claiming edge - directed edge Pi → Rj</li><li>assignment,holding edge - directed edge Rj → Pi</li></ul><p><img src="/images/1688649521136-abdbf557-218e-43b5-9b1e-802c27c9303c.png" alt="image.png"></p><h2 id="死锁的特征"><a href="#死锁的特征" class="headerlink" title="死锁的特征"></a>死锁的特征</h2><p>死锁一定会出现的四个条件，但是出现这些特征不一定是死锁。</p><ul><li><strong>互斥: 在一个时间只能有一个进程使用资源</strong></li><li><strong>持有并等待: 进程保持至少一个资源正在等待获取其他进程持有的额外资源</strong></li><li><strong>无抢占: 一个资源只能被进程资源释放,进程已经完成了它的任务之后</strong></li><li><strong>循环等待: 存在等待进程集合{P0,P1,…,Pn},P0正在等待P1所占用的资源,P1正在等待P2占用的资源…Pn-1在等待Pn的资源,Pn正在等待P0所占用的资源</strong></li></ul><h2 id="死锁的处理方法"><a href="#死锁的处理方法" class="headerlink" title="死锁的处理方法"></a>死锁的处理方法</h2><ul><li><strong>确保系统永远不会进入死锁状态</strong></li><li><strong>运行系统进入死锁状态,然后恢复.</strong></li><li><strong>忽略这个问题,假装系统中从来没有发生死锁,用于大多数操作系统,包括UNIX</strong></li></ul><h3 id="Deadlock-Prevention-预防"><a href="#Deadlock-Prevention-预防" class="headerlink" title="Deadlock Prevention 预防"></a>Deadlock Prevention 预防</h3><p>限制申请方式</p><ul><li><strong>互斥</strong> — 共享资源不是必须的,必须占用非共享资源</li><li>**占用并等待 **—-必须保证当一个进程请求的资源,它不持有任何其他资源;;;;<ul><li>需要进程请求并分配其所有资源,它开始执行之前或允许进程请求资源仅当进程没有资源</li><li>资源利用率低,可能发生饥饿</li></ul></li><li>无抢占 -<ul><li>如果进程占有某些资源,并请求其他不能被立即分配的资源,则释放当前正占有的资源</li><li>被抢占资源添加到资源列表中</li><li>只有当它能够获得旧的资源以及它请求新的资源,进程可以得到执行</li></ul></li><li>循环等待 - 对所有资源类型进行排序,并要求每个进程按照资源的顺序进行申请</li></ul><h3 id="Deadlock-Avoidance-避免"><a href="#Deadlock-Avoidance-避免" class="headerlink" title="Deadlock Avoidance 避免"></a>Deadlock Avoidance 避免</h3><p>需要系统具有一些额外的先验信息提供</p><ul><li>最简单和最有效的模式是要求<strong>每个进程声明它可能需要的每个类型资源的最大数目</strong></li><li><strong>资源的分配状态是通过限定提供与分配的资源数量,和进程的最大需求</strong></li><li>死锁避免算法动态检查的资源分配状态,以确保永远不会有一个环形等待状态</li><li>当一个进程请求可用资源,系统必须判断立即分配是否能使系统处于安全状态</li><li>系统处于安全状态指: 针对所有进程,存在安全序列</li><li>**序列&lt;P1,P2,…,Pn&gt;是安全的(我们需要其安装这个序列来执行资源): **针对每个Pi,Pi要求的资源能够由当前可用的资源+所有的Pj持有的资源来满足,其中j&lt;i.<ul><li>如果Pi资源的需求不是立即可用,那么Pi可以等到所有Pj完成</li><li>当Pi完成后,Pi+1可以得到所需要的资源,执行,返回所分配的资源,并终止.</li><li>用同样的方法,Pi+2,Pi+3和Pn能获得其所需的资源.</li></ul></li><li>如果系统处于安全状态→无死锁</li><li>如果系统处于不安全状态→可能死锁</li><li>避免死锁: 确保系统永远不会进入不安全状态</li></ul><h3 id="Deadlock-Detection-检测"><a href="#Deadlock-Detection-检测" class="headerlink" title="Deadlock Detection 检测"></a>Deadlock Detection 检测</h3><p><strong>每个资源类型单一实例</strong><br>Maintain wait-for graph</p><ul><li>节点是进程</li><li>Pi→Pj: Pi等待Pj</li></ul><p>定期调用检测算法来搜索图中是否存在循环<br><img src="/images/1688652718363-bd633546-5c21-4c4b-b680-40e7d4ffabec.png" alt="image.png"><br>算法需要n^2次操作,n是图中顶点的数目</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构:"></a>数据结构:</h4><ul><li>Available（可用量）: 长度为M的向量表示每种类型可用资源的数量</li><li>Allocation(已分配的量): 一个nxm矩阵定义了当前分配给各个进程每种类型资源的数量,如果Alocation[i, j] &#x3D; k, 进程Pi拥有资源Rj的k个实例</li><li>Request（当前进程的请求）: 一个nxm矩阵表示各进程的当前请求.如果Request[i, j] &#x3D; k,表示进程Pi请求k个资源Pj的实例</li></ul><h4 id="具体算法"><a href="#具体算法" class="headerlink" title="具体算法"></a>具体算法</h4><p><img src="/images/1688651592170-d774710b-5897-4f0b-90b6-c15595af6ccc.png" alt="image.png"></p><h4 id="检查算法使用"><a href="#检查算法使用" class="headerlink" title="检查算法使用"></a>检查算法使用</h4><p><strong>检测算法：</strong><br><img src="/images/1688652831955-a4457630-f399-4524-845b-7399eb9f3494.png" alt="image.png"><br>何时,使用什么样的频率来检测依赖于:</p><ul><li>死锁多久可能会发生?</li><li>多少进程需要被回滚? one for each disjoint cycle</li></ul><p>如果检测算法多次被调用,有可能是资源图有多个循环,所以我们无法分辨出多个可能死锁进程中的哪些”造成”死锁</p><h3 id="Recovery-from-Deadlock-恢复"><a href="#Recovery-from-Deadlock-恢复" class="headerlink" title="Recovery from Deadlock 恢复"></a>Recovery from Deadlock 恢复</h3><p><strong>终止所有的死锁进程</strong><br><strong>在一个时间内终止一个进程直到死锁消除</strong><br><strong>终止进程的顺序应该是:</strong></p><ul><li>进程的优先级</li><li>进程运行了多久以及需要多少时间才能完成</li><li>进程占用的资源</li><li>进程完成需要的资源</li><li>多少进程需要被终止</li><li>进程是交互还是批处理</li></ul><p><strong>选择一个受孩子 - 最小的成本</strong><br>回滚 - 返回到一些安全状态,重启进程到安全状态<br>饥饿 - 同一进程可能一直被选作受害者,包括回滚的数量</p><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><h2 id="概念-x2F-概述"><a href="#概念-x2F-概述" class="headerlink" title="概念&#x2F;概述"></a>概念&#x2F;概述</h2><p>为什么要进行进程间通信 ？ </p><p>答： </p><p>进程之间要相对保持独立，一个进程不能随便访问另一个进程（目的是为了保证进程正确的运行）。 与此同时， 我们还需要保证进程之间能够有效的沟通， 这就是我们为什么要有进程间通信。</p><p><strong>进程通信的机制及同步</strong></p><p><strong>不使用共享变量的进程通信</strong></p><p><strong>IPC facility 提供2个操作:</strong></p><ul><li>send(message)发送 —- 消息大小固定或者可变</li><li>receive(message)接收</li></ul><p><img src="/images/1688734474138-026eaeee-2ad7-4e5c-977a-f996d88b3cea.png" alt="img"></p><h3 id="直接通信"><a href="#直接通信" class="headerlink" title="直接通信"></a>直接通信</h3><p><strong>要求 ：</strong></p><ul><li>进程必须正确的命名对方</li></ul><p><strong>如果P和Q想通信,需要:</strong></p><ul><li>在它们之间建立通信链路</li><li>通过send&#x2F;recevie交换消息</li></ul><p>通信链路的实现</p><ul><li>物理(例如,共享内存,硬件总线)</li><li>逻辑(例如,逻辑属性)</li></ul><h3 id="间接通信"><a href="#间接通信" class="headerlink" title="间接通信"></a>间接通信</h3><p>定向从消息队列接收消息</p><ul><li>每个消息对垒都有一个唯一的ID</li><li>只有它们共享了一个消息队列,进程才能够通信</li></ul><p>通信链路的属性</p><ul><li>只有进程共享一个共同的消息队列,才建立链路</li><li>链接可以与许多进程相关联</li><li>每对进程可以共享多个通信链路</li><li>链接可以是单向或者双向</li></ul><p><strong>操作：</strong></p><ul><li>创建一个新的消息队列</li><li>通过消息队列发送和接收消息</li><li>销毁消息队列</li></ul><p><strong>原语的定义：</strong></p><ul><li>send(A,  message) —– 发送消息到队列A</li><li>receive（A，message） ——从队列A接收消息</li></ul><p><strong>消息传递可以是阻塞或者非阻塞的</strong></p><ul><li><strong>阻塞被认为是同步的</strong></li><li><strong>非阻塞被认为是异步的（send成功与否他都会很快的被返回）</strong></li></ul><p>队列的消息被附加到链路；可以是以下几种方式</p><ol><li><strong>0 容量 ；[发送方必须等待接收方]</strong></li><li><strong>有效容量 ； [ n messages的有限长度 。 发送方必须等待， 如果队列满.  ]</strong></li><li>无限容量 ； [ 无限长度 ，发送方不需要等待]</li></ol><h2 id="信号-Signal"><a href="#信号-Signal" class="headerlink" title="信号[  Signal  ]"></a>信号[  Signal  ]</h2><p><strong>信号</strong></p><ul><li>软件中断通知事件处理 【打断了当前正在处理的事情】</li><li>Examples: SIGFPE, SIGKILL, SIGUSRI, SIGSTOP, SIGCONT</li></ul><p><strong>接收到信号时会发生什么?</strong></p><ul><li>catch:  指定信号处理函数被调用</li><li>ignore:   依靠操作系统的默认操作(abort, memory dump, suspend </li><li>or resume process)</li><li>mask:   闭塞信号因此不会传送(可能是暂时的,当处理同样类型的信号)</li></ul><p>大致处理流程 ：</p><p><img src="/images/1688735351570-8c46c965-3e0a-454e-b5d1-f1e05f84148a.png" alt="img"></p><p><strong>这段可以尝试着自己找资料更加深入的去学习了解。</strong></p><p>不足:</p><ul><li>不能传输要交换的任何数据</li></ul><h2 id="管道："><a href="#管道：" class="headerlink" title="管道："></a>管道：</h2><p>每个程序应该单独完成一个小的功能， 但是我们又希望把这些程序灵活的组合起来 ，使它能够完成一个更加复杂的功能。 </p><p> 上述的想法如何实现 ？ </p><p>在90年代， 科学家们想出了一个管道 ，让左边的输出作为右边的输入。</p><p><img src="/images/1688735729703-b51e784d-e7c5-49fc-9d82-55593a2b857b.png" alt="img"></p><p><strong>数据交换</strong></p><ol><li>子进程从父进程继承文件描述符(0 stdin, 1 stdout, 2 stderr)</li><li>进程不知道(或不关心)从键盘,文件,程序读取或写入到终端,文件,程序.</li></ol><p>例如: $ ls | more (两个进程, 管道是缓存,对于ls来说是stdout,对于more来说是stdin )</p><p>通过shell: </p><ol><li>创建一个管道</li><li>为1s创建一个进程， 设置stdout 为管道写端</li><li>为more 创建一个进程，设置为stdin 为管道读端</li></ol><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p><img src="/images/1688735999448-221eae40-587a-4551-8948-e2f6f4e870f2.png" alt="img"></p><p><strong>消息队列按FIFO来管理消息</strong></p><ul><li>message: 作为一个字节序列存储</li><li>message queues: 消息数组</li><li>FIFO &amp; FILO configuration</li></ul><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>上述的管道和消息队列 都是一种间接通信的方式， 而我们的共享内存则是一种直接通信的方式。</p><p>他会在最开始的时候创建一块数据共享的区域，让多个进程来共享这个内存块。 </p><p>进程</p><ul><li>每个进程都有私有地址空间</li><li>在每个地址空间内,明确地设置了共享内存段</li></ul><p>优点</p><ul><li><strong>快速,方便地共享数据</strong></li></ul><p>不足</p><ul><li>必须同步数据访问</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>两个进程共享DRAM区域</strong></p><p><img src="/images/1688736380854-16e714e8-1b88-4859-88b1-d41acffa52d7.png" alt="img"></p><p>通过将共享进程的虚地址保存到每个进程中去</p><ol><li>最快的方法</li><li>一个进程写另一个进程立即可见</li><li>没有系统调用干预</li><li>没有数据复制</li><li>不提供同步</li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号量和管程</title>
      <link href="/post/fa3e9e19.html"/>
      <url>/post/fa3e9e19.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>说实话， 这章没有完全看懂</p></blockquote><h1 id><a href="#" class="headerlink" title></a><img src="/images/1688468783563-69aae215-fa58-4b47-b8ca-1f32d016ad03.png" alt="img"></h1><h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>我们进入信号区可以如果是读操作， 那么就可以允许它几个信号同时进行， 如果是写操作 ，那么就设置只能是一个信号进行。</p><h2 id="信号量的抽象数据类型"><a href="#信号量的抽象数据类型" class="headerlink" title="信号量的抽象数据类型"></a>信号量的抽象数据类型</h2><ul><li>一个整形(sem),具有两个原子操作</li><li><strong>P(): sem减一,如果sem&lt;0,等待,否则继续</strong></li><li><strong>V(): sem加一,如果sem≤0,唤醒一个等待的P</strong></li></ul><p>P 和 V 都是两个科学家的名简称， 他们是提出这个概念的人。</p><p><img src="/images/1688468970680-74c18667-d02f-4d33-93e7-abd04ba77477.png" alt="img"></p><h2 id="信号量的使用"><a href="#信号量的使用" class="headerlink" title="信号量的使用"></a>信号量的使用</h2><p>信号量是<strong>整数</strong></p><p>信号量是<strong>被保护的变量</strong></p><ul><li>初始化完成后,唯一改变一个信号量的值的办法是通过P()和V()</li><li>操作必须是原子</li></ul><p><strong>P()能够阻塞</strong>,V()不会阻塞</p><p>我们<strong>假定信号量是公平的</strong></p><ul><li>没有线程被阻塞在P()仍然堵塞如果V()被无限频繁调用(在同一个信号量)</li><li>在实践中,FIFO经常被使用</li></ul><p><strong>两个类型信号量</strong></p><ul><li>二进制信号量: 可以是0或1</li><li>计数信号量: 可以取任何非负数</li><li>两者相互表现(给定一个可以实现另一个)</li></ul><p><strong>信号量可以用在2个方面</strong></p><ul><li><p>互斥</p></li><li><p>条件同步(调度约束——一个线程等待另一个线程的事情发生)</p></li><li><p><strong>用二进制信号量实现的互斥</strong></p></li><li><p><strong>用二进制信号量实现的调度约束</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">condition</span> <span class="operator">=</span> <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>Thread A</span><br><span class="line">...</span><br><span class="line"><span class="keyword">condition</span><span class="operator">-</span><span class="operator">&gt;</span>P(); <span class="operator">/</span><span class="operator">/</span>等待线程B某一些指令完成之后再继续运行,在此阻塞</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>Thread B</span><br><span class="line">...</span><br><span class="line"><span class="keyword">condition</span><span class="operator">-</span><span class="operator">&gt;</span>V(); <span class="operator">/</span><span class="operator">/</span>信号量增加唤醒线程A</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/images/1688469323121-afc07aed-5fe4-431a-985e-8c455728136b.png" alt="img"></p><ul><li><strong>一个线程等待另一个线程处理事务， 单单的互斥机制是不够的</strong></li></ul><p><img src="/images/1688469395730-21e8cfa2-65c7-46cb-85b7-ef26ed1a0afb.png" alt="img"></p><ul><li><p>正确性的要求</p></li><li><p>每个约束用一个单独的信号量。</p></li><li><ul><li>二进程信号量的互斥</li><li>一般信号量 fullBuffers</li><li>一般信号量emptyBuffers</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class BoundedBuffer&#123;</span><br><span class="line">mutex <span class="operator">=</span> <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">fullBuffers <span class="operator">=</span> <span class="keyword">new</span> Semaphore(<span class="number">0</span>);   <span class="operator">/</span><span class="operator">/</span>说明缓冲区初始为空</span><br><span class="line"> emptyBuffers <span class="operator">=</span> <span class="keyword">new</span> Semaphore(n);  <span class="operator">/</span><span class="operator">/</span>同时可以有n个生产者来生产</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Deposit(c)&#123;</span><br><span class="line">emptyBuffers<span class="operator">-</span><span class="operator">&gt;</span>P();</span><br><span class="line">mutex<span class="operator">-</span><span class="operator">&gt;</span>P();</span><br><span class="line"><span class="keyword">Add</span> c <span class="keyword">to</span> the buffer;</span><br><span class="line">mutex<span class="operator">-</span><span class="operator">&gt;</span>V();</span><br><span class="line">fullBuffers<span class="operator">-</span><span class="operator">&gt;</span>V();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Remove(c)&#123;</span><br><span class="line">fullBuffers<span class="operator">-</span><span class="operator">&gt;</span>P();</span><br><span class="line">mutex<span class="operator">-</span><span class="operator">&gt;</span>P();</span><br><span class="line">Remove c <span class="keyword">from</span> buffer;</span><br><span class="line">mutex<span class="operator">-</span><span class="operator">&gt;</span>V();</span><br><span class="line">emptyBuffers<span class="operator">-</span><span class="operator">&gt;</span>V();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号量的实现"><a href="#信号量的实现" class="headerlink" title="信号量的实现"></a>信号量的实现</h2><p>使用硬件原语 :</p><ul><li><strong>禁用中断</strong></li><li><strong>原子指令</strong></li></ul><p>类似锁</p><ul><li>通过使用’’  禁用中断  ‘’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Semaphore&#123;</span><br><span class="line"><span class="type">int</span> sem;</span><br><span class="line">WaitQueue q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>p操作的实现</span><br><span class="line">Semaphore::P()&#123;</span><br><span class="line"><span class="comment">--sem;</span></span><br><span class="line">if(sem <span class="operator">&lt;</span> <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">Add</span> this thread t <span class="keyword">to</span> q;</span><br><span class="line">block(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>V操作的实现</span><br><span class="line">Semaphore::V()&#123;</span><br><span class="line"><span class="operator">+</span><span class="operator">+</span>sem;</span><br><span class="line">if(sem <span class="operator">&lt;=</span> <span class="number">0</span>)&#123;</span><br><span class="line">Remove a thread t <span class="keyword">from</span> q;</span><br><span class="line">wakeup(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点： </p><ol><li><strong>信号量的双用途</strong></li></ol><ul><li>互斥和条件同步</li><li>但等待条件是独立的互斥</li></ul><ol><li><strong>读,开发代码比较困难</strong></li></ol><ul><li>程序员必须非常精通信号量</li></ul><ol><li><strong>容易出错</strong></li></ol><ul><li>使用的信号量已经被另一个线程占用</li><li>忘记释放信号量</li></ul><ol><li>不能够处理死锁问题</li></ol><h1 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h1><p>管程就可以解决上述信号量的缺点</p><h3 id="定义及其目的"><a href="#定义及其目的" class="headerlink" title="定义及其目的"></a>定义及其目的</h3><p><strong>目的:</strong>  <strong>分离互斥和条件同步的关</strong>注</p><p><strong>定义 :</strong></p><p>是包含了一系列的共享变量及其争对这些变量的操作的函数的一个组合（模块） </p><ul><li>一<strong>个锁:</strong> 指定临界区（确保互斥性）</li><li><strong>0或者多个条件变量:</strong> 等待,通知信号量用于管程并发访问共享数据（用来挂起条件变量）</li></ul><p><strong>大致结构图：</strong></p><p><img src="/images/1688470495755-a8baf3b0-35e0-4000-8bb0-7f7fb0764daf.png" alt="img"></p><h3 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h3><ul><li>收集在对象,模块中的相关共享数据</li><li>定义方法来访问共享数据</li></ul><ol><li><strong>Lock</strong></li></ol><ul><li>Lock::Acquire() 等待直到锁可用,然后抢占锁</li><li>Lock::Release() 释放锁,唤醒等待者如果有</li></ul><ol><li><strong>Condition Variable</strong></li></ol><ul><li><p>允许等待状态进入临界区</p></li><li><ul><li>允许处于等待(睡眠)的线程进入临界区</li><li>某个时刻原子释放锁进入睡眠</li></ul></li><li><p>Wait() operation</p></li><li><ul><li>释放锁,睡眠,重新获得锁放回</li></ul></li><li><p>Signal() operation(or broadcast() operation)</p></li><li><ul><li>唤醒等待者(或者所有等待者),如果有</li></ul></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>需要维持每个条件队列</li><li>线程等待的条件等待signal()</li></ul><p><img src="/images/1688470562679-1e88c0fe-4e72-4fc0-a230-a8520dbf65d2-1688476926615-14.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步</title>
      <link href="/post/91b83cd0.html"/>
      <url>/post/91b83cd0.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h3 id="一-八章的内容到目前位置："><a href="#一-八章的内容到目前位置：" class="headerlink" title="一~八章的内容到目前位置："></a>一~八章的内容到目前位置：</h3><ul><li>多道程序设计: 现代操作系统的重要特性</li><li>并行很有用(为什么?) 提示: 多个并发实体: CPU IO 用户 等</li><li>进程,线程: 操作系统抽象出来用于支持多道程序设计</li><li>CPU调度: 实现多道程序设计的机制</li><li>调度算法: 不同的策略</li></ul><h3 id="独立的线程"><a href="#独立的线程" class="headerlink" title="独立的线程"></a>独立的线程</h3><ul><li>不和其他线程共享资源或状态</li><li><strong>确定性&#x3D;&#x3D;&gt;</strong>: 输入状态决定结果</li><li><strong>可重现&#x3D;&#x3D;&gt;</strong>: 能够重现起始条件, IO</li><li>调度顺序不重要</li></ul><h3 id="合作线程"><a href="#合作线程" class="headerlink" title="合作线程:"></a>合作线程:</h3><ul><li>在多个线程中共享状态</li><li>不确定性</li><li>不可重现</li></ul><p><strong>不确定性和不可重现意味着bug可能是间歇性发生的</strong><br><strong>进程,线程;计算机,设备需要合作</strong></p><h3 id="合作优点"><a href="#合作优点" class="headerlink" title="合作优点:"></a>合作优点:</h3><ol><li><strong>共享资源</strong><ul><li>一台电脑,多个用户</li><li>一个银行存款余额,多台ATM机</li><li>嵌入式系统</li></ul></li><li><strong>加速</strong><ul><li>IO操作和计算可以重叠</li><li>多处理器</li></ul></li><li><strong>模块化</strong><ul><li>将大程序分解成小程序 gcc会调用cpp,cc1,cc2,as,ld</li><li>使系统易于扩展</li></ul></li></ol><p><strong>程序可以调用函数 fork() 来创建一个新的进程</strong></p><ul><li>操作系统需要分配一个新的并且唯一的进程ID</li><li>因此在内核中,这个系统调用会运行 new_pid &#x3D; next_pid++;<ul><li><img src="/images/1688264468113-9cc52954-9ed5-467c-b337-0a1833f9bf38.png" alt="image.png"></li></ul></li><li>翻译成机器指令:<ul><li>Load next_pid Reg1</li><li>STORE Reg1 new_pid</li><li>INC Reg1</li><li>STORE Reg1 next_pid</li></ul></li></ul><p>假设两个进程并发执行</p><ul><li>如果next_pid等于100, 那么其中一个进程得到的ID应该是100, 另一个进程的ID应该是101, next_pid应该增加到102</li><li>可能在INC前进行了上下文切换, 最终导致两个进程的pid都是100,而next_pid也是101</li></ul><p><img src="/images/1688264878509-2c735b20-5cd8-4f60-b2e2-2332c394d2bc.png" alt="image.png"><br><strong>无论多个线程的指令序列怎样交替执行,程序都必须正常工作</strong></p><ul><li>多线程程序具有不确定性和不可重现的特点</li><li>不经过专门设计,<strong>调试难度很高</strong></li></ul><p><strong>不确定性要求并行程序的正确性</strong></p><ul><li>先思考清楚问题,把程序的行为设计清楚</li><li>切忌给予着手编写代码,碰到问题再调试</li></ul><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><blockquote><p>前面的现象称为Race Condition(竞态条件)</p></blockquote><p>**如何避免上述现象呢： **<br>Atomic Operator(原子操作)<br><strong>原子操作是指一次不存在任何终端或者失败的执行</strong></p><ul><li>该执行成功结束</li><li>或者根本没有执行</li><li>并且不应发生任何部分执行的状态</li></ul><p><strong>实际上操作往往不是原子的</strong></p><ul><li>有些看上去是原子操作,实际上不是</li><li>连x++这样的简单语句,实际上是由三条指令构成的</li><li>有时候甚至连单条假期指令都不是原子的(Pipeline,super-scalar,out-of-order,pape fault)</li></ul><p><strong>思靠对应的c语言写的程序 ：</strong><br><img src="/images/1688265125912-63c0b299-a01e-4912-8412-60815b487a74.png" alt="image.png"></p><h2 id="临界区："><a href="#临界区：" class="headerlink" title="临界区："></a>临界区：</h2><p>定义 ：<br><strong>临界区(Critical section)： <strong>指</strong>进程中的一段需要访问共享资源</strong>并且当另一个进程处于相应代码区域时便不会被执行<strong>的代码区域</strong></p><p>**互斥(Mutual exclusion)： **是指当一个 进程处于临界区并访问共享资源时,没有其他进程会处于临界区并且访问任何相同的共享资源</p><p><strong>死锁(Dead lock)：</strong>是指两个或以上进程,在相互等待完成特定任务,而最终没法将自身任务进行下去<br>**饥饿(Starvation):**是指一个可执行的进程,被调度器持续忽略,以至于虽然处于可执行状态却不被执行</p><p>**有限&#x2F;无忙 等待: **如果一个线程i处于入口区，那么在i的请求被接受之前，其他线程进入邻接区的时间是有限的 &#x2F; 无忙进入之前会被挂起</p><h2 id="实现对临界区代码的保护"><a href="#实现对临界区代码的保护" class="headerlink" title="实现对临界区代码的保护"></a>实现对临界区代码的保护</h2><h2 id="方法1：-禁用硬件中断"><a href="#方法1：-禁用硬件中断" class="headerlink" title="方法1： 禁用硬件中断"></a>方法1： 禁用硬件中断</h2><p><strong>没有中断,没有上下文切换,因此没有并发</strong></p><ul><li>硬件将中断处理延迟到中断被启用之后</li><li>大多数现代计算机体系结构都提供指令来完成</li></ul><blockquote><p>进入临界区</p><ul><li>禁用中断</li></ul><p>离开临界区</p><ul><li>开启中断</li></ul></blockquote><p><strong>一旦中断被禁用,线程就无法被停止</strong></p><ul><li>整个系统都会为你停下来</li><li>可能导致其他线程处于饥饿状态</li></ul><p>要是临界区可以任意长怎么办?</p><ul><li>无法限制响应中断所需的时间(可能存在硬件影响)</li></ul><p>要小心使用,适合于较小的操作</p><p>不适用于多CPU的情况。</p><h2 id="方法2-基于软件的解决方案"><a href="#方法2-基于软件的解决方案" class="headerlink" title="方法2: 基于软件的解决方案"></a>方法2: 基于软件的解决方案</h2><p>满足进程Pi和Pj之间互斥的经典的基于软件的解决方法(1981年)<br>使用两个共享数据项</p><ul><li>int turn; &#x2F;&#x2F;指示该谁进入临界区</li><li>bool flag[]; &#x2F;&#x2F;指示进程是否准备好进入临界区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入临界区:</span><br><span class="line">flag[i] <span class="operator">=</span> <span class="literal">true</span>; turn <span class="operator">=</span> j;</span><br><span class="line">while(flag[j] <span class="operator">&amp;&amp;</span> turn <span class="operator">=</span><span class="operator">=</span> j);</span><br><span class="line">退出临界区:</span><br><span class="line">flag[i] <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="Bakery-算法-N个进程的临界区"><a href="#Bakery-算法-N个进程的临界区" class="headerlink" title="Bakery 算法(N个进程的临界区)"></a>Bakery 算法(N个进程的临界区)</h3><ol><li>进入临界区之前,进程接收一个数字</li><li>得到的数字最小的进入临界区</li><li>如果进程Pi和Pj收到相同的数字,那么如果i&lt;j,Pi先进入临界区,否则Pj先进入临界区</li><li>编号方案总是按照枚举的增加顺序生成数字</li></ol><p><strong>Dekker算法(1965): 第一个针对双线程例子的正确解决方案</strong><br><strong>Bakery算法(1979): 针对n线程的临界区问题解决方案</strong><br>复杂: 需要两个进程的共享数据项<br>需要忙等待: 浪费CPU时间<br>没有硬件保证的情况下无真正的软件解决方案:<br>Perterson算法需要原子的LOAD和STORE指令</p><h3 id="方法3-：-更高级的抽象方法"><a href="#方法3-：-更高级的抽象方法" class="headerlink" title="方法3 ： 更高级的抽象方法"></a>方法3 ： 更高级的抽象方法</h3><p>硬件提供了一些原语</p><ul><li>像中断禁用, 原子操作指令等</li><li>大多数现代体系结构都这样</li></ul><p>操作系统提供更高级的编程抽象来简化并行编程</p><ul><li>例如,锁,信号量</li><li>从硬件原语中构建</li></ul><p>锁是一个抽象的数据结构</p><ul><li>一个二进制状态(锁定,解锁),两种方法</li><li>Lock::Acquire() 锁被释放前一直等待,然后得到锁</li><li>Lock::Release() 锁释放,唤醒任何等待的进程</li></ul><p><img src="/images/1688270009795-953526d6-2019-4fd3-b9f3-41aed296a3ae.png" alt="image.png"><br><strong>使用锁来编写临界区</strong></p><ul><li>前面的例子变得简单起来:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock_next_pid<span class="operator">-</span><span class="operator">&gt;</span>Acquire(); </span><br><span class="line">new_pid <span class="operator">=</span> next_pid<span class="operator">+</span><span class="operator">+</span>; </span><br><span class="line">lock_next_pid<span class="operator">-</span><span class="operator">&gt;</span><span class="keyword">Release</span>(); </span><br></pre></td></tr></table></figure><p>大多数现代体系结构都提供特殊的原子操作指令</p><ul><li>通过特殊的内存访问电路</li><li>针对单处理器和多处理器</li></ul><p>Test-and-Set 测试和置位</p><ul><li>从内存中读取值</li><li>测试该值是否为1(然后返回真或假)</li><li>内存值设置为1</li></ul><p>交换</p><ul><li>交换内存中的两个值</li></ul><p><img src="/images/1688269866405-dc367e67-05b5-4ede-9037-db9140486942.png" alt="image.png"></p><ul><li>总结锁是更高等级的编程抽象<ul><li>互斥可以使用锁来实现</li><li>通常需要一定等级的硬件支持</li></ul></li><li>常用的三种实现方法<ul><li>禁用中断(仅限于单处理器)</li><li>软件方法(复杂)</li><li>原子操作指令(单处理器或多处理器均可)</li></ul></li><li>可选的实现内容:<ul><li>有忙等待</li><li>无忙等待</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程调度</title>
      <link href="/post/f6103ebb.html"/>
      <url>/post/f6103ebb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>调度算法</p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="cpu调度"><a href="#cpu调度" class="headerlink" title="cpu调度"></a>cpu调度</h2><ul><li><strong>从就绪队列中挑选一个进程&#x2F;线程作为CPU将要运行的下一个进程&#x2F;线程</strong></li><li><strong>调度程序: 挑选进程&#x2F;线程的内核函数(通过一些调度策略)</strong></li><li><strong>什么时候进行调度?</strong></li></ul><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><ul><li>切换CPU的当前任务, 从一个进程&#x2F;线程到另一个</li><li>保存当前进程&#x2F;线程在PCB&#x2F;TCB中的执行上下文(CPU状态)</li><li>读取下一个进程&#x2F;线程的上下文</li></ul><h3 id="调度的条件（满足一个即可）"><a href="#调度的条件（满足一个即可）" class="headerlink" title="调度的条件（满足一个即可）"></a>调度的条件（满足一个即可）</h3><ul><li><strong>一个进程从运行状态切换到等待状态</strong></li><li><strong>一个进程被终结</strong></li></ul><h3 id="不可抢占"><a href="#不可抢占" class="headerlink" title="不可抢占"></a>不可抢占</h3><ul><li>调度程序必须等待事件结束</li></ul><h3 id="可以抢占"><a href="#可以抢占" class="headerlink" title="可以抢占"></a>可以抢占</h3><ul><li>调度程序在中断被相应后执行</li><li>当前的进程从运行切换到就绪, 或者一个进程从等待切换到就绪</li><li>当前运行的进程可以被换出</li></ul><h1 id="调度准则"><a href="#调度准则" class="headerlink" title="调度准则"></a>调度准则</h1><h3 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h3><ul><li>人们通常都需要”更快”的服务什么是更快?<ul><li>传输文件时的高带宽</li><li>玩游戏时的低延迟</li><li>这两个因素是独立的</li></ul></li><li>和水管类比<ul><li>低延迟: 喝水的时候想要一打开水龙头水就流出来</li><li>高带宽: 给游泳池充水时希望从水龙头里同时流出大量的水,并且不介意是否存在延迟</li></ul></li></ul><p><strong>我们的目标:</strong></p><ul><li>减少响应时间: 及时处理用户的输出并且尽快将输出提供给用户</li><li>减少平均响应时间的波动: 在交互系统中,可预测性比高差异性低平均更重要</li><li>增加吞吐量: 减少开销(操作系统开销,上下文切换);系统资源的高效率用(CPU,IO设备)</li><li>减少等待时间: 减少每个进程的等待时间</li></ul><p>公平的目标举例:</p><ul><li>保证每个进程占用相同的CPU时间</li><li>这公平嘛?如果一个用户比其他用户运行更多的进程怎么办</li><li>举例:<ul><li>保证每个进程都等待相同的时间</li></ul></li><li>公平通常会增加平均响应时间</li></ul><h3 id="程序执行模型执行模型-："><a href="#程序执行模型执行模型-：" class="headerlink" title="程序执行模型执行模型 ："></a>程序执行模型执行模型 ：</h3><p><img src="/images/1687953410411-e68bfe53-256e-42ad-9317-ee583042d39b.png" alt="image.png"><br> 程序在CPU突发和IO中交替</p><ul><li>每个调度决定都是关于在下一个CPU突发时将哪个工作交给CPU</li><li>在时间分片机制下,线程可能在结束当前CPU突发前被迫放弃CPU</li></ul><h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><ol><li>**CPU使用率: **CPU处于忙状态所占时间的百分比</li><li>**吞吐量: **在单位时间内完成的进程数量</li><li>**周转时间: **一个进程从初始化到结束,包括所有等待时间所花费的时间</li><li>**等待时间: **进程在就绪队列中的总时间</li><li>**响应时间: **从一个请求被提交到产生第一次相应所花费的总时间</li><li><strong>各指标在操作系统上的表现:</strong> 低延迟调度增加了交互式表现(如果移动了鼠标,但是屏幕中的光标却没动,我们可能会重启电脑)</li><li>操作系统需要保证低吞吐量不受影响(我想要结束长时间的编程,所以操作系统必须不时进行调度,即使存在许多交互任务)</li><li><strong>吞吐量是操作系统的计算带宽</strong></li><li><strong>响应时间是操作系统的计算延迟</strong></li></ol><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="FCFS-先来先服务-First-come-First-Served"><a href="#FCFS-先来先服务-First-come-First-Served" class="headerlink" title="FCFS(先来先服务)First come, First Served"></a>FCFS(先来先服务)First come, First Served</h3><p><strong>如果进程在执行中阻塞,队列中的下一个会得到CPU</strong><br><strong>优点:</strong> 简单<br><strong>缺点:</strong></p><ul><li>平均等待时间波动较大</li><li>花费时间少的任务可能排在花费时间长的任务后面</li><li>可能导致IO和CPU之间的重叠处理(CPU密集型进程会导致IO设备闲置时,IO密集型进程也在等待)</li></ul><p><img src="/images/1687954526984-d2d601e2-7443-4149-8d70-420e1622b68d.png" alt="image.png"></p><h3 id="SPN-SJF-SRT-短进程优先-短作业优先-短剩余时间优先"><a href="#SPN-SJF-SRT-短进程优先-短作业优先-短剩余时间优先" class="headerlink" title="SPN(SJF) SRT(短进程优先(短作业优先)短剩余时间优先)"></a>SPN(SJF) SRT(短进程优先(短作业优先)短剩余时间优先)</h3><p>[最优平均等待时间]Shortest Process Next(Shortest Job First) Shortest Remaining Time选择预测的完成时间来将任务入队可以是抢占的或者是不可抢占的可能导致饥饿</p><ul><li>连续的短任务流会使场任务饥饿</li><li>短任务可用时的任何场任务的CPU时间都会增加平均等待时间</li><li>需要预测未来<ul><li>怎么预估下一个CPU突发的持续时间</li><li>简单的解决: 询问用户</li><li>如果用户欺骗就杀死进程</li><li>如果不知道怎么办?</li></ul></li></ul><p><img src="/images/1687954569021-d035846a-4dd1-488b-b2ae-83ab382fbbd7.png" alt="image.png"><br><img src="/images/1687955310340-49b88b6b-a207-4176-b066-774693a82246.png" alt="image.png"><br>预估执行时间的算法： T（n+1） &#x3D; atn + (1- a)at(n-1)  + (1-a)(1-a)at(n-2) + ….<br><img src="/images/1687955214281-efd4c7e1-5e63-4460-8947-20f17cdade2f.png" alt="image.png"></p><h3 id="HRRN-最高响应比优先-Highest-Response-Ratio-Next"><a href="#HRRN-最高响应比优先-Highest-Response-Ratio-Next" class="headerlink" title="HRRN(最高响应比优先)Highest Response Ratio Next"></a>HRRN(最高响应比优先)Highest Response Ratio Next</h3><ul><li><strong>在SPN调度的基础上改进</strong></li><li><strong>不可抢占</strong></li><li><strong>关注进程等待了多长时间</strong></li><li><strong>防止无限期推迟</strong></li><li><strong>R &#x3D; (w + s ) &#x2F; s</strong></li></ul><p><img src="/images/1687955475868-2b1a40e1-5473-45b1-8407-e1f0ae7d00f2.png" alt="image.png"></p><h3 id="Round-Robin-轮循"><a href="#Round-Robin-轮循" class="headerlink" title="Round Robin(轮循)"></a>Round Robin(轮循)</h3><blockquote><p>举例 ：<br><img src="/images/1687955523352-a45e13c5-4558-4367-b3e6-27a213849c44.png" alt="image.png"></p></blockquote><p><strong>使用时间切片和抢占来轮流执行任务</strong><br>在叫做量子(或者时间切片)的离散单元中分配处理器。 时间片结束时,切换到下一个准备好的进程<br>花销: 额外的上下文切换<br>时间量子太大:</p><ul><li>等待时间过长</li><li>极限情况退化成FCFS</li><li>时间量子太小:<ul><li>反应迅速</li><li>吞吐量由于大量的上下文切换开销受到影响</li></ul></li><li>目标:<ul><li>选择一个合适的时间量子</li><li>经验规则: 维持上下文切换开销处于1%以内</li></ul></li></ul><h3 id="Multilevel-Feedback-Queues-多级反馈队列"><a href="#Multilevel-Feedback-Queues-多级反馈队列" class="headerlink" title="Multilevel Feedback Queues(多级反馈队列)"></a>Multilevel Feedback Queues(多级反馈队列)</h3><p>优先级队列中的轮循就绪队列被划分成独立的队列: 比如前台(交互),后台(批处理)每个队列拥有自己的调度策略: 比如前台(RR),后台(FCFS)调度必须在队列间进行:</p><ul><li>固定优先级: 先处理前台,然后处理后台;可能导致饥饿</li><li>时间切片: 每个队列都得到一个确定的能够调度其进程的CPU总时间;比如80%使用RR的前台,20%使用FCFS的后台</li><li>一个进程可以在不同的队列中移动例如,n级优先级-优先级调度在所有级别中,RR在每个级别中<ul><li>时间量子大小随优先级级别增加而增加</li><li>如果任务在当前的时间量子中没有完成,则降到下一个优先级</li></ul></li><li>优点: CPU密集型任务的优先级下降很快;IO密集型任务停留在高优先级</li></ul><h3 id="Fair-Share-Scheduling-公平共享调度"><a href="#Fair-Share-Scheduling-公平共享调度" class="headerlink" title="Fair Share Scheduling(公平共享调度)"></a>Fair Share Scheduling(公平共享调度)</h3><p>FSS控制用户对系统资源的访问</p><ul><li>一些用户组比其他用户组更重要</li><li>保证不重要的组无法垄断资源</li><li>未使用的资源按照每个组所分配的资源的比例来分配</li><li>没有达到资源使用率目标的组获得更高的优先级</li></ul><h1 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h1><h1 id="多处理器调度"><a href="#多处理器调度" class="headerlink" title="多处理器调度"></a>多处理器调度</h1><h1 id="优先级反转"><a href="#优先级反转" class="headerlink" title="优先级反转"></a>优先级反转</h1>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理And线程实现</title>
      <link href="/post/852cfab6.html"/>
      <url>/post/852cfab6.html</url>
      
        <content type="html"><![CDATA[<p>​</p><h1 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h1><h2 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h2><p><strong>一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程.</strong><br><img src="/images/1687777902143-c5ec7b04-82e6-4178-ae11-b949f27d7abb.png" alt="image.png"></p><h2 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h2><p>包括 ：</p><ul><li><strong>程序的代码</strong></li><li><strong>程序处理的数据</strong></li><li><strong>程序计数器中的值, 指示下一条将运行的指令</strong></li><li><strong>一组通用的寄存器的当前值, 堆, 栈</strong></li><li><strong>一组系统资源(如打开的文件)</strong></li></ul><h3 id="程序和进程的联系："><a href="#程序和进程的联系：" class="headerlink" title="程序和进程的联系："></a>程序和进程的联系：</h3><ul><li><strong>程序是产生进程的基础</strong></li><li><strong>程序的每次运行构成不同的进程</strong></li><li><strong>进程是程序功能的体现</strong></li><li><strong>通过多次执行, 一个程序可以对应多个进程, 通过调用关系, 一个进程可包括多个程序.</strong></li></ul><hr><h3 id="进程和程序的区别"><a href="#进程和程序的区别" class="headerlink" title="进程和程序的区别"></a>进程和程序的区别</h3><ul><li><strong>进程是动态的, 程序是静态的 : 程序是有序代码的集合. 进程是程序的执行, 进程有核心态 &#x2F; 用户态.</strong></li><li><strong>进程是暂时的, 程序是永久的. 进程是一个状态变化的过程, 程序可以长久保存.</strong></li><li><strong>进程和程序的组成不同 : 进程的组成包括程序, 数据和进程控制块(进程状态信息)</strong></li></ul><h2 id="进程的特点"><a href="#进程的特点" class="headerlink" title="进程的特点"></a>进程的特点</h2><p><strong>动态性</strong> : 可动态地创建, 结果进程;<br><strong>并发性</strong> : 进程可以被独立调度并占用处理机运行; (并发:一段, 并行:一时刻)<br><strong>独立性</strong> : 不同进程的工作不相互影响;(页表是保障措施之一)<br><strong>制约性</strong> : 因访问共享数据, 资源或进程间同步而产生制约.<br><img src="/images/1687778829320-3e7cbc91-d1f7-4bc1-b290-d55ec1f425eb.png" alt="image.png"></p><p>**问题 **: </p><blockquote><p>如果你要设计一个OS, 怎么样来实现其中的进程管理机制?</p></blockquote><h2 id="进程控制结构"><a href="#进程控制结构" class="headerlink" title="进程控制结构"></a>进程控制结构</h2><p>进程也可以说是一个程序 ， 我们都知道程序 &#x3D; 数据结构 + 算法<br>所以我们进程也会需要这些。<br>在进程中 ， 我们用 <strong>进程控制块(Process Control Block)</strong>[<strong>PCB</strong>]来作为进行的数据结构 。<br>操作系统为每个进程都维护了一个PCB, <strong>用来保存与该进程有关的各种状态信息.</strong></p><h3 id="进程控制块-："><a href="#进程控制块-：" class="headerlink" title="进程控制块 ："></a>进程控制块 ：</h3><p><strong>进程控制块 : 操作系统管理控制进程运行所用的信息集合.</strong></p><ol><li>进程的创建 : 为该进程生成一个PCB</li><li><strong>进程的终止 :</strong> 回收它的PCB</li><li><strong>进程的组织管理 :</strong> 通过对PCB的组织管理来实现</li></ol><p>(PCB具体包含什么信息? 如何组织的? 进程的状态转换?)</p><h3 id="PCB有以下三大类信息"><a href="#PCB有以下三大类信息" class="headerlink" title="PCB有以下三大类信息 :"></a>PCB有以下三大类信息 :</h3><ul><li><strong>进程标志信息.</strong> 如本进程的标志, 本进程的产生者标志(父进程标志). 用户标志</li><li>**处理机状态信息保存区 **: 保存进程的运行现场信息 :<ul><li>用户可见寄存器. 用户程序可以使用的数据, 地址等寄存器</li><li>控制和状态寄存器. 如程序计数器(PC), 程序状态字(PSW)</li><li>栈指针. 过程调用, 系统调用, 中断处理和返回时需要用到它</li></ul></li><li><strong>进程控制信息</strong><ul><li>调度和状态信息. 用于操作系统调度进程并占用处理机使用.</li><li>进程间通信信息. 为支持进程间与通信相关的各种标志, 信号, 信件等, 这些信息都存在接收方的进程控制块中.</li><li>存储管理信息. 包含有指向本进程映像存储空间的数据结构.</li><li>进程所用资源. 说明由进程打开, 使用的系统资源. 如打开的文件等.</li><li>有关数据结构的链接信息. 进程可以连接到一个进程队列中, 或连接到相关的其他进程的PCB.</li></ul></li></ul><h1 id="进程的状态（进程的动态特点）"><a href="#进程的状态（进程的动态特点）" class="headerlink" title="进程的状态（进程的动态特点）"></a>进程的状态（进程的动态特点）</h1><h2 id="进程的生命期管理"><a href="#进程的生命期管理" class="headerlink" title="进程的生命期管理"></a>进程的生命期管理</h2><blockquote><p> 进程从产生到结束</p></blockquote><ul><li><strong>进程创建</strong></li><li><strong>进程运行</strong></li><li><strong>进程等待</strong></li><li><strong>进程唤醒</strong></li><li><strong>进程结束</strong></li></ul><h3 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h3><p>引起进程创建的3个主要事件 :</p><ul><li><strong>系统初始化;</strong></li><li><strong>用户请求创建一个新进程;</strong></li><li><strong>正在运行的进程执行了创建进程的系统调用.</strong></li></ul><h3 id="进程运行"><a href="#进程运行" class="headerlink" title="进程运行"></a>进程运行</h3><p>内核选择一个就绪的进程, 让它占用处理机并执行<br>(为何选择? &amp;&amp; 如何选择?)</p><h3 id="进程等待"><a href="#进程等待" class="headerlink" title="进程等待"></a>进程等待</h3><p><strong>在以下情况下,</strong> <strong>进程等待(阻塞):</strong></p><ol><li>请求并等待系统服务, 无法马上完成</li><li>启动某种操作, 无法马上完成</li><li>需要的数据没有到达</li></ol><p>进程只能自己阻塞自己, 因为只有进程自身才能知道何时需要等待某种事件的发生.</p><h3 id="进程唤醒"><a href="#进程唤醒" class="headerlink" title="进程唤醒"></a>进程唤醒</h3><p><strong>唤醒进程的原因 :</strong></p><ol><li>被阻塞进程需要的资源可被满足</li><li>被阻塞进程等待的事件到达</li><li>将该进程的PCB插入到就绪队列</li></ol><p><strong>进程只能被别的进程或操作系统唤醒</strong></p><h3 id="进程结束"><a href="#进程结束" class="headerlink" title="进程结束"></a>进程结束</h3><p><strong>四种情况下, 进程结束 :</strong></p><ul><li>正常退出(自愿)</li><li>错误退出(<strong>自愿)</strong></li><li>致命错误(<strong>强制性)</strong></li><li>被其他进程杀死**(强制性)**</li></ul><p><img src="/images/1687780119512-cff4c79d-c9b3-4e03-887f-add17eb546a8.png" alt="image.png"></p><h2 id="进程状态变化模型"><a href="#进程状态变化模型" class="headerlink" title="进程状态变化模型"></a>进程状态变化模型</h2><p><strong>进程的三种基本状态 :</strong> 进程在生命结束前处于三种基本状态之一.<br>不同系统设置的进程状态数目不同.</p><h3 id="三种基本状态"><a href="#三种基本状态" class="headerlink" title="三种基本状态"></a>三种基本状态</h3><ol><li>运行状态(Running) : 当一个进程正在处理机上运行时</li><li>就绪状态(Ready) : 一个进程获得了除处理机之外的一切所需资源, 一旦得到处理机即可运行</li><li>等待状态(阻塞状态 Blocked) : 一个进程正在等待某一时间而暂停运行时. 如等待某资源, 等待输入&#x2F;输出完成.</li></ol><p><img src="/images/1687780210222-3fb1b7ca-5f3a-4fd2-b242-d0da4e593feb.png" alt="image.png"><br>还可以有创建状态 &amp;&amp; 结束状态</p><h3 id="状态变化图"><a href="#状态变化图" class="headerlink" title="状态变化图"></a>状态变化图</h3><p><img src="/images/1687780258242-61ec0f2a-f8aa-42df-b631-e346974c9e1c.png" alt="image.png"></p><ol><li>NULL → New : 一个新进程被产生出来执行一个程序</li><li>New → Ready: 当进程创建完成并初始化后, 一切就绪准备运行时, 变为就绪状态</li><li>Ready → Running : 处于就绪态的进程被进程调度程序选中后, 就分配到处理机上来运行</li><li>Running → Exit : 当进程表示它已经完成或者因出错, 当前运行进程会由操作系统作结束处理</li><li>Running → Ready : 处于运行状态的进程在其运行过程中, 由于分配它的处理机时间片用完而让出处理机</li><li>Running → Blocked: 当进程请求某样东西且必须等待时</li><li>Blocked → Ready : 当进程要等待某事件到来时, 它从阻塞状态变到就绪状态</li></ol><h2 id="进程挂起模型"><a href="#进程挂起模型" class="headerlink" title="进程挂起模型"></a>进程挂起模型</h2><p><img src="/images/1687781009126-005ab9a6-922c-4bae-b55b-8fbc578bef6e.png" alt="image.png"><br>**挂起 ： **意味着进程没有占用内存空间。 处于挂起的进程映像在磁盘上</p><h3 id="两种挂起状态-："><a href="#两种挂起状态-：" class="headerlink" title="两种挂起状态 ："></a>两种挂起状态 ：</h3><ol><li>阻塞挂起状态 : 进程在外存并等待某事件的出现;</li><li>就绪挂起状态 : 进程在外存, 但只要进入内存, 即可运行.</li></ol><p><strong>挂起的状态之间的转换【把一个进程从内存到外存】</strong></p><ul><li><strong>阻塞到阻塞挂起 :</strong> 没有进程处于就绪状态或就绪进程要求更多内存资源时, 会进行这种转换, 以提交新进程或运行时就绪进程.</li><li>**就绪到就绪挂起 : **当有高优先级阻塞(系统认为会很快就绪的)进程和低优先级就绪进程时, 系统会选择挂起低优先级就绪进程.</li><li>**运行到就绪挂起 : **对抢先式分时系统, 当有高优先级阻塞挂起进程因事件出现而进入就绪挂起时, 系统可能会把运行进程转导就绪挂起状态.</li></ul><p><strong>在外存时的状态转换 :</strong></p><ul><li>阻塞挂起到就绪挂起 : 当有阻塞挂起因相关事件出现时, 系统会把阻塞挂起进程转换为就绪挂起进程</li></ul><p>**解挂&#x2F; 激活【 把一个进程从内存到外存】 ： **</p><ul><li>就绪挂起到就绪 : 没有就绪进程或挂起就绪进程优先级高于就绪进程时, 会进行这种转换.</li><li>阻塞挂起到阻塞 : 当一个进程释放足够内存时, 系统会把一个高优先级阻塞挂起(系统认为会很快出现所等待的事件)进程转换为阻塞进程.</li></ul><h3 id="状态队列："><a href="#状态队列：" class="headerlink" title="状态队列："></a>状态队列：</h3><ul><li>由操作系统来维护一组队列, 用来表示系统当中所有进程的当前状态;</li><li>不同的状态分别用不同的队列来表示(就绪队列, 各种类型的阻塞队列);</li><li>每个进程的PCB都根据它的状态加入到相应的队列当中, 当一个进程的状态发生变化时, 它的PCB从一个状态中脱离出来, 加入到另外一个队列.</li></ul><p><img src="/images/1687781775256-24f26176-0dfb-499e-88f2-0730e3f752c0.png" alt="image.png"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="什么是线程-amp-amp-为什么使用-？"><a href="#什么是线程-amp-amp-为什么使用-？" class="headerlink" title="什么是线程 &amp;&amp; 为什么使用 ？"></a>什么是线程 &amp;&amp; 为什么使用 ？</h2><blockquote><p>需要提出一种新的实体, 满足以下特征:</p><ol><li>实体之间可以并发执行;</li><li>实体之间共享相同的地址空间.</li></ol><p>这实体就是线程.</p></blockquote><p><img src="/images/1687782546366-28a128d6-4266-49eb-9bdd-bd98e014ecc6.png" alt="image.png"><br><strong>线程是进程当中的一条执行流程</strong>.<br><strong>从两个方面重新理解进程:</strong></p><ol><li><strong>从资源组合的角度</strong>: 进程把一组相关的资源组合起来,构成了一个资源平台(环境),包括地址空间(代码段,数据段),打开的文件等各种资源;</li><li><strong>从运行的角度:</strong> 代码在这个资源平台上的一条执行流程(线程).</li></ol><h2 id="线程的优缺点："><a href="#线程的优缺点：" class="headerlink" title="线程的优缺点："></a>线程的优缺点：</h2><p><strong>线程 &#x3D; 进程 - 共享资源</strong><br><strong>线程的优点:</strong></p><ul><li><strong>一个进程中可以同时存在多个线程;</strong></li><li>各个线程之间可以并发地执行;</li><li>各个<strong>线程之间</strong>可以<strong>共享</strong>地址空间和文件等<strong>资源.</strong></li></ul><p><strong>线程的缺点: （他的优点 也是 他的缺点 ）</strong></p><ul><li><strong>一个线程崩溃, 会导致其所属进程的所有线程崩溃</strong>.(给它了”权限”就得有更高的”责任”)</li><li>线程所需的资源不同的线程需要独立的寄存器和堆栈, 共享代码,数据和文件等.</li></ul><h2 id="★★进程和线程的比较★★★"><a href="#★★进程和线程的比较★★★" class="headerlink" title="★★进程和线程的比较★★★"></a>★★进程和线程的比较★★★</h2><ul><li>进程是资源分配单位, 线程是CPU调度单位;</li><li>进程拥有一个完整的资源平台, 而线程只独享必不可少的资源, 如寄存器和栈;</li><li>线程同样具有就绪,阻塞和执行三种基本状态,同样具有状态之间的转换关系;</li><li>线程能减少并发执行的时间和空间开销:<ul><li>线程的创建时间比进程短;(直接利用所属进程的一些状态信息)</li><li>线程的终止时间比进程短;(不需要考虑把这些状态信息给释放)</li><li>同一进程内的线程切换时间比进程短;(同一进程不同线程的切换不需要切换页表)</li><li>由于同一进程的各线程之间共享内存和文件资源, 可直接进行不通过内核的通信.(直接通过内存地址读写资源)</li></ul></li></ul><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="线程的实现之-用户线程"><a href="#线程的实现之-用户线程" class="headerlink" title="线程的实现之 用户线程"></a>线程的实现之 用户线程</h3><p>在用户空间实现</p><p><strong>在用户空间实现的线程机制, 它不依赖于操作系统的内核, 由一组用户级的线程库来完成线程的管理, 包括进程的创建,终止,同步和调度等.</strong></p><p><img src="/images/1687949843325-baba4a3f-0b25-4c93-a6a5-179cdc507f55.png" alt="img"></p><p>操作系统只能看到进程， 但是却看不到线程 ，线程的TCB在线程库中实现；</p><p><strong>特点 ：</strong> </p><ul><li>由于用户线程的维护由相应的进程来完成(通过线程库函数),不需要操作系统内核了解用户进程的存在,<strong>可用于不支持线程技术的多进程操作系统</strong>;</li><li>每个进程都需要它自己私有的线程控制块(TCB)列表,用来跟踪记录它的各个线程的状态信息(PC,栈指针,寄存器),TCB由线程库函数来维护;</li><li>用户线程的切换也是由线程库函数来完成,无需用户态&#x2F;核心态切换,所以速度特别快;</li><li>允<strong>许每个进程拥有自定义的线程调度算法.</strong></li></ul><p><strong>缺点：</strong> </p><ul><li>阻塞性的系统调用如何实现?如果一个线程发起系统调用而阻塞,则整个进程在等待;</li><li>当一个线程开始运行时,<strong>除非它主动地交出CPU的使用权</strong>,否则它所在的进程当中的<strong>其他线程将无法运行;</strong></li><li>由于时间片分配给进程,所以与其他进程比,在多线程执行时,每个线程得到的时间片较少,执行会较慢.</li></ul><h3 id="线程的实现之-内核线程"><a href="#线程的实现之-内核线程" class="headerlink" title="线程的实现之 内核线程"></a>线程的实现之 内核线程</h3><p>在内核空间实现</p><p><strong>内核线程是在操作系统的内核当中实现的一种线程机制,由操作系统的内核来完成线程的创建,终止和管理.</strong></p><p><img src="/images/1687950132830-46c0b55e-5f3b-4743-a9e2-b41f04549fcb.png" alt="img"></p><p><strong>特点</strong></p><ul><li>在支持内核线程的操作系统中,<strong>由内核来维护进程和线程的上下文信息</strong>(PCB和TCB);</li><li>线程的创建,终止和切换都是通过系统调用,内核函数的方式来进行,由内核来完成,因此<strong>系统开销较大</strong>;</li><li>在一个进程当中,如果<strong>某个内核线程发起系统调用而被阻塞</strong>,并<strong>不会影响其他内核线程</strong>的运行;</li><li>时间片分配给线程,多线程的进程获得更多CPU时间;</li><li>Windows NT 和 Windows 2000&#x2F;XP 支持内核线程.</li></ul><h3 id="线程的实现之-轻量级进程"><a href="#线程的实现之-轻量级进程" class="headerlink" title="线程的实现之 轻量级进程"></a>线程的实现之 轻量级进程</h3><p>内核支持的用户线程（Solaris&#x2F; Linux）</p><p><img src="/images/1687950273411-3b9c993c-4e0c-41dd-871b-13d00bd99698.png" alt="img"></p><p>一<strong>个进程可以有一个或多个轻量化进程,每个量级进程由一个单独的内核线程来支持.(Solaris,Linux)</strong></p><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>程序以进程的形式 在操作系统中运行。</p><p><strong>停止当前运行进程(从运行状态变成其他状态),并且调度其他进程(转变为运行状态)</strong></p><ul><li>必须在切换之前存储许多部分的进程上下文</li><li>必须能够在之后恢复他们,所以进程不能显示它曾经被暂停过</li><li>必须快速(上下文切换时非常频繁)</li></ul><p><img src="/images/1687950651218-e5e82e01-f7bf-4877-922a-dcf77a2e7dc8.png" alt="img"></p><p>需要存储什么上下文?</p><ul><li>寄存器(PC,SP…),CPU状态等信息</li><li>一些时候可能会费时,所以我们应该尽可能避免</li></ul><p><strong>操作系统为活跃进程准备了进程控制块（PCB）</strong></p><p><strong>操作系统将进程控制块(PCB)放置在一个合适的队列中</strong></p><p>有三个队列： </p><ul><li>就绪队列</li><li>等待IO队列(每个设备的队列)</li><li>僵尸队列</li></ul><p><img src="/images/1687950762266-6c5d2931-a2cd-426e-b2d2-64bcfd0f159b.png" alt="img"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><h3 id="进程控制-之-创建进程"><a href="#进程控制-之-创建进程" class="headerlink" title="进程控制 之 创建进程"></a>进程控制 之 创建进程</h3><p><strong>创建进程的简单实现（fork() ）</strong></p><ol><li>对子进程分配内存</li><li>复制父进程的内存和CPU寄存器到子进程</li><li>开销昂贵</li></ol><p>在大多数情况下， 我们在调用fork() 之后要调用exec() </p><ol><li>在fork( ) 操作中内存复制是没有作用的 </li><li>子进程将可能关闭打开的文件和链接</li><li>开销因此是最高的</li><li>为什么不能结合他们在一个调用中 ？</li></ol><p><strong>vfork()</strong></p><ol><li>一个创建进程的系统调用，不需要创建一个同样的内存映射</li><li>一些适合称为轻量级fork()</li><li>子进程应该几乎立即调用exec() </li><li>现在不再使用 copy on write 技术</li></ol><h3 id="进程控制-之-加载和执行进程"><a href="#进程控制-之-加载和执行进程" class="headerlink" title="进程控制 之 加载和执行进程"></a>进程控制 之 加载和执行进程</h3><p><strong>系统调用exec()加载程序取代当前运行的进程</strong></p><p>exec()调用允许一个进程”加载”一个不同的程序并且在main开始执行(事实上 _start)</p><p>它允许一个进程指定参数的数量(argc)和它字符串参数数组(argv)</p><p>如果调用成功(相同的进程,不同的程序)</p><p>代码,stack,heap重写</p><h3 id="进程控制-之-等待和终止进程"><a href="#进程控制-之-等待和终止进程" class="headerlink" title="进程控制 之 等待和终止进程"></a>进程控制 之 等待和终止进程</h3><p><strong>wait()系统调用是被父进程用来等待子进程的结束</strong></p><ul><li><p>一个子进程向父进程返回一个值,所以父进程必须接受这个值并处理</p></li><li><p><strong>wait()系统调用担任这个要求</strong></p></li><li><ul><li>它使父进程去睡眠来等待子进程的结束</li><li>当一个子进程调用exit()的时候,操作系统解锁父进程,并且将通过exit()传递得到的返回值作为wait调用的一个结果(连同子进程的pid一起)如果这里没有子进程存活,wait()立刻返回</li><li>当然,如果这里有为父进程的僵尸等待,wait()立即返回其中一个值(并且解除僵尸状态)</li></ul></li><li><p><strong>进程结束执行之后,它调用exit()</strong></p></li><li><p><strong>这个系统调用:</strong></p></li><li><ul><li>将这程序的”结果”作为一个参数</li><li>关闭所有打开的文件,连接等等</li><li>释放内存</li><li>释放大部分支持进程的操作系统结构</li><li>检查是否父进程是存活着的:</li></ul></li><li><ul><li><ul><li>如果是的话,它保留结果的值直到父进程需要它;在这种情况里,进程没有真正死亡,但是它进入了僵尸状态</li><li>如果没有,它释放所有的数据结构,这个进程死亡</li></ul></li></ul></li><li><ul><li>清理所有等待的僵尸进程</li></ul></li><li><p><strong>进程终止是最终的垃圾收集(资源回收)</strong></p></li></ul><p><img src="/images/1687952513177-a6033fb7-3405-438a-923b-38236e28e76.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面置换算法</title>
      <link href="/post/1b3c8b4.html"/>
      <url>/post/1b3c8b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="该算法的功能与目标"><a href="#该算法的功能与目标" class="headerlink" title="该算法的功能与目标"></a>该算法的功能与目标</h1><h2 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h2><p><strong>当缺页中断发生, 需要调入新的页面而内存已满时, 选择内存当中哪个物理页面被置换.</strong></p><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p><strong>尽可能地减少页面地换进换出地次数（即缺页中断地次数）。</strong><br>具体地来说，把未来不再使用的或短期内较少使用的页面换出, 通常只能在局部性原理指导下依据过去的统计数据来进行预测.</p><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="局部页面置换算法"><a href="#局部页面置换算法" class="headerlink" title="局部页面置换算法"></a>局部页面置换算法</h1><h2 id="最优页面置换算法"><a href="#最优页面置换算法" class="headerlink" title="最优页面置换算法"></a>最优页面置换算法</h2><p><strong>基本思路 :</strong><br> <strong>当一个缺页中断发生时, 对于保存在内存当中的每一个逻辑页面, 计算在它的下一次访问之前, 还需等待多长时间, 从中选择等待时间最长的那个, 作为被置换的页面.</strong><br>这是一种理想情况, 在实际系统中是无法实现的, 因为操作系统无法知道每一个页面要等待多长时间以后才会再次被访问.</p><h2 id="先进先出算法"><a href="#先进先出算法" class="headerlink" title="先进先出算法"></a>先进先出算法</h2><p><strong>基本思路 ：</strong><br><strong>选择在内存中驻留时间最长的页面淘汰. 具体来说, 系统维护着一个链表, 记录了所有位于内存当中的逻辑页面. 从链表的排列顺序来看, 链首页面的驻留时间最长, 链尾页面的驻留时间最短. 当发生一个缺页中断时, 把链首页面淘汰出去, 并把新的页面添加到链表的末尾.</strong><br>性能较差, 调出的页面有可能是经常要访问的页面. 并且有 belady现象. FIFO算法很少单独使用.</p><p>举例：<br><img src="/images/1687693672584-8fce1599-7a11-447f-9451-e65c82960408.png" alt="image.png"></p><h2 id="最近最久未使用算法LRU-Least-Recently-Used"><a href="#最近最久未使用算法LRU-Least-Recently-Used" class="headerlink" title="最近最久未使用算法LRU(Least Recently Used)"></a>最近最久未使用算法LRU(Least Recently Used)</h2><p><strong>基本思路 ：</strong><br><strong>当一个缺页中断发生时, 选择最久未使用的那个页面, 并淘汰.</strong><br>它是对最优页面置换算法的一个近似, 其依据是程序的局部性原理, 即在最近一小段时间(最近几条指令)内, 如果某些页面被频繁地访问, 那么再将来的一小段时间内, 他们还可能会再一次被频繁地访问. 反过来说, 如果过去某些页面长时间未被访问, 那么在将来它们还可能会长时间地得不到访问.<br><strong>LRU算法需要记录各个页面使用时间的先后顺序, 开销比较大.</strong><br><strong>举例：</strong><br><img src="/images/1687694019380-6c398bc8-3007-4ed9-a507-8f0a881cab84.png" alt="image.png"></p><p>两种可能的实现方法是 :</p><ul><li>系统维护一个页面链表, 最近刚刚使用过的页面作为首节点, 最久未使用的作为尾结点. 再一次访问内存时, 找出相应的页面, 把它从链表中摘下来, 再移动到链表首. 每次缺页中断发生时, 淘汰链表末尾的页面.</li><li>设置一个活动页面栈, 当访问某页时, 将此页号压入栈顶, 然后, 考察栈内是否有与此页面相同的页号, 若有则抽出. 当需要淘汰一个页面时, 总是选择栈底的页面, 它就是最久未使用的.</li></ul><h2 id="时钟置换算法"><a href="#时钟置换算法" class="headerlink" title="时钟置换算法"></a>时钟置换算法</h2><p><strong>基本思路 :</strong></p><ul><li>需要用到页表项的访问位, 当一个页面被装入内存时, 把该位初始化为0. 然后如果这个页面被访问, 则把该位置设为1;</li><li>把各个页面组织成环形链表(类似钟表面), 把指针指向最老的页面(最先进来);</li><li>当发生一个缺页中断时, 考察指针所指向的最老页面, 若它的访问位为0, 立即淘汰; 若访问位为0, 然后指针往下移动一格. 如此下去, 直到找到被淘汰的页面, 然后把指针移动到下一格.</li></ul><p><img src="/images/1687694597444-b13058cf-8d39-43b4-85a7-cd3fa916ab53.png" alt="image.png"><br><strong>流程 :</strong><br>如果访问页在物理内存中, 访问位置1.<br>如果不在物理页, 从指针当前指向的物理页开始, 如果访问位0, 替换当前页, 指针指向下一个物理页; 如果访问位为1, 置零以后访问下一个物理页再进行判断. 如果所有物理页的访问位都被清零了, 又回到了第一次指针所指向的物理页进行替换.<br><img src="/images/1687695026904-7e752054-266c-4532-a5ed-f87e8a820681.png" alt="image.png"> </p><h2 id="二次机会算法"><a href="#二次机会算法" class="headerlink" title="二次机会算法"></a>二次机会算法</h2><p>因为考虑到时钟页面置换算法, 有时候会把一些 dirty bit 为1(有过写操作)的页面进行置换, 这样的话, 代价会比较大. 因此, 可以结合访问位和脏位一起来决定应该置换哪一页.<br><img src="/images/1687695163777-92bd2d83-667a-4519-8cba-d0ab531dffd8.png" alt="image.png"><br>相当于说, 替换的优先级, 没有读写也没写过, 那么直接走, 如果写过或者访问过, 那么给你一次机会, 如果又写过, 又访问过, 那么久给你两次机会<br><strong>举例</strong><br><img src="/images/1687695639971-cabfd26d-447c-4321-bd7c-10db02f74060.png" alt="image.png"></p><h2 id="最不常用算法（Least-Frequently-used-LFU）"><a href="#最不常用算法（Least-Frequently-used-LFU）" class="headerlink" title="最不常用算法（Least Frequently used, LFU）"></a>最不常用算法（Least Frequently used, LFU）</h2><p>**基本思路 : **<br>当一个缺页中断发生时, 选择访问次数最少的那个页面, 并淘汰.<br><strong>实现方法</strong> :<br> 对每一个页面设置一个访问计数器, 每当一个页面被访问时, 该页面的访问计数器加1. 当发生缺页中断时, 淘汰计数值最小的那个页面.<br>LRU和LFU的对比 : LRU考察的是多久未访问, 时间越短越好. 而LFU考察的是访问的次数和频度, 访问次数越多越好.</p><h2 id="Belady现象-科学家名字"><a href="#Belady现象-科学家名字" class="headerlink" title="Belady现象(科学家名字)"></a>Belady现象(科学家名字)</h2><p>在<strong>采用FIFO算法时</strong>, 有时会出现分配的物理页面数增加, 缺页率反而提高的异常现象;<br><strong>出现原因 :</strong><br> <strong>FIFO算法的置换特征与进程访问内存的动态特征是矛盾</strong>的, 与置换算法的目标是不一致的(即替换较少使用的页面), 因此**, 被他置换出去的页面不一定是进程不会访问的.**</p><h3 id="LRU-x2F-FIFO-和-Clock-的比较"><a href="#LRU-x2F-FIFO-和-Clock-的比较" class="headerlink" title="LRU &#x2F; FIFO 和 Clock 的比较"></a>LRU &#x2F; FIFO 和 Clock 的比较</h3><h1 id="全局页面置换算法"><a href="#全局页面置换算法" class="headerlink" title="全局页面置换算法"></a>全局页面置换算法</h1><blockquote><p>bc ：<br>操作系统是支持多进程的， 但是如果我们使用每个应用程序都使用各自的算法， 那势必是不行地。 所以我们就需要一个全局地算法.</p></blockquote><h2 id="工作集模型"><a href="#工作集模型" class="headerlink" title="工作集模型"></a>工作集模型</h2><p><strong>工作集 : 一个进程当前正在（一个时间段）使用的逻辑页面集合.</strong><br><strong>可以使用一个二元函数 W(t, derta) 来表示 :</strong></p><ul><li>t 是当前的执行时刻;</li><li>delta 称为工作集窗口, 即一个定长的页面访问的时间窗口;</li><li>W(t, derta) &#x3D; <strong>在当前时刻 t 之前的 derta 时间窗口当中的所有页面所组成的集合</strong>(随着 t 的变化, 该集合也在不断的变化)</li><li>| W(t, derta) | 是工作集的大小, 即逻辑页的数量.</li></ul><p><strong>举例 ：</strong><br><img src="/images/1687697072402-07754ed6-68a8-4bc3-842a-1d9852abbc6f.png" alt="image.png"></p><p>**工作集大小的变化 : **<br>进程开始执行后, 随着访问新页面逐步建立较稳定的工作集. 当内存访问的局部性区域的位置大致稳定时, 工作集大小也大致稳定; 局部性区域的位置改变时, 工作集快速扩张和收缩过渡到下一个稳定值.<br><img src="/images/1687697148395-b853d1ed-d753-4759-9065-3f233af80558.png" alt="image.png"></p><h2 id="常驻集："><a href="#常驻集：" class="headerlink" title="常驻集："></a>常驻集：</h2><p><strong>常驻集是指在当前时刻, 进程实际驻留在内存当中的页面集合.</strong></p><ul><li><strong>工作集是进程在运行过程中固有的性质</strong>, 而<strong>常驻集取决于系统分配给进程的物理页面数目</strong>, <strong>以及所采用的页面置换算法</strong>;</li><li>如果一个进程的整个工作集都在内存当中, 即常驻集 包含 工作集, 那么进程将很顺利地运行, 而不会造成太多的缺页中断(直到工作集发生剧烈变动, 从而过渡到另一个状态);</li><li>当进程常驻集的大小达到某个数目之后, 再给它分配更多的物理页面, 缺页率也不会明显下降.</li></ul><h2 id="工作集页置换算法"><a href="#工作集页置换算法" class="headerlink" title="工作集页置换算法"></a>工作集页置换算法</h2><p><strong>当工作集窗口在滑动过程中, 如果页面不在集合中, 那么就会直接丢失这个不在窗口中页面, 而不会等待缺页中断再丢弃.</strong><br>**实例： **<br><img src="/images/1687697566246-dc36a96f-5ab9-46e2-8ccb-0463f0557c37.png" alt="image.png"></p><h2 id="缺页率置换算法"><a href="#缺页率置换算法" class="headerlink" title="缺页率置换算法"></a>缺页率置换算法</h2><p>可变分配策略 : 常驻集大小可变. 例如 : 每个进程在刚开始运行的时候, 先根据程序大小给它分配一定数目的物理页面, 然后在进程运行过程中, 再动态地调整常驻集的大小.<br><img src="/images/1687697743325-f19088ba-f78a-4c89-ac71-d6cf0d8108b1.png" alt="image.png"></p><ul><li>可采用全局页面置换的方式, 当发生一个缺页中断时, 被置换的页面可以是在其他进程当中, 各个并发进程竞争地使用物理页面.</li><li>优缺点 : 性能较好, 但增加了系统开销.</li><li>具体实现 : 可以使用缺页率算法来动态调整常驻集的大小.</li></ul><p>缺页率 : 表示 “缺页次数 &#x2F; 内存访问次数”<br><img src="/images/1687698027913-c9b540e6-608c-453e-a7b6-e49831cda0c4.png" alt="image.png"><br>影响因素 : 页面置换算法, 分配给进程的物理页面数目, 页面本身的大小, 程序的编写方法.</p><h3 id="抖动问题"><a href="#抖动问题" class="headerlink" title="抖动问题"></a>抖动问题</h3><blockquote><p><strong>概念 ：</strong><br>如果分配给一个<strong>进程的物理页面太少</strong>, <strong>不能包含整个的工作集</strong>, 即常驻集 属于 工作集, 那么<strong>进程将会造成很多的缺页中断, 需要频繁的在内存与外存之间替换页面</strong>, 从而<strong>使进程的运行速度变得很慢</strong>, 我们把这种状态称为 “抖动”.</p></blockquote><p>- </p><p><strong>产生抖动的原因 :</strong><br> 随着驻留内存的进程数目增加, 分配给每个进程的物理页面数不断就减小, 缺页率不断上升. 所以OS要选择一个适当的进程数目和进程需要的帧数, 以便在并发水平和缺页率之间达到一个平衡.</p><p><img src="/images/1687698203078-e4b34563-5bba-4438-a1f3-bc2ab22eeea8.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟内存管理技术</title>
      <link href="/post/8d24b376.html"/>
      <url>/post/8d24b376.html</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟内存的起因及其目标"><a href="#虚拟内存的起因及其目标" class="headerlink" title="虚拟内存的起因及其目标"></a>虚拟内存的起因及其目标</h1><p><strong>background:</strong> </p><blockquote><p>使用硬盘&#x2F;磁盘使更多的程序在有限的内存中运行<br>比如： 游戏的内存大小 让我们必须拥有更大内存的电脑<br>理想的存储器 : 更大更快更便宜和非易失性的存储区</p></blockquote><h2 id="交换技术-amp-覆盖技术"><a href="#交换技术-amp-覆盖技术" class="headerlink" title="交换技术 &amp; 覆盖技术"></a>交换技术 &amp; 覆盖技术</h2><p>如果是程序太多, 超过了内存的容量, 可以采用自动的交换(swapping)技术, 把暂时不能执行的程序送到外存(硬盘)中<br><strong>目的 : 多道程序在内存时, 让正在运行的程序或需要运行的程序获得更多的内存资源</strong><br><strong>原理 :</strong><br>可将暂时不能运行的程序送到外存, 从而获得空闲内存空间. 操作系统把一个进程的整个地址空间的内容保存到外存中(换出 swap out), 而将外存中的某个进程的地址空间读入到内存中(换入 swap in). 换入换出内容的大小为整个程序的地址空间.<br>缺点：<br>交换的程序如果内存很大， 那么开销就非常大</p><hr><p>如果是程序太大, 超出了内存的容量, 可以采用手动的概率(overlay)技术, 只把需要的指令和数据保存在内存当中<br><strong>目的 : 是在较小的可用内存中运行较大的程序, 常用于多道程序系统, 与分区存储管理配合使用.</strong><br><strong>原理 :</strong><br>把程序按照其自身逻辑结构, 划分为若干个功能上相互独立的程序模块, 那些不会同时执行的模块共享同一块内存区域, 按时间先后来运行.</p><ul><li>必要部分(常用功能)的代码和数据常驻内存;</li><li>可选部分(不常用功能)在其他程序模块中实现, 平时存放在外存中, 在需要用到时才装入内存;</li><li>不存在调用关系的模块不必同时装入到内存, 从而可以相互覆盖, 即这些模块共用一个分区.</li></ul><p>也就是说,程序松耦合的部分可以按需装入内存,不需要的时候放在外存中,多个不常用部分共用一个分区.</p><h1 id="虚拟内存管理技术"><a href="#虚拟内存管理技术" class="headerlink" title="虚拟内存管理技术"></a>虚拟内存管理技术</h1><blockquote><p>在覆盖和交换技术无法处理的情况下，我们就需要另外使用其他的方法来解决程序在内存中的占比技术</p></blockquote><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><ul><li>像覆盖技术那样, 不是把程序的所有内容都放在内存中, 因而能够运行比当前的空闲内存空间还要大的程序**. 但做的更好, 由操作系统自动来完成, 无需程序员的干涉.**</li><li>像交换技术那样, 能够实现进程在内存与外存之间的交换, 因而获得更多的空闲内存空间. <strong>但做的更好, 只对进程的部分内容在内存和外存之间进行交换.</strong></li></ul><p>总而言之， 就是将交换技术 &amp; 覆盖技术合并其优点来完成。</p><h3 id="程序的局部性原理"><a href="#程序的局部性原理" class="headerlink" title="程序的局部性原理"></a>程序的局部性原理</h3><p><strong>程序的局部性原理(principle of locality) : 指程序在执行过程中的一个较短时期, 所执行的指令地址和指令的操作数地址, 分别局限于一定的区域.</strong></p><ul><li>时间局部性 : 一条指令的一次执行和下次执行, 一个数据的一次访问和下次访问都集中在一个较短时期内 ;</li><li>空间局部性 : 当前指令和邻近的几条指令, 当前访问的数据和邻近的几个数据都集中在一个较小区域内.</li></ul><p>程序的局部性原理表明,** 从理论上来说, 虚拟存储技术是能够实现的. 而且在实现了以后应该是能够取得一个满意的效果**.</p><h2 id="基本概念-amp-特征"><a href="#基本概念-amp-特征" class="headerlink" title="基本概念 &amp; 特征"></a>基本概念 &amp; 特征</h2><ul><li>可以在页式或段式内存管理的基础上实现<ul><li>在装入程序时, 不必将其全部装入内存, 而<strong>只需将当前需要执行的部分页面或段装入到内存中</strong>, 就可以让程序开始执行;</li><li>在程序执行过程中, 如果需执行的指令或访问的数据尚未在内存中(称为缺页或缺段), 则由处理器通知操作系统将相应的页面或段调入到内存, 然后继续执行程序;</li><li>另一方面, 操作系统将内存中暂时不使用的页面或段调出保存在外存上, 从而腾出更多空闲内存空间存放将要装入的程序以及将要调入的页面或段.</li></ul></li><li>**基本特征： **<ul><li><strong>大的用户空间 : （相当于把硬盘当作内存）</strong>通过把物理内存和外存相结合, 提供给用户的虚拟内存空间通常大于实际的物理内存, 即实现了这两者的分离. 如32位的虚拟地址理论上可以访问4GB, 而可能计算机上仅有256M的物理内存, 但硬盘容量大于4GB.</li><li><strong>部分交换 :</strong> 与交换技术相比较, 虚拟存储的调入和调出是对部分虚拟地址空间进行的;</li><li>不连续性 : 物理内存分配的不连续性, 虚拟地址空间使用的不连续性.</li></ul></li></ul><h2 id="虚拟页式内存管理"><a href="#虚拟页式内存管理" class="headerlink" title="虚拟页式内存管理"></a>虚拟页式内存管理</h2><p><img src="/images/1687609809785-1b6caeed-7e42-4b9a-a725-cb7373b17874.png" alt="image.png"><br>页式内存管理<br>页表 : 完成逻辑页到物理页帧的映射</p><blockquote><p>根据页号去页表中寻找索引, 先查看 resident bit 是否为0, 0表示不存在, 1表示映射关系存在, 获得帧号加上原本的偏移, 获得了物理地址.</p></blockquote><p><strong>虚拟页式内存管理</strong></p><ul><li>大部分虚拟存储系统都采用虚拟页式存储管理技术, 即在页式存储管理的基础上, 增加请求调页和页面置换功能.</li><li><strong>基本思路</strong><ul><li>当一个用户程序要调入内存运行时, 不是将该程序的所有页面都装入内存, 而是只装入部分的页面, 就可启动程序运行.</li><li>在运行的过程中, <strong>如果发现要运行的程序或要访问的数据不再内存,</strong> 则向系统发出缺页的<strong>中断请求, <strong>系统在处理这个中断时</strong>, 将外存中相应的页面调入内存,</strong> 使得该程序能够<strong>继续运行.</strong></li></ul></li></ul><hr><p><img src="/images/1687610177732-db514f2b-c9ee-46a5-90e7-aebc8bb3b53c.png" alt="image.png"></p><ul><li><strong>页表表项逻辑页号 | 访问位 | 修改位 | 保护位 | 驻留位 | 物理页帧号</strong><ul><li>驻留位 : 表示该页是在内存中还是在外存. (1[内存中] ; 0 [外存中] )</li><li>保护位 : 表示允许对该页 做何种类型的访问, 如只读, 可读写, 可执行等</li><li>修改位 : 表示此页在内存中是否被修改过. 当系统回收该物理页面时, 根据此位来决定是否把它的内容写回外存</li><li>访问位 : 如果该页被访问过(包括读写操作), 则设置此位. 用于页面置换算法.</li></ul></li></ul><hr><p><img src="/images/1687610637161-601fe6ce-f647-4a38-acc1-7cfb075b5502.png" alt="image.png"></p><ul><li>**缺页中断处理过程 :**在何处保存未被映射的页?后备存储(二级存储) :<ol><li>如果在内存中有空闲的物理页面, 则分配一物理页帧f, 然后转第4步; 否则转到第2步;</li><li>采用某种<strong>页面置换算法</strong>, 选择一个将被替换的物理页帧f, 它所对应的逻辑页为q, 如果该页在内存期间被修改过, 则需要把它写回外存;</li><li>对q所对应的页表项修改, 把驻留位置为0;</li><li>将需要访问的页p装入到物理页面f当中;</li><li>修改p所对应的页表项的内容, 把驻留位置为1, 把物理页帧号置为f;</li><li>重新运行被中断是指令.</li></ol></li></ul><h3 id="后备存储"><a href="#后备存储" class="headerlink" title="后备存储"></a>后备存储</h3><h4 id="在何处保存未被映射的页-？"><a href="#在何处保存未被映射的页-？" class="headerlink" title="在何处保存未被映射的页 ？"></a>在何处保存未被映射的页 ？</h4><ul><li>能够简单地识别在二级存储器中的页</li><li>交换空间(磁盘或者文件) : 特殊格式, 用于存储未被映射的页面</li></ul><h4 id="后备存储概念-："><a href="#后备存储概念-：" class="headerlink" title="后备存储概念 ："></a>后备存储概念 ：</h4><ul><li>一个虚拟地址空间的页面可以被映射到一个文件(在二级存储中)的某个位置</li><li>代码段 : 映射到可执行二进制文件</li><li>动态加载的共享库程序段 : 映射到动态调用的库文件</li><li>其他段 : 可能被映射到交换文件(swap file)</li></ul><h3 id="虚拟内存性能"><a href="#虚拟内存性能" class="headerlink" title="虚拟内存性能"></a>虚拟内存性能</h3><p><strong>为了便于理解分页的开销, 使用有效存储器访问时间 effective memory access time (EAT)</strong><br>EAT &#x3D; 访存时间 * 页表命中几率 + page fault处理时间 * page fault几率<br><strong>实例 :</strong></p><ul><li>访存时间 : 10 ns</li><li>磁盘访问时间 : 5 ms</li><li>参数 p &#x3D; page fault 几率</li><li>参数 q &#x3D; dirty page 几率</li><li>(对页面写操作)EAT &#x3D; 10*(1-p) + 5000000<em>p</em>(1+q)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构及内存分配</title>
      <link href="/post/ac2144b2.html"/>
      <url>/post/ac2144b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h1><ul><li>内存</li><li>cpu</li><li>外设</li></ul><p><img src="/images/1687481239582-40fec1fe-4bce-45af-8bbe-b08860961dd2.png" alt="image.png"><br>操作系统最核心的部分就是放在内核中<br><img src="/images/1687481327354-f9eeedaf-a9e7-4cb2-abe0-33bf427b96e9.png" alt="image.png"></p><ul><li>时钟管理</li><li>中断处理</li><li>原语 ： 处于操作系统最底层， 与硬件直接接触</li><li>进程管理、存储器管理等</li></ul><p><strong>操作系统内核需要运行在内核态</strong><br><strong>非内核功能运行在用户态</strong></p><h1 id="大内核"><a href="#大内核" class="headerlink" title="大内核"></a>大内核</h1><p>大内核的体系结构： </p><blockquote><p><img src="/images/1687481523573-ada7c875-b17d-4784-897c-754b7634ae8e.png" alt="image.png"><br>**所有的内核部分都是运行在内核态。 **</p></blockquote><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li>优点：</li></ul><p>**高性能 **</p><ul><li>缺点：</li></ul><p><strong>内核庞大， 结构混乱， 难以维持。</strong></p><h1 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h1><p>微内核的体系结果</p><blockquote><p>对比大内核， 他只将<img src="/images/1687481637252-0dd9a8e2-491a-4688-b08d-7c2ad852315e.png" alt="image.png"><br>这些作为内核部分运行在内核态</p></blockquote><h3 id="优缺点：-1"><a href="#优缺点：-1" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li>优点：</li></ul><p><strong>内核功能少， 结构清晰， 方便维持。</strong></p><ul><li>缺点：</li></ul><p>需要频繁的在用户态 和 内核态之间切换 ，性能低。 </p><h1 id="地址空间-amp-地址生成"><a href="#地址空间-amp-地址生成" class="headerlink" title="地址空间 &amp; 地址生成"></a>地址空间 &amp; 地址生成</h1><p><img src="/images/1687488350492-f75b4464-e605-4e8d-8ea3-0258f84ba678.png" alt="image.png"></p><p>就上图而言，  p1, p2 ,p3 ,p4 这四个进程在执行相对应的应用程序， 假设p1 先执行， p4 最后执行，那么我们就可以暂时将p4所需要的资源放到 磁盘中， 暂缓放到内存中 。而将真正需要内存的p1所需要的资源放到 内存中。 </p><h3 id="内存管理目标"><a href="#内存管理目标" class="headerlink" title="内存管理目标"></a>内存管理目标</h3><ul><li>抽象：逻辑地址空间</li><li>保护：独立地址空间</li><li>共享：访问相同内存</li><li>虚拟：更多的地址空间</li></ul><h3 id="内存管理方法"><a href="#内存管理方法" class="headerlink" title="内存管理方法"></a>内存管理方法</h3><ul><li>程序重定位</li><li>分段</li><li>分页</li><li>虚拟内存</li><li>按需分页虚拟内存</li></ul><p>实现高度依赖于硬件, 其中**内存管理单元(MMU)**负责处理CPU的内存访问请求</p><h3 id="地址空间的定义-amp-生成"><a href="#地址空间的定义-amp-生成" class="headerlink" title="地址空间的定义 &amp; 生成"></a>地址空间的定义 &amp; 生成</h3><p>物理地址空间 ： —–直接对应硬件支持的地址空间<br>逻辑地址空间： ——-一个运行的程序， 他所看到的空间（所拥有的内存范围），是一个一维的线性空间<br><strong>两者的映射关系是由操作系统去协调</strong></p><hr><h4 id="逻辑地址-是如何-对应到-物理地址的-？"><a href="#逻辑地址-是如何-对应到-物理地址的-？" class="headerlink" title="逻辑地址 是如何 对应到 物理地址的 ？"></a>逻辑地址 是如何 对应到 物理地址的 ？</h4><p>通过MMU表达了这种映射关系</p><ol><li>当cpu要执行某个指令的时候 ，ALU部件（计算机组成原理中的内容）需要这条指令的内容。（也就是逻辑地址的内存内容） </li><li><strong>内存管理单元(MMU)查询逻辑映射表 寻找在逻辑地址和物理地址之间的映射是否存在。</strong></li><li>控制器通过总线向主存发送在物理地址的内存内容的请求</li></ol><hr><h4 id="确保访问的内存地址合法"><a href="#确保访问的内存地址合法" class="headerlink" title="确保访问的内存地址合法"></a>确保访问的内存地址合法</h4><p>通过下面的步骤进行检查<br><img src="/images/1687489400174-5d53cf36-54e6-43ef-ae7e-1514c560dcd3.png" alt="image.png"></p><h1 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h1><h3 id="内存的碎片问题"><a href="#内存的碎片问题" class="headerlink" title="内存的碎片问题"></a>内存的碎片问题</h3><ul><li>空闲内存不能被利用</li><li>外部碎片 （  在分配单元之间的未使用内存）</li><li>内部碎片 （ 在分配单元中的未使用内存 ）</li></ul><h3 id="分区的动态分配"><a href="#分区的动态分配" class="headerlink" title="分区的动态分配"></a>分区的动态分配</h3><p>**简单的内存管理方法： **</p><ul><li>当应用程序准许运行时， 分配一个连续的区间</li><li>分配一个连续的内存区间给运行的程序以访问数据</li></ul><p><strong>分配策略</strong></p><ul><li>首次适配（第一匹配分配）</li><li>最优适配</li><li>最差适配</li></ul><h4 id="首次分配算法"><a href="#首次分配算法" class="headerlink" title="首次分配算法"></a>首次分配算法</h4><p>按照地址顺序的空间块列表<br>分配需要寻找一个合适的分区</p><ul><li>如果有， 那么就需要检查， 看是否自由分区能够合并于相邻的空闲分区</li></ul><p><img src="/images/1687489781445-e580356e-48c0-411e-8e56-a39cfdf88965.png" alt="image.png"></p><h4 id="最优适配算法"><a href="#最优适配算法" class="headerlink" title="最优适配算法"></a>最优适配算法</h4><p>** 在内存中找到最小的空闲块, 分配给应用程序**</p><ul><li>为了避免分割大的空闲块</li><li>为了最小化外部碎片产生的尺寸</li><li>需求：<ul><li>按照尺寸排序的空闲块列表</li><li>分配需要寻找一个合适的分区</li><li>重新分配需要搜索及合并于相邻的空闲分区</li></ul></li></ul><p><img src="/images/1687490033356-b79b2dd5-ab87-4fc7-8705-ee8e810d2f9c.png" alt="image.png"></p><h4 id="最差匹配算法"><a href="#最差匹配算法" class="headerlink" title="最差匹配算法"></a>最差匹配算法</h4><p>为了避免有太多微小的碎片<br>需求：</p><ul><li>按尺寸排列的空闲块列表</li><li>分配很快（获得最大的分区）</li><li>重新分配需要合并于相邻的空闲分区， 如有， 需要调整空闲块列表</li></ul><p><img src="/images/1687490279407-6de0e632-43d0-49ec-81be-70bb7e5439b6.png" alt="image.png"></p><h4 id="三种优缺点比较"><a href="#三种优缺点比较" class="headerlink" title="三种优缺点比较"></a>三种优缺点比较</h4><table><thead><tr><th>分配方式</th><th>第一匹配分配</th><th>最优适配分配</th><th>最差适配分配</th></tr></thead><tbody><tr><td><strong>优势</strong></td><td>简单 &#x2F; 易于产生更大空闲块</td><td>比较简单 &#x2F; 大部分分配是小尺寸时高效</td><td>分配很快 &#x2F; 大部分分配是中尺寸时高效</td></tr><tr><td><strong>劣势</strong></td><td>产生外部碎片 &#x2F; 不确定性</td><td>产生外部碎片 &#x2F; 重分配慢 &#x2F; 产生很多没用的微小碎片</td><td>产生外部碎片 &#x2F; 重分配慢 &#x2F; 易于破碎大的空闲块以致大分区无法被分配</td></tr></tbody></table><h3 id="压缩式碎片整理"><a href="#压缩式碎片整理" class="headerlink" title="压缩式碎片整理"></a>压缩式碎片整理</h3><ol><li>压缩式碎片整理<ul><li>重置程序以合并碎片</li><li>要求所有程序是动态可重置的</li><li>问题 :<ul><li>何时重置 ? (在程序处于等待状态时才可以重置)</li><li>需要考虑内存拷贝的开销</li></ul></li></ul></li></ol><p><img src="/images/1687490988103-982b645e-bddb-4ea6-9c36-0438affbd0b0.png" alt="image.png"></p><h3 id="交换式碎片整理"><a href="#交换式碎片整理" class="headerlink" title="交换式碎片整理"></a>交换式碎片整理</h3><ol><li>交换式碎片整理<ul><li>运行程序需要更多的内存时，抢占等待的程序并且回收它们的内存</li><li>问题 :<ul><li>哪些程序应该被回收 ?</li></ul></li><li>情况 :运行中 : P3等待中 : P1 P2 P4内存分布 -&gt; 主存 : OS &#x2F; P1 &#x2F; P3 &#x2F; P2 &#x2F; P4 磁盘 : 空当P3程序需要更大的内存时 -&gt;内存分布 -&gt; 主存 : OS &#x2F; P1 &#x2F; P3 &#x2F; P2 磁盘 : P4</li></ul></li></ol><p><img src="/images/1687490945511-77644c34-48e9-4962-9349-2d02a71f093b.png" alt="image.png"></p><h1 id="非连续内存分配"><a href="#非连续内存分配" class="headerlink" title="非连续内存分配"></a>非连续内存分配</h1><h3 id="为什么要分连续内存分配管理方式-？"><a href="#为什么要分连续内存分配管理方式-？" class="headerlink" title="为什么要分连续内存分配管理方式 ？"></a>为什么要分连续内存分配管理方式 ？</h3><p><strong>答：</strong>连续分配的缺点就是会带来各种缺点， 内存利用率低， 外碎片、内碎片等问题。<br>随意** **<br><strong>非连续分配的优点 ：</strong></p><ul><li>一个程序的物理地址空间时非连续的</li><li>更好的内存利用和管理</li><li>允许共享代码与数据</li><li>支持动态加载和 动态链接</li></ul><p>**非连续内存分配机制的缺点 ： **</p><ol><li>如果建立虚拟地址和物理地址之间的转换<ol><li>软件方案</li><li>硬件方案</li></ol></li></ol><p><strong>两种硬件方案：</strong></p><ul><li>分段机制</li><li>分页机制</li></ul><p></p><h2 id="分段机制"><a href="#分段机制" class="headerlink" title="分段机制"></a>分段机制</h2><h4 id="程序的分段地址空间"><a href="#程序的分段地址空间" class="headerlink" title="程序的分段地址空间"></a>程序的分段地址空间</h4><p>在程序中会有来自不同文件的函数 ; 在程序执行时, 不同的数据也有不同的字段, 比如 : 堆 &#x2F; 栈 &#x2F; .bss &#x2F; .data 等<br><strong>分段 :</strong> 更好的分离和共享<br>程序的分段地址空间如下图所示 :<br><img src="/images/1687492032591-146fd77a-b4cd-4cb0-a0ce-f6c33db91673.png" alt="image.png"></p><h4 id="分段寻址方案"><a href="#分段寻址方案" class="headerlink" title="分段寻址方案"></a>分段寻址方案</h4><p>逻辑地址空间连续，但是物理地址空间不连续，使用映射机制进行关联.<br>一个段 : 一个内存”块”<br>程序访问内存地址需要 : 一个二维的二元组(s, addr) → (段号, 地址)<br>操作系统维护一张段表, 存储(段号, 物理地址中的起始地址, 长度限制)<br>物理地址 : 段表中的起始地址 + 二元组中的偏移地址<br><img src="/images/1687492172173-3df3d312-ddfe-41f0-912c-93ef4485800c.png" alt="image.png"></p><p><strong>硬件实现方案：</strong></p><p><img src="/images/1687492321948-2e1a8d32-de2e-4d59-9503-d7c5d901fe82.png" alt="image.png"></p><h2 id="分页机制"><a href="#分页机制" class="headerlink" title="分页机制"></a>分页机制</h2><h3 id="分页地址空间"><a href="#分页地址空间" class="headerlink" title="分页地址空间"></a>分页地址空间</h3><p>需要知道页号 + 页类的偏移<br><strong>划分物理内存至固定大小的帧(Frame)</strong></p><ul><li>大小是2的幂, 512 &#x2F; 4096 &#x2F; 8192</li></ul><p><strong>划分逻辑地址空间至相同大小的页(Page)</strong></p><ul><li>大小是2的幂, 512 &#x2F; 4096 &#x2F; 8192</li></ul><p><strong>建立方案 → 转换逻辑地址为物理地址(pages to frames)</strong></p><ul><li>页表</li><li>MMU &#x2F; TLB</li></ul><h4 id="帧-Frame"><a href="#帧-Frame" class="headerlink" title="帧(Frame)"></a>帧(Frame)</h4><p><img src="/images/1687492595869-25c5ea8d-07db-40c5-bd0a-9ceae0e4a81b.png" alt="image.png"><br><strong>物理内存被分割为大小相等的帧. 一个内存物理地址是一个二元组(f, o) → (帧号, 帧内偏移)</strong><br>帧号 : F位, 共有2^F个帧<br>帧内偏移 : S位, 每帧有2^S个字节<br>物理地址 &#x3D; 2^S * f + o<br>(例子 : 16-bit地址空间, 9-bit(512 byte) 大小的页帧 物理地址 &#x3D; (3,6) 物理地址 &#x3D; 2^9 * 3 + 6 &#x3D; 1542)<br>分页和分段的最大区别 : 这里的 S 是一个固定的数, 而分段中的长度限制不定</p><h4 id="页-Page"><a href="#页-Page" class="headerlink" title="页(Page)"></a>页(Page)</h4><p><img src="/images/1687492787864-c033f047-6608-4f9a-bd03-091be0eb0008.png" alt="image.png"><br><strong>一个程序的逻辑地址空间被划分为大小相等的页. 页内偏移的大小 &#x3D; 帧内偏移的大小 页号大小 &lt;&gt; 帧号大小</strong><br><strong>一个逻辑地址是一个二元组(p, o) → (页号, 页内偏移)</strong><br>页号 : P位, 共有2^P个页<br>页内偏移 : S位, 每页有2^S个字节<br>虚拟地址 &#x3D; 2^S * p + o<br><strong>页的寻址机制</strong><br><img src="/images/1687492834921-1e09c9e2-4e49-4874-8f04-13bc1e6d0e7d.png" alt="image.png"></p><ul><li>页映射到帧</li><li>页是连续的虚拟内存</li><li>帧是非连续的物理内存</li><li>不是所有的页都有对应的帧</li></ul><p>分页机制的偏移大小是固定的。</p><h2 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h2><p><strong>页表结构</strong></p><p><img src="/images/1687604020583-30b429c7-fd96-4c34-9f61-3c881eac17aa.png" alt="img"></p><ol><li><strong>页表的概述</strong></li></ol><p>每一个运行的程序都有一个页表</p><ul><li>属于程序运行状态, 会动态变化</li><li>PTBR : 页表基址寄存器</li></ul><ol><li><strong>转化后备缓冲区（TLB）</strong></li></ol><p>他是一块特殊的缓冲地。也可以说是cache。有效的解决了访问速度的问题。</p><p>也就是缓解时间问题</p><p><strong>Translation Look-aside Buffer(TLB) 是一个缓冲区. CPU中有快表TLB(可以将经常访问的页表存放在这边)</strong></p><p>缓存近期访问的页帧转换表项</p><ul><li>TLB使用关联内存实现, 具备快速访问性能</li><li>如果TLB命中, 物理页号可以很快被获取</li><li>如果TLB未命中, 对应的表项被更新到TLB中(x86的CPU由硬件实现, 其他的可能是由操作系统实现)</li></ul><p>逻辑框图</p><p><img src="/images/1687604745949-1df5d8f6-b23a-46a8-9578-32d8d033a2b0.png" alt="img"></p><p>页表的缓冲流程</p><p>CPU根据程序的page的页号的若干位, 计算出索引值index, 在页表中搜索这个index, 得到的是帧号, 帧号和原本的offset组成物理地址.</p><ol><li><strong>二级&#x2F;多级 页表</strong></li></ol><p>上述我们可以知道， 页表可以解决时间上的问题， 但是如何解决空间上的问题呢  ？</p><p>这里我们可以通过二级页表乃至多级页表来解决</p><p>也就是我们常说的<strong>时间换空间</strong></p><p><img src="/images/1687605364984-cfd5d336-af21-43c1-b573-8a5765adec01.png" alt="img"></p><p>二级页表：</p><ul><li>将页号分为两个部分, 页表分为两个, 一级页号对应一级页表, 二级页号对应二级页表.</li><li>一级页号查表获得在二级页表的起始地址, 地址加上二级页号的值, 在二级页表中获得帧号</li><li>节约了一定的空间, 在一级页表中如果resident bit &#x3D; 0, 可以使得在二级页表中不存储相关index,而只有一张页表的话, 这一些index都需要保留</li></ul><p><img src="/images/1687605547105-51c4a08b-532c-462c-aebd-4dc15e11ea2f.png" alt="img"></p><ul><li>通过把页号分为k个部分, 来实现多级间接页表, 建立一棵页表”树”</li></ul><ol><li><strong>反向页表</strong></li></ol><p>简单来说， 我们如果不知道物理地址空间大小， 那么就只能通过逻辑地址空间来建立， 这样就会浪费很多的空间。因为我们不知道实际的物理地址空间。</p><p>所以这里假设出了一种想法， 就是通过物理地址空间的大小来建立页表 。这样就可以避免了浪费。</p><p><strong>方案一： ： 基于页寄存器的方案</strong></p><p><img src="/images/1687605936545-424fe235-2020-4a10-b1c8-13f1b95f7cbe.png" alt="img"></p><p><strong>在页表中我们要解决的问题就是怎么通过页号 来找到页帧号</strong></p><p><strong>存储 (帧号, 页号)</strong> 使得表大小与物理内存大小相关, 而与逻辑内存关联减小.</p><p>每一个帧和一个寄存器关联, 寄存器内容包括 :</p><ul><li>resident bit : 此帧是否被占用</li><li>occupier : 对应的页号 p</li><li>protection bits : 保护位</li></ul><p>实例 :</p><ul><li>物理内存大小是 : 4096 * 4096 &#x3D; 4K * 4KB &#x3D; 16 MB</li><li>页面大小是 : 4096 bytes &#x3D; 4 KB</li><li>页帧数 : 4096 &#x3D; 4 K</li><li>页寄存器使用的空间(假设8 bytes &#x2F; register) : 8 * 4096 &#x3D; 32 Kbytes</li><li>页寄存器带来的额外开销 : 32K &#x2F; 16M &#x3D; 0.2%</li><li>虚拟内存大小 : 任意</li></ul><p>优势 :</p><ul><li>转换表的大小相对于物理内存来说很小</li><li>转换表的大小跟逻辑地址空间的大小无关</li></ul><p>劣势 :</p><ul><li>需要的信息对调了, 即根据帧号可以找到页号</li><li>如何转换回来? (如何根据页号找到帧号)</li><li>在需要在反向页表中搜索想要的页号</li></ul><p><strong>方案二  ：基于关联内存的方案</strong></p><p>硬件设计复杂, 容量不大, 需要放置在CPU中</p><ul><li><p>如果帧数较少, 页寄存器可以被放置在关联内存中</p></li><li><p>在关联内存中查找逻辑页号</p></li><li><ul><li>成功 : 帧号被提取</li><li>失败 : 页错误异常 (page fault)</li></ul></li><li><p>限制因素:</p></li><li><ul><li>大量的关联内存非常昂贵(难以在单个时钟周期内完成 ; 耗电)</li></ul></li></ul><p><strong>所以这种一般不实用</strong></p><p><strong>方案三： 基于哈希(hash)的方案</strong></p><p><img src="/images/1687606345756-28941032-0eef-4c5d-9312-33c4776bf7f4.png" alt="img"></p><p>哈希函数 : h(PID, p) 从 PID 标号获得页号</p><p>在反向页表中通过哈希算法来搜索一个页对应的帧号</p><ul><li><p>对页号做哈希计算, 为了在帧表中获取对应的帧号</p></li><li><p>页 i 被放置在表 f(i) 位置, 其中 f 是设定的哈希函数</p></li><li><p>为了查找页 i , 执行下列操作 :</p></li><li><ul><li>计算哈希函数 f(i) 并且使用它作为页寄存器表的索引, 获取对应的页寄存器</li><li>检查寄存器标签是否包含 i, 如果包含, 则代表成功, 否则失败</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中断异常和系统调用</title>
      <link href="/post/12e5be94.html"/>
      <url>/post/12e5be94.html</url>
      
        <content type="html"><![CDATA[<p>思维导图</p><p><img src="/images/1687184523598-2b5c39df-202b-42ed-abb9-f1b661a5afc9.png" alt="img"> </p><h1 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h1><p>CPU上会有两种程序</p><ul><li>操作系统内核程序</li><li>应用程序</li></ul><hr><p><strong>中断是让操作系统内核夺回CPU使用权的唯一途径</strong></p><p><strong>内核态 —-&gt; 用户态：</strong> 执行一条特权指令，—修改PSW的标志位为”用户态“， 这个动作意味着操作系统主动让出CPU使用权</p><p><strong>用户态 —-&gt; 内核态：</strong> 由中断引发， 硬件自动完成变态的过程 ，触发中断信号意味着操作系统将强行夺回CPU的使用权。</p><hr><h1 id="中断的类型"><a href="#中断的类型" class="headerlink" title="中断的类型"></a>中断的类型</h1><p><img src="/images/1687183996936-a020343a-51bf-4223-b65d-cbd38446491b.png" alt="img"></p><h2 id="内中断（异常）"><a href="#内中断（异常）" class="headerlink" title="内中断（异常）"></a>内中断（异常）</h2><p>与当前执行的<strong>指令有关</strong>， 中断信号来源于CPU<strong>内部</strong></p><ol><li><strong>陷阱、 陷入（trap ）</strong></li></ol><p>由陷入指令引发的， 是应用程序故意引起的</p><ol><li><strong>故障 （ fault  ）</strong></li></ol><p>由错误条件引起的 ， 可能被内核程序修改 ，内核程序修复后会把cpu的使用权交给应用程序， 让他继续执行。</p><ol><li><strong>终止 （ abort ）</strong></li></ol><p>由致命错误引起的 ， 内核程序无法修复的错误。 所以内核就不会将cpu使用权交给应用程序 。 </p><p>如： 非法的使用特权指令。</p><h2 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h2><p>与当前执行的<strong>指令无关</strong>， 中断信号来源于CPU<strong>外部</strong></p><h1 id="中断机制的基本原理"><a href="#中断机制的基本原理" class="headerlink" title="中断机制的基本原理"></a>中断机制的基本原理</h1><p>不同的中断信号 ，需要用不同的中断处理程序来处理， 当cpu检测到中断信号后， 会根据中断信号的类型去查询”中断向量表“ ， 以此来找到相应的中断处理程序在内存中的存放位置。</p><p><img src="/images/1687184477546-42fd0581-0ba0-4edf-a215-1401123d343f.png" alt="img"></p><h1 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h1><p>操作系统作为用户 和 计算机硬件之间的接口， 需要向上提供一些 简单易用的服务接口。 主要包括 命令接口和程序接口， 其中程序接口 由一组系统调用组成。</p><h1 id="系统调用-和-库函数的区别"><a href="#系统调用-和-库函数的区别" class="headerlink" title="系统调用 和 库函数的区别"></a>系统调用 和 库函数的区别</h1><p><img src="/images/1687184854726-f8757271-f9ca-49fa-932b-4782aeb6a4e5.png" alt="img"></p><h1 id="例子-，为什么系统调用是必须的-？"><a href="#例子-，为什么系统调用是必须的-？" class="headerlink" title="例子 ，为什么系统调用是必须的 ？"></a>例子 ，为什么系统调用是必须的 ？</h1><p>需要通过系统调用来达到对共享资源的一种调度的作用。</p><h1 id="什么功能要用系统调用实现"><a href="#什么功能要用系统调用实现" class="headerlink" title="什么功能要用系统调用实现  ?"></a>什么功能要用系统调用实现  ?</h1><p>应用程序通过<strong>系统调用</strong>请求操作系统的服务， 而系统中的各个共享资源都由操作系统内核统一进行掌管， 因此 ，<strong>凡是与共享资源有关的操作</strong> （如： 内存分配， IO操作，文件管理等） <strong>，都必须通过系统调用的方式像操作系统内核提出服务请求</strong>， 由操作系统内核代为完成 。 这样<strong>可以保证系统的稳定性和安全性</strong>。 防止用户进行非法操作。</p><p><img src="/images/1687185331421-6ea5ef82-fddd-439a-8097-bbeaa56f5e52.png" alt="img"></p><h1 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h1><p>重听， 相对来说是重点1.3_3_系统调用</p><p>6.10</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统的概念、功能、目标</title>
      <link href="/post/5d5d6d5e.html"/>
      <url>/post/5d5d6d5e.html</url>
      
        <content type="html"><![CDATA[<p>章节知识点大纲：</p><p><img src="/images/1687173153353-827ee487-8806-4a5d-9664-34b6d3f78370.png" alt="img"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>操作系统（OS）：</strong></p><ul><li>是指控制和<strong>管理</strong>整个计算机系统<strong>的硬件 和 软件</strong> 资源， 并合理地组织调动计算机地工作和资源地分配； </li><li>是<strong>以给提供给用户和其他软件方便地接口和环境</strong>；</li><li>他是<strong>计算机系统中最基本地系统软件</strong></li></ul><p><img src="/images/1687171500085-ba674b46-f884-46ad-a279-2fc3d8237f98.png" alt="img"></p><h1 id="目标、功能-：-系统资源的管理者"><a href="#目标、功能-：-系统资源的管理者" class="headerlink" title="目标、功能 ： 系统资源的管理者"></a>目标、功能 ： 系统资源的管理者</h1><h3 id="功能一：-处理器管理"><a href="#功能一：-处理器管理" class="headerlink" title="功能一： 处理器管理"></a>功能一： 处理器管理</h3><h3 id="功能二：-存储器管理"><a href="#功能二：-存储器管理" class="headerlink" title="功能二： 存储器管理"></a>功能二： 存储器管理</h3><h3 id="功能三：-文件管理"><a href="#功能三：-文件管理" class="headerlink" title="功能三： 文件管理"></a>功能三： 文件管理</h3><h3 id="功能四：-设备管理"><a href="#功能四：-设备管理" class="headerlink" title="功能四： 设备管理"></a>功能四： 设备管理</h3><h3 id="目标：-安全-、-高效"><a href="#目标：-安全-、-高效" class="headerlink" title="目标： 安全 、 高效"></a>目标： 安全 、 高效</h3><p>封装思想， 将一些复杂的功能封装称为一个简单的接口， 用户直接调用这些接口即可。</p><p><strong>给用户使用的三种命令接口</strong></p><ol><li><strong>联机命令接口 &#x3D; 交互式命令接口</strong> (win + R )的那个 ：  用户说一个系统做一个 </li><li><strong>脱机命令接口 &#x3D; 批处理命令接口</strong> ( *.bat 随便打开一个就知道了) ：  用户说一推 ，系统再执行</li><li><strong>GUI: 图形化用户接口</strong></li></ol><p><strong>给程序员使用的命令接口</strong></p><ol><li>系统调用（也叫广义指令）： 也就是程序员 通过高级语言编写程序 来进行系统调用</li></ol><h3 id="操作系统对硬件的拓展："><a href="#操作系统对硬件的拓展：" class="headerlink" title="操作系统对硬件的拓展："></a>操作系统对硬件的拓展：</h3><p>将cpu、内存、磁盘、显示器、鼠标等硬件合理的组合起来， 让各个硬件能够相互协调配合， 实现更多更复杂的功能</p><h3 id="案例-：-用QQ-和朋友使用聊天"><a href="#案例-：-用QQ-和朋友使用聊天" class="headerlink" title="案例 ： 用QQ 和朋友使用聊天"></a>案例 ： 用QQ 和朋友使用聊天</h3><ol><li>找到QQ的安装位置</li></ol><p><strong>找存储位置</strong></p><ol><li>双击打开qq</li></ol><p><strong>把程序相关数据 放入内存中</strong> </p><ol><li>qq开始运行</li></ol><p><strong>对应的进程正在被CPU处理</strong>   <strong>（只有将程序放入CPU ，他才能被cpu处理）</strong></p><ol><li>开始视频聊天</li></ol><p><strong>将需要的设备分配给进程</strong></p><h1 id="四个基本特征："><a href="#四个基本特征：" class="headerlink" title="四个基本特征："></a>四个基本特征：</h1><h2 id="特征一：-并发："><a href="#特征一：-并发：" class="headerlink" title="特征一： 并发："></a>特征一： 并发：</h2><p><strong>指两个或者多个事件再同一时间间隔内发生。 这些事件宏观上是同时发生的 ，但在微观上是交替发生的。</strong></p><p>并行：</p><p>两个或者多个事件再同一时刻同时发生</p><p><strong>注意点：</strong> </p><p>单核cpu同一时刻只能执行一个程序， 各个程序只能<strong>并发</strong>的执行</p><p>多个cpu同一时刻可以同时执行多个程序， 多个程序可以<strong>并行</strong>执行</p><h2 id="特征二：-共享"><a href="#特征二：-共享" class="headerlink" title="特征二： 共享"></a>特征二： 共享</h2><p>即资源共享， 是指系统中的资源可以供内存中多个并发执行的进程同时使用</p><h3 id="两种资源共享的方式"><a href="#两种资源共享的方式" class="headerlink" title="两种资源共享的方式"></a>两种资源共享的方式</h3><ul><li><strong>互斥共享方式</strong></li></ul><p>系统中的某些资源，虽然可以提供给多个进程使用， 但是一个时间段内只允许一个进程访问该资源</p><ul><li><strong>同时共享方式</strong></li></ul><p>系统中的某些资源，允许一个时间段内由多个进行“同时”对他们进行访问</p><h2 id="特征三：-虚拟"><a href="#特征三：-虚拟" class="headerlink" title="特征三： 虚拟"></a>特征三： 虚拟</h2><p>就是<strong>指把一个物理上的实体变成若干个逻辑上的对应物</strong>。 物理实体 是实际存在的 ，而逻辑上对应物 是用户感受到的。</p><p><img src="/images/1687174356752-3ccbd7b2-2553-4372-91e7-3b6a6c40d7ed.png" alt="img"></p><p>没有并发性。 虚拟性就没有意义</p><h2 id="特征四：-异步"><a href="#特征四：-异步" class="headerlink" title="特征四： 异步"></a>特征四： 异步</h2><p>是指多道程序下，允许多个程序并发执行，但由于资源有限， 进程的执行不是一贯到底的， 而是走走停停， 已不可预知的速度向前推进， 这就是进程的异步性。</p><h2 id="四者之间的关系-："><a href="#四者之间的关系-：" class="headerlink" title="四者之间的关系 ："></a>四者之间的关系 ：</h2><p>没有并发 和共享 就谈不上虚拟和异步， 因此并发和共享是操作系统的两个最基本的特征。</p><h1 id="操作系统的发展思维图"><a href="#操作系统的发展思维图" class="headerlink" title="操作系统的发展思维图"></a>操作系统的发展思维图</h1><p><img src="/images/1687176288744-f0634b57-5681-4907-be3d-9d61f5a91202.png" alt="img"></p><h1 id="操作系统的运行机制（怎么运行的）"><a href="#操作系统的运行机制（怎么运行的）" class="headerlink" title="操作系统的运行机制（怎么运行的）"></a>操作系统的运行机制（怎么运行的）</h1><ul><li>普通程序员写的是‘应用程序’</li><li>微软、苹果等公司他们的人负责实现操作系统的， 他们写的是‘内核程序’</li></ul><p><strong>一个操作系统， 只需要一个内核就足够了。 （Docker –&gt; 仅需要一个Linux的内核）</strong></p><p>还有的就是图形化界面不在内核中。</p><p><strong>CPU有两种状态</strong></p><ul><li><strong>用户态（目态）</strong></li></ul><p>此时正在运行的是应用程序， 此时只能执行非特权指令。</p><ul><li><strong>内核态（管态）</strong></li></ul><p>此时正在执行的是 内核程序， 此时可以执行特权指令。</p><hr><p>状态的转变就是我们计算机组成原理中的 <strong>程序状态字寄存器（PSW）</strong></p><p><img src="/images/1687177665974-9046a6cd-e36c-47c8-b0da-20e23059ec20.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Life</title>
      <link href="/post/b9ff91c0.html"/>
      <url>/post/b9ff91c0.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="966dd3fb4bac17396be28ceee3253534ee155b00a6175c0c041509d02f4f33d7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> person </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习总结</title>
      <link href="/post/a7e4027e.html"/>
      <url>/post/a7e4027e.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f0e069447bb6ed0007077f7966b95bfb03cc0768992cc8b3bbd7c74f9d66bc77"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习产出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序实现</title>
      <link href="/post/63b04fc7.html"/>
      <url>/post/63b04fc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="重新回顾实现十大排序算法"><a href="#重新回顾实现十大排序算法" class="headerlink" title="重新回顾实现十大排序算法"></a>重新回顾实现十大排序算法</h1><blockquote><p>什么是排序， 就是元素按照关键字进行递减或者递增的顺序排列</p></blockquote><p>**排序的稳定性： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">排序算法的稳定性是根据相同数值的元素之间的相对位置进行判断。</span><br></pre></td></tr></table></figure><p>**内排序 and 外排序： **</p><blockquote><p><strong>所谓的内排序就是排序时不涉及数据的内、外存交换， 则成为内排序</strong> ，反之涉及的话就是外排序。</p><p>​ 内排序适合元素个数不是很多的小表， 外排序适合多个表的数据进行排序。  </p><p>​ 内排序是外排序的基础。</p></blockquote><h3 id="排序算法的性能-："><a href="#排序算法的性能-：" class="headerlink" title="排序算法的性能 ："></a>排序算法的性能 ：</h3><p><strong>排序算法的性能是根据时间 and 空间确定的</strong></p><blockquote><p><strong>时间则是由元素比较和 移动的次数确定的</strong></p><p><strong>空间就是元素是否占用额外的存储空间</strong></p></blockquote><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> nums[] = &#123;<span class="number">12</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">53</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">sizeof</span>(nums)/ <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//    SelectSort(nums, size);</span></span><br><span class="line"><span class="comment">//    mopoSort(nums, size);</span></span><br><span class="line"><span class="comment">//    insertSort(nums,size);</span></span><br><span class="line">    <span class="built_in">quickSort</span>(nums,size);</span><br><span class="line">    <span class="built_in">listNum</span>(nums,size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230530161005996.png" alt="image-20230530161005996"></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序  [是一种基于分治思想的排序算法]</span></span><br><span class="line"><span class="comment"> *      1. 选取数组最左端元素作为基准数，初始化两个指针 i 和 j 分别指向数组的两端；</span></span><br><span class="line"><span class="comment">        2. 设置一个循环，在每轮中使用 i（j）分别寻找第一个比基准数大（小）的元素，然后交换这两个元素；</span></span><br><span class="line"><span class="comment">        3. 循环执行步骤 2. ，直到 i 和 j 相遇时停止，最后将基准数交换至两个子数组的分界线；</span></span><br><span class="line"><span class="comment"> * @param nums 数组</span></span><br><span class="line"><span class="comment"> * @param size 大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> nums[] , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="built_in">quick</span>(nums, <span class="number">0</span> , size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> left , <span class="type">int</span> right )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行划分</span></span><br><span class="line">    <span class="type">int</span> mid = <span class="built_in">partition</span>(nums,left,right);</span><br><span class="line">    <span class="comment">//递归左右子数组</span></span><br><span class="line">    <span class="built_in">quick</span>(nums,left, mid);</span><br><span class="line">    <span class="built_in">quick</span>(nums, mid +<span class="number">1</span> ,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进行划分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> nums[] , <span class="type">int</span> left , <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = left;</span><br><span class="line">    <span class="type">int</span> j = right;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] &gt;= nums[left])&#123;</span><br><span class="line">            j--;    <span class="comment">//从右向左找小于基准数的数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[left] &gt;= nums[i])&#123;</span><br><span class="line">            i++;    <span class="comment">//从左向右找大于基准数的数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums,i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(nums,i, left);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> left , <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = nums[left];</span><br><span class="line">    nums[left] = nums[right];</span><br><span class="line">    nums[right] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *      实现思路</span></span><br><span class="line"><span class="comment"> *        首先进行遍历循环当前数组， 没遍历到一个数， 就以这个数为基数nums[i]。然后进行内层遍历[ i+1 -- size ]</span></span><br><span class="line"><span class="comment"> *        内层循环中就需要进行比较当前的数nums[j] 和 基数nums[i] 之间的大小关系</span></span><br><span class="line"><span class="comment"> *        找到本轮内层循环中的最小值， 放到最左边。</span></span><br><span class="line"><span class="comment"> *        依次往复，直到遍历到数组的最右端。</span></span><br><span class="line"><span class="comment"> * @param nums</span></span><br><span class="line"><span class="comment"> * @param size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在实现每轮排序的时候 ，将未排序部分的数中最小的放到数组的最左边</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;size; i++)&#123;</span><br><span class="line">         <span class="type">int</span> k  = i;</span><br><span class="line">         <span class="comment">//内排序部分，将每轮中最小的部分放到数组的开头</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">             <span class="keyword">if</span>(nums[k] &gt; nums[j])&#123;</span><br><span class="line">                 k = j;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">swap</span>(nums[i],nums[k]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现冒泡排序</span></span><br><span class="line"><span class="comment"> * 从后向前进行遍历，以当前 nums[i] 为基数。 进行内循环从 [0 - i]</span></span><br><span class="line"><span class="comment"> * 如果说内层中有某个数nums[j] 比 基数 大， 那么就交换这个数nums[j]  和 基数 nums[i]</span></span><br><span class="line"><span class="comment"> * 如此往复 ，直到基数遍历到初始位置。</span></span><br><span class="line"><span class="comment"> * @param nums 数组</span></span><br><span class="line"><span class="comment"> * @param size 数组大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mopoSort</span><span class="params">(<span class="type">int</span> nums[] , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先冒泡出来一个数字， 然后将其和其他的进行比较， 如果大于其那么就交换。然后知道</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = size <span class="number">-1</span> ;i &gt; <span class="number">0</span> ;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[j])&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[i],  nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> *      首先我们假设 基数之前的数已经排序好， 然后以后面的数为基数nums[i] 开始遍历之前的数，看看当前数插入的位置</span></span><br><span class="line"><span class="comment"> *      我们需要将前面的数一一记录 nums[j+1] = nums[j]</span></span><br><span class="line"><span class="comment"> *      直到[基数base &lt; 遍历到的某个数nums[j]  或者 遍历到了最初位置 ]</span></span><br><span class="line"><span class="comment"> *      我们就需要将我们需要插入的基数 插入到当前的位置</span></span><br><span class="line"><span class="comment"> * @param nums 需要排序的数组</span></span><br><span class="line"><span class="comment"> * @param size 数组的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> nums[] , <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要用到递归</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="type">int</span> base = nums[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>; <span class="comment">// 从前一个已经排序好的数开始比较</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前的数为: &quot;</span>&lt;&lt;base &lt;&lt;endl;</span><br><span class="line">        <span class="comment">//如果说当前数nums[j] 小于 已经排好的数时，进行交换</span></span><br><span class="line">        <span class="keyword">while</span>( j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; base)&#123;</span><br><span class="line">            nums[j+<span class="number">1</span>] = nums[j];    <span class="comment">//将当</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j+<span class="number">1</span>] = base;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;排序后的顺序为: &quot;</span>;</span><br><span class="line">        <span class="built_in">listNum</span>(nums,size);</span><br><span class="line">        cout &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 折半插入排序</span></span><br><span class="line"><span class="comment"> * 折半插入排序相较于直接插入排序是在查找插入位置上做了优化。</span></span><br><span class="line"><span class="comment"> *      1. 首先根据索引找到需要插入的base元素</span></span><br><span class="line"><span class="comment"> *      2. base元素进行索引的区域 [ 0, i-1 ] ,因为插入排序的思想就是假设base元素之前的元素都是已经排序好的。</span></span><br><span class="line"><span class="comment"> *      3. 确定了插入的区域，我们就可以进行优化插入（进行折半）</span></span><br><span class="line"><span class="comment"> *          3.1.  通过while循环，先比较中间元素 和 base 元素的大小，</span></span><br><span class="line"><span class="comment"> *          3.2.  if(base &gt;= nums[mid]) 就缩小查询的范围[ begin, end ] ---将begin改变---&gt; [ mid+1 , end ]</span></span><br><span class="line"><span class="comment"> *          3.3.  if(base &lt; nums[mid]) 就缩小查询的范围[ begin, end ] ---将end改变---&gt; [ begin , mid - 1]</span></span><br><span class="line"><span class="comment"> *      4. 经过上述的操作， 我们就可以得到base的插入位置， 接下来就需要将数组中需要移动的元素整体向后移动。</span></span><br><span class="line"><span class="comment"> *      5. 然后插入到相应的位置。</span></span><br><span class="line"><span class="comment"> * @param nums 数组</span></span><br><span class="line"><span class="comment"> * @param size 数组大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinInsertSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> base = nums[i];</span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = i<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//实现折半查找插入位置</span></span><br><span class="line">        <span class="keyword">while</span>(begin &lt;= end)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (begin + end) /<span class="number">2</span> ;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= base)&#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                begin = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将元素整体向后移动一位， 给插入的元素腾出位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">-1</span>; j &gt;= begin ; j--) &#123;</span><br><span class="line">            nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[begin] = base;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * 归并排序的思路还是分治思想的实现</span></span><br><span class="line"><span class="comment"> * 首先将元素通过递归的形式 分 ，分到最后两个元素就进行比较， 然后进行排序</span></span><br><span class="line"><span class="comment"> * 最后再通过回溯将排序好的元素进行插入</span></span><br><span class="line"><span class="comment"> * @param nums</span></span><br><span class="line"><span class="comment"> * @param size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> size )</span></span>&#123;</span><br><span class="line">    <span class="built_in">divide</span>(nums, <span class="number">0</span> , size- <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进行递归的划分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> nums[] ,<span class="type">int</span> left , <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right )&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) /<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">divide</span>(nums, left, mid);</span><br><span class="line">    <span class="built_in">divide</span>(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="built_in">merge</span>(nums, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并实现</span></span><br><span class="line"><span class="comment"> * todo 注意点: 边界取值问题</span></span><br><span class="line"><span class="comment"> * @param nums 需要排序的数组</span></span><br><span class="line"><span class="comment"> * @param left 数组左边index</span></span><br><span class="line"><span class="comment"> * @param mid 数组中间</span></span><br><span class="line"><span class="comment"> * @param right 数组右边index</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> size= right - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> temp[size] ;</span><br><span class="line">    <span class="comment">//1.  先定义一个辅助数组， 将原数组的内容全部copy到辅助数组中</span></span><br><span class="line">    <span class="type">int</span> i = left, j = mid + <span class="number">1</span>; <span class="comment">//左右数组的起始位置index</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;= mid &amp;&amp; j &lt;= right )&#123;</span><br><span class="line">        <span class="comment">//比较左右数组的元素大小， 将较小的那个加入到新数组中</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[j])&#123;</span><br><span class="line">            temp[index++] = nums[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp[index++] = nums[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果还有左数组 || 右数组 还有元素没有添加进入那就全部导入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( i &lt;= mid)&#123;</span><br><span class="line">        temp[index++] = nums[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( j &lt;= right)&#123;</span><br><span class="line">        temp[index++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//然后将临时数组中的元素全部转到原来的数组中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将临时数组中的元素复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; index; p++) &#123;</span><br><span class="line">        nums[left + p] = temp[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="各排序的性能"><a href="#各排序的性能" class="headerlink" title="各排序的性能"></a>各排序的性能</h1><p>参考： <strong>hello-算法</strong></p><blockquote><p><a href="https://www.hello-algo.com/chapter_sorting/summary/">小结 - Hello 算法 (hello-algo.com)</a></p></blockquote><p><img src="/images/image-20230531150049320.png" alt="image-20230531150049320"></p><p><img src="/images/image-20230531150025929.png" alt="image-20230531150025929"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试</title>
      <link href="/post/160b2d7e.html"/>
      <url>/post/160b2d7e.html</url>
      
        <content type="html"><![CDATA[<p>&#x3D;&#x3D;接口测试测试维度&#x3D;&#x3D;</p><p><img src="/images/image-20230527153912514.png" alt="image-20230527153912514"></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接口的概念： </span><br><span class="line">接口就是系统或者组件之间的交互点， 通过这些交互点可实现数据的交互</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230527123450247.png" alt="image-20230527123450247"></p><p><strong>分类：</strong></p><ul><li><p>按照协议划分 ： http 、tcp、 ip</p></li><li><p>按照语言进行划分： Java、 go、 c++…</p></li><li><p>按照范围划分</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统之间的接口： 多个内部系统之间的交互， 内部系统和外部系统之间的交互</span><br><span class="line"></span><br><span class="line">程序内部的接口： 方法与方法之间， 模块与模块之间的交互</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>是对系统或组件之间的接口进行测试，主要是校验数据是否正确、传递和控制管理过程，以及相互逻辑依赖关系</p><p><strong>接口测试的原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模拟客户端向服务器发送请求 ，服务器接受请求之后进行相应的业务处理。 并向客户端返回响应数据，检查响应数据是否符合预期。</span><br><span class="line">-----</span><br><span class="line">主要针对的测试目标: 服务器</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230527124356900.png" alt="image-20230527124356900"></p><p>**接口测试的特点： **</p><ul><li>测试可以提前介入， 提早发现bug。 符合质量控制前移的理念</li><li>可以发现一些页面操作发现不了的问题</li><li>接口测试低成本高效益（可以实现自动化测试）</li><li>不同于传统的单元测试，接口测试是从用户的角度对系统进行全面的检查</li></ul><p>**接口测试的实现方式： **</p><ul><li>使用测试工具（jmeter 、 postman、fiddler）</li><li>通过编写自动化测试代码来实现（python  + Requests框架）</li></ul><p>​</p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h2><p>协议 ： 就是双方都要遵守的规则</p><p>**什么是HTTP协议： **</p><p><code>超文本传输协议</code>， 是一个<code>基于请求和响应模式</code>的、<code>应用层的协议</code>，也是互联网应用最广泛的协议</p><p><strong>HTTP特点：</strong></p><ul><li>支持客户端&#x2F;服务器模式</li><li>简单快速</li><li>灵活</li><li>无连接</li><li>无状态</li></ul><p>**URL：  **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义 ： </span><br><span class="line"> 统一资源定位符，是互联网标准资源的地址。HTTP通常用URL来建立链接和传输数据</span><br><span class="line">-------</span><br><span class="line">格式： </span><br><span class="line"> http://www.baidu.com</span><br></pre></td></tr></table></figure><p><strong>URL每部分代表的含义及其组成</strong></p><p><img src="/images/image-20230527131216440.png" alt="image-20230527131216440"></p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>一个HTTP请求通常由以下几部分组成：</p><ol><li><p>请求行：包含请求方法、请求的URL和HTTP协议的版本号，例如：GET &#x2F;index.html HTTP&#x2F;1.1</p></li><li><p>请求头部：包含请求的一些元数据，例如：Host、User-Agent、Accept、Content-Type等等。请求头部是以键值对的形式进行设置的。</p></li><li><p>空行：请求头部和请求体之间必须有一个空行。</p></li><li><p>请求体：一些请求方法，如POST，PUT等需要在请求体中携带数据，例如：表单数据、JSON数据、XML数据等等。<code>由请求头部中的content-Type决定</code></p></li></ol><p><strong>请求头部的各个信息:</strong></p><p>HTTP请求头包含了客户端向服务器发送的各种元数据，这些元数据描述了请求的特征、客户端的信息以及客户端期望的响应内容。以下是一些常见的HTTP请求头部信息及其解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. Accept：指定客户端能够接收的内容类型，例如：text/html、application/json、image/png等等。</span><br><span class="line">2. (★★★)Accept-Encoding：指定客户端能够接收的内容编码方式，例如：gzip、deflate、br等等。</span><br><span class="line">3. Accept-Language：指定客户端的语言偏好，例如：en-US、zh-CN等等。</span><br><span class="line">4. Cache-Control：指定客户端的缓存策略，例如：max-age、no-cache等等。</span><br><span class="line">5. Connection：指定客户端与服务器的连接类型，例如：keep-alive、close等等。</span><br><span class="line">6. Content-Length：指定请求体的长度。</span><br><span class="line">7. (★★★★★)Content-Type：指定请求体的类型，例如：application/x-www-form-urlencoded、multipart/form-data等等。</span><br><span class="line">8. Host：指定请求的目标主机名和端口号。</span><br><span class="line">9. User-Agent：指定客户端的身份标识，例如：Mozilla/5.0 (Windows NT 10.0; WinHTTP请求头包含了客户端向服务器发送的各种元数据，这些元数据描述了请求的特征、客户端的信息以及客户端期望的响应内容。以下是一些常见的HTTP请求头部信息及其解释：</span><br><span class="line">10. Accept：指定客户端能够接收的内容类型，例如：text/html、application/json、image/png等等。</span><br><span class="line">11. Accept-Encoding：指定客户端能够接收的内容编码方式，例如：gzip、deflate、br等等。</span><br><span class="line">12. Accept-Language：指定客户端的语言偏好，例如：en-US、zh-CN等等。</span><br><span class="line">13. Cache-Control：指定客户端的缓存策略，例如：max-age、no-cache等等。</span><br><span class="line">14. Connection：指定客户端与服务器的连接类型，例如：keep-alive、close等等。</span><br><span class="line">15. Content-Length：指定请求体的长度。</span><br><span class="line">16. Content-Type：指定请求体的类型，例如：application/x-www-form-urlencoded、multipart/form-data等等。</span><br><span class="line">17. Host：指定请求的目标主机名和端口号。</span><br><span class="line">18. User-Agent：指定客户端的身份标识，例如：Mozilla/5.0 (Windows NT 10.0; WinHTTP请求头包含了客户端向服务器发送的各种元数据，这些元数据描述了请求的特征、客户端的信息以及客户端期望的响应内容。以下是一些常见的HTTP请求头部信息及其解释：</span><br><span class="line">19. Accept：指定客户端能够接收的内容类型，例如：text/html、application/json、image/png等等。</span><br><span class="line">20. Accept-Encoding：指定客户端能够接收的内容编码方式，例如：gzip、deflate、br等等。</span><br><span class="line">21. Accept-Language：指定客户端的语言偏好，例如：en-US、zh-CN等等。</span><br><span class="line">22. Cache-Control：指定客户端的缓存策略，例如：max-age、no-cache等等。</span><br><span class="line">23. Connection：指定客户端与服务器的连接类型，例如：keep-alive、close等等。</span><br><span class="line">24. Content-Length：指定请求体的长度。</span><br><span class="line">25. Content-Type：指定请求体的类型，例如：application/x-www-form-urlencoded、multipart/form-data等等。</span><br><span class="line">26. Host：指定请求的目标主机名和端口号。</span><br><span class="line">27. User-Agent：指定客户端的身份标识，例如：Mozilla/5.0 (Windows NT 10.0; Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="抓包验证Fiddler"><a href="#抓包验证Fiddler" class="headerlink" title="抓包验证Fiddler"></a>抓包验证Fiddler</h3><p>打开fiddler ， 然后再浏览器中输入请求地址，点击即可。 </p><p><img src="/images/image-20230527135406327.png" alt="image-20230527135406327"></p><h2 id="传统风格的接口"><a href="#传统风格的接口" class="headerlink" title="传统风格的接口"></a>传统风格的接口</h2><p><img src="/images/image-20230527142222777.png" alt="image-20230527142222777"></p><p>对于方法的划分不够明确，只是用get and post两种。</p><p>对于url不唯一，统一操作对应不同的url</p><p>状态码比较单一</p><h3 id="RESTFul风格"><a href="#RESTFul风格" class="headerlink" title="RESTFul风格"></a>RESTFul风格</h3><p><img src="/images/image-20230527142912210.png" alt="image-20230527142912210"></p><ul><li>每个url都代表一种资源</li><li>客户端与服务器之间，传递这种资源的某种表现层</li><li>客户端通过四个HTTP动词（get&#x2F;post&#x2F;update&#x2F;delete），对服务器资源进行操作</li><li>接口之间传递的数据最常用的格式位JSON</li></ul><h1 id="接口测试的流程"><a href="#接口测试的流程" class="headerlink" title="接口测试的流程"></a>接口测试的流程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 需求评审</span><br><span class="line">2. 接口文档分析</span><br><span class="line">3. 设计测试用例</span><br><span class="line">4. 执行测试用例</span><br><span class="line">5. 接口缺陷管理与跟踪</span><br><span class="line">6. 生成测试报告</span><br><span class="line">7. 接口自动化持续集成</span><br></pre></td></tr></table></figure><h3 id="接口（API）文档的作用"><a href="#接口（API）文档的作用" class="headerlink" title="接口（API）文档的作用"></a>接口（API）文档的作用</h3><p>通过接口文档我们才能产生接口测试用例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定义: </span><br><span class="line">一般来说是由开发人员所编写的，用来描述系统所提供接口信息的文档。开发人员也是根据接口文档来进行开发， 并需要一直遵守维护</span><br></pre></td></tr></table></figure><p>**接口文档的作用: **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 能够让开发人员更好的配合， 提高工作效率</span><br><span class="line">2. 项目迭代或者项目人员迭代时， 方便后期人员查看和维护</span><br><span class="line">3. 方便测试人员进行测试</span><br></pre></td></tr></table></figure><p><strong>接口文档的结构:</strong></p><ol><li>基本信息【资源路径、请求方法、接口描述】</li><li>请求参数【请求头、请求体】</li><li>返回数据【状态码、 错误码、 错误信息】</li></ol><p><strong>写测试用例的好处：</strong></p><ol><li>防止测试点漏测，条理清晰</li><li>方便配置测试工具</li></ol><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><ul><li>单接口功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如登录接口、注册接口等等...</span><br><span class="line">直接进行单个接口测试</span><br></pre></td></tr></table></figure><ul><li>业务场景功能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">按照实际的用户使用场景，梳理接口业务场景</span><br><span class="line">组织业务场景时， 一般只需要做正向测试即可， 因为在此之前我们已经完成了单接口测试， 此时只需要按照实际的业务场景进行功能连调测试。</span><br><span class="line"></span><br><span class="line">- 一般建议用最少的用例测试最多的例子</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230527155016676.png" alt="image-20230527155016676"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">后期还会有功能性能测试 and 安全测试</span><br><span class="line">本节不作为重点去写</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SQL注入的漏洞</strong></p><p><img src="/images/image-20230527160126091.png" alt="image-20230527160126091"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">测试用例: </span><br><span class="line">为了测试Web应用程序是否受到SQL注入攻击的威胁，您可以使用以下测试用例：</span><br><span class="line"></span><br><span class="line">1. 基本SQL注入测试用例：</span><br><span class="line">尝试在输入参数中注入简单的SQL语句，例如：</span><br><span class="line">输入参数：&#x27; or 1=1 --</span><br><span class="line">这个输入参数可以将SQL注入到SQL语句中，将查询条件修改为1=1，从而绕过身份验证和访问控制等机制。</span><br><span class="line"></span><br><span class="line">2. 注入SELECT语句测试用例：</span><br><span class="line">尝试在输入参数中注入SELECT语句，例如：</span><br><span class="line">    输入参数：1; SELECT * FROM users --</span><br><span class="line">这个输入参数可以将两条SQL语句注入到SQL查询中，第一条SQL语句会查询id=1的用户，第二条SQL语句会查询所有用户的信息，从而泄露数据库中所有用户的信息。</span><br><span class="line"></span><br><span class="line">3. 注入UPDATE语句测试用例：</span><br><span class="line">尝试在输入参数中注入UPDATE语句，例如：</span><br><span class="line">输入参数：1; UPDATE users SET password=&#x27;123456&#x27; WHERE id=1 --</span><br><span class="line">这个输入参数可以将两条SQL语句注入到SQL查询中，第一条SQL语句会查询id=1的用户，第二条SQL语句会将该用户的密码修改为&#x27;123456&#x27;，从而修改了数据库中的数据。</span><br><span class="line"></span><br><span class="line">4. 注入DELETE语句测试用例：</span><br><span class="line">尝试在输入参数中注入DELETE语句，例如：</span><br><span class="line">输入参数：1; DELETE FROM users WHERE id=1 --</span><br><span class="line">这个输入参数可以将两条SQL语句注入到SQL查询中，第一条SQL语句会查询id=1的用户，第二条SQL语句会将该用户从数据库中删除，从而删除了数据库中的数据。</span><br><span class="line"></span><br><span class="line">5. 注入UNION语句测试用例：</span><br><span class="line">尝试在输入参数中注入UNION语句，例如：</span><br><span class="line">输入参数：1; UNION SELECT * FROM users --</span><br><span class="line">这个输入参数可以将两条SQL语句注入到SQL查询中，第一条SQL语句会查询id=1的用户，第二条SQL语句会查询所有用户的信息，并将两条查询结果合并到一起，从而泄露数据库中所有用户的信息。</span><br><span class="line"></span><br><span class="line">6. 注入子查询语句测试用例：</span><br><span class="line">尝试在输入参数中注入子查询语句，例如：</span><br><span class="line">输入参数：1; SELECT * FROM users WHERE id=(SELECT id FROM users WHERE name=&#x27;admin&#x27;) --</span><br><span class="line">这个输入参数可以将两条SQL语句注入到SQL查询中，第一条SQL语句会查询id=1的用户，第二条SQL语句会在users表中查询name为&#x27;admin&#x27;的用户的id，从而绕过身份验证和访问控制等机制，并获取管理员账户的访问权限。</span><br></pre></td></tr></table></figure><h2 id="与手工测试不同之处"><a href="#与手工测试不同之处" class="headerlink" title="与手工测试不同之处"></a>与手工测试不同之处</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 接口测试主要是测参数对应的参数值是否正确</span><br><span class="line">非1: 手工测试主要是测输入到数据框的数据是否正确</span><br><span class="line"></span><br><span class="line">2. 接口测试还可以对参数本身进行测试</span><br><span class="line"> #2: 只对数据进行测试</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230527161623454.png" alt="image-20230527161623454"></p><p><strong>与手工相同之处</strong></p><ol><li>测试用例的八大要素 and 测试文档的要素</li></ol><p><img src="/images/image-20230527162051985.png" alt="image-20230527162051985"></p><table><thead><tr><th>编号</th><th>用例名称</th><th>模块</th><th>优先级</th><th>前置条件</th><th>请求方法</th><th>URL</th><th>请求头</th><th>请求体(请求数据)</th><th>预期结果</th></tr></thead><tbody><tr><td>login_1</td><td>登录成功</td><td>登录</td><td>p1</td><td>账号存在 &amp;&amp; 密码正确</td><td>POST</td><td>{协议 + 域名} &#x2F;api&#x2F;sys&#x2F;login</td><td>Content-Type: application&#x2F;json</td><td>{“usernmae”:  “leicunwu”,”password”: “leicw”}</td><td>状态码：200</td></tr></tbody></table><h1 id="用Postman管理测试用例"><a href="#用Postman管理测试用例" class="headerlink" title="用Postman管理测试用例"></a>用Postman管理测试用例</h1><p><img src="/images/image-20230529145733529.png" alt="image-20230529145733529"></p><p>使用基本和ApiFox相同</p><h2 id="x3D-x3D-断言：-x3D-x3D"><a href="#x3D-x3D-断言：-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;断言：&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;断言：&#x3D;&#x3D;</strong></h2><p><img src="/images/image-20230529141836642.png" alt="image-20230529141836642"></p><p><img src="/images/image-20230529142125323.png" alt="image-20230529142125323"></p><p><strong>断言实例</strong></p><p><img src="/images/image-20230529142304723.png" alt="image-20230529142304723"></p><p>解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.   pm.test() 函数用于定义一个测试用例，该函数接受两个参数：测试用例的名称和一个匿名函数，该匿名函数包含了测试用例的具体实现逻辑。</span><br><span class="line">2.   匿名函数中的 pm.response.to.have.status(200) 语句用于检查 API 响应的状态码是否等于 200。如果状态码不等于 200，则测试用例失败，Postman 将输出测试失败的详细信息；如果状态码等于 200，则测试用例通过，Postman 将输出测试通过的信息。</span><br><span class="line"></span><br><span class="line">因此，这段代码的目的是测试 API 响应的状态码是否等于 200，以确保 API 的正常运行。如果 API 返回的状态码不是 200，则测试用例将失败，Postman 将输出测试失败的详细信息。</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230529143026840.png" alt="image-20230529143026840"></p><p>&#x3D;&#x3D;断言为JSON格式的数据：&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pm.test(&quot;Your test name&quot;, function () &#123;</span><br><span class="line">    var jsonData = pm.response.json();</span><br><span class="line">    pm.expect(jsonData.value).to.eql(100);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//解释</span><br><span class="line"> - pm.test() 函数用于定义一个测试用例，该函数接受两个参数：测试用例的名称和一个匿名函数，该匿名函数包含了测试用例的具体实现逻辑。</span><br><span class="line"> - 匿名函数中的 var jsonData = pm.response.json(); 语句用于将响应数据解析为 JSON 格式，并将其存储在 jsonData 变量中。</span><br><span class="line"> - pm.expect(jsonData.value).to.eql(100) 语句用于检查 jsonData 中的 value 属性是否等于 100。如果相等，则测试用例通过，否则测试用例失败。【断言指定的属性的类型不能改变】</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230529145241586.png" alt="image-20230529145241586"></p><h2 id="全局变量和环境变量"><a href="#全局变量和环境变量" class="headerlink" title="全局变量和环境变量"></a>全局变量和环境变量</h2><p>如果我们想要测试两个接口， 前一个的输入就是等于后一个的输出， 那么我们就可以用一个全局变量来进行记录。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>**全局变量： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全局变量是全局唯一的变量， 不可重复定义的变量</span><br></pre></td></tr></table></figure><p>**环境变量： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">环境变量是</span><br><span class="line"> - 一个变量只能属于某个环境， 在某一个环境中不可重复定义</span><br><span class="line"> - 在环境与环境之间可以定义重复的变量</span><br><span class="line"> - 一个环境可以包含多个环境变量</span><br><span class="line"> - 常见环境分类: 开发环境、 测试环境、 生产环境</span><br></pre></td></tr></table></figure><h3 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h3><p>**基本语法： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局变量: </span><br><span class="line">pm.globals.set(&quot;var_name&quot;, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">环境变量 :</span><br><span class="line">pm.environment.set(&quot;var_name&quot;, value);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取变量值："><a href="#获取变量值：" class="headerlink" title="获取变量值："></a>获取变量值：</h3><p><strong>基本语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局变量: (两种)</span><br><span class="line">1. &#123;&#123;var_name&#125;&#125;</span><br><span class="line">2. var value =  pm.globals.get(&quot;var_name&quot;);</span><br><span class="line"></span><br><span class="line">环境变量:(两种)</span><br><span class="line">1. &#123;&#123;var_name&#125;&#125;</span><br><span class="line">2. var value = pm.envirment.get(&quot;var_name&quot;);</span><br></pre></td></tr></table></figure><h2 id="postman请求前置脚本"><a href="#postman请求前置脚本" class="headerlink" title="postman请求前置脚本"></a>postman请求前置脚本</h2><p>postman断言工作的原理</p><p> <img src="/images/image-20230529151718865.png" alt="image-20230529151718865"></p><blockquote><p>应用场景: </p><p><img src="/images/image-20230529151522923.png" alt="image-20230529151522923"></p></blockquote><p>**请求前置脚本 ： **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也就是在请求发送(send)后， 请求前置脚本代码，第一时间被执行，在postman内部实际http请求之前。</span><br></pre></td></tr></table></figure><h4 id="how-to-used"><a href="#how-to-used" class="headerlink" title="how to used"></a><strong>how to used</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过设置我们需要的得到的变量</span><br><span class="line">比如时间</span><br><span class="line">var timestamp = new Date().getTime()</span><br><span class="line">然后将变量设置为全局变量。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230529153155994.png" alt="image-20230529153155994"></p><p>通过上述的方式 ，我们需要设置的变量就已经设置到了全局变量中了</p><p> **接下来就是获取： **</p><p><img src="/images/image-20230529153327027.png" alt="image-20230529153327027"></p><p>**获取结果： **</p><p><img src="/images/image-20230529153712497.png" alt="image-20230529153712497"></p><h3 id="x3D-x3D-postman的关联-x3D-x3D"><a href="#x3D-x3D-postman的关联-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;postman的关联&#x3D;&#x3D;"></a>&#x3D;&#x3D;postman的关联&#x3D;&#x3D;</h3><blockquote><p>应用于多个请求之间， 有数据关联、或依赖关系时 。（用的较多）</p></blockquote><p>&#x3D;&#x3D;登录—令牌&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A、B 两个接口</span><br><span class="line">1. 向B接口中发送请求， 获取数据</span><br><span class="line">2. 将数据设置成为全局变量（环境变量）中，</span><br><span class="line">3， A接口 获取全局变量（环境变量） 中的数据， 进行使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**应用案列： **</p><blockquote><p><img src="/images/image-20230529160021126.png" alt="image-20230529160021126"><img src="/images/image-20230529160337324.png" alt="image-20230529160337324"></p></blockquote><p><strong>执行测试</strong></p><p><img src="/images/image-20230529161003995.png" alt="image-20230529161003995"></p><pre><code>## 使用newman生成测试报告</code></pre><p>先进行安装newman</p><p>然后通过下面的命令进行生成测试报告</p><p><img src="/images/image-20230531152159286.png" alt="image-20230531152159286"></p><h1 id="postman读取外部数据文件（专业名称：-参数化）"><a href="#postman读取外部数据文件（专业名称：-参数化）" class="headerlink" title="postman读取外部数据文件（专业名称： 参数化）"></a>postman读取外部数据文件（专业名称： 参数化）</h1><blockquote><p>如果说我们的请求只有请求体或者参数中的数据不同之外， 其他都一样， 那么我们就需要通过参数化 来将数据导入， 让其自动执行即可</p></blockquote><h2 id="两种数据文件格式"><a href="#两种数据文件格式" class="headerlink" title="两种数据文件格式"></a>两种数据文件格式</h2><ul><li>CSV : 数据组织形式简单， 适用于大数据的场合</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">缺点: </span><br><span class="line">1. 不支持bool类型数据</span><br><span class="line">2. 不支持多参、少参、错误参数的接口测试</span><br><span class="line">3， 不支持复杂数据类型（如嵌套、列表等）</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>JSON：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点 ：</span><br><span class="line">完全弥补了CSV格式的缺点</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1. 相同数据量， json格式的数据文件大小远大于csv格式的文件大小</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h2><h3 id="csv文件"><a href="#csv文件" class="headerlink" title="csv文件"></a>csv文件</h3><ol><li>创建XXX.csv文件</li><li>将数据写入csv文件中</li><li>在postman中， 选中使用数据文件的用例集</li></ol><p><strong>具体操作步骤：</strong></p><p><img src="/images/image-20230531154739798.png" alt="image-20230531154739798"></p><h3 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h3><ol><li>创建xxx.json格式的文件</li><li><strong>按照json格式的语法写入数据 ，但是要求json内容的最外层必须是<code>[ ]</code>包裹 ， 内部是<code>&#123; &#125;</code></strong></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一般的使用方式主要有两种</p><ul><li>请求参数（请求头、 请求体、请求行）中使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">使用&#123;&#123;username&#125;&#125; 包裹 csv文件的字段名 或者 json文件的key</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在代码中（断言 、 请求前置脚本）中使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要借助postman提供的关键字data后面 跟 csv文件的字段名 或者 json文件的key</span><br><span class="line">格式: data.字段名</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p><img src="/images/image-20230531160535049.png" alt="image-20230531160535049"></p></blockquote><blockquote><p><a href="https://cx.shouji.360.cn/phonearea.php?number=13399720059">https://cx.shouji.360.cn/phonearea.php?number=13399720059</a></p></blockquote><h2 id="1-编写断言"><a href="#1-编写断言" class="headerlink" title="1. 编写断言"></a>1. 编写断言</h2><ol><li><p><strong>首先选择哪种断言方式， 我们这里用到的是断言运营商是否为电信</strong></p></li><li><p><strong>导入模板</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Your test name&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.<span class="property">response</span>.<span class="title function_">json</span>();</span><br><span class="line">    pm.<span class="title function_">expect</span>(jsonData.<span class="property">value</span>).<span class="property">to</span>.<span class="title function_">eql</span>(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>更改模板为我们需要的</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们需要的是 ： 手机号运营商 是否为电信</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230531161434527.png" alt="image-20230531161434527"></p><p>&#x3D;&#x3D;<strong>进行更改</strong>&#x3D;&#x3D;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要用来断言 手机号运营商 是否为电信</span></span><br><span class="line"> </span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;断言手机号运营商&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.<span class="property">response</span>.<span class="title function_">json</span>();  <span class="comment">//得到整个响应体</span></span><br><span class="line">    <span class="comment">//todo 我们需要从整个响应体中找打一级标题data</span></span><br><span class="line">    <span class="comment">//然后从data中找打sp， 然后进行判断是否相等</span></span><br><span class="line">    pm.<span class="title function_">expect</span>(jsonData.<span class="property">data</span>.<span class="property">sp</span>).<span class="property">to</span>.<span class="title function_">eql</span>(<span class="string">&quot;电信&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;断言 响应码&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>发送请求</li></ol><p><img src="/images/image-20230531161710112.png" alt="image-20230531161710112"></p><ol start="5"><li><strong>导入数据 &amp;&amp; 查看数据的响应</strong></li></ol><ul><li>错误实例（send按钮无法读取文件）</li></ul><p><img src="/images/image-20230531162754651.png" alt="image-20230531162754651"></p><ul><li>&#x3D;&#x3D;正确操作&#x3D;&#x3D;</li></ul><p><img src="/images/image-20230531164012877.png" alt="image-20230531164012877"></p><ol start="6"><li>运行结果</li></ol><p><img src="/images/image-20230531164240240.png" alt="image-20230531164240240"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++实现二叉树的CURD</title>
      <link href="/post/b361a662.html"/>
      <url>/post/b361a662.html</url>
      
        <content type="html"><![CDATA[<h1 id="期末复习-用c-实现二叉树的简单操作"><a href="#期末复习-用c-实现二叉树的简单操作" class="headerlink" title="期末复习(用c++实现二叉树的简单操作)"></a>期末复习(用c++实现二叉树的简单操作)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 13265 on 2023/5/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//todo 完成数据结构中的二叉树章节的相关练习</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node *left, *right;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x) ,<span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">    <span class="built_in">Node</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建二叉树的节点</span></span><br><span class="line"><span class="comment"> * @param root 根节点</span></span><br><span class="line"><span class="comment"> * @return 返回创建的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">(Node* root, <span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;val) &#123;</span><br><span class="line">        root-&gt;left = <span class="built_in">createNode</span>(root-&gt;left, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root-&gt;right = <span class="built_in">createNode</span>(root-&gt;right, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意：  必须有序的二叉树</span></span><br><span class="line"><span class="comment"> * 删除某个二叉树的节点</span></span><br><span class="line"><span class="comment"> *  分为三种情况，删除的节点为叶子节点，有一个节点的节点 ，有一个子树的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param root 树的根节点</span></span><br><span class="line"><span class="comment"> * @param index 要删除的节点val</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node* <span class="title">deleteNode</span><span class="params">(Node *&amp; root,<span class="type">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//todo 先遍历找到要删除的节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val &gt; index)&#123;</span><br><span class="line">        root-&gt;left = <span class="built_in">deleteNode</span>(root-&gt;left, index);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;val &lt; index)&#123;</span><br><span class="line">        root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//todo 找到了， 开始分情况删除</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//case1 : 要删除的节点是叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> root;</span><br><span class="line">            root = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//case2 : 要删除的节点上有一个子节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> || root-&gt;right == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            Node* temp = root;</span><br><span class="line">            <span class="comment">//左子节点不为空</span></span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                root = root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右子节点不为空</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//case3 : 要删除的节点上有两个子节点</span></span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">/** 为了保持二叉搜索树的性质，我们选择该结点的右子树中的最小值结点来作为替代结点（也可以选择左子树中的最大值结点）。*/</span></span><br><span class="line">            Node* temp = root-&gt;right;</span><br><span class="line">            <span class="comment">/*从该结点的右子树开始，找到右子树中的最小值结点。在这个过程中，我们不断遍历右子树的左子结点，直到找到没有左子结点的结点，即为右子树中的最小值结点。*/</span></span><br><span class="line">            <span class="keyword">while</span>(temp-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                temp = temp-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*然后，我们将该最小值赋值给待删除的结点，并递归地删除该最小值结点（因为该最小值结点已经成为了待删除结点的替代结点，所以要将其从右子树中删除）。*/</span></span><br><span class="line">            root-&gt;val = temp-&gt;val;</span><br><span class="line">            root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right , temp-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新节点</span></span><br><span class="line"><span class="comment"> * @param root 树的根节点</span></span><br><span class="line"><span class="comment"> * @param oldVal 原来的节点val</span></span><br><span class="line"><span class="comment"> * @param newVal  新的节点val</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateNode</span><span class="params">(Node *&amp; root, <span class="type">int</span> oldVal , <span class="type">int</span> newVal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = root;</span><br><span class="line">    <span class="comment">//因为是有序二叉树，所以需要先删除， 然后在进行插入</span></span><br><span class="line">    <span class="built_in">deleteNode</span>(root,oldVal);</span><br><span class="line">    <span class="built_in">createNode</span>(root,newVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树的层序遍历</span></span><br><span class="line"><span class="comment"> * @param root 二叉树根节点的指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">listNode</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="comment">//可以有三种遍历方式</span></span><br><span class="line"></span><br><span class="line">    queue&lt;Node*&gt; que ;</span><br><span class="line">    que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="comment">//先出队列， 然后将值输出 ，然后将该节点的子节点全部入队列</span></span><br><span class="line">        Node * temp = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        cout&lt;&lt;temp-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(temp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(temp-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;root-&gt;val&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">midOrder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">midOrder</span>(root-&gt;left);</span><br><span class="line">    cout&lt;&lt;root-&gt;val&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">    <span class="built_in">midOrder</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;right);</span><br><span class="line">    cout&lt;&lt;root-&gt;val&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;test&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    Node* root = <span class="literal">nullptr</span>;</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">5</span>);</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">3</span>);</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">7</span>);</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">1</span>);</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">4</span>);</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">6</span>);</span><br><span class="line">    root = <span class="built_in">createNode</span>(root, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">deleteNode</span>(root,<span class="number">4</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n前序遍历: &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">preOrder</span>(root);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n中序遍历: &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">midOrder</span>(root);</span><br><span class="line">    <span class="built_in">updateNode</span>(root,<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n后序遍历: &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">postOrder</span>(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;层序遍历 &quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">listNode</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习题</title>
      <link href="/post/1940374d.html"/>
      <url>/post/1940374d.html</url>
      
        <content type="html"><![CDATA[<h1 id="建表语句及其插入相关数据"><a href="#建表语句及其插入相关数据" class="headerlink" title="建表语句及其插入相关数据"></a>建表语句及其插入相关数据</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">-- 建表</span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE Student(</span><br><span class="line">    s_id VARCHAR(20),</span><br><span class="line">    s_name VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    s_birth VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    s_sex VARCHAR(10) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    PRIMARY KEY(s_id)</span><br><span class="line">);</span><br><span class="line">-- 课程表</span><br><span class="line">CREATE TABLE Course(</span><br><span class="line">    c_id  VARCHAR(20),</span><br><span class="line">    c_name VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    t_id VARCHAR(20) NOT NULL,</span><br><span class="line">    PRIMARY KEY(c_id)</span><br><span class="line">);</span><br><span class="line">-- 教师表</span><br><span class="line">CREATE TABLE Teacher(</span><br><span class="line">    t_id VARCHAR(20),</span><br><span class="line">    t_name VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    PRIMARY KEY(t_id)</span><br><span class="line">);</span><br><span class="line">-- 成绩表</span><br><span class="line">CREATE TABLE Score(</span><br><span class="line">    s_id VARCHAR(20),</span><br><span class="line">    c_id  VARCHAR(20),</span><br><span class="line">    s_score INT,</span><br><span class="line">    PRIMARY KEY(s_id,c_id)</span><br><span class="line">);</span><br><span class="line">-- 插入学生表测试数据</span><br><span class="line">insert into Student values(&#x27;01&#x27; , &#x27;赵雷&#x27; , &#x27;1990-01-01&#x27; , &#x27;男&#x27;);</span><br><span class="line">insert into Student values(&#x27;02&#x27; , &#x27;钱电&#x27; , &#x27;1990-12-21&#x27; , &#x27;男&#x27;);</span><br><span class="line">insert into Student values(&#x27;03&#x27; , &#x27;孙风&#x27; , &#x27;1990-05-20&#x27; , &#x27;男&#x27;);</span><br><span class="line">insert into Student values(&#x27;04&#x27; , &#x27;李云&#x27; , &#x27;1990-08-06&#x27; , &#x27;男&#x27;);</span><br><span class="line">insert into Student values(&#x27;05&#x27; , &#x27;周梅&#x27; , &#x27;1991-12-01&#x27; , &#x27;女&#x27;);</span><br><span class="line">insert into Student values(&#x27;06&#x27; , &#x27;吴兰&#x27; , &#x27;1992-03-01&#x27; , &#x27;女&#x27;);</span><br><span class="line">insert into Student values(&#x27;07&#x27; , &#x27;郑竹&#x27; , &#x27;1989-07-01&#x27; , &#x27;女&#x27;);</span><br><span class="line">insert into Student values(&#x27;08&#x27; , &#x27;王菊&#x27; , &#x27;1990-01-20&#x27; , &#x27;女&#x27;);</span><br><span class="line">-- 课程表测试数据</span><br><span class="line">insert into Course values(&#x27;01&#x27; , &#x27;语文&#x27; , &#x27;02&#x27;);</span><br><span class="line">insert into Course values(&#x27;02&#x27; , &#x27;数学&#x27; , &#x27;01&#x27;);</span><br><span class="line">insert into Course values(&#x27;03&#x27; , &#x27;英语&#x27; , &#x27;03&#x27;);</span><br><span class="line"></span><br><span class="line">-- 教师表测试数据</span><br><span class="line">insert into Teacher values(&#x27;01&#x27; , &#x27;张三&#x27;);</span><br><span class="line">insert into Teacher values(&#x27;02&#x27; , &#x27;李四&#x27;);</span><br><span class="line">insert into Teacher values(&#x27;03&#x27; , &#x27;王五&#x27;);</span><br><span class="line"></span><br><span class="line">-- 成绩表测试数据</span><br><span class="line">insert into Score values(&#x27;01&#x27; , &#x27;01&#x27; , 80);</span><br><span class="line">insert into Score values(&#x27;01&#x27; , &#x27;02&#x27; , 90);</span><br><span class="line">insert into Score values(&#x27;01&#x27; , &#x27;03&#x27; , 99);</span><br><span class="line">insert into Score values(&#x27;02&#x27; , &#x27;01&#x27; , 70);</span><br><span class="line">insert into Score values(&#x27;02&#x27; , &#x27;02&#x27; , 60);</span><br><span class="line">insert into Score values(&#x27;02&#x27; , &#x27;03&#x27; , 80);</span><br><span class="line">insert into Score values(&#x27;03&#x27; , &#x27;01&#x27; , 80);</span><br><span class="line">insert into Score values(&#x27;03&#x27; , &#x27;02&#x27; , 80);</span><br><span class="line">insert into Score values(&#x27;03&#x27; , &#x27;03&#x27; , 80);</span><br><span class="line">insert into Score values(&#x27;04&#x27; , &#x27;01&#x27; , 50);</span><br><span class="line">insert into Score values(&#x27;04&#x27; , &#x27;02&#x27; , 30);</span><br><span class="line">insert into Score values(&#x27;04&#x27; , &#x27;03&#x27; , 20);</span><br><span class="line">insert into Score values(&#x27;05&#x27; , &#x27;01&#x27; , 76);</span><br><span class="line">insert into Score values(&#x27;05&#x27; , &#x27;02&#x27; , 87);</span><br><span class="line">insert into Score values(&#x27;06&#x27; , &#x27;01&#x27; , 31);</span><br><span class="line">insert into Score values(&#x27;06&#x27; , &#x27;03&#x27; , 34);</span><br><span class="line">insert into Score values(&#x27;07&#x27; , &#x27;02&#x27; , 89);</span><br><span class="line">insert into Score values(&#x27;07&#x27; , &#x27;03&#x27; , 98);</span><br></pre></td></tr></table></figure><h1 id="Select练习题"><a href="#Select练习题" class="headerlink" title="Select练习题"></a>Select练习题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br></pre></td><td class="code"><pre><span class="line">-- 1、查询&quot;01&quot;课程比&quot;02&quot;课程成绩高的学生的信息及课程分数 </span><br><span class="line"># 内联查询学生， 然后查询学生成绩 ，最后比较两个学生的成绩</span><br><span class="line">SELECT s.s_id,s.s_name,s1.s_score AS &#x27;01_score&#x27;, s2.s_score AS &#x27;02_score&#x27;</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score s1 ON s.s_id = s1.s_id &amp;&amp; s1.c_id = &#x27;01&#x27;</span><br><span class="line">INNER JOIN score s2 ON s.s_id = s2.s_id &amp;&amp; s2.c_id = &#x27;02&#x27;</span><br><span class="line">WHERE s1.s_score &gt; s2.s_score;</span><br><span class="line"></span><br><span class="line">-- 2、查询&quot;01&quot;课程比&quot;02&quot;课程成绩低的学生的信息及课程分数</span><br><span class="line">SELECT s.* ,s1.s_score &#x27;01score&#x27;,s2.s_score &#x27;02score&#x27;</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score s1 ON s1.s_id = s.s_id &amp;&amp; s1.c_id =&#x27;01&#x27;</span><br><span class="line">INNER JOIN score s2 ON s2.s_id = s.s_id &amp;&amp; s2.c_id = &#x27;02&#x27;</span><br><span class="line">WHERE s1.s_score &lt; s2.s_score;</span><br><span class="line"></span><br><span class="line">-- 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</span><br><span class="line">SELECT s.*, AVG(sc.s_score) &#x27;avg&#x27;</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id, s.s_name</span><br><span class="line">HAVING AVG(sc.s_score) &gt;= 60;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩 (包括有成绩的和无成绩的)</span><br><span class="line">SELECT s.*, AVG(IFNULL(sc.s_score,0)) &#x27;avg&#x27;</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id, s.s_name</span><br><span class="line">HAVING AVG(IFNULL(sc.s_score,0)) &lt;= 60 ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</span><br><span class="line">SELECT s.* ,SUM(sc.s_score) &#x27;sumS&#x27; ,COUNT(sc.c_id) &#x27;count&#x27;</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id</span><br><span class="line">HAVING COUNT(sc.c_id) &amp;&amp; SUM(sc.s_score);</span><br><span class="line"></span><br><span class="line">-- 6、查询&quot;李&quot;姓老师的数量 </span><br><span class="line"></span><br><span class="line">SELECT COUNT(teacher.t_id) &#x27;数量&#x27;</span><br><span class="line">FROM teacher </span><br><span class="line">WHERE teacher.t_name LIKE &#x27;李%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 7、查询学过&quot;张三&quot;老师授课的同学的信息 </span><br><span class="line"># 先查询张三老师的t_id，然后再找出score中t_id = 李老师id 的学习id， 然后根据id查询出学生信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT s.*</span><br><span class="line">FROM student s </span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">INNER JOIN course c ON c.c_id = sc.c_id</span><br><span class="line">INNER JOIN teacher t ON t.t_id = c.t_id </span><br><span class="line">WHERE t.t_name = &#x27;张三&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 8、查询没学过&quot;张三&quot;老师授课的同学的信息 </span><br><span class="line"></span><br><span class="line">SELECT * FROM student WHERE s_id not IN (</span><br><span class="line">SELECT s.s_id</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">INNER JOIN course c ON sc.c_id = c.c_id</span><br><span class="line">INNER JOIN teacher t ON c.c_id = t.t_id</span><br><span class="line">WHERE t.t_name = &#x27;张三&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 9、查询学过编号为&quot;01&quot;并且也学过编号为&quot;02&quot;的课程的同学的信息</span><br><span class="line">SELECT s.* </span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc1 ON sc1.s_id = s.s_id</span><br><span class="line">INNER JOIN score sc2 ON sc2.s_id = s.s_id</span><br><span class="line">WHERE sc1.c_id = &#x27;01&#x27; &amp;&amp; sc2.c_id = &#x27;02&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 10、查询学过编号为&quot;01&quot;但是没有学过编号为&quot;02&quot;的课程的同学的信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT s.* </span><br><span class="line">FROM student s</span><br><span class="line">WHERE </span><br><span class="line">s.s_id IN (SELECT s_id FROM score WHERE c_id = &#x27;01&#x27;) </span><br><span class="line">&amp;&amp;</span><br><span class="line"> s.s_id not IN (SELECT s_id FROM score WHERE c_id = &#x27;02&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 11、查询没有学全所有课程的同学的信息 </span><br><span class="line"># 总共有三个课程，只需要查询课程数不等于三的学生id即可得出</span><br><span class="line"># SELECT COUNT(c_id) count1 FROM course;</span><br><span class="line"># SELECT COUNT(c_id) count2 FROM score WHERE s_id = 08;</span><br><span class="line">SELECT s.* </span><br><span class="line">FROM student s</span><br><span class="line">WHERE </span><br><span class="line">(SELECT COUNT(c_id) count1 FROM course) </span><br><span class="line">!=</span><br><span class="line"> (SELECT COUNT(c_id) count2 FROM score </span><br><span class="line">WHERE s_id = s.s_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 12、查询至少有一门课与学号为&quot;01&quot;的同学所学相同的同学的信息 </span><br><span class="line"># 直接查询一门都没有的 ，然后取反</span><br><span class="line">-- SELECT s.c_id FROM score s </span><br><span class="line">-- WHERE s.s_id = &#x27;01&#x27;</span><br><span class="line">-- </span><br><span class="line">-- SELECT DISTINCT s.* </span><br><span class="line">-- FROM student s</span><br><span class="line">-- INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">-- WHERE sc.c_id IN (SELECT c_id FROM score WHERE s_id = &#x27;01&#x27;);</span><br><span class="line"># --------------------- </span><br><span class="line"></span><br><span class="line">SELECT * FROM student WHERE s_id NOT IN </span><br><span class="line">(</span><br><span class="line">SELECT DISTINCT s.s_id </span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">WHERE sc.c_id IN (SELECT c_id FROM score WHERE s_id = &#x27;01&#x27;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 13、查询和&quot;01&quot;号的同学学习的课程完全相同的其他同学的信息 </span><br><span class="line"># 查询出01学生的选的课程为3个，所以直接找选的课程数为3 的</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT s.* </span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">WHERE (SELECT COUNT(c_id) FROM score </span><br><span class="line">WHERE s_id = sc.s_id) = (SELECT COUNT(c_id) FROM score </span><br><span class="line">WHERE s_id = 01);</span><br><span class="line"></span><br><span class="line">-- 14、查询没学过&quot;张三&quot;老师讲授的任一门课程的学生姓名 </span><br><span class="line"># 也就是根据张三的id ，查询选课中t_id有张三id的学生id ，然后在 not in 即可</span><br><span class="line">SELECT s.s_name</span><br><span class="line">FROM Student s</span><br><span class="line">WHERE s.s_id NOT IN (</span><br><span class="line">  SELECT sc.s_id</span><br><span class="line">  FROM Score sc</span><br><span class="line">  JOIN Course c ON c.c_id = sc.c_id</span><br><span class="line">  JOIN Teacher t ON t.t_id = c.t_id</span><br><span class="line">  WHERE t.t_name = &#x27;张三&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </span><br><span class="line"></span><br><span class="line"># 先查询不及格的学生然后按照学号分组，再求出数量大于等于2的学生，最后求平均成绩 </span><br><span class="line">SELECT s.s_id, s.s_name, AVG(sc.s_score) AS avg_score</span><br><span class="line">FROM Student s</span><br><span class="line">INNER JOIN Score sc ON s.s_id = sc.s_id</span><br><span class="line">WHERE sc.s_score &lt; 60</span><br><span class="line">GROUP BY s.s_id</span><br><span class="line">HAVING COUNT(*) &gt;= 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 16、检索&quot;01&quot;课程分数小于60，按分数降序排列的学生信息</span><br><span class="line"></span><br><span class="line">SELECT s.* FROM student s </span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">WHERE sc.c_id = &#x27;01&#x27; &amp;&amp; sc.s_score &lt;= 60</span><br><span class="line">ORDER BY sc.s_score DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</span><br><span class="line">SELECT sc.s_id, sc.s_score,AVG(sc.s_score) avg</span><br><span class="line">FROM score sc</span><br><span class="line">INNER JOIN course c ON sc.c_id = c.c_id</span><br><span class="line">GROUP BY sc.c_id, sc.s_id</span><br><span class="line">ORDER BY avg DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</span><br><span class="line">-- 及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</span><br><span class="line">SELECT c.*, MAX(sc.s_score) max, MIN(sc.s_score) min , AVG(sc.s_score) avg ,</span><br><span class="line">CONCAT(SUM(CASE WHEN sc.s_score &gt;=60 THEN 1 ELSE 0 END) / COUNT(sc.c_id) * 100,&#x27;%&#x27;) 及格率,</span><br><span class="line">CONCAT(SUM(CASE WHEN sc.s_score &gt;=70 &amp;&amp; sc.s_score &lt; 80 THEN 1 ELSE 0 END) / COUNT(sc.c_id) * 100,&#x27;%&#x27;) 中等率 ,</span><br><span class="line">CONCAT(SUM(CASE WHEN sc.s_score &gt;=80 &amp;&amp; sc.s_score &lt; 90 THEN 1 ELSE 0 END) / COUNT(sc.c_id) * 100,&#x27;%&#x27;) 优良率 ,</span><br><span class="line">CONCAT(SUM(CASE WHEN sc.s_score &gt;= 90 THEN 1 ELSE 0 END) / COUNT(sc.c_id) * 100,&#x27;%&#x27;) 优秀率 </span><br><span class="line">FROM course c </span><br><span class="line">INNER JOIN score sc ON sc.c_id = c.c_id</span><br><span class="line">GROUP BY sc.c_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 19、按各科成绩进行排序，并显示排名(实现不完全)</span><br><span class="line">SELECT </span><br><span class="line">  s1.s_id, </span><br><span class="line">  s1.c_id, </span><br><span class="line">  s1.s_score</span><br><span class="line">--   (COUNT(DISTINCT s2.s_score) + 1) rank</span><br><span class="line">FROM score s1</span><br><span class="line">INNER JOIN score s2 ON s1.c_id = s2.c_id &amp;&amp; s1.s_score &gt; s2.s_score</span><br><span class="line">GROUP BY s1.s_id, s1.c_id, s1.s_score</span><br><span class="line">ORDER BY s1.c_id, s1.s_score DESC;</span><br><span class="line"></span><br><span class="line">-- 20、查询学生的总成绩并进行排名</span><br><span class="line">SELECT s.*  , SUM(sc.s_score) sum,</span><br><span class="line"> RANK() OVER(ORDER BY SUM(sc.s_score) DESC) &#x27;rank&#x27;</span><br><span class="line">FROM student s INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id</span><br><span class="line">ORDER BY sum DESC;</span><br><span class="line"></span><br><span class="line">-- 21、查询不同老师所教不同课程平均分从高到低显示 </span><br><span class="line"></span><br><span class="line">SELECT c.c_id ,c.t_id ,AVG(sc.s_score) avg</span><br><span class="line">FROM course c </span><br><span class="line">INNER JOIN score sc ON sc.c_id = c.c_id</span><br><span class="line">GROUP BY c.t_id , c.c_id</span><br><span class="line">ORDER BY avg DESC;</span><br><span class="line"></span><br><span class="line">-- 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</span><br><span class="line">SELECT  s.* ,sc.c_id, c.c_name,sc.s_score</span><br><span class="line">FROM student s </span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id </span><br><span class="line">INNER JOIN course c ON c.c_id = sc.c_id </span><br><span class="line">WHERE (</span><br><span class="line">  SELECT COUNT(DISTINCT s_score) </span><br><span class="line">  FROM Score </span><br><span class="line">  WHERE c_id = c.c_id AND s_score &gt; sc.s_score</span><br><span class="line">) BETWEEN 1 AND 2</span><br><span class="line">ORDER BY c.c_id, sc.s_score DESC;</span><br><span class="line"></span><br><span class="line">-- 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</span><br><span class="line"></span><br><span class="line">SELECT c.c_id, c.c_name,</span><br><span class="line">  COUNT(CASE WHEN s.s_score &gt;= 85 AND s.s_score &lt;= 100 THEN 1 END) AS &#x27;100-85&#x27;,</span><br><span class="line">  COUNT(CASE WHEN s.s_score &gt;= 70 AND s.s_score &lt; 85 THEN 1 END) AS &#x27;85-70&#x27;,</span><br><span class="line">  COUNT(CASE WHEN s.s_score &gt;= 60 AND s.s_score &lt; 70 THEN 1 END) AS &#x27;70-60&#x27;,</span><br><span class="line">  COUNT(CASE WHEN s.s_score &gt;= 0 AND s.s_score &lt; 60 THEN 1 END) AS &#x27;0-60&#x27;,</span><br><span class="line">  COUNT(*) AS total_count,</span><br><span class="line">  CONCAT(COUNT(CASE WHEN s.s_score &gt;= 85 AND s.s_score &lt;= 100 THEN 1 END) * 100.0 / COUNT(*), &#x27;%&#x27;) AS &#x27;100-85%&#x27;,</span><br><span class="line">  CONCAT(COUNT(CASE WHEN s.s_score &gt;= 70 AND s.s_score &lt; 85 THEN 1 END) * 100.0 / COUNT(*), &#x27;%&#x27;) AS &#x27;85-70%&#x27;,</span><br><span class="line">  CONCAT(COUNT(CASE WHEN s.s_score &gt;= 60 AND s.s_score &lt; 70 THEN 1 END) * 100.0 / COUNT(*), &#x27;%&#x27;) AS &#x27;70-60%&#x27;,</span><br><span class="line">  CONCAT(COUNT(CASE WHEN s.s_score &gt;= 0 AND s.s_score &lt; 60 THEN 1 END) * 100.0 / COUNT(*), &#x27;%&#x27;) AS &#x27;0-60%&#x27;</span><br><span class="line">FROM Score s</span><br><span class="line">INNER JOIN Course c</span><br><span class="line">ON s.c_id = c.c_id</span><br><span class="line">GROUP BY c.c_id, c.c_name;</span><br><span class="line"></span><br><span class="line">-- 24、查询学生平均成绩及其名次 </span><br><span class="line"></span><br><span class="line">SELECT s_id, AVG(s_score) AS avg_score, </span><br><span class="line">RANK() OVER (ORDER BY AVG(s_score) DESC) AS rank</span><br><span class="line">FROM Score</span><br><span class="line">GROUP BY s_id</span><br><span class="line">ORDER BY rank DESC;</span><br><span class="line"></span><br><span class="line">-- 25、查询各科成绩前三名的记录</span><br><span class="line">-- 1.选出b表比a表成绩大的所有组</span><br><span class="line">-- 2.选出比当前id成绩大的 小于三个的</span><br><span class="line">     select a.c_id,a.s_id,a.s_score from score a </span><br><span class="line">            left join score b on a.c_id = b.c_id and a.s_score&lt;b.s_score</span><br><span class="line">            group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)&lt;3</span><br><span class="line">            ORDER BY a.c_id,a.s_score DESC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 26、查询每门课程被选修的学生数</span><br><span class="line">SELECT sc.c_id, c.c_name,COUNT(sc.s_id) count</span><br><span class="line">FROM score sc</span><br><span class="line">INNER JOIN course c ON sc.c_id = c.c_id</span><br><span class="line">GROUP BY sc.c_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 27、查询出只有两门课程的全部学生的学号和姓名 </span><br><span class="line">SELECT s.* </span><br><span class="line">FROM student s INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id</span><br><span class="line">HAVING COUNT(sc.c_id) = 2;</span><br><span class="line"></span><br><span class="line">-- 28、查询男生、女生人数 </span><br><span class="line">SELECT DISTINCT COUNT(s.s_id) &#x27;男&#x27;, COUNT(s.s_id) &#x27;女&#x27;</span><br><span class="line">FROM student s GROUP BY s.s_sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 29、查询名字中含有&quot;风&quot;字的学生信息</span><br><span class="line">SELECT s.* FROM student s </span><br><span class="line">WHERE s.s_name LIKE &#x27;%风%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 30、查询同名同性学生名单，并统计同名人数 </span><br><span class="line">SELECT s_name, s_sex, COUNT(*) &#x27;num&#x27; </span><br><span class="line">FROM student</span><br><span class="line">GROUP BY s_name, s_sex</span><br><span class="line">HAVING COUNT(*) &gt; 1; </span><br><span class="line"></span><br><span class="line">-- 31、查询1990年出生的学生名单</span><br><span class="line">SELECT s.* FROM student s </span><br><span class="line">WHERE s.s_birth LIKE &#x27;%1990%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 </span><br><span class="line">SELECT sc.c_id , AVG(sc.s_score) avg</span><br><span class="line">FROM score sc</span><br><span class="line">GROUP BY sc.c_id </span><br><span class="line">ORDER BY avg DESC, sc.c_id ASC;</span><br><span class="line"></span><br><span class="line">-- 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩</span><br><span class="line">SELECT s.s_id ,s.s_name , AVG(sc.s_score) avg</span><br><span class="line">FROM student s INNER JOIN score sc ON sc.s_id = s.s_id </span><br><span class="line">GROUP BY s.s_id ,s.s_name </span><br><span class="line">HAVING AVG(sc.s_score) &gt; 85;</span><br><span class="line"></span><br><span class="line">-- 34、查询课程名称为&quot;数学&quot;，且分数低于60的学生姓名和分数 </span><br><span class="line">SELECT c_id</span><br><span class="line">FROM course WHERE c_name = &#x27;数学&#x27;</span><br><span class="line"></span><br><span class="line">SELECT s.s_id ,s.s_name, sc.c_id,sc.s_score</span><br><span class="line">FROM student s INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id, s.s_name, sc.c_id</span><br><span class="line">HAVING sc.c_id = (SELECT c_id</span><br><span class="line">FROM course WHERE c_name = &#x27;数学&#x27;) &amp;&amp; sc.s_score &lt; 60;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 35、查询所有学生的课程及分数情况</span><br><span class="line">SELECT s.s_id , s.s_name ,sc.c_id ,c.c_name,sc.s_score</span><br><span class="line">FROM student s </span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id </span><br><span class="line">INNER JOIN course c ON c.c_id = sc.c_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 36、查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数；</span><br><span class="line">SELECT s.s_id ,s.s_name ,c.c_name ,sc.s_score</span><br><span class="line">FROM student s </span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">INNER JOIN course c ON c.c_id = sc.c_id </span><br><span class="line">WHERE sc.s_score &gt;= 70;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 37、查询不及格的课程</span><br><span class="line">SELECT s.s_id ,s.s_name ,c.c_name ,sc.s_score</span><br><span class="line">FROM student s </span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">INNER JOIN course c ON c.c_id = sc.c_id </span><br><span class="line">WHERE sc.s_score &lt; 60;</span><br><span class="line">-- 38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名；</span><br><span class="line">SELECT s.*, sc.s_score FROM student s</span><br><span class="line">INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">WHERE sc.c_id = &#x27;01&#x27; &amp;&amp; sc.s_score &gt;= 80;</span><br><span class="line"></span><br><span class="line">-- 39、求每门课程的学生人数</span><br><span class="line">SELECT c.c_id ,c.c_name , COUNT(sc.s_id) &#x27;人数&#x27;</span><br><span class="line">FROM course c INNER JOIN score sc ON sc.c_id = c.c_id</span><br><span class="line">GROUP BY c.c_id,c.c_name; </span><br><span class="line">-- 40、查询选修&quot;张三&quot;老师所授课程的学生中，成绩最高的学生信息及其成绩</span><br><span class="line">SELECT s.s_id,s.s_name,sc.c_id, MAX(sc.s_score) max, sc.s_score</span><br><span class="line">FROM student s INNER JOIN score sc ON sc.s_id = s.s_id</span><br><span class="line">GROUP BY s.s_id, s.s_name, sc.c_id, sc.s_score</span><br><span class="line">HAVING sc.c_id = (</span><br><span class="line"> SELECT c_id FROM course WHERE t_id = (</span><br><span class="line">SELECT t_id FROM teacher WHERE t_name = &#x27;张三&#x27;)</span><br><span class="line">)LIMIT 1;</span><br><span class="line"># 两种方式</span><br><span class="line">SELECT Student.s_id, Student.s_name, Score.s_score</span><br><span class="line">FROM Student</span><br><span class="line">JOIN Score ON Student.s_id = Score.s_id</span><br><span class="line">JOIN Course ON Score.c_id = Course.c_id</span><br><span class="line">JOIN Teacher ON Course.t_id = Teacher.t_id</span><br><span class="line">WHERE Teacher.t_name = &#x27;张三&#x27;</span><br><span class="line">ORDER BY Score.s_score DESC</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line">-- 41、查询不同课程成绩相同的同一个学生的学生编号、课程编号、学生成绩 </span><br><span class="line"># 通过创建副本， 然后进行筛选</span><br><span class="line">SELECT s1.s_id, sc1.c_id, sc1.s_score</span><br><span class="line">FROM Score sc1, Score sc2, Student s1, Student s2</span><br><span class="line">WHERE sc1.s_id = s1.s_id AND sc2.s_id = s2.s_id AND sc1.s_id &lt;&gt; sc2.s_id</span><br><span class="line">AND sc1.c_id &lt;&gt; sc2.c_id AND sc1.s_score = sc2.s_score;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 42、查询每门功成绩最好的前两名 </span><br><span class="line"># 在where判断语句中进行判断</span><br><span class="line">SELECT s1.c_id, s1.s_id, s1.s_score</span><br><span class="line">FROM Score s1</span><br><span class="line">WHERE (SELECT COUNT(*) FROM Score s2</span><br><span class="line">       WHERE s2.c_id = s1.c_id AND s2.s_score &gt; s1.s_score) &lt; 2;</span><br><span class="line"></span><br><span class="line">-- 43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 </span><br><span class="line">SELECT sc.c_id,COUNT(sc.s_id) &#x27;人数&#x27;</span><br><span class="line">FROM score sc </span><br><span class="line">GROUP BY sc.c_id </span><br><span class="line">ORDER BY COUNT(sc.s_id) DESC ,sc.c_id ASC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 44、检索至少选修两门课程的学生学号 </span><br><span class="line">SELECT sc.s_id ,COUNT(sc.c_id) &#x27;num&#x27;</span><br><span class="line">FROM score sc </span><br><span class="line">GROUP BY sc.s_id </span><br><span class="line">HAVING COUNT(sc.c_id) &gt;= 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 45、查询选修了全部课程的学生信息 </span><br><span class="line">SELECT s.* </span><br><span class="line">FROM score sc INNER JOIN student s WHERE s.s_id = sc.s_id</span><br><span class="line">GROUP BY sc.s_id</span><br><span class="line">HAVING COUNT(sc.c_id) = (SELECT COUNT(c_id) FROM course);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 46、查询各学生的年龄</span><br><span class="line"></span><br><span class="line"># CURDATE() 函数返回当前日期，YEAR() 函数用于从日期中提取年份。DATEDIFF() 函数用于计算两个日期之间的天数差，然后将其与当前日期进行比较，以确定出生日期是否在当前日期之后。</span><br><span class="line"># 如果出生日期在当前日期之后，则相差的年数需要减 1。 (DATEDIFF(CURDATE(), s.s_birth)  &lt; 0) </span><br><span class="line">SELECT s.* , YEAR(CURDATE()) - YEAR(s.s_birth) &#x27;age&#x27;</span><br><span class="line">FROM student s;</span><br><span class="line">-- </span><br><span class="line">-- SELECT s.*, DATEDIFF(CURDATE(), s.s_birth) </span><br><span class="line">-- FROM student s ;</span><br><span class="line">SELECT s.*, YEAR(CURDATE()) - YEAR(s.s_birth)</span><br><span class="line">FROM student s ;</span><br><span class="line"></span><br><span class="line">-- 47、查询本周过生日的学生</span><br><span class="line">SELECT s_name, s_birth</span><br><span class="line">FROM Student</span><br><span class="line">WHERE WEEK(s_birth) = WEEK(CURDATE()) AND DATE_FORMAT(s_birth, &#x27;%m-%d&#x27;) &gt;= DATE_FORMAT(CURDATE(), &#x27;%m-%d&#x27;)</span><br><span class="line">ORDER BY s_birth ASC;</span><br><span class="line"></span><br><span class="line">-- 48、查询下周过生日的学生</span><br><span class="line">SELECT s_name, s_birth</span><br><span class="line">FROM Student</span><br><span class="line">WHERE WEEK(s_birth) = WEEK(DATE_ADD(CURDATE(), INTERVAL 1 WEEK)) AND DATE_FORMAT(s_birth, &#x27;%m-%d&#x27;) &gt;= DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 WEEK), &#x27;%m-%d&#x27;)</span><br><span class="line">ORDER BY s_birth ASC;</span><br><span class="line">-- 49、查询本月过生日的学生</span><br><span class="line"></span><br><span class="line">SELECT s_name, s_birth</span><br><span class="line">FROM Student</span><br><span class="line">WHERE MONTH(s_birth) = MONTH(CURDATE()) AND DATE_FORMAT(s_birth, &#x27;%d&#x27;) &gt;= DATE_FORMAT(CURDATE(), &#x27;%d&#x27;)</span><br><span class="line">ORDER BY s_birth ASC;</span><br><span class="line">-- 50、查询下月过生日的学生</span><br><span class="line">SELECT s_name, s_birth</span><br><span class="line">FROM Student</span><br><span class="line">WHERE MONTH(s_birth) = MONTH(DATE_ADD(CURDATE(), INTERVAL 1 MONTH)) AND DATE_FORMAT(s_birth, &#x27;%d&#x27;) &gt;= DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), &#x27;%d&#x27;)</span><br><span class="line">ORDER BY s_birth ASC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="MySQL下出现的几个问题"><a href="#MySQL下出现的几个问题" class="headerlink" title="MySQL下出现的几个问题"></a>MySQL下出现的几个问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 19、按各科成绩进行排序，并显示排名(实现不完全)</span><br><span class="line">-- 47、查询本周过生日的学生</span><br></pre></td></tr></table></figure><h1 id="安全性练习题"><a href="#安全性练习题" class="headerlink" title="安全性练习题"></a>安全性练习题</h1><p><strong>在SQLServer中运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line">--1.创建登陆帐户(登录账户名：你的名字缩写（‘例如zs’）， 密码：你的名字缩写，默认数据库：test)</span><br><span class="line">create login zs with password=&#x27;zs&#x27;, default_database=test</span><br><span class="line"></span><br><span class="line">--2.为登陆账户创建数据库用户,在test数据库中的&#x27;安全性&#x27;中的‘用户’下可以找到新创建的zs</span><br><span class="line">execute sp_grantdbaccess zs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--3.通过加入数据库角色，赋予zs用户“db_owner”这个角色的权限</span><br><span class="line">exec sp_addrolemember &#x27;db_owner&#x27;, &#x27;zs&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--4.创建一个查询角色SelectRole，并分配test数据库下4个表的查询权限。</span><br><span class="line"></span><br><span class="line">exec sp_addrole SelectRole </span><br><span class="line"></span><br><span class="line">grant select on Course to SelectRole</span><br><span class="line">grant select on Score to SelectRole</span><br><span class="line">grant select on Student to SelectRole</span><br><span class="line">grant select on Teacher to SelectRole</span><br><span class="line"></span><br><span class="line">--5.创建一个角色SelectandInsertRole，并分配test数据库下4个表的查询,插入权限。</span><br><span class="line">exec sp_addroleSelectandInsertRole</span><br><span class="line"></span><br><span class="line">grant insert,select on Course to SelectandInsertRole</span><br><span class="line">grant insert,select on Score to SelectandInsertRole</span><br><span class="line">grant insert,select on Student to SelectandInsertRole</span><br><span class="line">grant insert,select on Teacher to SelectandInsertRole</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--6.创建一个角色TestManagerRole，并分配test数据库下4个表的所有权限。</span><br><span class="line">exec sp_addrole TestManagerRole</span><br><span class="line"></span><br><span class="line">grant all privileges on Course to TestManagerRole  </span><br><span class="line">grant all privileges on Score to TestManagerRole  </span><br><span class="line">grant all privileges on Student to TestManagerRole  </span><br><span class="line">grant all privileges on Teacher to TestManagerRole  </span><br><span class="line"></span><br><span class="line">--7.为用户zs分配所有test中4个表的所有权限,并允许zs将所拥有的权限授予其他用户</span><br><span class="line">grant all on Course to zs </span><br><span class="line">with grant option</span><br><span class="line">grant all on Score to zs </span><br><span class="line">with grant option</span><br><span class="line">grant all on Student to zs </span><br><span class="line">with grant option</span><br><span class="line">grant all on Teacher to zs </span><br><span class="line">with grant option</span><br><span class="line"></span><br><span class="line">--8.回收用户zs的test中4个表的查看权限</span><br><span class="line">revoke select on Course from zs cascade</span><br><span class="line">revoke select on Score from zs cascade</span><br><span class="line">revoke select on Student from zs cascade</span><br><span class="line">revoke select on Teacher from zs cascade</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系数据理论</title>
      <link href="/post/3ac4e7f0.html"/>
      <url>/post/3ac4e7f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>首先，我们可以知道一个关系模式应当是五元组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R(U,D,DOM,F)</span><br><span class="line"></span><br><span class="line">- R : 就是关系名R是符号化的元组语义</span><br><span class="line">- U : U为一组属性（也就是一个表中的属性集合）</span><br><span class="line">- D : 为属性组U的属性所来自的域</span><br><span class="line">- DOM : 为属性到域的映射</span><br><span class="line">- F : 为属性组U上的一组数据依赖</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为D、DOM域模式设计关系不大， 因此我们这里暂不考虑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">R&lt;U,F&gt;</span><br><span class="line">当且仅将U上的一个关系r满足F时， r称为关系模式R&lt;U,F&gt; 的一个关系</span><br><span class="line"></span><br><span class="line">也就是说每一个属性都不能继续分割</span><br></pre></td></tr></table></figure><p>作为一个二维表，关系要符合一个<strong>最基本的条件 ：</strong> </p><p>​<strong>每一个分量必须时不可分的数据项,满足这一条件的关系模式就属于第一范式</strong></p><h4 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖:"></a>数据依赖:</h4><p>​一个关系内部属性与属性之间的一种约束关系。</p><p><strong>有许多数据依赖 ：最重要的就是函数依赖 和 多值依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式 : </span><br><span class="line"></span><br><span class="line">Sname = f(Sno) ---也就是说Sno推出了Sname</span><br><span class="line">记作:</span><br><span class="line">Sno -&gt; Sname</span><br><span class="line">Sno -&gt; Sdept</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>关系模式图： </p><p><img src="/images/image-20230518121250329.png" alt="image-20230518121250329"></p><h3 id="该关系模式会出现的问题"><a href="#该关系模式会出现的问题" class="headerlink" title="该关系模式会出现的问题"></a>该关系模式会出现的问题</h3><ol><li>数据冗余</li><li>更新异常</li><li>插入异常</li><li>删除异常</li></ol><p>一个好的模式应当不会发生插入异常，删除异常，更新异常，数据冗余也要仅可能的少。</p><h1 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h1><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><p>设R（U）是属性集U上的关系模式， X、Y是U的子集。（也就是说X、Y是Sno、Sname两个属性，U是这个属性组）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X函数确定Y 或者 说Y函数依赖于X</span><br><span class="line">记作: X -&gt; Y</span><br></pre></td></tr></table></figure><ul><li>非平凡的函数依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X -&gt; Y 但是y不属于x， 则称为X-&gt; Y 是非平凡的函数依赖</span><br></pre></td></tr></table></figure><ul><li>平凡的函数依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X -&gt; Y  y属于x， 则称为X-&gt; Y 是平凡的函数依赖</span><br></pre></td></tr></table></figure><ul><li><strong>完全函数依赖</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在R（U）， 如果X-&gt; Y ,并且对于x的任何一个真子集X`, 都有X` 不能推出 Y</span><br><span class="line">则Y对X完全函数依赖 </span><br><span class="line">记作:</span><br><span class="line">X -F-&gt; Y</span><br></pre></td></tr></table></figure><p>也就说 </p><p><code>（Sno, Cno）--&gt;Grade</code> : 想要得出Grade ,那么就必须知道Sno和Cno ， 缺一不可</p><ul><li><strong>部分函数依赖</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">若X-&gt; Y, 但是Y不完全依赖于X，则称Y对X部分函数依赖。</span><br><span class="line">则Y对X完全函数依赖 </span><br><span class="line">记作:</span><br><span class="line">X -P-&gt; Y</span><br></pre></td></tr></table></figure><p>也就说 </p><p><code>（Sno, Cno）--&gt;Cno</code> : 想要得出Cno ,那么只需要知道Sno和Cno 其中的一个即可</p><ul><li><strong>传递函数依赖</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在R（U）中，如果X-&gt;Y , Y-/-&gt;X, Y-&gt;Z, Z不属于Y，则成为Z对X传递函数依赖</span><br><span class="line">记作:</span><br><span class="line">X -传递-&gt; Z </span><br></pre></td></tr></table></figure><h2 id="码"><a href="#码" class="headerlink" title="码"></a>码</h2><p><strong>也就是我们平时所学的键, 只是叫法不同</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设K为R&lt;U,F&gt;中得属性 或者属性组合， 若 K -F-&gt; U，则K为R得候补码</span><br></pre></td></tr></table></figure><p>包含在任何一个候补码中的属性被称为<strong>主属性</strong>， 反之，不包含在任何一个候补码中的属性被称为<strong>非主属性 &#x2F; 非码属性。</strong></p><p>最简单的情况下，单个属性是码， 最极端情况下，整个属性组都是码。称为<strong>全码</strong></p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p><strong>范式也就相当于是规则。</strong></p><p>关系型数据库中的关系要满足一定的要求， 满足不同程度的要求的为不同范式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一范式  : 1NF</span><br><span class="line">依次类推</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">他们之间的关系是</span><br><span class="line">5NF ∈ 4NF ∈ BCNF ∈ 3NF ∈ 2NF ∈ 1NF</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><p><strong>若 R ∈ 1NF ，并且每个非主属性完全函数依赖于任何一个候选码， 则R ∈ 2NF .</strong></p><p>比如 ： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Sno , Cno ) -F-&gt; Grade # 非主属性 Grade 完全依赖于Sno 和 Cno</span><br><span class="line">Sno -&gt; Sdept , (Sno , Cno ) -P-&gt; Sdept # 通过学号可以得出某个同学的住所， 而通过班级号也可以得到， 并不是完全函数依赖</span><br><span class="line">（部分依赖）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果说一个关系模型不满足 2NF,那么他就会出现以下几个问题 。</p><ol><li>修改复杂</li><li>插入异常</li><li>删除异常</li></ol><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><p><strong>设关系模式 <code>R&lt;U,F&gt; ∈1NF</code>, 如不存在这样的码 X ，属性组 Y 及给主属性Z（Z !∈ Y ）使得 X-&gt; Y,Y-&gt;Z成立。则称<code>R&lt;U,F&gt; ∈3NF</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">简单来说。</span><br><span class="line">X-&gt;Y ,Y-&gt;Z也就是传递函数依赖，不存在这个传递函数依赖。那么就成立3NF</span><br></pre></td></tr></table></figure><h2 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h2><p><strong>设关系模式 <code>R&lt;U,F&gt; ∈1NF</code> 若 X-&gt;Y 且 Y !∈ X时， X必含有码。则称<code>R&lt;U,F&gt; ∈BCNF</code></strong></p><p><strong>重点</strong> ： <strong>X必含有码</strong></p><p>由上述BCNF的定义我们可以知道， 满足BCNF的关系依赖 。<strong>就必须要有</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- 所有的非主属性对每个码都是完全函数依赖</span><br><span class="line">- 所有主属性对每一个不包含他的码也是完全函数依赖</span><br><span class="line">- 没有任何属性完全函数依赖于非码的任何一组属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">举例: </span><br><span class="line">关系模型SJP(S, J, P)中， S是学生 ， J是课程 ，P 是名次。假设不存在相同排名的情况，每个同学的每个课程名次都是唯一的</span><br><span class="line">那么就可以得到下面的函数依赖</span><br><span class="line">(S, J) - &gt; P  ; (J, P )-&gt; S</span><br><span class="line">作为候补码（s,p） and (j,p)两个码都是由两个属性构成， 他们是相交的 ，所以 SJP∈3NF.</span><br><span class="line">同时除了码之外没有其他的决定因素 ，所以SJP ∈ BCNF</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于后续的多值依赖 与 4NF等等， 这里不做讲解。依次类推</p><p>**RANK()用法 : **</p><p>在数据库中，<code>RANK()</code> 是一个窗口函数，它为结果集中的每一行分配一个唯一的排名值。<code>RANK()</code> 函数根据指定的排序顺序对行进行排序，并为具有相同排序值的行分配相同的排名。在这种情况下，下一个排名值将是连续的整数序列中的下一个值。通常，<code>RANK()</code> 函数与 <code>OVER()</code> 子句一起使用，以指定排序依据的列。</p><p>以下是一个简单的例子，假设我们有一个名为 <code>sales</code> 的表，其中包含 <code>salesperson</code> 和 <code>sales_amount</code> 两个列。我们想要按销售额为销售人员排名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salesperson, sales_amount,</span><br><span class="line">       <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales_amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>在这个查询中，<code>RANK()</code> 函数根据 <code>sales_amount</code> 列的降序值为每个销售人员分配一个排名。<code>OVER()</code> 子句定义了排序依据的列。</p><p>如果你想根据分组为每个销售人员分配排名，可以使用 <code>PARTITION BY</code> 子句。例如，假设 <code>sales</code> 表还包含一个名为 <code>region</code> 的列，你可以按地区对销售人员进行排名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> region, salesperson, sales_amount,</span><br><span class="line">       <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> region <span class="keyword">ORDER</span> <span class="keyword">BY</span> sales_amount <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>在这个查询中，我们首先根据 <code>region</code> 列将销售人员分组，然后在每个分组内按 <code>sales_amount</code> 列的降序值为销售人员分配排名。<code>PARTITION BY</code> 子句允许我们在每个分组内重新开始排名。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库对象</title>
      <link href="/post/55609ff7.html"/>
      <url>/post/55609ff7.html</url>
      
        <content type="html"><![CDATA[<h1 id="常见的数据库对象"><a href="#常见的数据库对象" class="headerlink" title="常见的数据库对象"></a>常见的数据库对象</h1><ul><li>表 ： 存储数据的逻辑单元</li><li>数据字典 ： 就是系统表， 存放数据库相关的信息</li><li>约束 ： 执行数据校验的规则，用于保证数据完整性的规则</li><li>视图  ：一个或者多个数据表里的数据的逻辑显示，试图并不存储数据</li><li>索引  ：用于提高查询性能，相当于书的索引</li><li>存储过程 ： <strong>用于完成一次完整的业务处理</strong>，没有返回值，但是可通过传出参数将多个值传给调用环境</li><li>存储函数 ： <strong>用于完成一次特定的计算</strong>，具有返回值</li><li>触发器 ： 相当于一个时间监听器，当数据库发生特定时间后，触发器被触发，完成响应的处理</li></ul><h2 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h2><p><strong>他就相当于一种存储起来的select语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个或者多个数据表里的数据的逻辑显示，并无法真正的处理数据</span><br><span class="line"></span><br><span class="line">--- 视图就相当于一种虚拟表， 本身不具有数据的，占用内存非常少。</span><br><span class="line">【视图建立在已有表的基础上，视图依赖的表就是 基表】</span><br></pre></td></tr></table></figure><p>对视图进行CRUD操作，也就是对数据库中的对应的表进行操作。因为数据只有一份，试图就是他的一种显示形式</p><p>试图本省的删除，不会导致对基表中数据的删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">视图不仅可以创建在一个表或者多个基本表上，</span><br><span class="line">还可以创建在一个或者多个已经定义好的视图上。</span><br><span class="line">或者创建在表 and 视图 上</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230515185055995.png" alt="image-20230515185055995"></p><h3 id="为什么使用视图（优点）"><a href="#为什么使用视图（优点）" class="headerlink" title="为什么使用视图（优点）"></a>为什么使用视图（优点）</h3><ul><li>控制数据访问权限，对相关保密的内容不给相关的人员查询到。</li><li>简化查询</li><li>减少数据冗余</li><li>数据安全操作</li><li>适应灵活多变的需求</li><li>能够分解复杂的查询逻辑</li></ul><h3 id="为什么不使用视图（缺点）"><a href="#为什么不使用视图（缺点）" class="headerlink" title="为什么不使用视图（缺点）"></a>为什么不使用视图（缺点）</h3><ul><li>基于表，所以需要及时进行维护（维护成本高）</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>**语法: **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名[(对应的字段列表)] </span><br><span class="line">AS</span><br><span class="line">查询语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 例如</span><br><span class="line">CREATE VIEW s_student[(id,name,score,dis)]</span><br><span class="line">AS</span><br><span class="line">SELECT id,name, score,discrib FROM student;</span><br></pre></td></tr></table></figure><hr><p><strong>删除视图：</strong></p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW 视图名;</span><br></pre></td></tr></table></figure><p><strong>更新视图：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">更新视图 就是指通过视图来插入、删除和修改数据</span><br><span class="line"></span><br><span class="line">由于视图实际是不存在的，所以对试图的操作，最终就会转换为对基表的操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 语法</span><br><span class="line">--s_student就是上述我们创建的视图。</span><br><span class="line">UPDATE s_student</span><br><span class="line">SET name = `小花`</span><br><span class="line">WHERE id = 10;</span><br></pre></td></tr></table></figure><p>**修改视图: **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">由于基表中某些字段发生改变，所以我们的视图需要进行对应的修改</span><br><span class="line"></span><br><span class="line">### 语法 </span><br><span class="line">ALTER VIEW 视图名称</span><br><span class="line">AS </span><br><span class="line">查询语句</span><br></pre></td></tr></table></figure><h3 id="视图更新失败的原因"><a href="#视图更新失败的原因" class="headerlink" title="视图更新失败的原因"></a>视图更新失败的原因</h3><ol><li>视图由两个以上的基本表导出，不能更新</li><li>视图中的字段来自于函数、表达式、常量等 或者说字段本身不存在的情况，就会更新失败</li><li>若视图中含有GROUP BY 子句，不能更新</li><li>视图定义中含有DISTINCT短语，不能更新</li><li>视图定义中有嵌套查询等</li><li>….</li></ol><h2 id="存储过程与存储函数"><a href="#存储过程与存储函数" class="headerlink" title="存储过程与存储函数"></a>存储过程与存储函数</h2><p>**概念： **</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 存储过程 ： **用于完成一次完整的业务处理**，没有返回值，但是可通过传出参数将多个值传给调用环境</span><br><span class="line">- 存储函数 ： **用于完成一次特定的计算**，具有返回值</span><br></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p><strong>含义 ：</strong> </p><p>存储过程  ：就是一组经过<strong>预先编译</strong>的SQL语句的封装。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行过程: </span><br><span class="line">存储过程就是将一组SQL语句预先存储在服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令。</span><br><span class="line">服务器端就可以把预先存储好的这一系列SQL语句全部执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>**好处 ： **</p><ul><li>简化操作，提高SQL语句的重要性，减少开发程序员的压力</li><li>减少操作过程中的失误，提高效率</li><li>减少网络传输量</li><li>减少SQL语句暴露在网络上的风险，提高安全性</li></ul><h4 id="和视图的对比"><a href="#和视图的对比" class="headerlink" title="和视图的对比"></a>和视图的对比</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 视图时虚拟表</span><br><span class="line">- 存储过程直接操作底层真正的数据表</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>**分类 ： **</p><ul><li>没有参数（无参无返回）</li><li>仅仅带有IN类型（有参无返回）</li><li>仅仅带有OUT类型（无参有返回）</li><li>即带有IN 又带有OUT （有参有返回）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型) ----如果不写， 默认为IN</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">存储过程体（</span><br><span class="line">SQL语句1；</span><br><span class="line">SQL语句2</span><br><span class="line">）</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">--- 存储过程的调用</span><br><span class="line"></span><br><span class="line">CALL 存储过程名();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------存储函数---------------------------------</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION 函数名( 参数名 参数类型 , ...)</span><br><span class="line">RETURNS 返回值类型</span><br><span class="line">BEGIN</span><br><span class="line">函数体 #函数体一定要有返回值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p><img src="/images/image-20230515195800374.png" alt="image-20230515195800374"></p><p><img src="/images/image-20230515195825326.png" alt="image-20230515195825326"></p><p><img src="/images/image-20230515203528091.png" alt="image-20230515203528091"></p><p><strong>对比两者 ：</strong></p><p><img src="/images/image-20230515203819664.png" alt="image-20230515203819664"></p><h1 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h1><h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2><p>实体完整性就是说 ： 创建表的时候用PRIMARY KEY 来定义单属性</p><p>对单属性构成有两种说明方法：</p><ul><li>列级约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line"># 在列级定义主键</span><br><span class="line">    id int not NULL UNIQUE PRIMARY KEY,</span><br><span class="line">    </span><br><span class="line">`name` VARCHAR(25) not NULL,</span><br><span class="line"> age INT not null CHECK(age &lt; 100 &amp;&amp; age &gt; 0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>表级约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line"></span><br><span class="line">    id int not NULL UNIQUE ,</span><br><span class="line">    </span><br><span class="line">`name` VARCHAR(25) not NULL,</span><br><span class="line">    age INT not null CHECK(age &lt; 100 &amp;&amp; age &gt; 0),</span><br><span class="line">    # 在表级定义主键</span><br><span class="line">    PRIMARY KEY(id)</span><br><span class="line">    </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对于多个属性构成的码（键），只有一种说明方法，即定义为表级约束条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line"></span><br><span class="line">    Cid int not NULL UNIQUE ,</span><br><span class="line">    Sid int not null unique,</span><br><span class="line">`name` VARCHAR(25) not NULL,</span><br><span class="line">    # 在表级定义主键</span><br><span class="line">    PRIMARY KEY(Cid, Sid) </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对于实体完整性的检查，我们要做的就是如果不符合就禁止操作。（add or update）</p><h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2><p>参照完整性（referential integrity）定义 ：</p><p>​是关系型数据库的一个概念，它用于确保在两个表之间的关联关系中，引用的外键值必须存在于被引用的主键表中。</p><p>也就是说，<strong>如果一个表中的某个字段（外键）引用了另一个表中的一个字段（主键），那么这个外键值必须存在于被引用的主键表中，否则就会违反参照完整性。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `student1` (</span><br><span class="line">  `id` int NOT NULL,</span><br><span class="line">  `name` varchar(25) NOT NULL,</span><br><span class="line">  `age` int NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `id` (`id`),</span><br><span class="line">  CONSTRAINT `student1_ibfk_1` FOREIGN KEY (`id`) REFERENCES `averagesc` (`id`),</span><br><span class="line">  CONSTRAINT `student1_chk_1` CHECK (((`age` &lt; 100) and (`age` &gt; 0)))</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>当不符合参照完整性时， 我们可以采取以下操作来进行修改</p><ul><li>拒绝执行</li><li>级联操作</li><li>设置为空值</li></ul><h2 id="用户完整性"><a href="#用户完整性" class="headerlink" title="用户完整性"></a>用户完整性</h2><p>简单的说， 用户完整性就是对表中的字段的限制条件。</p><p>比如说我们的主键不能为空，所以我们会通过使用<code>NOT NULL</code>的方式来设置， 如果说其他字段，比如学号 它具有唯一性， 所以我们可以通过使用<code>UNIQUE</code>来进行设置。</p><p><strong>官方解释：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是指在关系型数据库中，除了参照完整性以外，用户还可以通过定义规则或限制来保证数据的完整性和一致性。这些规则或限制是由用户或应用程序开发人员定义的，用于限制数据的输入或修改，从而确保数据的正确性和可靠性。</span><br></pre></td></tr></table></figure><p>属性上的约束具体由三种</p><ul><li><p>列值非空（<code>NOT NULL</code>）</p></li><li><p>列值唯一（<code>UNIQUE</code>）</p></li><li><p>检查列值是否满足某一条件表达式（<code>CHECK短语</code>）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">    # 非空， 唯一</span><br><span class="line">id int not NULL UNIQUE PRIMARY KEY,</span><br><span class="line">`name` VARCHAR(25) not NULL,</span><br><span class="line">    # 通过check短语来进行判断</span><br><span class="line"> age INT not null CHECK(age &lt; 100 &amp;&amp; age &gt; 0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p><strong>官方解释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在关系型数据库中，断言（assertion）是一种用于检查数据库中数据是否符合特定条件的逻辑表达式。它与数据检查约束类似，但更加灵活和通用。与数据检查约束只能限制某个字段的取值范围或格式不同，断言可以涵盖整个表或多个表之间的数据关系，并且可以执行更为复杂的逻辑判断。</span><br></pre></td></tr></table></figure><p>举例来说</p><p>​就是我们的学生-课程表 ，每个课程最多只能有60 个人，如果大于60 那么剩余的就会添加失败。（限制数据库表的数量）</p><ul><li><strong>添加断言格式</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create assertion 断言名</span><br><span class="line">CHECK子句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">具体实例</span><br><span class="line">create assertion sut_Course</span><br><span class="line">CHECK(60 &gt;= SELECT count(*) FROM student)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>删除断言格式</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP ASSERTION 断言名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p><strong>官方解释：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">触发器（Trigger）是一种数据库对象，用于在特定的数据库操作（如INSERT、UPDATE或DELETE操作）执行之前或之后自动执行一些指定的动作。触发器通常用于实现数据完整性约束和业务逻辑，以及在数据发生变化时执行一些自定义的操作。</span><br></pre></td></tr></table></figure><p>触发器又叫<code>事件-条件-动作</code>规则</p><ul><li><strong>创建触发器 ：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER trigger_name</span><br><span class="line">&#123;BEFORE | AFTER&#125; &#123;INSERT | UPDATE | DELETE&#125; ON table_name</span><br><span class="line">[FOR EACH ROW] </span><br><span class="line">[WHEN condition]</span><br><span class="line">BEGIN</span><br><span class="line">  -- 触发器执行的SQL语句或存储过程</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>其中，定义触发器的关键字包括：</p><ul><li><code>CREATE TRIGGER</code>：创建一个新的触发器对象。</li><li><code>trigger_name</code>：触发器的名称，应该唯一且易于识别。</li><li><code>&#123;BEFORE | AFTER&#125;</code>：指定触发器在相应的数据库操作之前或之后执行。</li><li><code>&#123;INSERT | UPDATE | DELETE&#125;</code>：指定触发器要响应的事件类型。</li><li><code>ON table_name</code>：指定触发器要关联的表名。</li><li><code>[FOR EACH ROW]</code>：指定触发器的执行方式，对于每一行数据是否执行一次。</li><li><code>[WHEN condition]</code>：指定触发器执行的条件，如果条件不满足，则触发器不会执行。</li><li><code>BEGIN...END</code>：触发器执行的动作，可以包含一条或多条SQL语句或存储过程。</li></ul><p>例如，以下是一个在表<code>employees</code>上创建一个在INSERT操作之前触发的触发器的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER before_insert_employee-- 创建触发器</span><br><span class="line">BEFORE INSERT ON employees -- 在insert之前操作 表employees</span><br><span class="line">FOR EACH ROW -- 对每一行都要执行</span><br><span class="line">BEGIN -- 开始执行</span><br><span class="line">  IF NEW.salary &lt; 0 THEN-- 判断条件</span><br><span class="line">    SIGNAL SQLSTATE &#x27;45000&#x27; SET MESSAGE_TEXT = &#x27;Salary cannot be negative&#x27;;</span><br><span class="line">  END IF;</span><br><span class="line">END; -- 执行结束</span><br></pre></td></tr></table></figure><ul><li><strong>激活触发器 ：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">触发器的执行是由出发事件激活的，并由数据库服务器自动执行的。</span><br><span class="line">执行顺序如下 :</span><br><span class="line">1. 执行该表上的BEFORE触发器</span><br><span class="line">2. 执行该表上的SQL语句</span><br><span class="line">3. 执行该表上的AFTER触发器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium工具学习</title>
      <link href="/post/dafa3771.html"/>
      <url>/post/dafa3771.html</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium-自动化测试"><a href="#Selenium-自动化测试" class="headerlink" title="Selenium 自动化测试"></a>Selenium 自动化测试</h1><h2 id="什么样的项目适合自动化测试"><a href="#什么样的项目适合自动化测试" class="headerlink" title="什么样的项目适合自动化测试"></a>什么样的项目适合自动化测试</h2><ol><li>项目周期长</li><li>需求变动不频繁</li><li>需要回归测试</li></ol><h2 id="其他自动化测试工具介绍"><a href="#其他自动化测试工具介绍" class="headerlink" title="其他自动化测试工具介绍"></a>其他自动化测试工具介绍</h2><ul><li>QTP —-商业自动化测试工具</li><li>Selenium——–开源自动化测试工具，主要做功能测试</li><li>Robot Framework ——基于python的可扩展的关键字驱动的测试自动化测试框架</li></ul><h2 id="Selenium-的特点"><a href="#Selenium-的特点" class="headerlink" title="Selenium 的特点"></a>Selenium 的特点</h2><ul><li>是一个web自动化测试工具（简单来说就是只支持web的自动化测试）</li><li>跨平台（linux、windows、mac）</li><li>支持多种语言</li><li>成熟稳定</li><li>功能强大</li></ul><p>我们现阶段学习的是web</p><h2 id="基于python环境搭建selenium"><a href="#基于python环境搭建selenium" class="headerlink" title="基于python环境搭建selenium"></a>基于python环境搭建selenium</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="comment"># 其中添加的是浏览器的驱动器地址</span></span><br><span class="line">executable_path = <span class="string">r&#x27;H:\pythonStudy\Driver\chromedriver.exe&#x27;</span></span><br><span class="line"><span class="comment"># 注意 python的形参最好指定一下形参的变量值， 就像以下的两个</span></span><br><span class="line">service = Service(executable_path=executable_path)</span><br><span class="line">driver = webdriver.Chrome(service=service)</span><br><span class="line"><span class="comment"># driver = webdriver.Chrome()</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://wclspace.xyz&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h1 id="Demo-Begin"><a href="#Demo-Begin" class="headerlink" title="Demo Begin"></a>Demo Begin</h1><p><img src="/images/image-20230508164209205.png" alt="image-20230508164209205"></p><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p><img src="/images/image-20230510202929720.png" alt="image-20230510202929720"></p><p><strong>元素定位时依赖于什么</strong></p><ol><li>标签</li><li>路径</li><li>层级</li><li>路径</li></ol><p><strong>元素定位方式总共有八种</strong></p><ul><li><p>id</p></li><li><p>name</p></li><li><p>class_name —-使用元素的class属性</p></li><li><p>tag_name—- 使用标签名称</p></li><li><p>link_text —– 定位超链接</p></li><li><p>partial_link_text —- 定位超链接</p></li><li><p>Xpath ——基于元素路径</p></li><li><p>CSS   ——-基于元素选择器</p></li></ul><h3 id="各种定位"><a href="#各种定位" class="headerlink" title="各种定位"></a>各种定位</h3><ul><li><p>通过id定位，一般是唯一标识符</p></li><li><p>通过name定位， 可以重名，但是前提是元素必须有name属性。</p></li><li><p>通过class_name定位 ： 通过元素的class属性来定位， 一般来说class属性一般为多个值。</p></li><li><p>实现</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中添加的是浏览器的驱动器地址</span></span><br><span class="line">executable_path = <span class="string">r&#x27;H:\pythonStudy\Driver\chromedriver.exe&#x27;</span></span><br><span class="line"><span class="comment"># 注意 python的形参最好指定一下形参的变量值， 就像以下的两个</span></span><br><span class="line">service = Service(executable_path=executable_path)</span><br><span class="line">driver = webdriver.Chrome(service=service)</span><br><span class="line"><span class="comment"># driver = webdriver.Chrome()</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&quot;wclas&quot;</span>)</span><br><span class="line">driver.find_element(By.CLASS_NAME, <span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&quot;wclas&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="方法被弃用问题"><a href="#方法被弃用问题" class="headerlink" title="方法被弃用问题"></a>方法被弃用问题</h3><p><img src="/images/image-20230508163454200.png" alt="image-20230508163454200"></p><h2 id="其他定位"><a href="#其他定位" class="headerlink" title="其他定位"></a>其他定位</h2><ul><li>name</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入框有个name属性：name=&quot;wd&quot;，这里可以通过它的name属性定位到这个元素，并且通过send_keys()传输字符给输入框。</span><br></pre></td></tr></table></figure><ul><li>标签名(tag_name)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入框有个tag（标签）属性：input，这里可以通过它的标签属性定位到这个元素，并且通过send_keys()传输字符给输入框。但是标签往往不是惟一的，所有在实际应用中不常用。</span><br><span class="line">html中的相关标签</span><br><span class="line">- a</span><br><span class="line">- input</span><br><span class="line">- form</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 页面种如果存在多个相同的标签名 ，默认返回第一个</span></span><br><span class="line"><span class="comment"># driver.find_element(By.CLASS_NAME, &quot;bg s_ipt_wr new-pmd quickdelete-wrap&quot;).send_keys(&quot;wclas&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>link_text  (定位超链接)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定位超链接</span><br><span class="line">只能定位a标签</span><br><span class="line">精准匹配</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.LINK_TEXT, <span class="string">&quot;新闻&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>partial_link_text定位元素</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果链接的字符串太长的话，全部输入影响代码美观也容易出错，这时就可以采用 partial_link_text，模糊匹配、截取字符串的一部分定位到元素。如图2中，我们定位新闻可以如下写。</span><br><span class="line">定位的内容可以模块部分值， 但是必须能代表唯一性</span><br></pre></td></tr></table></figure><h2 id="XPath定位"><a href="#XPath定位" class="headerlink" title="XPath定位"></a>XPath定位</h2><ol><li>为什么要有XPath</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果没有id、name、calss ，该如何定位 ？ </span><br><span class="line">如果通过name、class、tag_name 无法定位到唯一的元素该如何定位 ？</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>什么是<code>Xpath</code> ？</li></ol><p><strong><code>xpath</code>依赖于元素的路径</strong></p><p>他是基于XML（标记语言）、Path的简称， 他是一种在xml文档中查找元素信息的语言。</p><p>HTML可以看作是XML的一种实现方式，所以Selenium可以在web中定位元素</p><ol start="3"><li>扩展</li></ol><p>一般情况下， 尽量使用相对路径而不是用绝对路径。</p><p>最好不使用指定标签名称，不使用* 代替，效率非常慢</p><p>&#x2F; 后面必须为元素的名称 或者 *</p><h3 id="XPath定位策略"><a href="#XPath定位策略" class="headerlink" title="XPath定位策略"></a>XPath定位策略</h3><p>四种：</p><ol><li><strong>路径-定位</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">匹配输入账号(相对路径)</span><br><span class="line">//input[@id=&#x27;usernameA&#x27;]</span><br><span class="line">匹配输入账号(绝对路径)</span><br><span class="line">/html/body/form/div/fieldset/p[1]/input</span><br><span class="line">匹配输入账号(通过内置函数)</span><br><span class="line">//*[contains(@type, &#x27;password&#x27;)]#匹配type</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">匹配输入密码</span><br><span class="line">//input[@id=&#x27;passwordA&#x27;]</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230508172924213.png" alt="image-20230508172924213"></p><ol start="2"><li><p><strong>利用元素属性-定位</strong></p></li><li><p><strong>属性与逻辑结合-定位</strong></p></li><li><p><strong>层级与属性结合定位</strong></p></li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 后面跟的是相对路径</span><br><span class="line">/ 后面跟决定路径</span><br></pre></td></tr></table></figure><p><strong>路径表达式</strong></p><p><img src="/images/image-20230508173044713.png" alt="image-20230508173044713"></p><p> <strong>xpath通配符</strong></p><p>Xpath 表达式的通配符可以用来选取未知的节点元素，基本语法如下：</p><p><img src="/images/image-20230508173206247.png" alt="image-20230508173206247"></p><p><strong>Xpath内建函数</strong></p><p>Xpath 提供 100 多个内建函数，这些函数给我们提供了很多便利，比如实现文本匹配、模糊匹配、以及位置匹配等，下面介绍几个常用的内建函数。</p><p><img src="/images/image-20230508173244441.png" alt="image-20230508173244441"></p><h2 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h2><p>css 作为一种标记语言， 焦点、数据的样式。控制元素的显示样式。‘</p><p>css定位就是通过css选择器工具进行定位</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;css选择内容&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="常用策略"><a href="#常用策略" class="headerlink" title="常用策略"></a>常用策略</h3><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="- id选择器"></a>- id选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明: 根据元素的id进行选择</span><br><span class="line">格式: `#id`</span><br><span class="line">例如: #user &lt;选择id为user的元素&gt;</span><br></pre></td></tr></table></figure><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="- class选择器"></a>- class选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明: 根据元素的id进行选择</span><br><span class="line">格式: `.id`</span><br><span class="line">例如: .user &lt;选择class为user的元素&gt;</span><br></pre></td></tr></table></figure><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="- 元素选择器"></a>- 元素选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明: 根据元素的标签名进行选择</span><br><span class="line">格式: `element`</span><br><span class="line">例如: input &lt;选择所有input标签的元素&gt;</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="- 属性选择器"></a>- 属性选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明: 根据元素的属性进行选择</span><br><span class="line">语法: [属性名=属性值]</span><br><span class="line">例如: [name=&#x27;password&#x27;]</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230510200847066.png" alt="image-20230510200847066"></p><p><img src="/images/image-20230510200918183.png" alt="image-20230510200918183"></p><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="- 层级选择器"></a>- 层级选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法: </span><br><span class="line">1. p&gt;input</span><br><span class="line">2. p input</span><br><span class="line">提示: &gt;  和 空格的区别， 大于必须为子元素，空格则不需要 </span><br></pre></td></tr></table></figure><p>Xpath 和 css定位的比较</p><p><img src="/images/image-20230510201050218.png" alt="image-20230510201050218"></p><h1 id="浏览器操作的常用方法"><a href="#浏览器操作的常用方法" class="headerlink" title="浏览器操作的常用方法"></a>浏览器操作的常用方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">browser.get(url)：打开指定的URL</span><br><span class="line"></span><br><span class="line">browser.back()：返回上一个页面</span><br><span class="line"></span><br><span class="line">browser.forward()：前进到下一个页面</span><br><span class="line"></span><br><span class="line">browser.refresh()：刷新当前页面</span><br><span class="line"></span><br><span class="line">browser.quit()：关闭浏览器窗口</span><br><span class="line"></span><br><span class="line">browser.maximize_window()：最大化浏览器窗口</span><br><span class="line"></span><br><span class="line">browser.set_window_size(width, height)：设置浏览器窗口大小</span><br><span class="line"></span><br><span class="line">browser.switch_to.window(window_name)：切换到指定窗口</span><br><span class="line"></span><br><span class="line">browser.switch_to.frame(frame_reference)：切换到指定的iframe窗口</span><br><span class="line"></span><br><span class="line">browser.execute_script(script)：在当前页面执行指定的JavaScript脚本</span><br><span class="line"></span><br><span class="line">browser.save_screenshot(filename)：将当前页面截图保存为指定的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(service=service)</span><br><span class="line"><span class="comment"># driver = webdriver.Chrome()</span></span><br><span class="line"></span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&#x27;https://baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># todo 在第一个窗口中打开第二个窗口</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;https://www.wclspace.xyz&#x27;)&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;https://www.alibaba.com&#x27;)&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># todo 获取所有的窗口句柄</span></span><br><span class="line">windows = driver.window_handles</span><br><span class="line">driver.switch_to.window(windows[<span class="number">1</span>])  <span class="comment"># 从0开始</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230508224147516.png" alt="image-20230508224147516"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnitTest框架学习</title>
      <link href="/post/20b1cd59.html"/>
      <url>/post/20b1cd59.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python框架之UnitTest"><a href="#Python框架之UnitTest" class="headerlink" title="Python框架之UnitTest"></a>Python框架之UnitTest</h1><p><img src="/images/image-20230504104145035.png" alt="image-20230504104145035"></p><h2 id="UnitTest框架测试"><a href="#UnitTest框架测试" class="headerlink" title="UnitTest框架测试"></a>UnitTest框架测试</h2><p><img src="/images/image-20230504120042714.png" alt="image-20230504120042714"></p><h3 id="一-TestCase"><a href="#一-TestCase" class="headerlink" title="一. TestCase"></a><strong>一. TestCase</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每一个TestCase（测试用例）都是一个代码文件， 在其中来书写真正的测试用例</span><br><span class="line">代码必须按照标识符的规则来书写</span><br></pre></td></tr></table></figure><ul><li>步骤</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">导包</span><br><span class="line">自定义测试类</span><br><span class="line">在测试类中书写测试用例</span><br><span class="line">执行用例</span><br></pre></td></tr></table></figure><ul><li>代码实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&#x27;自定义测试案例类，需要继承测试模块中中的TestCase类即可&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试方法就是我们需要的用例代码</span></span><br><span class="line">    <span class="comment"># 暂时我们用print代替</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试方法一&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试方法二&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>常见的错误</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码文件的名字以数字开头</span><br><span class="line">代码文件名字中有空格</span><br><span class="line">代码文件中有中文</span><br><span class="line">其他特殊符号</span><br><span class="line">(数字、字母、下滑线组成，不能以数字开头)</span><br></pre></td></tr></table></figure><h3 id="二-使用UnitTest中的TestSuite管理测试用例TestCase"><a href="#二-使用UnitTest中的TestSuite管理测试用例TestCase" class="headerlink" title="二. 使用UnitTest中的TestSuite管理测试用例TestCase"></a>二. <strong>使用UnitTest中的TestSuite管理测试用例TestCase</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">步骤:</span><br><span class="line">导包</span><br><span class="line">实例化套件对象（TestSuite）</span><br><span class="line">使用套件对象添加用例方法</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> RayStuDayOne.testCxase <span class="keyword">import</span> TestDemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 实例化套件对象</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="comment"># 3. 使用套件对象添加用例方法</span></span><br><span class="line">suite.addTest(TestDemo(<span class="string">&#x27;test_method1&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo(<span class="string">&#x27;test_method2&#x27;</span>))</span><br><span class="line"><span class="comment"># 这里也可以用下面的方法，只是idea没有提示</span></span><br><span class="line">suite.addTest(unittest.makeSuite(类名))</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意 :</span><br><span class="line">1. test方法必须以 test_ 开头，不然就不会生成测试方法，也就不会执行</span><br><span class="line">2. </span><br></pre></td></tr></table></figure><h3 id="三-使用TestRunner执行测试套件（TestSuite）"><a href="#三-使用TestRunner执行测试套件（TestSuite）" class="headerlink" title="三. 使用TestRunner执行测试套件（TestSuite）"></a><strong>三. 使用TestRunner执行测试套件（TestSuite）</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testSuite : 作用是打包管理测试用例（testCase）</span><br><span class="line">TestRunner : 执行TestSuite(套件)</span><br></pre></td></tr></table></figure><ul><li>步骤</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导包</span><br><span class="line">实例化运行对象</span><br><span class="line">使用运行对象去执行套件对象</span><br></pre></td></tr></table></figure><ul><li>实现代码</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> RayStuDayOne.testCxase <span class="keyword">import</span> TestDemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 实例化套件对象</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="comment"># 3. 使用套件对象添加用例方法</span></span><br><span class="line">suite.addTest(TestDemo(<span class="string">&#x27;test_method1&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo(<span class="string">&#x27;test_method2&#x27;</span>))</span><br><span class="line"><span class="comment"># 这里也可以用下面的方法，只是idea没有提示</span></span><br><span class="line">suite.addTest(unittest.makeSuite(类名))</span><br><span class="line"><span class="comment"># 4. 实例化运行对象</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"><span class="comment"># 5. 使用运行对象去执行套件对象 ,里面写套件对象</span></span><br><span class="line">runner.run(suite)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="/images/image-20230504111348398.png" alt="image-20230504111348398"></p><h3 id="整体测试实现："><a href="#整体测试实现：" class="headerlink" title="整体测试实现："></a>整体测试实现：</h3><ul><li><strong>首先明确需求</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需求 ：</span><br><span class="line">完成对add方法的测试 </span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><ul><li>书写TestCase测试用例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">步骤 </span><br><span class="line">导包</span><br><span class="line">    自定义测试类</span><br><span class="line">    在测试类中书写测试用例</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Demo.tools <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">testAdd</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义测试类，实现测试方法的书写&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        <span class="keyword">if</span> add(<span class="number">1</span>, <span class="number">2</span>) == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试通过！&quot;</span>)  <span class="comment"># 现在暂时是用打印， 以后是直接靠断言</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试不通过！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        <span class="keyword">if</span> add(<span class="number">10</span>, <span class="number">11</span>) == <span class="number">22</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试通过！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试不通过！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        <span class="keyword">if</span> add(<span class="number">11</span>, <span class="number">2</span>) == <span class="number">13</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试通过！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试不通过！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>使用测试套件（TestSuite）来管理测试用例</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">步骤</span><br><span class="line">导包</span><br><span class="line">    实例化套件对象（TestSuite）</span><br><span class="line">    使用套件对象添加用例方法</span><br></pre></td></tr></table></figure><ul><li><strong>使用测试执行 来执行测试套件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例化运行对象</span><br><span class="line">使用运行对象去执行套件对象</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Demo.testDemo <span class="keyword">import</span> testAdd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用Suite 和 Runner 管理testAdd(unittest.TestCase)文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 实例化套件对象</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 添加测试方法</span></span><br><span class="line">suite.addTest(unittest.makeSuite(testAdd))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 实例化执行对象</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 执行测试套件</span></span><br><span class="line">runner.run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TestLoader-测试加载"><a href="#TestLoader-测试加载" class="headerlink" title="TestLoader(测试加载)"></a>TestLoader(测试加载)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">对TestSuite进行补充</span><br><span class="line">管理多个TestCase</span><br><span class="line"></span><br><span class="line">比如： </span><br><span class="line">如果TestCase的代码文件有很多（10，20，30）</span><br><span class="line"></span><br><span class="line">步骤:</span><br><span class="line">1. 导包</span><br><span class="line">2. 实例化测试加载对象 并添加测试用例 ---- 》 得到的是suite对象</span><br><span class="line">3. 实例化运行对象</span><br><span class="line">4. 运行对象执行套件对象 </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码实现</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Case</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 实例化加载对象 ，并添加用例</span></span><br><span class="line"><span class="comment"># discover 就是发现这个加载， 就可以将这个加载 作为suite对象来使用，同时 discover就可以按照通配符来进行匹配</span></span><br><span class="line"><span class="comment"># 比如我们这里匹配的就是Case目录下 的 以test开头的py文件</span></span><br><span class="line">suite = unittest.TestLoader().discover(<span class="string">&#x27;Case&#x27;</span>, <span class="string">&#x27;test*.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 使用测试运行 来运行测试loader</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还可以简化</p><p><img src="/images/image-20230504122758635.png" alt="image-20230504122758635"></p><h3 id="Fixtrue-（-测试夹具）"><a href="#Fixtrue-（-测试夹具）" class="headerlink" title="Fixtrue （ 测试夹具）"></a>Fixtrue （ 测试夹具）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">是一种 代码结构</span><br><span class="line">在某种特定情况下， 会自动执行</span><br><span class="line"></span><br><span class="line">需要就写 ，不需要就不用写</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>方法级别</strong></li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在每个测试方法（用例代码） 执行前后都会自动调用的结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 在每个测试方法执行之前都会执行</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 在每个测试方法执行之后都会执行</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><strong>类级别</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在每个测试类中所有方法执行前后， 都会自动调用的结构（在整个类中， 执行之前执行之后各一次）</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类级别的Fixture方法 ， 是一个类方法</span></span><br><span class="line"><span class="comment"># 类中所有方法之前</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setupClass</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>模块级别</li></ul><p><img src="/images/image-20230504123752386.png" alt="image-20230504123752386"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打开浏览器 ------------类级别</span><br><span class="line">输入网址   ------------方法级别</span><br><span class="line">输入用户名密码 验证吗点击登录 ---------测试方法</span><br><span class="line">关闭当前页  ------------方法级别</span><br><span class="line">关闭浏览器------------类级别</span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">一值重复上述的结构</span><br></pre></td></tr></table></figure><ul><li>执行</li></ul><p><img src="/images/image-20230504124246887.png" alt="image-20230504124246887"></p><p><img src="/images/image-20230504124332819.png" alt="image-20230504124332819"></p><ul><li><strong>运行结果</strong></li></ul><p><img src="/images/image-20230504124345218.png" alt="image-20230504124345218"></p><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><h2 id="断言的定义"><a href="#断言的定义" class="headerlink" title="断言的定义"></a>断言的定义</h2><ol><li>断言的定义</li></ol><blockquote><p>概念： 断言就是让程序代替人为判断测试程序执行结果是否符合预期结果的过程。</p></blockquote><ol start="2"><li>断言的意义</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实现自动化测试</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>断言结果</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">True: </span><br><span class="line">用例通过</span><br><span class="line"></span><br><span class="line">False: </span><br><span class="line">用例未通过</span><br></pre></td></tr></table></figure><h3 id="常见的断言方法"><a href="#常见的断言方法" class="headerlink" title="常见的断言方法"></a>常见的断言方法</h3><table><thead><tr><th>序号</th><th>断言方法</th><th>断言描述</th></tr></thead><tbody><tr><td>1</td><td>assertTure(expr,msg &#x3D; None)</td><td>验证expr是否为true，如果为false 。则fail</td></tr><tr><td>2</td><td>assertFalse(expr,msg &#x3D; None)</td><td>验证expr是否为false，如果为true 。则fail</td></tr><tr><td>3</td><td>assertEqual(expected,actual,msg &#x3D; None)</td><td>验证expected &#x3D;&#x3D; actual， 不等则 fail</td></tr><tr><td>4</td><td>assertNotEqual（first,second）</td><td>验证first ！&#x3D; second ，相等为 fail</td></tr></tbody></table><p>。。。。有很多</p><ul><li><strong>使用方法：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.aseertEqual(预期结果，实际结果) </span><br><span class="line">相等 ，则预期通过。不相等则是不通过。</span><br><span class="line"></span><br><span class="line">self.assertIn(预期结果，实际结果) </span><br><span class="line">判读预期结果是否包含在实际结果中 实际&gt;预期</span><br><span class="line">包含则为true </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用断言来比较之前的测试</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        self.assertEqual(<span class="number">3</span>, add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 用上面的代替下面的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        <span class="keyword">if</span> add(<span class="number">10</span>, <span class="number">11</span>) == <span class="number">22</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试通过！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试不通过！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他不会生成结果，如果测试失败他就不会通过，如果成功， 那么就会显示ok， 然后通过下面的步骤就可以导出测试报告。</p><p><img src="/images/image-20230504152033984.png" alt="image-20230504152033984"></p><h1 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">参数化 在测试方法中， 通过使用 变量来代替具体的测试数据， 然后使用传参的方法将</span><br><span class="line">数据传递给方法变量。</span><br><span class="line">好处 ： 相似的代码不需要重复读写</span><br><span class="line"></span><br><span class="line">日常场景： </span><br><span class="line">测试数据一般放在json数据中</span><br><span class="line">使用读取json文件， 提取我们需要的数据</span><br></pre></td></tr></table></figure><blockquote><p>安装相关的插件</p><p>通过终端 : 输入 <code>pip install parameterized</code>即可</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">步骤: </span><br><span class="line">1. 导包</span><br><span class="line">2. 定义测试类</span><br><span class="line">3. 书写测试方法（用到的测试数据使用变量代替）</span><br><span class="line">4. 组织测试数据并传参 （数据和顺序需要保证一致）</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"><span class="keyword">from</span> Demo.tools <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 定义测试类 ，书写测试方法 。（用到的测试数据使用变量代替）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">testAddOne</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义测试类，实现测试方法的书写&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">data</span>)     </span><span class="comment"># 使用装饰器的方法传参</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo</span>(<span class="params">self, paramA, paramB, expect</span>):</span><br><span class="line">        <span class="comment"># 比较  预期结果 and 实际结果 是否相等</span></span><br><span class="line">        self.assertEqual(expect, add(paramA, paramB))</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">组织测试数据并传参</span><br><span class="line"></span><br><span class="line"># 组织测试数据</span><br><span class="line">组织数据的格式</span><br><span class="line"># [(),(),()....] 或者 [[],[],[],[]....]</span><br><span class="line">data = [</span><br><span class="line">    (1, 2, 3),</span><br><span class="line">    (11, 21, 32),</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">传参通过装饰器的方法（也就是Java中的注解形式）</span><br><span class="line">@parameterized.expand(data)     # 使用装饰器的方法传参</span><br><span class="line">def test_demo(self, paramA, paramB, expect)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参数化二"><a href="#参数化二" class="headerlink" title="参数化二"></a>参数化二</h2><p>通过导入测试化数据的方式来完成测试</p><ol><li>导入测试化数据</li></ol><p><img src="/images/image-20230504170314546.png" alt="image-20230504170314546"></p><p>​</p><ol start="2"><li>完成对数据的读取和转换(通过定义方法完成)</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_Data</span>():</span><br><span class="line">    data = []   <span class="comment"># 用于接收数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;H:\pythonStudy\Case\data.json&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        result = json.load(f)  <span class="comment"># f中是列表里面套元组的过程， 而我们需要的是列表里面套列表的形式</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:  <span class="comment"># i 就是里面的每个数据 &#123;   XXX &#125;</span></span><br><span class="line">            <span class="comment"># 将数据存储到data中， 然后作为组织测试数据返回</span></span><br><span class="line">            data.append((i.get(<span class="string">&#x27;param1&#x27;</span>), i.get(<span class="string">&#x27;param2&#x27;</span>), i.get(<span class="string">&#x27;param3&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>在自定义测试类中，通过装饰器传参导入数据</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">testAddOne</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义测试类，实现测试方法的书写&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">build_Data(<span class="params"></span>)</span>)  </span><span class="comment"># 使用装饰器的方法传参</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo</span>(<span class="params">self, paramA, paramB, expect</span>):</span><br><span class="line">        <span class="comment"># 比较  预期结果 and 实际结果 是否相等</span></span><br><span class="line">        self.assertEqual(expect, add(paramA, paramB))</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="跳过"><a href="#跳过" class="headerlink" title="跳过"></a>跳过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对一些未完成的 ，或者不满足测试条件的测试函数和测试类，可以跳过执行</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">直接将测试函数标记成为跳过</span><br><span class="line">@unittest.skip(&#x27;代码为完成&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 根据条件判断测试函数是否跳过</span><br><span class="line">@unittest.skipIf(condition,reason)</span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">testAddOne</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义测试类，实现测试方法的书写&quot;&quot;&quot;</span></span><br><span class="line">    version = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @unittest.skipIf()</span></span><br><span class="line"><span class="meta">    @parameterized.expand(<span class="params">build_Data(<span class="params"></span>)</span>)  </span><span class="comment"># 使用装饰器的方法传参</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo</span>(<span class="params">self, paramA, paramB, expect</span>):</span><br><span class="line">        <span class="comment"># 比较  预期结果 and 实际结果 是否相等</span></span><br><span class="line">        self.assertEqual(expect, add(paramA, paramB))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params">version &gt;= <span class="number">30</span>, <span class="string">&#x27;版本号大于等于30 ，不用测试&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        <span class="keyword">if</span> add(<span class="number">10</span>, <span class="number">11</span>) == <span class="number">22</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试通过！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试不通过！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&quot;不想测试了&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_demo2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 比较实际结果 和 预期结果是否相等</span></span><br><span class="line">        <span class="keyword">if</span> add(<span class="number">11</span>, <span class="number">2</span>) == <span class="number">13</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试通过！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试不通过！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230504172724209.png" alt="image-20230504172724209"></p><h1 id="测试报告的生成"><a href="#测试报告的生成" class="headerlink" title="测试报告的生成"></a>测试报告的生成</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只有testCase的才能生成 ，使用testSuite 和 testRunner包装的套件对象无法生成</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用第三方的类库生成报告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将第三方的测试运行类模块放在当前代码的目录中</span><br><span class="line">步骤 :</span><br><span class="line">1. 导包unittest</span><br><span class="line">2. 使用套件对象 ，加载对象， 去添加测试用例</span><br><span class="line">3. 实例化第三方的运行对象， 并运行套件对象</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Python框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础回顾</title>
      <link href="/post/6d164ba3.html"/>
      <url>/post/6d164ba3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><strong>多个变量赋值</strong></p><p>Python允许你同时为多个变量赋值。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = 1</span><br></pre></td></tr></table></figure><p>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。</p><p>您也可以为多个对象指定多个变量。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = 1, 2, &quot;john&quot;</span><br></pre></td></tr></table></figure><p>以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 “john” 分配给变量 c。</p><h3 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><strong>int（有符号整型）</strong></li><li><strong>long（长整型，也可以代表八进制和十六进制）</strong></li><li><strong>float（浮点型）</strong></li><li><strong>complex（复数）</strong></li></ul><p><strong>布尔类型</strong> </p><p>和Java中的Boolean相似， 所以基本用法也都相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 输出False，逻辑与运算</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 输出True，逻辑或运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> b)  <span class="comment"># 输出True，逻辑非运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &gt; <span class="number">5</span>)  <span class="comment"># 输出False，比较运算</span></span><br></pre></td></tr></table></figure><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>在内存中存储的数据可以有多种类型。</p><p>例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。</p><p>Python 定义了一些标准类型，用于存储各种类型的数据。</p><p>Python有<strong>五个标准的数据类型：</strong></p><ul><li><strong>Numbers（数字）</strong></li><li><strong>String（字符串）</strong></li><li><strong>List（列表）</strong></li><li><strong>Tuple（元组）</strong></li><li><strong>Dictionary（字典）</strong></li></ul><h3 id="案例回顾"><a href="#案例回顾" class="headerlink" title="案例回顾"></a>案例回顾</h3><p>下面是每种数据类型的基本使用和案例说明：</p><ol><li><strong>数字类型（Numbers）</strong>—–可变<br>数字类型包括整型（int）、浮点型（float）和复数型（complex）。可以进行常见的数学运算，如加减乘除、幂运算、取模运算等。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2.5</span></span><br><span class="line">c = <span class="number">3</span> + <span class="number">4j</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 输出7.5，自动将整型转换为浮点型</span></span><br><span class="line"><span class="built_in">print</span>(a ** b)  <span class="comment"># 输出55.9016994，a的b次幂</span></span><br><span class="line"><span class="built_in">print</span>(c.real)  <span class="comment"># 输出3，复数的实部</span></span><br><span class="line"><span class="built_in">print</span>(c.imag)  <span class="comment"># 输出4，复数的虚部</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>字符串类型（String）</strong>—–不可变<br>字符串是一系列字符的序列，可以用单引号或双引号括起来。可以进行字符串拼接、切片、大小写转换等操作。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;world&quot;</span></span><br><span class="line">str3 = str1 + <span class="string">&#x27; &#x27;</span> + str2  <span class="comment"># 字符串拼接</span></span><br><span class="line"><span class="built_in">print</span>(str3)  <span class="comment"># 输出hello world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>])  <span class="comment"># 输出h，字符串切片</span></span><br><span class="line"><span class="built_in">print</span>(str2[-<span class="number">1</span>])  <span class="comment"># 输出d，字符串切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1.upper())  <span class="comment"># 输出HELLO，字符串大小写转换</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>列表类型（List）</strong></li></ol><p>列表是<strong>一种有序的集合</strong>，可以包含任意类型的元素。可以进行<strong>索引、切片、增删改查</strong>等操作。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">2.5</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>])  <span class="comment"># 输出hello，列表索引</span></span><br><span class="line"><span class="built_in">print</span>(lst[-<span class="number">1</span>])  <span class="comment"># 输出True，列表索引</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 输出[&#x27;hello&#x27;, 2.5]，列表切片</span></span><br><span class="line"></span><br><span class="line">lst.append(<span class="string">&#x27;world&#x27;</span>)  <span class="comment"># 列表增加元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出[1, &#x27;hello&#x27;, 2.5, True, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line">lst[<span class="number">0</span>] = <span class="number">0</span>  <span class="comment"># 列表修改元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出[0, &#x27;hello&#x27;, 2.5, True, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure><ol start="5"><li><strong>元组（Tuple）</strong>—–不可变</li></ol><p>元组是一种<strong>有序的集合</strong>，与列表类似，**<code>但是元组是不可变的</code>，**即元素的值不能修改。可以进行索引、切片等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">2.5</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">1</span>])  <span class="comment"># 输出hello，元组索引</span></span><br><span class="line"><span class="built_in">print</span>(tup[-<span class="number">1</span>])  <span class="comment"># 输出True，元组索引</span></span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 输出(&#x27;hello&#x27;, 2.5)，元组切片</span></span><br></pre></td></tr></table></figure><ol start="6"><li><strong>集合类型</strong>—–元素不重复 ， 和set集合类似—–<strong>不可变</strong></li></ol><p>集合是一种无序的不重复元素的集合，可以进行交并补等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)  <span class="comment"># 输出&#123;1, 2, 3, 4, 5, 6&#125;，集合并运算</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)  <span class="comment"># 输出&#123;3, 4&#125;，集合交运算</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)  <span class="comment"># 输出&#123;1, 2&#125;，集合差运算</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>字典类型</strong></li></ol><p>字典是一种无序的键值对集合，可以根据键来访问值。可以进行增删改查等操作。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 输出Tom，字典访问值</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;age&#x27;</span>))  <span class="comment"># 输出20，字典访问值</span></span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;age&#x27;</span>] = <span class="number">21</span>  <span class="comment"># 字典修改值</span></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 21, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;city&#x27;</span>] = <span class="string">&#x27;Beijing&#x27;</span>  <span class="comment"># 字典增加键值对</span></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 21, &#x27;gender&#x27;: &#x27;male&#x27;, &#x27;city&#x27;: &#x27;Beijing&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="五大数据类型的高级用法"><a href="#五大数据类型的高级用法" class="headerlink" title="五大数据类型的高级用法"></a>五大数据类型的高级用法</h2><h3 id="列表类型-list"><a href="#列表类型-list" class="headerlink" title="列表类型 (list[] )"></a>列表类型 (list[] )</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数:"></a>内置函数:</h4><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-list-cmp.html">cmp(list1, list2)</a> 比较两个列表的元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python/att-list-pop.html">index&#x3D;-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python/att-list-sort.html">list.sort(cmp&#x3D;None, key&#x3D;None, reverse&#x3D;False)</a> 对原列表进行排序</td></tr></tbody></table><h3 id="set集合类型"><a href="#set集合类型" class="headerlink" title="set集合类型"></a>set集合类型</h3><h4 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的创建</span></span><br><span class="line">set1 = <span class="built_in">set</span>() <span class="comment"># 相当于java中的new List...</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">set1 = &#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">31</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的添加元素"><a href="#集合的添加元素" class="headerlink" title="集合的添加元素"></a>集合的添加元素</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># 输出&#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="集合的删除元素"><a href="#集合的删除元素" class="headerlink" title="集合的删除元素"></a>集合的删除元素</h4><p>可以使用remove()或discard()方法删除集合中的一个元素，<strong>如果元素不存在，则抛出KeyError异常</strong>（remove()方法）或不进行任何操作（discard()方法）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set1.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># 输出&#123;1, 3&#125;</span></span><br><span class="line"></span><br><span class="line">set1.discard(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># 输出&#123;1, 3&#125;，元素4不存在，不进行任何操作</span></span><br></pre></td></tr></table></figure><h4 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h4><p>可以<strong>使用union()、intersection()、difference()、symmetric_difference()等方法进行集合的并、交、差、对称差等运算。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">set3 = set1.union(set2)  <span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(set3)  <span class="comment"># 输出&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">set4 = set1.intersection(set2)  <span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(set4)  <span class="comment"># 输出&#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line">set5 = set1.difference(set2)  <span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(set5)  <span class="comment"># 输出&#123;1&#125;</span></span><br><span class="line"></span><br><span class="line">set6 = set1.symmetric_difference(set2)  <span class="comment"># 对称差</span></span><br><span class="line"><span class="built_in">print</span>(set6)  <span class="comment"># 输出&#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="判断集合之间的关系"><a href="#判断集合之间的关系" class="headerlink" title="判断集合之间的关系"></a>判断集合之间的关系</h4><p>可以<strong>使用issubset()、issuperset()、isdisjoint()等方法判断集合之间的包含关系</strong>。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(set1.issubset(set2))  <span class="comment"># 输出False，set1不是set2的子集</span></span><br><span class="line"><span class="built_in">print</span>(set2.issuperset(set1))  <span class="comment"># 输出True，set2是set1的超集</span></span><br><span class="line"><span class="built_in">print</span>(set1.isdisjoint(set2))  <span class="comment"># 输出False，set1和set2有共同的元素</span></span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>这个就是相当于将简单的数字类型进行了封装， 如果没有了float 和 double之间的区别</p><p><strong>数学函数运算</strong></p><p>其中python提供了许多数学函数，可以对数字进行各种运算和计算。常用的数学函数包括abs()、round()、min()、max()、pow()等。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = -<span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(x))  <span class="comment"># 输出2.5，取绝对值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(x))  <span class="comment"># 输出-2，四舍五入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 输出1，取最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 输出3，取最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 输出8，即2的3次幂</span></span><br></pre></td></tr></table></figure><p><strong>类型转换</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(x))  <span class="comment"># 输出2，将浮点型转换为整型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">2</span>))  <span class="comment"># 输出2.0，将整型转换为浮点型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 输出(2+3j)，将实数转换为复数</span></span><br></pre></td></tr></table></figure><h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><h4 id="创建元组（）"><a href="#创建元组（）" class="headerlink" title="创建元组（）"></a>创建元组（）</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="元组的访问"><a href="#元组的访问" class="headerlink" title="元组的访问"></a>元组的访问</h4><p>就是简单的遍历</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])  <span class="comment"># 输出1，第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[-<span class="number">1</span>])  <span class="comment"># 输出3，最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 输出(2, 3)，第2个到第3个元素</span></span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p><strong>可以使用加号+和乘号*来进行元组的拼接和复制操作。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tuple2 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">tuple3 = tuple1 + tuple2  <span class="comment"># 元组拼接</span></span><br><span class="line"><span class="built_in">print</span>(tuple3)  <span class="comment"># 输出(1, 2, 3, 4, 5, 6)</span></span><br><span class="line"></span><br><span class="line">tuple4 = tuple1 * <span class="number">3</span>  <span class="comment"># 元组复制</span></span><br><span class="line"><span class="built_in">print</span>(tuple4)  <span class="comment"># 输出(1, 2, 3, 1, 2, 3, 1, 2, 3)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>元素统计</li></ol><p><strong>可以使用count()方法统计元素在元组中出现的次数，使用index()方法查找元素在元组中的位置。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tuple1.count(<span class="number">2</span>))  <span class="comment"># 输出2，元素2出现了2次</span></span><br><span class="line"><span class="built_in">print</span>(tuple1.index(<span class="number">3</span>))  <span class="comment"># 输出2，元素3在元组中的位置为2</span></span><br></pre></td></tr></table></figure><p>这些方法可以帮助开发者方便地进行元组的操作和处理<strong>。由于元组是不可变的，因此在使用元组时需要注意不能对元素进行修改。</strong></p><h4 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h4><p>Python元组包含了以下内置函数</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-cmp.html">cmp(tuple1, tuple2)</a> 比较两个元组元素。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-len.html">len(tuple)</a> 计算元组元素个数。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-max.html">max(tuple)</a> 返回元组中元素最大值。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-min.html">min(tuple)</a> 返回元组中元素最小值。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-tuple-tuple.html">tuple(seq)</a> 将列表转换为元组。</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><h4 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h4><p>可以使用切片操作来截取字符串的一部分。切片操作的语法为：<code>s[start:end:step]</code>，其中start为起始位置（默认为0），end为结束位置（默认为字符串长度），step为步长（默认为1）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>])  <span class="comment"># 输出Hello，取前5个字符</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">7</span>:])  <span class="comment"># 输出world!，从第7个字符到字符串末尾</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>])  <span class="comment"># 输出Hello，从字符串开头到第5个字符</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">6</span>:])  <span class="comment"># 输出world!，取最后6个字符</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])  <span class="comment"># 输出Hlo ol!, 每隔一个字符取一个</span></span><br></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>可以使用加号+来进行字符串的拼接操作。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line">s3 = s1 + <span class="string">&#x27;, &#x27;</span> + s2 + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s3)  <span class="comment"># 输出Hello, world!</span></span><br></pre></td></tr></table></figure><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><p>可以使用find()、index()、count()等方法来查找字符串中的子串。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;world&#x27;</span>))  <span class="comment"># 输出7，返回子串的起始位置，如果没有找到则返回-1</span></span><br><span class="line"><span class="built_in">print</span>(s.index(<span class="string">&#x27;world&#x27;</span>))  <span class="comment"># 输出7，返回子串的起始位置，如果没有找到则抛出ValueError异常</span></span><br><span class="line"><span class="built_in">print</span>(s.rindex(<span class="string">&#x27;world&#x27;</span>)) <span class="comment"># 从右边开始索引</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&#x27;o&#x27;</span>))  <span class="comment"># 输出2，统计子串在字符串中出现的次数</span></span><br></pre></td></tr></table></figure><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p>可以使用replace()方法来替换字符串中的子串。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line">s2 = s.replace(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2)  <span class="comment"># 输出Hello, Python!</span></span><br></pre></td></tr></table></figure><h4 id="字符串分割和连接"><a href="#字符串分割和连接" class="headerlink" title="字符串分割和连接"></a>字符串分割和连接</h4><p>可以使用split()方法将字符串按照指定的分隔符进行分割，<strong>使用join()方法将字符串列表或元组连接成一个字符串。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line">lst = s.split(<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 将字符串按照逗号分割成列表</span></span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出[&#x27;Hello&#x27;, &#x27; world!&#x27;]</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;-&#x27;</span>.join(lst)  <span class="comment"># 将列表按照横线连接成字符串</span></span><br><span class="line"><span class="built_in">print</span>(s2)  <span class="comment"># 输出Hello- world!</span></span><br></pre></td></tr></table></figure><p>这些方法可以帮助开发者方便地进行字符串的操作和处理。<strong>由于字符串是不可变的，因此在使用字符串时需要注意不能对字符串进行修改。</strong></p><h4 id="内置函数-1"><a href="#内置函数-1" class="headerlink" title="内置函数"></a>内置函数</h4><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/att-string-capitalize.html">string.capitalize()</a></td><td align="left">把字符串的第一个字符大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-center.html">string.center(width)</a></td><td align="left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-count.html">string.count(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-decode.html">string.decode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td align="left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-encode.html">string.encode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td align="left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html">string.endswith(obj, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-expandtabs.html">string.expandtabs(tabsize&#x3D;8)</a></td><td align="left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-find.html">string.find(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-format.html">string.format()</a></strong></td><td align="left">格式化字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-index.html">string.index(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalnum.html">string.isalnum()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalpha.html">string.isalpha()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdecimal.html">string.isdecimal()</a></td><td align="left">如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdigit.html">string.isdigit()</a></td><td align="left">如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-islower.html">string.islower()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isnumeric.html">string.isnumeric()</a></td><td align="left">如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isspace.html">string.isspace()</a></td><td align="left">如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-istitle.html">string.istitle()</a></td><td align="left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isupper.html">string.isupper()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-join.html">string.join(seq)</a></strong></td><td align="left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-ljust.html">string.ljust(width)</a></td><td align="left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lower.html">string.lower()</a></td><td align="left">转换 string 中所有大写字符为小写.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lstrip.html">string.lstrip()</a></td><td align="left">截掉 string 左边的空格</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-maketrans.html">string.maketrans(intab, outtab)</a></td><td align="left">maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-max.html">max(str)</a></td><td align="left">返回字符串 <em>str</em> 中最大的字母。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-min.html">min(str)</a></td><td align="left">返回字符串 <em>str</em> 中最小的字母。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-partition.html">string.partition(str)</a></strong></td><td align="left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str &#x3D;&#x3D; string.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-replace.html">string.replace(str1, str2, num&#x3D;string.count(str1))</a></strong></td><td align="left">把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rfind.html">string.rfind(str, beg&#x3D;0,end&#x3D;len(string) )</a></td><td align="left">类似于 find() 函数，返回字符串最后一次出现的位置，如果没有匹配项则返回 -1。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rindex.html">string.rindex( str, beg&#x3D;0,end&#x3D;len(string))</a></td><td align="left">类似于 index()，不过是返回最后一个匹配到的子字符串的索引号。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rjust.html">string.rjust(width)</a></td><td align="left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rpartition.html">string.rpartition(str)</a></td><td align="left">类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rstrip.html">string.rstrip()</a></td><td align="left">删除 string 字符串末尾的空格.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-split.html">string.split(str&#x3D;””, num&#x3D;string.count(str))</a></strong></td><td align="left">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 <strong>num+1</strong> 个子字符串</td></tr><tr><td align="left">[string.splitlines(<a href="https://www.runoob.com/python/att-string-splitlines.html">keepends])</a></td><td align="left">按照行(‘\r’, ‘\r\n’, ‘\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-startswith.html">string.startswith(obj, beg&#x3D;0,end&#x3D;len(string))</a></td><td align="left">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td align="left"><strong>[string.strip(<a href="https://www.runoob.com/python/att-string-strip.html">obj])</a></strong></td><td align="left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-swapcase.html">string.swapcase()</a></td><td align="left">翻转 string 中的大小写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-title.html">string.title()</a></td><td align="left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-translate.html">string.translate(str, del&#x3D;””)</a></strong></td><td align="left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-upper.html">string.upper()</a></td><td align="left">转换 string 中的小写字母为大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-zfill.html">string.zfill(width)</a></td><td align="left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table><h3 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h3><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><p>可以使用花括号{}或dict()方法创建一个字典：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line">dict2 = <span class="built_in">dict</span>([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Jerry&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)])</span><br></pre></td></tr></table></figure><h4 id="访问字典元素"><a href="#访问字典元素" class="headerlink" title="访问字典元素"></a>访问字典元素</h4><p>可以使用键来访问字典中的值，如果键不存在，则会抛出KeyError异常。也可以使用get()方法来访问字典中的值，如果键不存在，则返回指定的默认值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 输出Tom</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;age&#x27;</span>, <span class="number">0</span>))  <span class="comment"># 输出20</span></span><br><span class="line"><span class="built_in">print</span>(dict1.get(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;Unknown&#x27;</span>))  <span class="comment"># 输出Unknown，键gender不存在，返回指定的默认值</span></span><br></pre></td></tr></table></figure><h4 id="修改字典元素"><a href="#修改字典元素" class="headerlink" title="修改字典元素"></a>修改字典元素</h4><p>可以使用赋值语句对字典中的元素进行修改，如果键不存在，则会添加新的键值对。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1[<span class="string">&#x27;age&#x27;</span>] = <span class="number">21</span>  <span class="comment"># 修改键age的值为21</span></span><br><span class="line">dict1[<span class="string">&#x27;gender&#x27;</span>] = <span class="string">&#x27;Male&#x27;</span>  <span class="comment"># 添加新的键值对</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 21, &#x27;gender&#x27;: &#x27;Male&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h4><p>可以使用del语句或pop()方法删除字典中的元素，如果键不存在，则会抛出KeyError异常（del语句）或返回指定的默认值（pop()方法）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;age&#x27;</span>]  <span class="comment"># 删除键age</span></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出&#123;&#x27;name&#x27;: &#x27;Tom&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">age = dict1.pop(<span class="string">&#x27;age&#x27;</span>, <span class="number">0</span>)  <span class="comment"># 删除键age，并返回其对应的值，如果键不存在，则返回指定的默认值</span></span><br><span class="line"><span class="built_in">print</span>(age)  <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><h4 id="字典视图"><a href="#字典视图" class="headerlink" title="字典视图"></a>字典视图</h4><p>字典视图（dictionary view）是一个动态的“窗口”，可以看到字典中的键和值。Python提供了三种字典视图：keys()方法返回字典中的键视图，values()方法返回字典中的值视图，items()方法返回字典中的键值对视图</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">keys = dict1.keys()  <span class="comment"># 返回字典中的键视图</span></span><br><span class="line">values = dict1.values()  <span class="comment"># 返回字典中的值视图</span></span><br><span class="line">items = dict1.items()  <span class="comment"># 返回字典中的键值对视图</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(keys)  <span class="comment"># 输出dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(values)  <span class="comment"># 输出dict_values([&#x27;Tom&#x27;, 20])</span></span><br><span class="line"><span class="built_in">print</span>(items)  <span class="comment"># 输出dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20)])</span></span><br></pre></td></tr></table></figure><p>这些方法可以帮助开发者方便地进行字典的操作和处理。<strong>由于字典是无序的，因此在使用字典时需要注意不能依赖字典中元素的顺序。</strong></p><h4 id="内置函数："><a href="#内置函数：" class="headerlink" title="内置函数："></a>内置函数：</h4><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-cmp.html">cmp(dict1, dict2)</a> 比较两个字典元素。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-len.html">len(dict)</a> 计算字典元素个数，即键的总数。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-str.html">str(dict)</a> 输出字典可打印的字符串表示。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-type.html">type(variable)</a> 返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table><p>Python字典包含了以下内置方法：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-clear.html">dict.clear()</a> 删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-copy.html">dict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left">[dict.fromkeys(seq<a href="https://www.runoob.com/python/att-dictionary-fromkeys.html">, val])</a> 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-get.html">dict.get(key, default&#x3D;None)</a> 返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-has_key.html">dict.has_key(key)</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-items.html">dict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-keys.html">dict.keys()</a> 以列表返回一个字典所有的键</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-setdefault.html">dict.setdefault(key, default&#x3D;None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-update.html">dict.update(dict2)</a> 把字典dict2的键&#x2F;值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python/att-dictionary-values.html">dict.values()</a> 以列表返回字典中的所有值</td></tr><tr><td align="left">11</td><td align="left">[pop(key<a href="https://www.runoob.com/python/python-att-dictionary-pop.html">,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python/python-att-dictionary-popitem.html">popitem()</a> 返回并删除字典中的最后一对键和值</td></tr></tbody></table><h2 id="字符串的相关内置函数"><a href="#字符串的相关内置函数" class="headerlink" title="字符串的相关内置函数"></a>字符串的相关内置函数</h2><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/att-string-capitalize.html">string.capitalize()</a></td><td align="left">把字符串的第一个字符大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-center.html">string.center(width)</a></td><td align="left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-count.html">string.count(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-decode.html">string.decode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td align="left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-encode.html">string.encode(encoding&#x3D;’UTF-8’, errors&#x3D;’strict’)</a></td><td align="left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html">string.endswith(obj, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-expandtabs.html">string.expandtabs(tabsize&#x3D;8)</a></td><td align="left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-find.html">string.find(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-format.html">string.format()</a></strong></td><td align="left">格式化字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-index.html">string.index(str, beg&#x3D;0, end&#x3D;len(string))</a></strong></td><td align="left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalnum.html">string.isalnum()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalpha.html">string.isalpha()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdecimal.html">string.isdecimal()</a></td><td align="left">如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdigit.html">string.isdigit()</a></td><td align="left">如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-islower.html">string.islower()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isnumeric.html">string.isnumeric()</a></td><td align="left">如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isspace.html">string.isspace()</a></td><td align="left">如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-istitle.html">string.istitle()</a></td><td align="left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isupper.html">string.isupper()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-join.html">string.join(seq)</a></strong></td><td align="left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-ljust.html">string.ljust(width)</a></td><td align="left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lower.html">string.lower()</a></td><td align="left">转换 string 中所有大写字符为小写.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lstrip.html">string.lstrip()</a></td><td align="left">截掉 string 左边的空格</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-maketrans.html">string.maketrans(intab, outtab)</a></td><td align="left">maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-max.html">max(str)</a></td><td align="left">返回字符串 <em>str</em> 中最大的字母。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-min.html">min(str)</a></td><td align="left">返回字符串 <em>str</em> 中最小的字母。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-partition.html">string.partition(str)</a></strong></td><td align="left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str &#x3D;&#x3D; string.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-replace.html">string.replace(str1, str2, num&#x3D;string.count(str1))</a></strong></td><td align="left">把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rfind.html">string.rfind(str, beg&#x3D;0,end&#x3D;len(string) )</a></td><td align="left">类似于 find() 函数，返回字符串最后一次出现的位置，如果没有匹配项则返回 -1。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rindex.html">string.rindex( str, beg&#x3D;0,end&#x3D;len(string))</a></td><td align="left">类似于 index()，不过是返回最后一个匹配到的子字符串的索引号。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rjust.html">string.rjust(width)</a></td><td align="left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rpartition.html">string.rpartition(str)</a></td><td align="left">类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rstrip.html">string.rstrip()</a></td><td align="left">删除 string 字符串末尾的空格.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-split.html">string.split(str&#x3D;””, num&#x3D;string.count(str))</a></strong></td><td align="left">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 <strong>num+1</strong> 个子字符串</td></tr><tr><td align="left">[string.splitlines(<a href="https://www.runoob.com/python/att-string-splitlines.html">keepends])</a></td><td align="left">按照行(‘\r’, ‘\r\n’, ‘\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-startswith.html">string.startswith(obj, beg&#x3D;0,end&#x3D;len(string))</a></td><td align="left">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td align="left"><strong>[string.strip(<a href="https://www.runoob.com/python/att-string-strip.html">obj])</a></strong></td><td align="left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-swapcase.html">string.swapcase()</a></td><td align="left">翻转 string 中的大小写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-title.html">string.title()</a></td><td align="left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-translate.html">string.translate(str, del&#x3D;””)</a></strong></td><td align="left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-upper.html">string.upper()</a></td><td align="left">转换 string 中的小写字母为大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-zfill.html">string.zfill(width)</a></td><td align="left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><h3 id="Python-字符串格式化"><a href="#Python-字符串格式化" class="headerlink" title="Python 字符串格式化"></a>Python 字符串格式化</h3><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p><p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><p>如下实例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;My name is %s and weight is %d kg!&quot;</span> % (<span class="string">&#x27;Zara&#x27;</span>, <span class="number">21</span>) </span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is Zara and weight is 21 kg!</span><br></pre></td></tr></table></figure><p>python 字符串格式化符号:</p><table><thead><tr><th align="left">符  号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr><tr><td align="left">%u</td><td align="left">格式化无符号整型</td></tr><tr><td align="left">%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td align="left">%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td align="left">%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td align="left">%f</td><td align="left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td align="left">%e</td><td align="left">用科学计数法格式化浮点数</td></tr><tr><td align="left">%E</td><td align="left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td align="left">%g</td><td align="left">%f和%e的简写</td></tr><tr><td align="left">%G</td><td align="left">%F 和 %E 的简写</td></tr><tr><td align="left">%p</td><td align="left">用十六进制数格式化变量的地址</td></tr></tbody></table><p>格式化操作符辅助指令:</p><table><thead><tr><th align="left">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">定义宽度或者小数点精度</td></tr><tr><td align="left">-</td><td align="left">用做左对齐</td></tr><tr><td align="left">+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="left"><sp></sp></td><td align="left">在正数前面显示空格</td></tr><tr><td align="left">#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="left">0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td align="left">%</td><td align="left">‘%%’输出一个单一的’%’</td></tr><tr><td align="left">(var)</td><td align="left">映射变量(字典参数)</td></tr><tr><td align="left">m.n.</td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h3 id="三引号"><a href="#三引号" class="headerlink" title="三引号"></a>三引号</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str12 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       这是一个晴朗的小凹</span></span><br><span class="line"><span class="string">       我想牵着你走</span></span><br><span class="line"><span class="string">       这世上没有什么是</span></span><br><span class="line"><span class="string">                   一个人</span></span><br><span class="line"><span class="string">                   -------rayce</span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230503145249357.png" alt="image-20230503145249357"></p><h1 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除 - x除以y</td><td align="left">b &#x2F; a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td align="left">&#x2F;&#x2F;</td><td align="left">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td align="left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>以下表格列出了<strong>从最高到最低优先级</strong>的所有运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* &#x2F; % &#x2F;&#x2F;</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td align="left">比较运算符</td></tr><tr><td align="left">&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td align="left">等于运算符</td></tr><tr><td align="left">&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h1 id="条件判断-amp-循环"><a href="#条件判断-amp-循环" class="headerlink" title="条件判断 &amp; 循环"></a>条件判断 &amp; 循环</h1><h2 id="条件判断基本语法格式"><a href="#条件判断基本语法格式" class="headerlink" title="条件判断基本语法格式"></a>条件判断基本语法格式</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure><p>第二种<code>elif</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;zheshi1sda&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    i 代表当前索引元素</span></span><br><span class="line"><span class="string">    str1 代表需要索引的元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前字母为 : &quot;</span> + i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#   range(1, len(str1), 2)</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        其中</span></span><br><span class="line"><span class="string">        index表示 : 索引位置</span></span><br><span class="line"><span class="string">        range(1, len(str1), 2) </span></span><br><span class="line"><span class="string">        1代表 : 索引的起始位置</span></span><br><span class="line"><span class="string">        len(str1)代表 : 索引的结束位置</span></span><br><span class="line"><span class="string">        2代表 : 索引的步数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1), <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(str1[index] + <span class="string">&quot; 是当前字母&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230503142930168.png" alt="image-20230503142930168"></p><h1 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">localTime = time.localtime(time.time())</span><br><span class="line"><span class="built_in">print</span>(localTime)</span><br><span class="line"><span class="built_in">print</span>(localTime.tm_year)</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo 格式化时间</span></span><br><span class="line"><span class="comment"># todo 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo 格式化成Sat Mar 28 22:24:24 2016形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># todo 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.strptime(a, <span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230503151057561.png" alt="image-20230503151057561"></p><h2 id="格式化日期符号"><a href="#格式化日期符号" class="headerlink" title="格式化日期符号"></a>格式化日期符号</h2><p>python中时间日期格式化符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00-59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h2 id="获取某月日历"><a href="#获取某月日历" class="headerlink" title="获取某月日历"></a>获取某月日历</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cal = calendar.month(<span class="number">2016</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(cal)</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230503151323781.png" alt="image-20230503151323781"></p><h2 id="相关函数API"><a href="#相关函数API" class="headerlink" title="相关函数API"></a>相关函数API</h2><h4 id="Time模块"><a href="#Time模块" class="headerlink" title="Time模块"></a>Time模块</h4><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-time-altzone.html">time.altzone</a> 返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。</td></tr><tr><td align="left">2</td><td align="left">[time.asctime(<a href="https://www.runoob.com/python/att-time-asctime.html">tupletime])</a> 接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-time-clock.html">time.clock( )</a> 用以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。</td></tr><tr><td align="left">4</td><td align="left">[time.ctime(<a href="https://www.runoob.com/python/att-time-ctime.html">secs])</a> 作用相当于asctime(localtime(secs))，未给参数相当于asctime()</td></tr><tr><td align="left">5</td><td align="left">[time.gmtime(<a href="https://www.runoob.com/python/att-time-gmtime.html">secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0</td></tr><tr><td align="left">6</td><td align="left">[time.localtime(<a href="https://www.runoob.com/python/att-time-localtime.html">secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-time-mktime.html">time.mktime(tupletime)</a> 接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-time-sleep.html">time.sleep(secs)</a> 推迟调用线程的运行，secs指秒数。</td></tr><tr><td align="left">9</td><td align="left">[time.strftime(fmt<a href="https://www.runoob.com/python/att-time-strftime.html">,tupletime])</a> 接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python/att-time-strptime.html">time.strptime(str,fmt&#x3D;’%a %b %d %H:%M:%S %Y’)</a> 根据fmt的格式把一个时间字符串解析为时间元组。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python/att-time-time.html">time.time( )</a> 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python/att-time-tzset.html">time.tzset()</a> 根据环境变量TZ重新初始化时间相关设置。</td></tr></tbody></table><p>Time模块包含了以下2个非常重要的属性：</p><table><thead><tr><th align="left">序号</th><th align="left">属性及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>time.timezone</strong> 属性 time.timezone 是当地时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0，美洲&lt;&#x3D;0大部分欧洲，亚洲，非洲）。</td></tr><tr><td align="left">2</td><td align="left"><strong>time.tzname</strong> 属性time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。</td></tr></tbody></table><h4 id="日历模块"><a href="#日历模块" class="headerlink" title="日历模块"></a>日历模块</h4><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>calendar.calendar(year,w&#x3D;2,l&#x3D;1,c&#x3D;6)</strong> 返回一个多行字符串格式的year年年历，3个月一行，间隔距离为c。 每日宽度间隔为w字符。每行长度为21* W+18+2* C。l是每星期行数。</td></tr><tr><td align="left">2</td><td align="left"><strong>calendar.firstweekday( )</strong> 返回当前每周起始日期的设置。默认情况下，首次载入 calendar 模块时返回 0，即星期一。</td></tr><tr><td align="left">3</td><td align="left"><strong>calendar.isleap(year)</strong> 是闰年返回 True，否则为 False。<code>&gt;&gt;&gt; import calendar &gt;&gt;&gt; print(calendar.isleap(2000)) True &gt;&gt;&gt; print(calendar.isleap(1900)) False</code></td></tr><tr><td align="left">4</td><td align="left"><strong>calendar.leapdays(y1,y2)</strong> 返回在Y1，Y2两年之间的闰年总数。</td></tr><tr><td align="left">5</td><td align="left"><strong>calendar.month(year,month,w&#x3D;2,l&#x3D;1)</strong> 返回一个多行字符串格式的year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。</td></tr><tr><td align="left">6</td><td align="left"><strong>calendar.monthcalendar(year,month)</strong> 返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year年month月外的日期都设为0;范围内的日子都由该月第几日表示，从1开始。</td></tr><tr><td align="left">7</td><td align="left"><strong>calendar.monthrange(year,month)</strong> 返回两个整数。第一个是该月的星期几的日期码，第二个是该月的日期码。日从0（星期一）到6（星期日）;月从1到12。</td></tr><tr><td align="left">8</td><td align="left"><strong>calendar.prcal(year,w&#x3D;2,l&#x3D;1,c&#x3D;6)</strong> 相当于 **print calendar.calendar(year,w&#x3D;2,l&#x3D;1,c&#x3D;6)**。</td></tr><tr><td align="left">9</td><td align="left"><strong>calendar.prmonth(year,month,w&#x3D;2,l&#x3D;1)</strong> 相当于 <strong>print calendar.month(year,month,w&#x3D;2,l&#x3D;1)</strong> 。</td></tr><tr><td align="left">10</td><td align="left"><strong>calendar.setfirstweekday(weekday)</strong> 设置每周的起始日期码。0（星期一）到6（星期日）。</td></tr><tr><td align="left">11</td><td align="left"><strong>calendar.timegm(tupletime)</strong> 和time.gmtime相反：接受一个时间元组形式，返回该时刻的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><strong>calendar.weekday(year,month,day)</strong> 返回给定日期的日期码。0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。</td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="简单语法"><a href="#简单语法" class="headerlink" title="简单语法"></a>简单语法</h2><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，**后接函数标识符名称和圆括号()**。</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;打招呼&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="I-x2F-O-文件"><a href="#I-x2F-O-文件" class="headerlink" title="I&#x2F;O 文件"></a>I&#x2F;O 文件</h1><p>Python 提供了必要的函数和方法进行默认情况下的文件基本操作。你可以用 <strong>file</strong> 对象做大部分的文件操作。</p><h3 id="open-函数"><a href="#open-函数" class="headerlink" title="open 函数"></a>open 函数</h3><p>你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。</p><p>语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file <span class="built_in">object</span> = <span class="built_in">open</span>(file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure><p><strong>各个参数的细节如下：</strong></p><ul><li>file_name：file_name 变量是一个包含了你要访问的文件名称的字符串值。</li><li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li></ul><p>不同模式打开文件的完全列表：</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（不推荐）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p> <img src="/images/image-20230503154736829.png" alt="image-20230503154736829"></p><p><img src="/images/image-20230503154758303.png" alt="image-20230503154758303"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    fo = <span class="built_in">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(fo.name)</span><br><span class="line">    <span class="built_in">print</span>(fo.mode)</span><br><span class="line">    <span class="built_in">print</span>(fo.encoding)</span><br><span class="line"></span><br><span class="line">    fo.write(<span class="string">&quot;这是一个请开个&quot;</span>)</span><br><span class="line">    fo.write(<span class="string">&quot;www.runoob.com!\nVery good site!\n&quot;</span>)</span><br><span class="line">    fo.close()</span><br><span class="line"></span><br><span class="line">    fw = <span class="built_in">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        可以在read中添加数字， 其代表的是读取出的字符</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    str1 = fw.read()</span><br><span class="line">    <span class="built_in">print</span>(str1)</span><br><span class="line">    fw.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230503155812589.png" alt="image-20230503155812589"></p><p><img src="/images/image-20230503155817221.png" alt="image-20230503155817221"></p><h3 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取的字符串是 : &quot;</span>, <span class="built_in">str</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = fo.tell()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前文件位置 : &quot;</span>, position)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 把指针再次重新定位到文件开头</span></span><br><span class="line">position = fo.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;重新读取字符串 : &quot;</span>, <span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><h3 id="重命名文件-和-删除文件"><a href="#重命名文件-和-删除文件" class="headerlink" title="重命名文件 和 删除文件"></a>重命名文件 和 删除文件</h3><p>ython的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。</p><p>要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。</p><h4 id="rename-方法"><a href="#rename-方法" class="headerlink" title="rename() 方法"></a>rename() 方法</h4><p>rename() 方法需要两个参数，当前的文件名和新文件名。</p><p>语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(current_file_name, new_file_name)</span><br></pre></td></tr></table></figure><h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><p>你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。</p><p>语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(file_name)</span><br></pre></td></tr></table></figure><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p>所有文件都包含在各个不同的目录下，不过Python也能轻松处理。os模块有许多方法能帮你创建，删除和更改目录。</p><h4 id="mkdir-方法"><a href="#mkdir-方法" class="headerlink" title="mkdir()方法"></a>mkdir()方法</h4><p>可以使用os模块的mkdir()方法<strong>在当前目录下创建新的目录们。</strong>你需要提供一个包含了要创建的目录名称的参数。</p><p>语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">&quot;newdir&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="chdir-方法-–改变"><a href="#chdir-方法-–改变" class="headerlink" title="chdir()方法- –改变"></a>chdir()方法- –改变</h4><p><strong>可以用chdir()方法来改变当前的目录</strong>。chdir()方法需要的一个参数是你想设成当前目录的目录名称。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(&quot;newdir&quot;)</span><br></pre></td></tr></table></figure><h4 id="getcwd-方法—显示"><a href="#getcwd-方法—显示" class="headerlink" title="getcwd() 方法—显示"></a>getcwd() 方法—显示</h4><p>getcwd()方法显示当前的工作目录。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><h4 id="rmdir-方法—删除"><a href="#rmdir-方法—删除" class="headerlink" title="rmdir()方法—删除"></a>rmdir()方法—删除</h4><p>rmdir()方法删除目录，目录名称以参数传递。</p><p>在删除这个目录之前，它的所有内容应该先被清除。</p><p>语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="文件相关的API"><a href="#文件相关的API" class="headerlink" title="文件相关的API"></a>文件相关的API</h2><p><a href="https://www.runoob.com/python/os-file-methods.html">https://www.runoob.com/python/os-file-methods.html</a></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;：</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在try部份引发了&#x27;name&#x27;异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果引发了&#x27;name&#x27;异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果没有异常发生</span></span><br></pre></td></tr></table></figure><p>捕捉异常可以使用try&#x2F;except语句。</p><p>try&#x2F;except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。</p><p>如果你不想在异常发生时结束你的程序，只需在try里捕获它。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fo = <span class="built_in">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(fo.name)</span><br><span class="line">        <span class="built_in">print</span>(fo.mode)</span><br><span class="line">        <span class="built_in">print</span>(fo.encoding)</span><br><span class="line"></span><br><span class="line">        fo.write(<span class="string">&quot;这是一个请开个&quot;</span>)</span><br><span class="line">        fo.write(<span class="string">&quot;www.runoob.com!\nVery good site!\n&quot;</span>)</span><br><span class="line">        fo.close()</span><br><span class="line">        read = fo.read()</span><br><span class="line">        <span class="built_in">print</span>(read)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> message:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;出现异常&quot;</span>, message.args)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无异常&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 不管发生什么都需要执行的代码</span></span><br></pre></td></tr></table></figure><h1 id="面向对象技术"><a href="#面向对象技术" class="headerlink" title="面向对象技术"></a>面向对象技术</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:</span><br><span class="line">   <span class="string">&#x27;类的帮助信息&#x27;</span>   <span class="comment">#类文档字符串</span></span><br><span class="line">   class_suite  <span class="comment">#类体</span></span><br></pre></td></tr></table></figure><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">   <span class="string">&#x27;所有员工的基类&#x27;</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> <span class="comment"># 第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</span></span><br><span class="line"><span class="comment"># self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayCount</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span> <span class="string">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayEmployee</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;Name : &quot;</span>, self.name,  <span class="string">&quot;, Salary: &quot;</span>, self.salary</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="self代表类的实例，而非类"><a href="#self代表类的实例，而非类" class="headerlink" title="self代表类的实例，而非类"></a><strong>self代表类的实例，而非类</strong></h3><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p><p><strong>而 <code>__self.class__ </code>则指向类。</strong></p><h2 id="继承类—-类的继承"><a href="#继承类—-类的继承" class="headerlink" title="继承类—-类的继承"></a>继承类—-类的继承</h2><p>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。</p><p>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>，被继承的类称为<strong>基类</strong>、<strong>父类</strong>或<strong>超类</strong>。</p><p><strong>继承语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class 派生类名(基类名)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>在python中继承中的一些特点：</p><ul><li>1、如果在子类中需要父类的构造方法就需要显式的调用父类的构造方法，或者不重写父类的构造方法。</li><li>2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数</li><li>3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。</li></ul><p>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。</p><p><strong>语法：</strong></p><p>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubClassName</span> (ParentClass1[, ParentClass2, ...]):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="类属性和方法"><a href="#类属性和方法" class="headerlink" title="类属性和方法"></a>类属性和方法</h2><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>在类的内部，使用 <strong>def</strong> 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数</p><h3 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h3><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 <strong>self.__private_methods</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JustCounter</span>:</span><br><span class="line">    __secretCount = <span class="number">0</span>  <span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span>    <span class="comment"># 公开变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        self.__secretCount += <span class="number">1</span></span><br><span class="line">        self.publicCount += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> self.__secretCount</span><br><span class="line"> </span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()</span><br><span class="line">counter.count()</span><br><span class="line"><span class="built_in">print</span> counter.publicCount</span><br><span class="line"><span class="built_in">print</span> counter.__secretCount  <span class="comment"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure><p>Python不允许实例化的类访问私有数据，但你可以使用 **<code>object._className__attrName</code>**（ <strong><code>对象名._类名__私有属性名</code></strong> ）访问属性</p><h3 id="单下划线、双下划线、头尾双下划线说明："><a href="#单下划线、双下划线、头尾双下划线说明：" class="headerlink" title="单下划线、双下划线、头尾双下划线说明："></a>单下划线、双下划线、头尾双下划线说明：</h3><ul><li><code>__foo__</code>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong><strong>init</strong>()</strong> 之类的。</li><li><strong><code>_foo</code></strong>:以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 <strong>from module import *</strong></li><li><strong><code>__foo</code></strong>: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</li></ul><p>通过使用get&#x2F;set__私有属性 ，来操作私有属性， 而不是直接通过类名来操作 。这样符合类的操作规范</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="print输出相关"><a href="#print输出相关" class="headerlink" title="print输出相关"></a>print输出相关</h2><p>如果输出的数据类型是基本类型 ，也就是 int 、float 、 complex等等。 那么就不能用字符串拼接的方法输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count确定是int类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素21在元组中出现的次数: &quot;</span>, count)  <span class="comment"># 不能用 + 来连接</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快速生成变量名</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + V</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS and BFS</title>
      <link href="/post/d8fb5528.html"/>
      <url>/post/d8fb5528.html</url>
      
        <content type="html"><![CDATA[<p><strong>两种实现都是基于邻接表</strong></p><h1 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS(深度优先搜索)"></a>DFS(深度优先搜索)</h1><p><strong>深度优先遍历是一种优先走到底、无路可走再回头的遍历方式</strong>。具体地，从某个顶点出发，访问当前顶点的某个邻接顶点，直到走到尽头时返回，再继续走到尽头并返回，以此类推，直至所有顶点遍历完成。</p><p><img src="/images/image-20230425185250331.png" alt="image-20230425185250331"></p><p>这种算法一般我们可以用递归实现 ，也可以用栈实现。同样的， 我们需要接著一个辅助数组来记录我们已经访问过的顶点。</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="comment">// 邻接表，key: 顶点，value：该顶点的所有邻接顶点</span></span><br><span class="line">    Map&lt;Vertex, List&lt;Vertex&gt;&gt; adjList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化邻接表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges 两顶点之间的边的关系， edges中的数代表顶点上的数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(Vertex[][] edges)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.adjList = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加顶点</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex[] edge  : edges)&#123;</span><br><span class="line">            addVertex(edge[<span class="number">0</span>]);</span><br><span class="line">            addVertex(edge[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//添加边</span></span><br><span class="line">            addAdjMat(edge[<span class="number">0</span>],edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加两个顶点之间的关系， 也就是添加边的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item0 顶点0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item1 顶点1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addAdjMat</span><span class="params">(Vertex item0, Vertex item1)</span> &#123;</span><br><span class="line">        <span class="comment">//首先判断两个顶点是否存在， 如果不存在就不能添加边的关系</span></span><br><span class="line">        <span class="keyword">if</span> (!adjList.containsKey(item0) || !adjList.containsKey(item1) || item0 == item1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;其中一个顶点不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!adjList.get(item0).contains(item1))&#123;</span><br><span class="line">            adjList.get(item0).add(item1);</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">if</span> (!adjList.get(item1).contains(item0))&#123;</span><br><span class="line">            adjList.get(item1).add(item0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加点 ，并且需要将扩展顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 顶点val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addVertex</span><span class="params">(Vertex item)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断顶点是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(adjList.containsKey(item))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        adjList.put(item,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除顶点 ，同时需要删除所有有关它的边的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 顶点的所有边的关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeVertex</span><span class="params">(Vertex val)</span>&#123;</span><br><span class="line">        <span class="comment">//先判断顶点是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!adjList.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;顶点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        adjList.remove(val);</span><br><span class="line">        <span class="comment">//先遍历每个顶点，然后看他里面是否存在val顶点， 存在就删除</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Vertex,List&lt;Vertex&gt;&gt; item : adjList.entrySet())&#123;</span><br><span class="line">           item.getValue().remove(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 打印邻接表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Vertex,List&lt;Vertex&gt;&gt; item : adjList.entrySet())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;key : &quot;</span> + item.getKey() + <span class="string">&quot; value : &quot;</span>);</span><br><span class="line">            List&lt;Vertex&gt; value = item.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Vertex vertex  : value)&#123;</span><br><span class="line">                System.out.print(vertex + <span class="string">&quot;—&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深度优先搜索</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adjList 存储元素的邻接表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 传入遍历的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visited 记录当前节点地日志数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DFS</span><span class="params">(Map&lt;Vertex, List&lt;Vertex&gt;&gt; adjList,Vertex vertex,<span class="type">int</span>[] visited)</span>&#123;</span><br><span class="line">        visited[vertex.val] = <span class="number">1</span>;</span><br><span class="line">        System.out.print(vertex + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        List&lt;Vertex&gt; vertices = adjList.get(vertex);</span><br><span class="line">        Iterator&lt;Vertex&gt; iterator = vertices.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">v</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(visited[v.val] == <span class="number">0</span>)&#123;</span><br><span class="line">                DFS(adjList,v,visited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">4</span>);</span><br><span class="line">        Vertex[][] vertices = <span class="keyword">new</span> <span class="title class_">Vertex</span>[][]&#123;</span><br><span class="line">                &#123;vertex1,vertex3&#125;,</span><br><span class="line">                &#123;vertex3,vertex1&#125;,</span><br><span class="line">                &#123;vertex2,vertex3&#125;,</span><br><span class="line">                &#123;vertex5,vertex1&#125;,</span><br><span class="line">                &#123;vertex4,vertex2&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(vertices);</span><br><span class="line">        graph.addAdjMat(vertex1, vertex5);</span><br><span class="line">        graph.addAdjMat(vertex3, vertex2);</span><br><span class="line">        graph.addAdjMat(vertex2, vertex5);</span><br><span class="line">        graph.addAdjMat(vertex2, vertex4);</span><br><span class="line">        graph.addAdjMat(vertex5, vertex2);</span><br><span class="line">        graph.addAdjMat(vertex5, vertex4);</span><br><span class="line">        graph.addAdjMat(vertex4, vertex5);</span><br><span class="line">        graph.list();</span><br><span class="line">        BFS(graph.adjList,vertex1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        DFS(graph.adjList,vertex1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BFS-广度优先搜索"><a href="#BFS-广度优先搜索" class="headerlink" title="BFS(广度优先搜索)"></a>BFS(广度优先搜索)</h1><p><strong>广度优先遍历是一种由近及远的遍历方式，从距离最近的顶点开始访问，并一层层向外扩张</strong>。具体来说，从某个顶点出发，先遍历该顶点的所有邻接顶点，然后遍历下一个顶点的所有邻接顶点，以此类推，直至所有顶点访问完毕。</p><p><img src="/images/image-20230425190438910.png" alt="image-20230425190438910"></p><p>广度优先搜索，我们使用的是队列来实现。先进先出 ，我们先将一个顶点加入队列， 然后<strong>当他出队列的时候，再将他身边的顶点加入队列。</strong> ，循环往复，直到队列为空， 那么就是将所有的顶点遍历完成。</p><p>同时，我们这里也需要一个辅助数组， 用来记录已经加入队列遍历过的顶点。</p><h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.MARSHAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于邻接表实现图</span></span><br><span class="line"><span class="comment"> * 将顶点用顶点类Vertex 进行封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="comment">// 邻接表，key: 顶点，value：该顶点的所有邻接顶点</span></span><br><span class="line">    Map&lt;Vertex, List&lt;Vertex&gt;&gt; adjList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化邻接表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges 两顶点之间的边的关系， edges中的数代表顶点上的数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(Vertex[][] edges)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.adjList = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加顶点</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex[] edge  : edges)&#123;</span><br><span class="line">            addVertex(edge[<span class="number">0</span>]);</span><br><span class="line">            addVertex(edge[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//添加边</span></span><br><span class="line">            addAdjMat(edge[<span class="number">0</span>],edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加两个顶点之间的关系， 也就是添加边的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item0 顶点0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item1 顶点1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addAdjMat</span><span class="params">(Vertex item0, Vertex item1)</span> &#123;</span><br><span class="line">        <span class="comment">//首先判断两个顶点是否存在， 如果不存在就不能添加边的关系</span></span><br><span class="line">        <span class="keyword">if</span> (!adjList.containsKey(item0) || !adjList.containsKey(item1) || item0 == item1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;其中一个顶点不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!adjList.get(item0).contains(item1))&#123;</span><br><span class="line">            adjList.get(item0).add(item1);</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">if</span> (!adjList.get(item1).contains(item0))&#123;</span><br><span class="line">            adjList.get(item1).add(item0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加点 ，并且需要将扩展顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 顶点val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addVertex</span><span class="params">(Vertex item)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断顶点是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(adjList.containsKey(item))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        adjList.put(item,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除顶点 ，同时需要删除所有有关它的边的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 顶点的所有边的关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeVertex</span><span class="params">(Vertex val)</span>&#123;</span><br><span class="line">        <span class="comment">//先判断顶点是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!adjList.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;顶点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        adjList.remove(val);</span><br><span class="line">        <span class="comment">//先遍历每个顶点，然后看他里面是否存在val顶点， 存在就删除</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Vertex,List&lt;Vertex&gt;&gt; item : adjList.entrySet())&#123;</span><br><span class="line">           item.getValue().remove(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 打印邻接表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Vertex,List&lt;Vertex&gt;&gt; item : adjList.entrySet())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;key : &quot;</span> + item.getKey() + <span class="string">&quot; value : &quot;</span>);</span><br><span class="line">            List&lt;Vertex&gt; value = item.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Vertex vertex  : value)&#123;</span><br><span class="line">                System.out.print(vertex + <span class="string">&quot;—&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现广度优先搜索 暂时规定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adjList 存储元素的邻接表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 传入遍历的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BFS</span><span class="params">(Map&lt;Vertex, List&lt;Vertex&gt;&gt; adjList,Vertex vertex)</span>&#123;</span><br><span class="line">        Deque&lt;Vertex&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> adjList.size();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        Arrays.fill(visited,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//将入队列元素标记。 然后让元素入队列</span></span><br><span class="line">        visited[vertex.val] = <span class="number">1</span>;</span><br><span class="line">        deque.push(vertex);</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">poll</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">            <span class="comment">/*处理方法 */</span></span><br><span class="line">            System.out.print(poll + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            List&lt;Vertex&gt; vertices = adjList.get(poll);</span><br><span class="line">            <span class="keyword">for</span> (Vertex v : vertices)&#123;</span><br><span class="line">                <span class="keyword">if</span> (visited[v.val] != <span class="number">1</span>)&#123;</span><br><span class="line">                    deque.push(v);</span><br><span class="line">                    visited[v.val] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">4</span>);</span><br><span class="line">        Vertex[][] vertices = <span class="keyword">new</span> <span class="title class_">Vertex</span>[][]&#123;</span><br><span class="line">                &#123;vertex1,vertex3&#125;,</span><br><span class="line">                &#123;vertex3,vertex1&#125;,</span><br><span class="line">                &#123;vertex2,vertex3&#125;,</span><br><span class="line">                &#123;vertex5,vertex1&#125;,</span><br><span class="line">                &#123;vertex4,vertex2&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(vertices);</span><br><span class="line">        graph.addAdjMat(vertex1, vertex5);</span><br><span class="line">        graph.addAdjMat(vertex3, vertex2);</span><br><span class="line">        graph.addAdjMat(vertex2, vertex5);</span><br><span class="line">        graph.addAdjMat(vertex2, vertex4);</span><br><span class="line">        graph.addAdjMat(vertex5, vertex2);</span><br><span class="line">        graph.addAdjMat(vertex5, vertex4);</span><br><span class="line">        graph.addAdjMat(vertex4, vertex5);</span><br><span class="line">        graph.list();</span><br><span class="line">        BFS(graph.adjList,vertex1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        DFS(graph.adjList,vertex1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="/images/image-20230425113904576.png" alt="image-20230425113904576"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的基本操作</title>
      <link href="/post/6258529e.html"/>
      <url>/post/6258529e.html</url>
      
        <content type="html"><![CDATA[<h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><p>图是一种非线性数据结构， 由【顶点Vertex】 和 【边Edge】组成。我们可以将图G抽象地表示为一组顶点<strong>V</strong> 和一组边 <strong>E</strong> 地集合。</p><p>如下图就是图地网络关系 和 树 以及链表地区别</p><p><img src="/images/image-20230422111116753.png" alt="image-20230422111116753"></p><p>图与其他数据结构之间的关系我们可以抽象为</p><p><strong>把顶点看作节点， 将边看作各个节点地指针。</strong>， 可以将图看作是一种从链表拓展而来的数据结构。它的复杂度  和 自由度更高。</p><h2 id="图的常见类型"><a href="#图的常见类型" class="headerlink" title="图的常见类型"></a>图的常见类型</h2><p>根据边是否具有方向，可分为<strong>「无向图 Undirected Graph」和「有向图 Directed Graph」</strong></p><p><img src="/images/image-20230422112607922.png" alt="image-20230422112607922"></p><p>根据所有顶点是否联通，<strong>可分为「连通图 Connected Graph」和「非连通图 Disconnected Graph」</strong></p><p>连通图 ： 从一个顶点出发可以到达其余任意顶点。</p><p>非连通图 ：从一个顶点出发 ，至少有一个顶点无法到达。</p><p><img src="/images/image-20230422112820432.png" alt="image-20230422112820432"></p><p>还可以为图添加权重变量， 从未得到<strong>有权图[Weighted Graph]</strong> </p><p><img src="/images/image-20230422112948547.png" alt="image-20230422112948547"></p><h2 id="图的常用术语"><a href="#图的常用术语" class="headerlink" title="图的常用术语"></a>图的常用术语</h2><p>图是由节点（vertices）和边（edges）组成的一种数据结构，常用术语包括：</p><ol><li>有向图（Directed Graph）：每条边都有一个方向，从一个节点指向另一个节点。</li><li>无向图（Undirected Graph）：每条边没有方向，连接两个节点。</li><li>加权图（Weighted Graph）：每条边都有一个权重值，表示两个节点之间的距离、代价等。</li><li>连通图（Connected Graph）：图中的任意两个节点都可以通过路径相连。</li><li>子图（Subgraph）：一个图的一部分，包含一些节点和它们之间的边。</li><li>点的度数（Degree）：指与该节点相连的边的数目。</li><li><strong>路径（Path）：</strong>连接两个节点的一系列边构成的序列。</li><li>环（Cycle）：路径的起点和终点相同的路径。</li><li>连通分量（Connected Component）：无向图中的极大连通子图。</li><li>强连通分量（Strongly Connected Component）：有向图中的极大强连通子图。</li><li><strong>度（Degree）：</strong> 表示一个顶点所拥有的边数，对于有向图， 那么描述变数就需要使用下面的两个出入度。</li><li><strong>入度（In-degree）：有向图</strong>中指向一个节点的边的数目。</li><li><strong>出度（Out-degree）：有向图</strong>中从一个节点出发的边的数目。</li><li><strong>邻居（Neighbor）&#x2F;邻接Adjacency：</strong>指与一个节点相连的其他节点。</li><li>序列（Sequence）：一个节点序列，其中每个节点都与相邻的节点相连。</li><li>生成树（Spanning Tree）：一个连通无向图的生成树是一个无环连通子图，包含所有节点，且仅有n-1条边。</li></ol><h2 id="图的表示方法"><a href="#图的表示方法" class="headerlink" title="图的表示方法"></a>图的表示方法</h2><h3 id="邻接矩阵："><a href="#邻接矩阵：" class="headerlink" title="邻接矩阵："></a>邻接矩阵：</h3><p>设图的顶点数量为 n ，<strong>「邻接矩阵 Adjacency Matrix」</strong>使用一个 n×n 大小的矩阵来表示图，<code>每一行（列）代表一个顶点，矩阵元素代表边，用 1 或 0 表示两个顶点之间是否存在边。</code></p><p>如下图所示，设邻接矩阵为 M 、顶点列表为 N ，那么矩阵元素<code>M[i][j]</code>&#x3D;1 表示顶点 <code>V[i]</code>到顶点 <code>V[j]</code> 之间存在边，反之<code>M[i][j]</code>&#x3D; 0 表示两顶点之间无边。</p><p><img src="/images/image-20230422114024968.png" alt="image-20230422114024968"></p><ul><li><p><strong>对角线无意义。</strong></p></li><li><p>如果将矩阵中的数字换成其他数字， 那么就相当于<strong>权重</strong></p></li><li><p>对于邻接矩阵表示图时， 它的curd操作时间复杂度非常低， 都是O（1）。但是空间复杂度非常高，因为要构造邻接矩阵 ，所以未O（n2）</p></li></ul><h3 id="邻接表-："><a href="#邻接表-：" class="headerlink" title="邻接表 ："></a>邻接表 ：</h3><p>使用邻接表法和 hash表有异曲同工之妙 。都是通过链表来实现。</p><p><strong>「邻接表 Adjacency List」使用 n 个链表来表示图，链表节点表示顶点。第 i条链表对应顶点 i ，其中存储了该顶点的所有邻接顶点（即与该顶点相连的顶点）。</strong></p><p><img src="/images/image-20230422114657889.png" alt="image-20230422114657889"></p><p>它相较于邻接矩阵最大的优点就是他存储的内容都是有用的， 而不是像邻接矩阵那样都存储。</p><p>同时，邻接表我们可以进行优化， 将链表过长的部分像hash表那样转换为红黑树。从而可以将时间效率从O(n)—-&gt; O(log n)</p><h2 id="基于邻接矩阵的实现"><a href="#基于邻接矩阵的实现" class="headerlink" title="基于邻接矩阵的实现"></a>基于邻接矩阵的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于邻接矩阵实现图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GraphAdjMat</span> &#123;</span><br><span class="line">    <span class="comment">//定义邻接矩阵</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; AdjMat;</span><br><span class="line">    <span class="comment">//定义顶点列表</span></span><br><span class="line">    List&lt;Integer&gt; vertices;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器，对邻接矩阵进行初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges edges 元素代表顶点索引，即对应 vertices 元素索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Vertices 传入的顶点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GraphAdjMat</span><span class="params">(<span class="type">int</span>[][] edges , <span class="type">int</span>[] Vertices)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 先new矩阵 和 列表 对象 (初始化空间)</span></span><br><span class="line">        AdjMat = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        vertices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2. 对顶点列表进行赋值,同时扩展矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : Vertices)&#123;</span><br><span class="line">            addAdjMat(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 添加边 .其中的edges中的元素为矩阵中为</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">            addEdge(e[<span class="number">0</span>], e[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 实现元素顶点列的元素添加， 同时对矩阵进行扩展</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAdjMat</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> vertices.size();</span><br><span class="line">        vertices.add(val);</span><br><span class="line">        <span class="comment">//在矩阵中添加一行</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            list.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        AdjMat.add(list);</span><br><span class="line">        <span class="comment">//在矩阵中添加一列</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; row : AdjMat)&#123;</span><br><span class="line">            row.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 对矩阵进行赋值 ，其中 m、n 代表vertices的索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> m , <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//需要对数组下表越界 以及对角线的情况进行处理</span></span><br><span class="line">        <span class="keyword">if</span>(m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || m &gt; vertices.size() || n &gt; vertices.size() || m == n)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;数组下标越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        AdjMat.get(m).set(n,<span class="number">1</span>);</span><br><span class="line">        AdjMat.get(n).set(m,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除边 ， 就是删除个顶点之间的边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m 该顶点对应vertices中元素的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 另一个顶点对应vertices中元素的索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAdjMat</span><span class="params">(<span class="type">int</span> m ,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//还是需要考虑数组下标越界情况</span></span><br><span class="line">        <span class="keyword">if</span>(m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || m &gt; vertices.size() || n &gt; vertices.size() || m == n)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;数组下标越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改两个顶点的连线</span></span><br><span class="line">        AdjMat.get(m).set(n,<span class="number">0</span>);</span><br><span class="line">        AdjMat.get(n).set(m,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的顶点 ，需要同时删除矩阵中顶点对应的row and lie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 元素在vertices中的索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeVertices</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//判断下标是否越界</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; vertices.size())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;数组下标越界， 无法删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        vertices.remove(index);</span><br><span class="line">        <span class="comment">//删除矩阵中对应的row and lie</span></span><br><span class="line">        AdjMat.remove(index);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; row : AdjMat)&#123;</span><br><span class="line">            row.remove(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 打印矩阵</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;顶点列表....&quot;</span>);</span><br><span class="line">        vertices.forEach(System.out::print);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;矩阵....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; AdjMat.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; AdjMat.get(i).size(); j++) &#123;</span><br><span class="line">                System.out.print(AdjMat.get(i).get(j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] vertices = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[][] edges = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>,<span class="number">3</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">GraphAdjMat</span> <span class="variable">graphAdjMat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphAdjMat</span>(edges,vertices);</span><br><span class="line">        graphAdjMat.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230422130043149.png" alt="image-20230422130043149"></p><h2 id="基于邻接表的实现"><a href="#基于邻接表的实现" class="headerlink" title="基于邻接表的实现"></a>基于邻接表的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.MARSHAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于邻接表实现图</span></span><br><span class="line"><span class="comment"> * 将顶点用顶点类Vertex 进行封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="comment">// 邻接表，key: 顶点，value：该顶点的所有邻接顶点</span></span><br><span class="line">    Map&lt;Vertex, List&lt;Vertex&gt;&gt; adjList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化邻接表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges 两顶点之间的边的关系， edges中的数代表顶点上的数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(Vertex[][] edges)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.adjList = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加顶点</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex[] edge  : edges)&#123;</span><br><span class="line">            addVertex(edge[<span class="number">0</span>]);</span><br><span class="line">            addVertex(edge[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//添加边</span></span><br><span class="line">            addAdjMat(edge[<span class="number">0</span>],edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加两个顶点之间的关系， 也就是添加边的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item0 顶点0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item1 顶点1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addAdjMat</span><span class="params">(Vertex item0, Vertex item1)</span> &#123;</span><br><span class="line">        <span class="comment">//首先判断两个顶点是否存在， 如果不存在就不能添加边的关系</span></span><br><span class="line">        <span class="keyword">if</span> (!adjList.containsKey(item0) || !adjList.containsKey(item1) || item0 == item1)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;其中一个顶点不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!adjList.get(item0).contains(item1))&#123;</span><br><span class="line">            adjList.get(item0).add(item1);</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">if</span> (!adjList.get(item1).contains(item0))&#123;</span><br><span class="line">            adjList.get(item1).add(item0);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加点 ，并且需要将扩展顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 顶点val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addVertex</span><span class="params">(Vertex item)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断顶点是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(adjList.containsKey(item))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        adjList.put(item,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除顶点 ，同时需要删除所有有关它的边的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 顶点的所有边的关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeVertex</span><span class="params">(Vertex val)</span>&#123;</span><br><span class="line">        <span class="comment">//先判断顶点是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!adjList.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;顶点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        adjList.remove(val);</span><br><span class="line">        <span class="comment">//先遍历每个顶点，然后看他里面是否存在val顶点， 存在就删除</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Vertex,List&lt;Vertex&gt;&gt; item : adjList.entrySet())&#123;</span><br><span class="line">           item.getValue().remove(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 打印邻接表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Vertex,List&lt;Vertex&gt;&gt; item : adjList.entrySet())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;key : &quot;</span> + item.getKey() + <span class="string">&quot; value : &quot;</span>);</span><br><span class="line">            List&lt;Vertex&gt; value = item.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Vertex vertex  : value)&#123;</span><br><span class="line">                System.out.print(vertex + <span class="string">&quot;—&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">vertex4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="number">4</span>);</span><br><span class="line">        Vertex[][] vertices = <span class="keyword">new</span> <span class="title class_">Vertex</span>[][]&#123;</span><br><span class="line">                &#123;vertex1,vertex3&#125;,</span><br><span class="line">                &#123;vertex3,vertex1&#125;,</span><br><span class="line">                &#123;vertex2,vertex3&#125;,</span><br><span class="line">                &#123;vertex5,vertex1&#125;,</span><br><span class="line">                &#123;vertex4,vertex2&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(vertices);</span><br><span class="line">        graph.addAdjMat(vertex1, vertex5);</span><br><span class="line">        graph.addAdjMat(vertex3, vertex2);</span><br><span class="line">        graph.addAdjMat(vertex2, vertex5);</span><br><span class="line">        graph.addAdjMat(vertex2, vertex4);</span><br><span class="line">        graph.addAdjMat(vertex5, vertex2);</span><br><span class="line">        graph.addAdjMat(vertex5, vertex4);</span><br><span class="line">        graph.addAdjMat(vertex4, vertex5);</span><br><span class="line">        graph.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230422140458483.png" alt="image-20230422140458483"></p><h2 id="两者效率比较："><a href="#两者效率比较：" class="headerlink" title="两者效率比较："></a>两者效率比较：</h2><p>设图中共有 m 个顶点和 n 条边，下表为邻接矩阵和邻接表的时间和空间效率对比。</p><p><img src="/images/image-20230422140636011.png" alt="image-20230422140636011"></p><p>观察上表，似乎邻接表（哈希表）的时间与空间效率最优。但实际上，在邻接矩阵中操作边的效率更高，只需要一次数组访问或赋值操作即可。综合来看，<strong>邻接矩阵体现了“以空间换时间”的原则，而邻接表体现了“以时间换空间”的原则。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>买卖股票系列</title>
      <link href="/post/9e7c24ab.html"/>
      <url>/post/9e7c24ab.html</url>
      
        <content type="html"><![CDATA[<p><strong>本篇主要详细学习买卖股票的最佳时机系列的题目</strong></p><h1 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h1><p><strong>题目：</strong></p><blockquote><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><p>示例 1：<br>输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</p><p>示例 2：<br>输入：prices &#x3D; [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>前面我们已经做了一道树形dp的题目， 所以我们的思路就可以往这方面靠一下。</p><p>回归到题目 本身， 他需要<code>从这笔交易中获取的最大利润</code> ,而我们就需要再相对最小的价格时买入 ，在相对最大的价格时卖出。这样的到的利润才是最大 。为什么是用相对， 因为我们不能再买入前就卖出， 这不符合逻辑 也不符合题意。</p><p>直接用dp的思路来思考。</p><p>他要的是最大利润， 利润就是我们所获得的现金， 而我们<strong>所获得的现金就是买入后自己钱包所剩的现金 + 卖出后我们获得的现金。</strong></p><p>用两个空间来记录我们买入股票时的现金数 ，和 卖出股票时的现金数</p><p>所以我们就可以用一个二维数组来记录我们收获的现金</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] : 第i天时，持有股票时 ，我们所拥有的最大现金 为dp[i][<span class="number">0</span>]</span><br><span class="line">dp[i][<span class="number">1</span>] : 第i天时，不持有股票时， 我们所拥有的最大现金为dp[i][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>持有股票</strong>我们可以**分为两种情况： **</p><ul><li><strong>再第i天之前，我们已经买入了股票， 今天(第i天)我们继续持有</strong></li><li><strong>今天（第i天），买入股票</strong></li></ul><p>这两种状态， 我们都可以作为持有股票</p><p>同样的<strong>不持有股票， 我们也可以分为两种情况：</strong></p><ul><li><strong>再第i天之前 就不持有， 今天(第i天)也不持有</strong></li><li><strong>今天（第i天） ，把股票买了</strong></li></ul><p>所以根据上述我们的思路，就可以得出dp式</p><ol><li>dp含义</li></ol><p>正如前面的递推 ，dp含义就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] : 第i天时，持有股票时 ，我们所拥有的最大现金 为dp[i][<span class="number">0</span>]</span><br><span class="line">dp[i][<span class="number">1</span>] : 第i天时，不持有股票时， 我们所拥有的最大现金为dp[i][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>dp公式</li></ol><p>因为dp的含义是得到最大现金 ， 而我们只有每一步都是得到最大值 ，那么我们的结果才是最大的。</p><p>推导方程就是我们之前的持有股票 和 不持有股票的两种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], prices[i] + dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><ol start="3"><li>dp初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>]; <span class="comment">//第一天我们持有股票 那么一定是当天买入</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//第一天我们不持有股票 获得的最大现金就一定是 0 ，因为我们本来的现金默认就是0 ，没买自然没欠钱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>dp遍历顺序</li></ol><p>从递推公式可以看出dp[i]都是由dp[i - 1]推导出来的，那么一定是从前向后遍历。</p><ol start="5"><li>打印dp</li></ol><table><thead><tr><th>天数</th><th>持有股票的最大现金</th><th>不持有股票的最大现金</th></tr></thead><tbody><tr><td>0</td><td>-7</td><td>0</td></tr><tr><td>1</td><td>-1</td><td>0</td></tr><tr><td>2</td><td>-1</td><td>4</td></tr><tr><td>3</td><td>-1</td><td>4</td></tr><tr><td>4</td><td>-1</td><td>5</td></tr><tr><td>5</td><td>-1</td><td>5</td></tr></tbody></table><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="买卖股票的最佳时机II"><a href="#买卖股票的最佳时机II" class="headerlink" title="买卖股票的最佳时机II"></a>买卖股票的最佳时机II</h1><p><strong>题目：</strong></p><blockquote><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:<br>输入: [7,1,5,3,6,4]<br>输出: 7<br>解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4。随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</p><p>示例 2:<br>输入: [1,2,3,4,5]<br>输出: 4<br>解释: 在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p><p>示例 3:<br>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><p>提示：</p><ul><li>1 &lt;&#x3D; prices.length &lt;&#x3D; 3 * 10 ^ 4</li><li>0 &lt;&#x3D; prices[i] &lt;&#x3D; 10 ^ 4</li></ul></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>这道题相比于之前的题目最大的区别就是 <strong>你可以尽可能地完成更多的交易（多次买卖一支股票）。</strong></p><p>但是题目的条件也很明确 ： <code>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</code></p><p>也就是我们可以买卖完一支股票之后 ，还可以再进行买卖其他的股票。 </p><p>思路和上道题 是一摸一样的 ，唯一有区别的就是我们<strong>持有股票时的最大的现金的两种情况需要发生变化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//持有股票有两种情况</span></span><br><span class="line"><span class="comment">//1. 之前就持有 ，那么现在继续持有    </span></span><br><span class="line"><span class="comment">//2. 当前买入 ，但是必须将手头的股票卖掉</span></span><br><span class="line">dp[i][<span class="number">0</span>]  = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>] , dp[i-<span class="number">1</span>][<span class="number">1</span>] - prices[i]);<span class="comment">//因为不能再同一天出售 ，所以我们就必须在前一天出售调股票，所以就是前一天不持有股票的最大现金 - 今天的股票价格</span></span><br></pre></td></tr></table></figure><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];     <span class="comment">// 创建二维数组存储状态</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;                   <span class="comment">// 初始状态</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);    <span class="comment">// 第 i 天，没有股票</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);    <span class="comment">// 第 i 天，持有股票</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];    <span class="comment">// 卖出股票收益高于持有股票收益，因此取[0]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="买卖股票的最佳时机III"><a href="#买卖股票的最佳时机III" class="headerlink" title="买卖股票的最佳时机III"></a>买卖股票的最佳时机III</h1><p><strong>题目：</strong> </p><blockquote><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1: 输入：prices &#x3D; [3,3,5,0,0,3,1,4] 输出：6 解释：在第 4 天（股票价格 &#x3D; 0）的时候买入，在第 6 天（股票价格 &#x3D; 3）的时候卖出，这笔交易所能获得利润 &#x3D; 3-0 &#x3D; 3 。随后，在第 7 天（股票价格 &#x3D; 1）的时候买入，在第 8 天 （股票价格 &#x3D; 4）的时候卖出，这笔交易所能获得利润 &#x3D; 4-1 &#x3D; 3。</p><p>示例 2： 输入：prices &#x3D; [1,2,3,4,5] 输出：4 解释：在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p><p>示例 3： 输入：prices &#x3D; [7,6,4,3,1] 输出：0 解释：在这个情况下, 没有交易完成, 所以最大利润为0。</p><p>示例 4： 输入：prices &#x3D; [1] 输出：0</p><p>提示：</p><ul><li>1 &lt;&#x3D; prices.length &lt;&#x3D; 10^5</li><li>0 &lt;&#x3D; prices[i] &lt;&#x3D; 10^5</li></ul></blockquote><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>本题， 他要求最多可以完成两笔交易 。</p><p>那么相较于之前的题目 ，我们需要记录两次交易的状态。</p><p>所以dp数组的宽度就需要扩大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] 无操作 直接设置为 <span class="number">0</span> 即可</span><br><span class="line">dp[i][<span class="number">1</span>] : 第i天时，第一次所持有股票时 ，我们所拥有的最大现金 为dp[i][<span class="number">1</span>]</span><br><span class="line">dp[i][<span class="number">2</span>] : 第i天时，第一次不持有股票时， 我们所拥有的最大现金为dp[i][<span class="number">2</span>]</span><br><span class="line">dp[i][<span class="number">3</span>] : 第i天时，第二次所持有股票时 ，我们所拥有的最大现金 为dp[i][<span class="number">3</span>]</span><br><span class="line">dp[i][<span class="number">4</span>] : 第i天时，第二次不持有股票时， 我们所拥有的最大现金为dp[i][<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>那么得到的状态也都是相应的有两种状态</p><p><img src="/images/image-20230417193953398.png" alt="image-20230417193953398"></p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 定义 5 种状态:</span></span><br><span class="line"><span class="comment">         * 0: 没有操作, 1: 第一次买入, 2: 第一次卖出, 3: 第二次买入, 4: 第二次卖出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 初始化第二次买入的状态是确保 最后结果是最多两次买卖的最大利润</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i][<span class="number">2</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">4</span>], dp[i][<span class="number">3</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="买卖股票的最佳时机IV"><a href="#买卖股票的最佳时机IV" class="headerlink" title="买卖股票的最佳时机IV"></a>买卖股票的最佳时机IV</h1><p><strong>题目 ：</strong></p><blockquote><p>给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1： 输入：k &#x3D; 2, prices &#x3D; [2,4,1] 输出：2 解释：在第 1 天 (股票价格 &#x3D; 2) 的时候买入，在第 2 天 (股票价格 &#x3D; 4) 的时候卖出，这笔交易所能获得利润 &#x3D; 4-2 &#x3D; 2。</p><p>示例 2： 输入：k &#x3D; 2, prices &#x3D; [3,2,6,5,0,3] 输出：7 解释：在第 2 天 (股票价格 &#x3D; 2) 的时候买入，在第 3 天 (股票价格 &#x3D; 6) 的时候卖出, 这笔交易所能获得利润 &#x3D; 6-2 &#x3D; 4。随后，在第 5 天 (股票价格 &#x3D; 0) 的时候买入，在第 6 天 (股票价格 &#x3D; 3) 的时候卖出, 这笔交易所能获得利润 &#x3D; 3-0 &#x3D; 3 。</p><p>提示：</p><ul><li>0 &lt;&#x3D; k &lt;&#x3D; 100</li><li>0 &lt;&#x3D; prices.length &lt;&#x3D; 1000</li><li>0 &lt;&#x3D; prices[i] &lt;&#x3D; 1000</li></ul></blockquote><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>这道题的实现  和上一道题唯一的区别就是他把 2 换成了 k ，所以我们在定义状态的时候 需要定义 k 个状态。</p><p>使用二维数组 <code>dp[i][j]</code> ：第i天的状态为j，所剩下的最大现金是<code>dp[i][j]</code></p><p>j的状态表示为：</p><ul><li>0 表示不操作</li><li>1 第一次买入</li><li>2 第一次卖出</li><li>3 第二次买入</li><li>4 第二次卖出</li><li>…..</li></ul><p>从上述的推导中 ，我们可以看出， 好像奇数次 都是在买入 。 偶数次都是在卖出。</p><p>那么根据这个规律 ，我们就可以推导出剩下的代码了</p><p>**初始化： ** 所有的卖入都初始化为 -prices[i]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = -prices[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**递推公式： **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span> * k - <span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//奇数次</span></span><br><span class="line">    dp[i][j + <span class="number">1</span>] = max(dp[i - <span class="number">1</span>][j + <span class="number">1</span>], dp[i - <span class="number">1</span>][j] - prices[i]);</span><br><span class="line">    <span class="comment">//偶数次</span></span><br><span class="line">    dp[i][j + <span class="number">2</span>] = max(dp[i - <span class="number">1</span>][j + <span class="number">2</span>], dp[i - <span class="number">1</span>][j + <span class="number">1</span>] + prices[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**推导结果： **</p><p><img src="/images/image-20230417194928332.png" alt="image-20230417194928332"></p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[len][k*<span class="number">2</span> + <span class="number">1</span>];      </span><br><span class="line">        <span class="comment">// dp数组的初始化, 与版本一同理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k*<span class="number">2</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = -prices[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; k*<span class="number">2</span> - <span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">                dp[i][j + <span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][j + <span class="number">1</span>], dp[i - <span class="number">1</span>][j] - prices[i]);</span><br><span class="line">                dp[i][j + <span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][j + <span class="number">2</span>], dp[i - <span class="number">1</span>][j + <span class="number">1</span>] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][k*<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打家劫舍篇</title>
      <link href="/post/e86d25dc.html"/>
      <url>/post/e86d25dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="打家劫舍Ⅰ"><a href="#打家劫舍Ⅰ" class="headerlink" title="打家劫舍Ⅰ"></a>打家劫舍Ⅰ</h1><p>题目 ： </p><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><ul><li>示例 1：</li><li>输入：[1,2,3,1]</li><li>输出：4</li></ul><p>解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。  偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</p><ul><li>示例 2：</li><li>输入：[2,7,9,3,1]</li><li>输出：12 解释：偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。  偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</li></ul><p>提示：</p><ul><li>0 &lt;&#x3D; nums.length &lt;&#x3D; 100</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 400</li></ul></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这道题 ，我一开始想到的其实没有那么多，仅仅是想到由局部最大从而得到全局最大，然后思路自然而言就是动态规划 ，因为动态规划的理念是从上一个的结果推导出本次的结果。其实我一开始也想到了贪心，但是由于自己掌握的不够成熟 ，所以就没有用贪心实现。</p><h3 id="dp五部曲"><a href="#dp五部曲" class="headerlink" title="dp五部曲"></a><code>dp</code>五部曲</h3><ol><li><code>dp</code>数组的下标及其含义：</li></ol><p>偷窃下标为 i 的房子所能得到的最大金额为<code>dp[i]</code></p><ol start="2"><li>初始化dp数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果偷窃下标为 0 的 那么得到的最大金额一定为 nums[0]</span></span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><ol start="3"><li>确定dp公式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于dp数组来说 ，它的含义就是得到最大金额</span></span><br><span class="line"><span class="comment">//然后我们还有限制条件， 那就是不能偷相邻的房屋 ，所以我们就需要比较偷当前的房子所得的金额大 还是偷下一个房屋得到的金额大</span></span><br><span class="line"></span><br><span class="line">dp[<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br></pre></td></tr></table></figure><p>这一步挺关键的，那就是考虑怎么偷 ，所以我们在初始化的过程中还要考虑偷第一个还是偷第二个</p><p>所以初始化还需要执行一步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ol start="4"><li>确定dp的遍历顺序</li></ol><p>在本题中，遍历顺序就显得没有之前的考虑的多了，我们只需要将nums数组遍历完即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i&lt; nums.length;i++)&#123;</span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>打印dp数组</li></ol><p>如果我们写的逻辑没有问题 ，但是最后答案出现偏差。那么此时就需要打印dp数组，看看那一步没有按照我们的逻辑来。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打家劫舍Ⅱ"><a href="#打家劫舍Ⅱ" class="headerlink" title="打家劫舍Ⅱ"></a>打家劫舍Ⅱ</h1><p>题目  ：</p><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。</p><p>示例 1：</p><p>输入：nums &#x3D; [2,3,2] 输出：3 解释：你不能先偷窃 1 号房屋（金额 &#x3D; 2），然后偷窃 3 号房屋（金额 &#x3D; 2）, 因为他们是相邻的。</p><p>示例 2： 输入：nums &#x3D; [1,2,3,1] 输出：4 解释：你可以先偷窃 1 号房屋（金额 &#x3D; 1），然后偷窃 3 号房屋（金额 &#x3D; 3）。偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</p><p>示例 3： 输入：nums &#x3D; [0] 输出：0</p><p>提示：</p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 100</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 1000</li></ul></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>​本题关键点<code>所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</code> 那么我们就不能单纯按照Ⅰ 的方式去解。</p><p>​既然他将所有的房屋都连在一起 ，那么我们可以假设出一个分割线 ，通过这个分割线比较两边偷的金额，然后我们取最大值就可以了</p><p>**分割线左边 ： **排除第一个房子我们得到的最大金额为dp[i]</p><p>**分割线右边 ： **排除最后一个房子我们得到的最大金额为dp[i]</p><h3 id="dp五部曲-1"><a href="#dp五部曲-1" class="headerlink" title="dp五部曲"></a><code>dp</code>五部曲</h3><ol><li><code>dp</code>数组的下标及其含义：</li></ol><p>偷窃下标为 i 的房子所能得到的最大金额为<code>dp[i]</code></p><ol start="2"><li>初始化dp数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果偷窃下标为 0 的 那么得到的最大金额一定为 nums[0]</span></span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><ol start="3"><li>确定dp公式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于dp数组来说 ，它的含义就是得到最大金额</span></span><br><span class="line"><span class="comment">//然后我们还有限制条件， 那就是不能偷相邻的房屋 ，所以我们就需要比较偷当前的房子所得的金额大 还是偷下一个房屋得到的金额大</span></span><br><span class="line"></span><br><span class="line">dp[<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br></pre></td></tr></table></figure><p>这一步挺关键的，那就是考虑怎么偷 ，所以我们在初始化的过程中还要考虑偷第一个还是偷第二个</p><p>所以初始化还需要执行一步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ol start="4"><li>确定dp的遍历顺序</li></ol><p>在本题中，遍历顺序就显得没有之前的考虑的多了，我们只需要将nums数组遍历完即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i&lt; nums.length;i++)&#123;</span><br><span class="line">dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终代码实现"><a href="#最终代码实现" class="headerlink" title="最终代码实现"></a>最终代码实现</h2><p>以力扣的实现为例 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> range(nums, <span class="number">0</span> , nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> range(nums, <span class="number">1</span>, nums.length);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">range</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin == end- <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[begin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    </span><br><span class="line">        dp[begin] = nums[begin];</span><br><span class="line">        dp[begin + <span class="number">1</span>] = Math.max(nums[begin],nums[begin + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin + <span class="number">2</span>;i &lt; end;i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[end - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打家劫舍Ⅲ"><a href="#打家劫舍Ⅲ" class="headerlink" title="打家劫舍Ⅲ"></a>打家劫舍Ⅲ</h1><p>题目 ：</p><blockquote><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210223173849619.png" alt="337.打家劫舍III"></p></blockquote><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>这道题与前面最大的区别就是数据结构使用是树形结构。所以这类题 被称为树形dp。</p><p>思路还是一样的，就是不能偷相邻的房子 <strong>，对于树形结构的相邻的房子就是父节点 和 它的两个孩子节点 ，但是兄弟节点之间确是没有相邻。</strong></p><p>我们需要先知道它的子节点的大小 ，从而来判断 是否偷当前节点 。所以就需要用后序遍历 ，因为只有这样我们才能先得到子节点 ，然后得到父节点</p><h3 id="dp选型"><a href="#dp选型" class="headerlink" title="dp选型"></a>dp选型</h3><p><strong>基于递归逻辑使用动归</strong></p><p>对于这种类型的题 ，我们的dp数组要做的不仅仅是得到最终的结果 ，还有就是记录每个节点的状态。</p><p>dp[0]  : 表示 不偷当前节点所得到的最大金额为dp[0]</p><p>dp[1]  : 表示 偷当前节点所得到的最大金额为dp[1]</p><ol><li>递归的函数 及其参数</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里我们只需要用到dp[0] and dp[1]来记录状态及得到结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] robot(TreeNode root)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>确定递归终止条件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>确定递归逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> left[] = robot(root.left);</span><br><span class="line"><span class="type">int</span> right[] = robot(root.right);</span><br><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> root.val;</span><br><span class="line"><span class="comment">//1. 偷当前节点</span></span><br><span class="line">dp[<span class="number">0</span>] = val + left[<span class="number">0</span>]  + right[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//2， 不偷当前节点</span></span><br><span class="line"><span class="comment">//那么就从两个子节点之中选择 一个</span></span><br><span class="line">dp[<span class="number">1</span>] = Math.max(left[<span class="number">0</span>],left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> Math.max(dp[<span class="number">0</span>],dp[<span class="number">1</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//首先定义dp数组为函数的含义</span></span><br><span class="line">        <span class="type">int</span>[] dp = robot(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[<span class="number">0</span>],dp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dp数组的作用就是每个节点的状态 ， 索引为 0 代表不偷当前节点得到的最大金钱为dp[0]</span></span><br><span class="line">    <span class="comment">// 索引为1 代表投当前节点得到的最大金钱为 dp[1]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] robot(TreeNode root)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> root.val;</span><br><span class="line">        <span class="type">int</span>[] left = robot(root.left);</span><br><span class="line">        <span class="type">int</span>[] right = robot(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果偷当前节点 ，那么就不偷它的子节点</span></span><br><span class="line">        val = val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//如果不偷当前节点的钱， 那么就从它的子节点中找出最大的金钱数去偷一个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">val1</span> <span class="operator">=</span> Math.max(left[<span class="number">0</span>],left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;val1,val&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程</title>
      <link href="/post/c2ca7a91.html"/>
      <url>/post/c2ca7a91.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h1><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><ul><li>就是为了完成特定的任务，用某种语言编写的一组指令的集合。简单的说就是我们写的代码</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li><strong>进程是指运行中的程序</strong>，比如<code>QQ</code>，就启动了一个进程，<strong>操作系统就会为该进程分配内存空间</strong>。<strong>当我们使用其他程序的时候，就又启动了一个进程</strong>，操作系统就会为其他进程分配新的内存空间</li><li><strong>进程是程序的一次执行过程，或者是正在运行的一个程序。</strong></li><li><strong>是一个动态的过程，有他自身的产生、存在和消亡的过程</strong></li></ul><p>下面就是几个进程</p><p><img src="/images/image-20230410204839968.png" alt="image-20230410204839968"></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>线程是由进程创建的，是进程的一个实体</li><li>一个进程可以拥有多个线程，如下图【同一个应用迅雷 下载多个内容，就产生多个线程】</li></ul><p><img src="/images/image-20230410205001638.png" alt="image-20230410205001638"></p><h4 id="多线程："><a href="#多线程：" class="headerlink" title="多线程："></a>多线程：</h4><p>​同一时刻，可以执行多个进程，比如上面的迅雷同时下载多个文件 </p><h4 id="单线程："><a href="#单线程：" class="headerlink" title="单线程："></a>单线程：</h4><p>同一时刻，只允许执行一个线程</p><h4 id="并发"><a href="#并发" class="headerlink" title="并发 : "></a><code>并发 : </code></h4><p> 同一时刻 ， 多个任务交替执行， 造成一种‘貌似同时’ 的错觉， 简单的说，<strong>单核<code>cpu</code>实现的多任务就是并发</strong></p><p><img src="/images/image-20230410205502037.png" alt="image-20230410205502037"></p><p>看上去他们同时进行，但是在任意时间段内，他们都是相互交错执行的</p><p>比如 ： ‘人的大脑一边说话，一边写字 ’</p><h4 id="并行-："><a href="#并行-：" class="headerlink" title="并行 ："></a>并行 ：</h4><p>同一时刻， 多个任务同时执行。<strong>多核<code>cpu</code>可以实现并行</strong></p><p><img src="/images/image-20230410205657962.png" alt="image-20230410205657962"></p><h1 id="线程使用的两种方式"><a href="#线程使用的两种方式" class="headerlink" title="线程使用的两种方式"></a>线程使用的两种方式</h1><ul><li>当一个类继承Thread类， 那么该类就可以当成一个线程</li></ul><h3 id="线程常用的方法"><a href="#线程常用的方法" class="headerlink" title="线程常用的方法"></a>线程常用的方法</h3><p><img src="/images/image-20230411112536858.png" alt="image-20230411112536858"></p><p><img src="/images/image-20230411112709355.png" alt="image-20230411112709355"></p><p><img src="/images/image-20230411115255666.png" alt="image-20230411115255666"></p><h2 id="两种方式的区别"><a href="#两种方式的区别" class="headerlink" title="两种方式的区别"></a>两种方式的区别</h2><ul><li>从java的设计来看， 通过继承Thread或者实现Runnable接口来创建线程<strong>本质上是没有区别的</strong>，他们<strong>都是通过start方法来调用start0 ，然后实现了多线程</strong></li><li>从jdk帮助文档来看， <strong>Thread类本身就实现了Runnable接口</strong></li><li><strong>实现Runnable接口方式更加适合多线程共享一个资源的情况，并且避免了单继承的限制</strong></li></ul><h2 id="一、-继承Thread创建线程"><a href="#一、-继承Thread创建线程" class="headerlink" title="一、 继承Thread创建线程"></a>一、 继承Thread创建线程</h2><ul><li>案例一： 开启一个线程，该线程每隔1秒，在控制台输出一段话</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 创建一个cat对象，可以当作一个线程来使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.start(); <span class="comment">//启动线程 - &gt; 最终会执行cat的run方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//todo 通过重写run方法，来实现自己的业务逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">// 实现了Runnable接口的run方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times));</span><br><span class="line">            <span class="comment">//让其休眠一秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果就是每隔一秒输出一次</p><p><img src="/images/image-20230410212000042.png" alt="image-20230410212000042"></p><h2 id="二、-实现Runnable"><a href="#二、-实现Runnable" class="headerlink" title="二、 实现Runnable"></a>二、 实现Runnable</h2><ul><li><code>java</code>是单继承的，在某些情况下一个类可能已经继承了某个父类，这是再用Thread类方法来创建线程显然是不可能了</li><li><code>java</code>设计者们就想出了另一个创建线程的方法，就是通过实现Runnable接口来创建线程</li></ul><h4 id="实现案例："><a href="#实现案例：" class="headerlink" title="实现案例："></a>实现案例：</h4><p> 写一个程序，该程序可以每隔1秒，在控制台输出一段话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//无法调用start方法 ，切记不能调用run方法，因为他只是一个普通的方法，没办法开启线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        <span class="comment">//这时 ，我们可以创建一个Thread对象， 然后调用start方法 ，然后就可以启动一个线程，调用了run方法</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;<span class="comment">//通过Runnable接口实现线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;线程名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">//让其休眠一秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里使用的是一个设计模式【代理模式】</strong></p><h2 id="多线程机制"><a href="#多线程机制" class="headerlink" title="多线程机制"></a>多线程机制</h2><p>当我们执行上述程序是，它的流程是这样的</p><p>主线程的执行<img src="/images/image-20230410213321693.png" alt="image-20230410213321693"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1. 创建一个cat对象，可以当作一个线程来使用</span></span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    cat.start();</span><br><span class="line">    <span class="comment">//当main方法执行一个线程 之后 ，主线程不会阻塞 ，会继续执行</span></span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;主线程 执行次数: &quot;</span> + (++count) + <span class="string">&quot;线程名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">       Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当main方法执行一个线程 之后 ，主线程不会阻塞 ，会继续执行</p><p><img src="/images/image-20230410213202313.png" alt="image-20230410213202313"></p><p>最后用检测工具发现，<strong>虽然主线程的执行完一定次数之后，结束了</strong>，<strong>但是它的子线程Thread-0 没有执行完 ，那么程序就不会结束</strong></p><h3 id="为什么这里要调cat-start-方法？"><a href="#为什么这里要调cat-start-方法？" class="headerlink" title="为什么这里要调cat.start()方法？"></a>为什么这里要调<code>cat.start()</code>方法？</h3><p>答 ：因为<strong>run方法就是一个普通的方法，并无法启动一个真正的线程</strong>就会产生阻塞。</p><ul><li><strong>源码分析start方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">        group.add(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地方法， 是由jvm调用，底层是由c/c++实现，无法调用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>换言之， <strong>真正实现多线程的效果是<code>start0();</code>方法</strong></p><p><img src="/images/image-20230410215248921.png" alt="image-20230410215248921"></p><h1 id="多个子线程案例"><a href="#多个子线程案例" class="headerlink" title="多个子线程案例"></a>多个子线程案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Catt</span> <span class="variable">catt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Catt</span>();</span><br><span class="line">        <span class="comment">//无法调用start方法 ，切记不能调用run方法，因为他只是一个普通的方法，没办法开启线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(catt);</span><br><span class="line">        <span class="comment">//这时 ，我们可以创建一个Thread对象， 然后调用start方法 ，然后就可以启动一个线程，调用了run方法</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;<span class="comment">//通过Runnable接口实现线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;  线程1名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">           <span class="comment">//让其休眠一秒</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Catt</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;<span class="comment">//通过Runnable接口实现线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;  线程2 名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">           <span class="comment">//让其休眠一秒</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 ，他们交叉执行</p><p><img src="/images/image-20230411103633421.png" alt="image-20230411103633421"></p><h1 id="多线程售票问题"><a href="#多线程售票问题" class="headerlink" title="多线程售票问题"></a>多线程售票问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ticket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">ticket01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">ticket02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line">        <span class="type">SellTicket01</span> <span class="variable">ticket03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket01</span>();</span><br><span class="line"></span><br><span class="line">        ticket01.start();</span><br><span class="line">        ticket02.start();</span><br><span class="line">        ticket03.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">SellTicket01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span>  <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口 :&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;售出一张票&quot;</span> +  <span class="string">&quot;  剩余票数为: &quot;</span>+  (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 ： </p><p><img src="/images/image-20230411105456756.png" alt="image-20230411105456756"></p><p><strong>出现超卖问题</strong></p><p>原因：</p><p><img src="/images/image-20230411105725969.png" alt="image-20230411105725969"></p><p>也就是在票数为 1 的时候， 他们三者同时进行售卖 ，导致三个线程同时进行，然后就会超卖两张</p><p>解决方案：</p><ul><li>通知线程退出</li><li>线程中断</li></ul><h1 id="通知线程退出"><a href="#通知线程退出" class="headerlink" title="通知线程退出"></a>通知线程退出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. 创建一个cat对象，可以当作一个线程来使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.start();</span><br><span class="line">        <span class="comment">//休息10 秒 让其退出</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        cat.loop = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//当main方法执行一个线程 之后 ，主线程不会阻塞 ，会继续执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//todo 通过重写run方法，来实现自己的业务逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">// 实现了Runnable接口的run方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;线程名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//让其休眠一秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main方法中控制变量，让另一个线程退出</p><p>运行结果：</p><p><img src="/images/image-20230411112432368.png" alt="image-20230411112432368"></p><h1 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h1><p>就是让正在休眠的线程停止休眠， 继续工作的意思</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. 创建一个cat对象，可以当作一个线程来使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.start();</span><br><span class="line">        <span class="comment">//休息10 秒 让其退出</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//        cat.loop = false;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;线程停止休眠 ，继续执行&quot;</span> );</span><br><span class="line">        cat.interrupt(); <span class="comment">//中断子线程的休眠</span></span><br><span class="line">        <span class="comment">//Thread.sleep(5000);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当main方法执行一个线程 之后 ，主线程不会阻塞 ，会继续执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//todo 通过重写run方法，来实现自己的业务逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">// 实现了Runnable接口的run方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;线程名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//让其休眠一秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;休眠中--&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被interrupt了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230411115031755.png" alt="image-20230411115031755"></p><h1 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h1><p><img src="/images/image-20230411115249226.png" alt="image-20230411115249226"></p><ul><li>yield  ：将线程让出来，让其他线程执行</li><li>join ： 线程的插队。 插队线程一旦插队成功 ，则肯定先执行完插入的线程所有的任务</li></ul><h1 id="用户、守护-线程"><a href="#用户、守护-线程" class="headerlink" title="用户、守护 线程"></a>用户、守护 线程</h1><ul><li>用户线程： 也叫工作线程， 当线程的任务执行完成或者通知方式结束</li><li>守护线程： 一般是为工作线程服务的，当所有的用户线程结束， 守护线程自动结束</li><li>常见的守护线程 ： 垃圾回收机制</li></ul><h3 id="如何将一个线程设置为守护线程？"><a href="#如何将一个线程设置为守护线程？" class="headerlink" title="如何将一个线程设置为守护线程？"></a>如何将一个线程设置为守护线程？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Catt</span> <span class="variable">catt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Catt</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        <span class="comment">//Runnable方式实现 设置为守护线程 ，然后在启动</span></span><br><span class="line">        thread1.setDaemon(<span class="literal">true</span>);    </span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//Thread 实现 设置为守护线程 ，然后在启动</span></span><br><span class="line">        catt.setDaemon(<span class="literal">true</span>); </span><br><span class="line">        catt.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;test... &quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;<span class="comment">//通过Runnable接口实现线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;  线程1名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">           <span class="comment">//让其休眠一秒</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Catt</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;<span class="comment">//通过Runnable接口实现线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;  线程2 名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">           <span class="comment">//让其休眠一秒</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>//Runnable方式实现 设置为守护线程 ，然后在启动         thread1.setDaemon(true);   </code>的方式实现设置守护线程</p><p><strong><code>注意顺序 ，先设置 再执行</code></strong></p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><h2 id="线程的7大状态"><a href="#线程的7大状态" class="headerlink" title="线程的7大状态"></a>线程的7大状态</h2><p>jdk官方文档中可以看出有六个</p><p>但是<strong>从我们的线程生命周期转换图可以看出 我们将Runnable(可运行状态)细化为Ready（就绪） 和Running（真正运行）两个状态</strong></p><p><img src="/images/image-20230411141508232.png" alt="image-20230411141508232"></p><h4 id="线程生命周期转换图"><a href="#线程生命周期转换图" class="headerlink" title="线程生命周期转换图"></a>线程生命周期转换图</h4><p><img src="/images/image-20230411141628380.png" alt="image-20230411141628380"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Catt</span> <span class="variable">catt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Catt</span>();</span><br><span class="line">        <span class="comment">//Thread 实现 设置为守护线程 ，然后在启动</span></span><br><span class="line">        System.out.println(catt.getName() + <span class="string">&quot; 状态  &quot;</span> + catt.getState());</span><br><span class="line">        catt.start();</span><br><span class="line">        <span class="keyword">while</span>(Thread.State.TERMINATED != catt.getState())&#123;</span><br><span class="line">            System.out.println(catt.getName() + <span class="string">&quot; 状态  &quot;</span> + catt.getState());</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(catt.getName() + <span class="string">&quot; 状态  &quot;</span> + catt.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Catt</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;<span class="comment">//通过Runnable接口实现线程</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (times != <span class="number">5</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;执行一次&quot;</span> + <span class="string">&quot;次数&quot;</span> +(++times)+ <span class="string">&quot;  线程2 名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">           <span class="comment">//让其休眠一秒</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/images/image-20230411143038605.png" alt="image-20230411143038605"></p><h1 id="线程同步机制—-Synchronized"><a href="#线程同步机制—-Synchronized" class="headerlink" title="线程同步机制—-Synchronized"></a>线程同步机制—-<code>Synchronized</code></h1><ul><li>在多线程编程中，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性</li><li>也可以这样理解：线程同步，即当有一个线程在对内存进行操作试试，其他的线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作</li></ul><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><p>同步具体方法</p><ul><li>同步代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到对象的锁，才能操作同步代码</span></span><br><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同步方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体理解 ，不管有多少线程来，在某一时刻，只能有一个线程访问</p><h3 id="分析同步原理"><a href="#分析同步原理" class="headerlink" title="分析同步原理"></a>分析同步原理</h3><p><img src="/images/image-20230411145354638.png" alt="image-20230411145354638"></p><p>假设 t1 抢到锁之后就开始执行代码 ，当执行完之后就会把锁放回去 ，然后t1、t2、t3 三个继续抢这个锁</p><h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><ul><li>java语言中引入了互斥锁的概念 ，来保证共享数据操作的完整性</li><li>每个对象都对应一个可以称为“互斥锁”的标记， 这个标记用来保证在任意时刻，只能有一个线程访问</li><li>同步的局限性： 导致程序的执行效率降低</li><li>同步方法（静态的） 的锁为当前类本身</li><li>同步方法（非静态的） 的锁可以是this ，也可以是其他对象 （必须是同一对象，可以是不同引用）</li></ul><p>**注意事项： **</p><p><img src="/images/image-20230411150525051.png" alt="image-20230411150525051"></p><h1 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h1><ul><li>多个线程都占用了对方的所资源， 但是不肯想让 ，导致死锁， 在编程时一定要避免</li></ul><p><img src="/images/image-20230411151610946.png" alt="image-20230411151610946"></p><p>上述情况导致o1、o2都无法释放，导致死锁</p><p><strong>必须避免这种两个锁互相锁</strong></p><h1 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h1><ul><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块、同步方法中遇到break、return</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或者Exception，导致程序异常结束</li><li>当前线程在同步代码块、同步方法中执行了wait（）方法，当前线程暂停，并且释放锁</li></ul><h3 id="下面的操作不会释放锁"><a href="#下面的操作不会释放锁" class="headerlink" title="下面的操作不会释放锁"></a>下面的操作不会释放锁</h3><p><img src="/images/image-20230411152248029.png" alt="image-20230411152248029"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间API的使用</title>
      <link href="/post/a21622d4.html"/>
      <url>/post/a21622d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="几种时间API"><a href="#几种时间API" class="headerlink" title="几种时间API"></a>几种时间API</h1><ol><li>java.util.Date和java.util.Calendar：这两个类是Java早期的时间API，已经过时，不推荐使用。</li><li>java.time包：Java 8引入了一个新的时间API，该API包括多个类，例如：<ol><li><strong>LocalDate：表示日期，例如2021-10-01。</strong></li><li><strong>LocalTime：表示时间，例如14:30:00。</strong></li><li><strong>LocalDateTime：表示日期和时间，例如2021-10-01T14:30:00。</strong></li><li><strong>ZonedDateTime：表示带时区的日期和时间。</strong></li><li><strong>Period：表示日期之间的时间差。</strong></li><li><strong>Duration：表示时间之间的时间差。</strong></li><li><strong>无解的<code>ChronoUnit</code></strong> ： 获取时间的天数、分钟、月份、 年份…..</li></ol></li><li><code>java.sql.Date和java.sql.Time</code>：这两个类是Java中用于处理数据库时间的API，通常情况下不需要使用。</li></ol><p>我们常用的就是<strong>time包下的时间API 以及 Util包下的</strong></p><h2 id="Java-time"><a href="#Java-time" class="headerlink" title="Java. time"></a>Java. time</h2><h3 id="LocalDate：表示日期例如2021-10-01。"><a href="#LocalDate：表示日期例如2021-10-01。" class="headerlink" title="LocalDate：表示日期例如2021-10-01。"></a>LocalDate：表示日期例如2021-10-01。</h3><p>对于LocalDate 这是实现类 ，我们可以进行很多操作， 一般我们可以和<strong>Period：表示日期之间的时间差</strong> 进行联动使用</p><p><img src="/images/image-20230405123424468.png" alt="image-20230405123424468"></p><p>它的<strong>三个参数分别代表  ：年 、月、该月第几天</strong></p><p>其中封装的<code>Period.between(begin, end);</code>方法是我们最长用的 ，它可以帮我们得出两个时间段地天数差、 年份差、月份差….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">begin</span> <span class="operator">=</span> LocalDate.of(<span class="number">2001</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">end</span> <span class="operator">=</span> LocalDate.of(<span class="number">2021</span>,<span class="number">8</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(begin, end);</span><br><span class="line">    <span class="comment">//todo 比较两个时间段的年份差</span></span><br><span class="line">    System.out.println(period.getYears());</span><br><span class="line">    <span class="comment">//todo 比较两个时间段的月份差</span></span><br><span class="line">    System.out.println(period.getMonths());</span><br><span class="line">    <span class="comment">//todo 比较两个时间段的天数差</span></span><br><span class="line">    System.out.println(period.getDays());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想上面那样仅仅做简单地调用 ， 那么他们比较地仅仅是相同单位下地，而不是所有的。<strong>换句话说就是要他比较月份 他就不会管是哪年 ，而是只比较两个月之间的差距</strong></p><p>如果想要得出实实在在的两个时间时间的月份的大小</p><ul><li><p>&#96;&#96;&#96;java<br> &#x2F;&#x2F;todo 比较两个时间段的月份差<br>int months &#x3D; period.getYears() * 12 + period.getMonths();<br>&#x2F;&#x2F; 获者直接使用 更加方便得出<br>long months &#x3D; ChronoUnit.MONTHS.between(begin, end);<br>System.out.println(months);</p><p>&#x2F;&#x2F;得出的结果按照上面的begin 和 end 来算就是相差 246 个月</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同样的，如果想实实在在的得出两个时间的天数</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  LocalDate startDate = LocalDate.of(2021, 1, 1);</span><br><span class="line">  LocalDate endDate = LocalDate.of(2022, 1, 10);</span><br><span class="line">  //todo 得出两个时间的天数</span><br><span class="line">  long daysBetween = ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class="line">  </span><br><span class="line">  System.out.println(&quot;起始日期：&quot; + startDate);</span><br><span class="line">  System.out.println(&quot;结束日期：&quot; + endDate);</span><br><span class="line">  System.out.println(&quot;天数差：&quot; + daysBetween);</span><br></pre></td></tr></table></figure></li></ul><h3 id="LocalDateTime：表示时间-例如14-30-00"><a href="#LocalDateTime：表示时间-例如14-30-00" class="headerlink" title="LocalDateTime：表示时间-例如14:30:00"></a>LocalDateTime：表示时间-例如14:30:00</h3><ul><li>获取详细的时间分钟数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取两个时间段的分钟数</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">of1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">21</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">of2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">between</span> <span class="operator">=</span> ChronoUnit.MINUTES.between(of1, of2);</span><br><span class="line">System.out.println(between);</span><br></pre></td></tr></table></figure><ul><li>获取详细的时间秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取两个时间段的秒数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">seconds</span> <span class="operator">=</span> ChronoUnit.SECONDS.between(of1, of2);</span><br><span class="line">System.out.println(seconds);</span><br></pre></td></tr></table></figure><ul><li>获取两个时间段的周数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取两个时间段的周数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">weeks</span> <span class="operator">=</span> ChronoUnit.WEEKS.between(of1, of2);</span><br><span class="line">System.out.println(weeks);</span><br></pre></td></tr></table></figure><h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><p>相关时间API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm&quot;</span>);</span><br><span class="line">    <span class="comment">/*天数差*/</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">fromDate1</span> <span class="operator">=</span> simpleFormat.parse(<span class="string">&quot;2018-03-01 12:00&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">toDate1</span> <span class="operator">=</span> simpleFormat.parse(<span class="string">&quot;2018-03-12 12:00&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">from1</span> <span class="operator">=</span> fromDate1.getTime();</span><br><span class="line">    System.out.println(from1);</span><br><span class="line">    <span class="type">long</span> <span class="variable">to1</span> <span class="operator">=</span> toDate1.getTime();</span><br><span class="line">    <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> (<span class="type">int</span>) ((to1 - from1) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;两个时间之间的天数差为：&quot;</span> + days);</span><br><span class="line">    <span class="type">StringBuilder</span>  <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">reverse</span> <span class="operator">=</span> sb.reverse();</span><br><span class="line">    System.out.println(reverse);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*小时差*/</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">fromDate2</span> <span class="operator">=</span> simpleFormat.parse(<span class="string">&quot;2018-03-01 12:00&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">toDate2</span> <span class="operator">=</span> simpleFormat.parse(<span class="string">&quot;2018-03-12 12:00&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">from2</span> <span class="operator">=</span> fromDate2.getTime();</span><br><span class="line">    <span class="type">long</span> <span class="variable">to2</span> <span class="operator">=</span> toDate2.getTime();</span><br><span class="line">    <span class="type">int</span> <span class="variable">hours</span> <span class="operator">=</span> (<span class="type">int</span>) ((to2 - from2) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;两个时间之间的小时差为：&quot;</span> + hours);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*分钟差*/</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">fromDate3</span> <span class="operator">=</span> simpleFormat.parse(<span class="string">&quot;2018-03-01 12:00&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">toDate3</span> <span class="operator">=</span> simpleFormat.parse(<span class="string">&quot;2018-03-12 12:00&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">from3</span> <span class="operator">=</span> fromDate3.getTime();</span><br><span class="line">    <span class="type">long</span> <span class="variable">to3</span> <span class="operator">=</span> toDate3.getTime();</span><br><span class="line">    <span class="type">int</span> <span class="variable">minutes</span> <span class="operator">=</span> (<span class="type">int</span>) ((to3 - from3) / (<span class="number">1000</span> * <span class="number">60</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;两个时间之间的分钟差为：&quot;</span> + minutes);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="蓝桥真题"><a href="#蓝桥真题" class="headerlink" title="蓝桥真题"></a>蓝桥真题</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。</strong></p><blockquote><p>小蓝每天都锻炼身体。</p><p>正常情况下，小蓝每天跑 11 千米。如果某天是周一或者月初（11 日），为了激励自己，小蓝要跑 22 千米。如果同时是周一或月初，小蓝也是跑 22 千米。</p><p>小蓝跑步已经坚持了很长时间，从 20002000 年 11 月 11 日周六（含）到 20202020 年 1010 月 11 日周四（含）。请问这段时间小蓝总共跑步多少千米？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取两个时间点之间的周数*/</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">time1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">time2</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">time</span>  <span class="operator">=</span> time1;</span><br><span class="line"><span class="keyword">while</span> (!time.equals(time2))&#123;</span><br><span class="line">    <span class="keyword">if</span>(time.getDayOfWeek().getValue() == <span class="number">1</span> || time.getDayOfMonth() == <span class="number">1</span>)&#123;</span><br><span class="line">        sum+=<span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sum+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 时间数 + 1</span></span><br><span class="line">    time = time.plusDays(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum ==&quot;</span> + sum);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Stream流式编程</title>
      <link href="/post/862c3f1c.html"/>
      <url>/post/862c3f1c.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Java中的Stream是一种流式编程方式，主要用于对集合数据进行操作和处理。Stream可以让我们更加简单、高效、灵活地处理集合数据，避免了繁琐的循环和判断，同时也提高了代码的可读性和可维护性。</p><p><strong>Stream主要包括以下几个特点：</strong></p><ol><li><strong>集合元素的处理是通过Stream的一系列中间操作来完成的，例如过滤、排序、映射等。</strong></li><li><strong>Stream的<code>中间操作</code>是惰性求值的，只有当终止操作调用时才会执行。</strong></li><li><strong>Stream的<code>终止操作</code>会触发中间操作的执行，并返回一个结果，例如收集、计数、查找等。</strong></li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>对于Stream流式编程方式 ，我们实现起来就按照三步进行执行即可。</p><h3 id="1-得到Stram流"><a href="#1-得到Stram流" class="headerlink" title="1. 得到Stram流"></a>1. 得到Stram流</h3><p>首先我们要做的就是得到stream，对于不同的数据存储类型，得到的Stream流是不同的</p><p>下图是几种常见的方式 : </p><p><img src="/images/image-20230404195639578.png" alt="image-20230404195639578"></p><h3 id="2-中间操作"><a href="#2-中间操作" class="headerlink" title="2. 中间操作"></a>2. 中间操作</h3><p>使用Stream流常见的中间操作的方法应该是<strong>filter</strong></p><p>但是除了filter ，我们还有很多其他的操作方法 ，比如<code>Sorted</code>  、<code>limit</code> 、<code>skip</code> 、 <code>distinct</code>  、 <code>concat</code> 、 <code>map</code></p><p>下图是这几种方法的介绍。</p><p><img src="/images/image-20230404200119680.png" alt="image-20230404200119680"></p><p>常见的filter等操作实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">    List&lt;Integer&gt; result = numbers.stream()</span><br><span class="line">            .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// 过滤偶数</span></span><br><span class="line">            .sorted() <span class="comment">// 排序</span></span><br><span class="line">            .map(n -&gt; n * n) <span class="comment">// 映射为平方数</span></span><br><span class="line">            .collect(Collectors.toList()); <span class="comment">// 收集到List中</span></span><br><span class="line">    System.out.println(result); <span class="comment">// [4, 16, 36]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意一："><a href="#注意一：" class="headerlink" title="注意一："></a>注意一：</h4><p><strong>使用中间方法返回新的Stream流，原来的Stream流只能使用一次，如果想使用最好使用链式编程</strong></p><h4 id="注意二-："><a href="#注意二-：" class="headerlink" title="注意二 ："></a>注意二 ：</h4><p><strong>修改Stream流中的数据 ，是不会改变原来集合或数组中的数据</strong></p><h3 id="3-终止操作"><a href="#3-终止操作" class="headerlink" title="3. 终止操作"></a>3. 终止操作</h3><p><strong>终止操作是Stream 的最后一步，当执行终止操作时，Stream将不再接收新的元素，并开始执行中间操作生成的操作链。</strong></p><p><img src="/images/image-20230404202844990.png" alt="image-20230404202844990"></p><h4 id="Collect"><a href="#Collect" class="headerlink" title="Collect"></a>Collect</h4><p>对于Collect最后的收集操作 ，我们可以收集为一下几种形式，一旦收集操作 开始执行 ，那么前面的中间操作将开始产生操作链</p><p><img src="/images/image-20230404203324529.png" alt="image-20230404203324529"></p><h4 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a><strong>map集合</strong></h4><p>，它用于将Stream中的元素转换为一个Map对象。该方法接受<strong>两个参数</strong></p><ul><li><strong>第一个参数是Function类型的对象，用于将Stream中的元素转换为Map的key</strong></li><li><strong>第二个参数是Function类型的对象，用于将Stream中的元素转换为Map的value。</strong></li></ul><p>如果Stream中的元素存在key相同的情况，则会抛出IllegalStateException异常。</p><p>如果是函数式是编程， 那么它其中的方法Function中的数据对应关系为 <strong>下图</strong>：</p><p><img src="/images/image-20230404204242551.png" alt="image-20230404204242551"></p><p><img src="/images/image-20230404204621868.png" alt="image-20230404204621868"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">22</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lucy&quot;</span>, <span class="number">21</span>));</span><br><span class="line">Map&lt;String, Integer&gt; map = persons.stream().collect(Collectors.toMap(Person::getName, Person::getAge));</span><br></pre></td></tr></table></figure><p><strong>对于函数式编程 和流式编程生成的规则</strong></p><p><img src="/images/image-20230404204946941.png" alt="image-20230404204946941"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dp练习</title>
      <link href="/post/fa1d06da.html"/>
      <url>/post/fa1d06da.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/images/uid1580206-20210224-1614154063705.png" alt="图片描述"></p><p>上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。</p><p>路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右 边的那个数。此外，向左下走的次数与向右下走的次数相差不能超过 1。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 N (1≤N≤100)<em>N</em> (1≤<em>N</em>≤100)，表示三角形的行数。</p><p>下面的 <em>N</em> 行给出数字三角形。数字三角形上的数都是 0 至 100 之间的整数。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题是我刷代码随想录以来第一道现实中出现的题， 刚开始拿到题没什么思路 。所以就学着Carl慢慢一步一步分析，虽然最后思路是对的 ，但是实现起来很多的代码细节还是没有完全掌握 。所以写出来记一记</p><p>首先我们可以知道 ，它的每一个路径的起源都是从上一条路径得到的，那么就可以得出使用dp的想法</p><p>其次 ，题目中提及<code>路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右 边的那个数。</code>  所以我们的公式就可以从这里推出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从这里我们就可以知道</span></span><br><span class="line">dp[i][j] : 表示 在第 i 行， 第 j 列 ，我们可以得到的最大的和为 dp[i][j]</span><br></pre></td></tr></table></figure><p>以上就是我推断出的dp数组的含义</p><p>接下来就是dp的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. dp[0][0] 一定要初始化成为arr的第一个 ，因为后序，我们会用到</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 接下来我们还需要用到dp[i][0] 也就是每一行的第一个，它等于</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span> ;i &lt; size;i++)&#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = arr[i][<span class="number">0</span>] +  dp[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为如果我们只对dp[0][0] 进行初始化的话， 那么后序 的dp[2][2] 就需要dp[1][1] 和 dp[1][0]；但是我们的dp[1][0]</span></span><br><span class="line"><span class="comment">//确是只能由dp[0][0]得出。同时dp[1][1] 也是只能由dp[0][0] 得出</span></span><br><span class="line"><span class="comment">//所以我们需要将dp[i][0]也进行初始化 通过 dp[i][0] = arr[i][0] +  dp[i-1][0]; 这样我们得到的dp[1][0] 才是由dp[0][0]相加得到的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 接下来就是dp的公式</span></span><br><span class="line"><span class="comment">//因为我们之前推出的公式我们得到了dp[i][0] 的数据</span></span><br><span class="line"><span class="comment">//所以接下来就可以按照题意将其余的dp[i][j] 推出</span></span><br><span class="line">dp[i][j] = arr[i][j] + Math.max(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//所以就可以得到上述公式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 遍历顺序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; size;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">        dp[i][j] = arr[i][j] + Math.max(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经过这样的推导 ，我们就可以得出需要dp数组 ，但是题目中还规定了<code>向左下走的次数与向右下走的次数相差不能超过 1。</code>  那么我们就不能直接得出最后一个(<code>sp[N][N]</code>)的结果。 最终的结果一定是在其中间 所以进行判断一下即可</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[size][size];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt;= i;j++)&#123;</span><br><span class="line">            arr[i][j] = scan.nextInt();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        <span class="comment">//定义dp</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[size][size];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//初始化dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span> ;i &lt; size;i++)&#123;</span><br><span class="line">          dp[i][<span class="number">0</span>] = arr[i][<span class="number">0</span>] +  dp[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确定dp公式及其遍历顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; size;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">            dp[i][j] = arr[i][j] + Math.max(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(size%<span class="number">2</span> != <span class="number">0</span> )&#123;</span><br><span class="line">          System.out.println(dp[size - <span class="number">1</span>][size/<span class="number">2</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(Math.max(dp[size-<span class="number">1</span>][size/<span class="number">2</span>], dp[size-<span class="number">1</span>][size/<span class="number">2</span>-<span class="number">1</span>]));  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily-Blog项目后台日志</title>
      <link href="/post/470b3441.html"/>
      <url>/post/470b3441.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客后台"><a href="#博客后台" class="headerlink" title="博客后台"></a>博客后台</h1><p><img src="/images/image-20230328200728728.png" alt="image-20230328200728728"></p><h2 id="AOP实现日志记录"><a href="#AOP实现日志记录" class="headerlink" title="AOP实现日志记录"></a>AOP实现日志记录</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>通过日志记录接口调用信息，便于后期排查</p><p>格式如下 :</p><p><img src="/images/image-20230320163423192.png" alt="image-20230320163423192"></p><p><img src="/images/image-20230320163644874.png" alt="image-20230320163644874"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li><strong>先定义注解类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLog &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">businessName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>定义切面类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>定义切点，及其通知方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.blog.annotation.SystemLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知方法（使用环绕通知）</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        joinPoint.getArgs();</span><br><span class="line">        Object res; <span class="comment">//得到目标方法调用的返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handleBefore(joinPoint);</span><br><span class="line">            <span class="comment">//目标方法的调用</span></span><br><span class="line">            res = joinPoint.proceed();</span><br><span class="line">            <span class="comment">//打印响应信息</span></span><br><span class="line">            handleAfter(res);</span><br><span class="line">        &#125;<span class="comment">//无论有没有异常都需要打印异常信息</span></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            log.info(<span class="string">&quot;============End============&quot;</span> + System.lineSeparator());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line">        <span class="comment">//获取被增强方法上的注解对象</span></span><br><span class="line">        <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> getSystemLog(joinPoint);</span><br><span class="line">        log.info(<span class="string">&quot;============Start============&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印请求 URL</span></span><br><span class="line">        log.info(<span class="string">&quot;URL            : &#123;&#125;&quot;</span>,request.getRequestURL());</span><br><span class="line">        <span class="comment">// 打印描述信息</span></span><br><span class="line">        log.info(<span class="string">&quot;BusinessName   : &#123;&#125;&quot;</span>,systemLog.businessName());</span><br><span class="line">        <span class="comment">// 打印 Http method</span></span><br><span class="line">        log.info(<span class="string">&quot;HTTP Method    : &#123;&#125;&quot;</span>,request.getMethod());</span><br><span class="line">        <span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">        log.info(<span class="string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),((MethodSignature) joinPoint.getSignature()).getName());</span><br><span class="line">        <span class="comment">// 打印请求的 IP</span></span><br><span class="line">        log.info(<span class="string">&quot;IP             : &#123;&#125;&quot;</span>,request.getRemoteHost());</span><br><span class="line">        <span class="comment">// 打印请求入参</span></span><br><span class="line">        log.info(<span class="string">&quot;Request Args   : &#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs()) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAfter</span><span class="params">(Object res)</span> &#123;</span><br><span class="line">        <span class="comment">// 打印出参</span></span><br><span class="line">        log.info(<span class="string">&quot;Response       : &#123;&#125;&quot;</span>, JSON.toJSONString(res));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 获取被增强方法上的注解对象</span></span><br><span class="line">    <span class="keyword">private</span> SystemLog <span class="title function_">getSystemLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> methodSignature.getMethod().getAnnotation(SystemLog.class);</span><br><span class="line">        <span class="keyword">return</span> systemLog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>在需要增强的方法上添加自定义注解</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SystemLog(businessName=&quot;更新用户信息&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.userInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230321215827890.png" alt="image-20230321215827890"></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;友链评论列表&quot;,notes = &quot;获取一页友链评论&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/linkCommentList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listCommentList</span><span class="params">(Integer pageNum , Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commentService.commentList(SystemConstants.COMMENT_TYPE_FRIEND,<span class="literal">null</span>,pageNum,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@ApiOperation(value = &quot;友链评论列表&quot;,notes = &quot;获取一页友链评论&quot;)</code>来进行标注</p><p><strong>配置形参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;pageNum&quot;, value = &quot;页号&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;pageSize&quot;, value = &quot;每页大小&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230322163816207.png" alt="image-20230322163816207"></p><p><img src="/images/image-20230322164820155.png" alt="image-20230322164820155"></p><p>**实体类接口 ： **</p><p>一般一个实体类不止在一个接口中被用到，所以如果直接在实体类中添加的话就是使代码耦合，所以我们需要进行拆解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(description = &quot;文章实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以上面的写法是不正规的</p><p>所以我们需要使用DTO对象</p><h3 id="【dto对象-：数据传输对象】"><a href="#【dto对象-：数据传输对象】" class="headerlink" title="【dto对象  ：数据传输对象】"></a>【<strong>dto对象  ：数据传输对象</strong>】</h3><p><strong><code>按照开发规范，所有的controller层需要的实体类参数，我们都需要将其转换为dto对象</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 添加评论</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(<span class="meta">@RequestBody</span> AddCommentDto addCommentDto)</span>&#123;</span><br><span class="line">    <span class="type">Comment</span> <span class="variable">comment</span> <span class="operator">=</span> BeanCopyUtils.copyBean(addCommentDto, Comment.class);</span><br><span class="line">    <span class="keyword">return</span> commentService.addComment(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(description = &quot;添加评论实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddCommentDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//评论类型（0代表文章评论，1代表友链评论）</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(notes = &quot;文章id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">//根评论id</span></span><br><span class="line"><span class="comment">//......   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的dto都是需要添加的</p><p><img src="/images/image-20230322170449009.png" alt="image-20230322170449009"></p><h2 id="获取所有标签"><a href="#获取所有标签" class="headerlink" title="获取所有标签"></a>获取所有标签</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230323184335879.png" alt="image-20230323184335879"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标签请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/content/tag&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(tagService.list());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台登录、登出"><a href="#后台登录、登出" class="headerlink" title="后台登录、登出"></a>后台登录、登出</h2><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230323184730929.png" alt="image-20230323184730929"></p><p><strong>登录</strong></p><p>​<strong>①自定义登录接口</strong></p><p>​<strong>调用ProviderManager的方法进行认证 如果认证成功生成jwt</strong></p><p>​<strong>把信息存入redis中</strong></p><p>​<strong>②自定义UserDetailsService</strong></p><p>​<strong>在这个实现类中进行查询数据库操作</strong></p><p>​<strong>注意配置密码加密BCryptPasswordCoder</strong></p><p><strong>校验</strong></p><p>​<strong>①自定义jwt认证过滤器</strong></p><p>​<strong>获取token</strong></p><p>​<strong>解析token获取其中的userId</strong></p><p>​<strong>从redis中获取用户信息</strong></p><p>​<strong>存入securityContextHolder</strong></p><p><img src="/images/image-20230323190712580.png" alt="image-20230323190712580"></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">loginController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AdminLoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            <span class="comment">//提示 要传用户名</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.REQUIRE_USERNAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginService.logout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台登陆实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminLoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminLoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 登录业务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="comment">//判断是否认证通过</span></span><br><span class="line">        <span class="comment">//获取userId ，生成token</span></span><br><span class="line">        <span class="comment">//判断是否认证通过</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取userid 生成token</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">//把用户信息存入redis</span></span><br><span class="line">        redisCache.setCacheObject(SystemConstants.LOGIN_KEY + userId,loginUser);</span><br><span class="line">        <span class="comment">//封装响应  ： 把token 和userInfoVo(由user转换而成) 封装 ，然后返回</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取 token 解析获取 userId</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line"></span><br><span class="line">        redisCache.deleteObject(SystemConstants.LOGIN_KEY + userId);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台权限控制及其动态路由"><a href="#后台权限控制及其动态路由" class="headerlink" title="后台权限控制及其动态路由"></a>后台权限控制及其动态路由</h2><h3 id="表分析"><a href="#表分析" class="headerlink" title="表分析"></a>表分析</h3><p><strong>权限表</strong></p><p><img src="/images/image-20230323193145026.png" alt="image-20230323193145026"></p><p><strong>对应的页面</strong></p><p><img src="/images/image-20230323193349478.png" alt="image-20230323193349478"></p><p><strong>权限表</strong></p><p><img src="/images/image-20230323194436827.png" alt="image-20230323194436827"></p><p><strong>角色权限表</strong></p><p><img src="/images/image-20230323194501433.png" alt="image-20230323194501433"></p><h2 id="获取当前用户的权限和角色信息"><a href="#获取当前用户的权限和角色信息" class="headerlink" title="获取当前用户的权限和角色信息"></a>获取当前用户的权限和角色信息</h2><h3 id="接口-getInfo"><a href="#接口-getInfo" class="headerlink" title="接口(getInfo)"></a>接口(getInfo)</h3><p><img src="/images/image-20230323194702962.png" alt="image-20230323194702962"></p><p><img src="/images/image-20230323195059120.png" alt="image-20230323195059120"></p><h3 id="实现getInfo"><a href="#实现getInfo" class="headerlink" title="实现getInfo"></a>实现getInfo</h3><p>最终实现结果</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;system:menu:list&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;system:menu:query&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;system:menu:add&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;system:menu:edit&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;system:menu:remove&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;content:article:writer&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;roles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;common&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;link&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://rrpanx30j.hd-bkt.clouddn.com/images/91529822720e0cf3efed815e0446f21fbe09aa79.png&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23412532@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;红红火火恍恍惚惚&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MenuService menuService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;AdminUserInfoVo&gt; <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 查询当前登陆的用户</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line">        <span class="comment">//2. 根据用户id查询权限</span></span><br><span class="line">        List&lt;String&gt; perms = menuService.selectPermsByUserId(loginUser.getUser().getId());</span><br><span class="line">        <span class="comment">// 根据id查询角色信息</span></span><br><span class="line">        List&lt;String&gt; roleKeyList = roleService.selectRoleKeyByUserId(loginUser.getUser().getId());</span><br><span class="line">        <span class="comment">//3. 封装 返回</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line">        <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user, UserInfoVo.class);</span><br><span class="line">        <span class="type">AdminUserInfoVo</span> <span class="variable">adminUserInfoVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminUserInfoVo</span>(perms,roleKeyList,userInfoVo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(adminUserInfoVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service层两个实现类"><a href="#service层两个实现类" class="headerlink" title="service层两个实现类"></a>service层两个实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询角色权限信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;MenuMapper, Menu&gt; <span class="keyword">implements</span> <span class="title class_">MenuService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询权限信息&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 如果用户id为1 代表管理员 ，menus中需要有所有菜单类型为c或者F的，状态为，未被删除的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回该用户权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//管理员返回所有的权限</span></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">            LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            wrapper.in(Menu::getMenuType, SystemConstants.MENU_TYPE_C,SystemConstants.MENU_TYPE_F);  <span class="comment">//菜单类型为C 和 F</span></span><br><span class="line">            wrapper.eq(Menu::getStatus,SystemConstants.LINK_STATUS_NORMAL);<span class="comment">//状态正常</span></span><br><span class="line">            List&lt;Menu&gt; menus = list(wrapper);</span><br><span class="line">            List&lt;String&gt; Perms = menus.stream().map(Menu::getPerms).collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">return</span> Perms;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 反之返回相对应用户所具有的权限</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先查询sys_user_roles查询用户角色id</span></span><br><span class="line">        <span class="comment">//2. 查到角色id之后再到sys_roles_menu查询对应的权限id(menuId)</span></span><br><span class="line">        <span class="comment">//3. 最后通过menuId查询对应的menu信息</span></span><br><span class="line">        <span class="comment">//4. 封装返回</span></span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectPermsByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询角色信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RoleMapper, Role&gt; <span class="keyword">implements</span> <span class="title class_">RoleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否为管理员角色</span></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">            List&lt;String&gt; roleKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            roleKeys.add(<span class="string">&quot;admin&quot;</span>);  <span class="comment">//管理员角色</span></span><br><span class="line">            <span class="keyword">return</span> roleKeys;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不是返回对应id的角色信息(连表查询)</span></span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectRoleKeyByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对应多表联查的xml文件"><a href="#对应多表联查的xml文件" class="headerlink" title="对应多表联查的xml文件"></a>对应多表联查的xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blog.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            selectRoleKeyByUserId--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRoleKeyByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            r.`role_key`</span><br><span class="line">        FROM</span><br><span class="line">            `sys_user_role` ur</span><br><span class="line">                LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            r.`status` = 0 AND</span><br><span class="line">            r.`del_flag` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRoleIdByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select r.id</span><br><span class="line">        from sys_role r</span><br><span class="line">                 left join sys_user_role ur on ur.role_id = r.id</span><br><span class="line">        where ur.user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blog.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.perms</span><br><span class="line">        FROM</span><br><span class="line">            `sys_user_role` ur</span><br><span class="line">                LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">                LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;F&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllRouterMenu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blog.domain.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,&#x27;&#x27;) AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        FROM</span><br><span class="line">            `sys_menu` m</span><br><span class="line">        WHERE</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;M&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">        ORDER BY</span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRouterMenuTreeByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blog.domain.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,&#x27;&#x27;) AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        FROM</span><br><span class="line">            `sys_user_role` ur</span><br><span class="line">                LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">                LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;M&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">        ORDER BY</span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMenuListByRoleId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select m.id</span><br><span class="line">        from sys_menu m</span><br><span class="line">                 left join sys_role_menu rm on m.id = rm.menu_id</span><br><span class="line">        where rm.role_id = #&#123;roleId&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        order by m.parent_id, m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态路由接口-getRouters"><a href="#动态路由接口-getRouters" class="headerlink" title="动态路由接口(getRouters)"></a>动态路由接口(getRouters)</h3><p><img src="/images/image-20230323195215441.png" alt="image-20230323195215441"></p><h4 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h4><p>前端为了实现动态路由的效果，需要后端有接口能够返回所有的菜单数据</p><p><strong>注意 ：返回的菜单需要体现父子菜单的层级关系</strong></p><p>如果用户id为1 代表管理员 ，menus中需要有所有菜单类型为c或者M的，状态为，未被删除的权限</p><p><img src="/images/image-20230323195723943.png" alt="image-20230323195723943"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;menus&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content/article/write/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-08 03:39:58&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2023</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;写博文&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;write&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content:article:writer&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;visible&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system/menu/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-11-12 10:46:19&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tree-table&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单管理&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;menu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system:menu:list&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;visible&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-11-12 10:46:19&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isFrame&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统管理&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menuType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orderNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;perms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;visible&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="实现getRouters"><a href="#实现getRouters" class="headerlink" title="实现getRouters"></a>实现getRouters</h3><h4 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getRouters&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult&lt;RoutersVo&gt; <span class="title function_">getRouters</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line">    <span class="comment">//查询menu 结果是tree形状</span></span><br><span class="line">    List&lt;Menu&gt; menus = menuService.selectRouterMenuTreeByUserId(userId);</span><br><span class="line">    <span class="type">RoutersVo</span> <span class="variable">routersVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoutersVo</span>(menus);</span><br><span class="line">    <span class="comment">//封装返回</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(routersVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service层实现"><a href="#service层实现" class="headerlink" title="service层实现"></a>service层实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;MenuMapper, Menu&gt; <span class="keyword">implements</span> <span class="title class_">MenuService</span> &#123;  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询相关的权限菜单信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回符合要求的val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">MenuMapper</span> <span class="variable">menuMapper</span> <span class="operator">=</span> getBaseMapper();</span><br><span class="line">        List&lt;Menu&gt; menus = <span class="literal">null</span>;    <span class="comment">//封装Menu</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是管理员，返回所有的菜单</span></span><br><span class="line">        <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">            menus = menuMapper.selectAllRouterMenu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果不是管理员 那么返回对应有权限的菜单按钮</span></span><br><span class="line">            menus = menuMapper.selectRouterMenuTreeByUserId(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过上述得到的Menu无法得到我们需要的父子菜单管理，所以我们需要通过（buildMenuTree）来构建这种父子菜单关系</span></span><br><span class="line">        <span class="comment">//构建Tree</span></span><br><span class="line">        <span class="comment">//先找出第一层的菜单，接着找到他们的子菜单，然后就可以设置children属性中</span></span><br><span class="line">        List&lt;Menu&gt; menuTree = buildMenuTree(menus,<span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建菜单的父子菜单关系</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 找到父menu对应的子menu ，然后将他们放到一个集合中，最后设置给children这个字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menus 传入的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentId 父菜单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">buildMenuTree</span><span class="params">(List&lt;Menu&gt; menus, Long parentId)</span> &#123;</span><br><span class="line">        List&lt;Menu&gt; menuList = menus.stream()<span class="comment">//通过这样筛选就可以得到第一层级的menu</span></span><br><span class="line">                .filter(menu -&gt; menu.getParentId().equals(parentId))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                传入的menus是得到了第一层的menus（相当于Tree中的root节点），然后需要设置他的子菜单（left 和 right）</span></span><br><span class="line"><span class="comment">                因为menus中有所有的菜单(父子都有)， 所以我们在设置left和right时需要找到他们的子菜单</span></span><br><span class="line"><span class="comment">                所以就调用getChildren找到left或者right的子菜单，然后得到之后再设置给他们</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .map(menu -&gt; menu.setChildren(getChildren(menu, menus)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> menuList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取传入参数的子menu的list集合</span></span><br><span class="line"><span class="comment">     *  在menus中找打当前传入的menu的子菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menus</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">getChildren</span><span class="params">(Menu menu, List&lt;Menu&gt; menus)</span>&#123;</span><br><span class="line">        List&lt;Menu&gt; children = menus.stream()</span><br><span class="line">                .filter(menu1 -&gt; menu1.getParentId().equals(menu.getId()))</span><br><span class="line">                .map(menu1 -&gt; menu1.setChildren(getChildren(menu1,menus)))  <span class="comment">//如果有很多的子菜单，那么就可以用到这个递归</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台项目改进点"><a href="#后台项目改进点" class="headerlink" title="后台项目改进点"></a>后台项目改进点</h2><p>关于项目中实现后台模块中的各个菜单及其子菜单的实现</p><ol><li>首先查询对应用户的菜单</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据用户id查询相关的权限菜单信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回符合要求的val</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">      <span class="type">MenuMapper</span> <span class="variable">menuMapper</span> <span class="operator">=</span> getBaseMapper();</span><br><span class="line">      List&lt;Menu&gt; menus = <span class="literal">null</span>;    <span class="comment">//封装Menu</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果是管理员，返回所有的菜单</span></span><br><span class="line">      <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">          menus = menuMapper.selectAllRouterMenu();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//如果不是管理员 那么返回对应有权限的菜单按钮</span></span><br><span class="line">          menus = menuMapper.selectRouterMenuTreeByUserId(userId);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//通过上述得到的Menu无法得到我们需要的父子菜单管理，所以我们需要通过（buildMenuTree）来构建这种父子菜单关系</span></span><br><span class="line">      <span class="comment">//构建Tree</span></span><br><span class="line">      <span class="comment">//先找出第一层的菜单，接着找到他们的子菜单，然后就可以设置children属性中</span></span><br><span class="line">      List&lt;Menu&gt; menuTree = buildMenuTree(menus,<span class="number">0L</span>);</span><br><span class="line">      <span class="keyword">return</span> menuTree;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接着对于那些第一级菜单进行查询(parentId &#x3D;&#x3D; 1)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建菜单的父子菜单关系</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 找到父menu对应的子menu ，然后将他们放到一个集合中，最后设置给children这个字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menus 传入的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentId 父菜单id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">buildMenuTree</span><span class="params">(List&lt;Menu&gt; menus, Long parentId)</span> &#123;</span><br><span class="line">    <span class="comment">//用常规的方法</span></span><br><span class="line">    List&lt;Menu&gt; test = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Menu menu : menus)&#123;</span><br><span class="line">        <span class="comment">//查询出那些 父菜单的id为 【 1】 的 ，也就是第一级菜单</span></span><br><span class="line">        <span class="keyword">if</span>(menu.getParentId().equals(parentId))&#123;</span><br><span class="line">            <span class="comment">//获取这些菜单的子菜单</span></span><br><span class="line">            <span class="type">Menu</span> <span class="variable">menu1</span> <span class="operator">=</span> menu.setChildren(getChildren(menu, menus));</span><br><span class="line">            test.add(menu1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>查询对应的子菜单</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取传入参数的子menu的list集合</span></span><br><span class="line"><span class="comment"> *  在menus中找打当前传入的menu的子菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menu 获取它的子菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menus 全部菜单集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">getChildren</span><span class="params">(Menu menu, List&lt;Menu&gt; menus)</span>&#123;</span><br><span class="line">    List&lt;Menu&gt; test1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Menu menu1 : menus)&#123;</span><br><span class="line">        <span class="keyword">if</span>(menu1.getParentId().equals(menu.getId()))&#123;</span><br><span class="line">            test1.add(menu1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>在上述我们的代码中，如果仅仅是实现两层菜单还可以满足， 但是如果出现菜单层级是3 、4、5…等情况我上述实现的代码就无法满足。</p><p>这是我们就需要使用到<strong>递归算法</strong> 但是这里如果单单使用递归好像很难实现</p><p>所以我们在这里可以使用函数式编程，然后在其中套用递归来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建菜单的父子菜单关系</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 找到父menu对应的子menu ，然后将他们放到一个集合中，最后设置给children这个字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menus 传入的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentId 父菜单id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">buildMenuTree</span><span class="params">(List&lt;Menu&gt; menus, Long parentId)</span> &#123;</span><br><span class="line">    List&lt;Menu&gt; menuList = menus.stream()<span class="comment">//通过这样筛选就可以得到第一层级的menu</span></span><br><span class="line">            .filter(menu -&gt; menu.getParentId().equals(parentId))</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            传入的menus是得到了第一层的menus（相当于Tree中的root节点），然后需要设置他的子菜单（left 和 right）</span></span><br><span class="line"><span class="comment">            因为menus中有所有的菜单(父子都有)， 所以我们在设置left和right时需要找到他们的子菜单</span></span><br><span class="line"><span class="comment">            所以就调用getChildren找到left或者right的子菜单，然后得到之后再设置给他们</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            .map(menu -&gt; menu.setChildren(getChildren(menu, menus)))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> menuList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取传入参数的子menu的list集合</span></span><br><span class="line"><span class="comment"> *  在menus中找打当前传入的menu的子菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menu 获取它的子菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> menus 全部菜单集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">getChildren</span><span class="params">(Menu menu, List&lt;Menu&gt; menus)</span>&#123;</span><br><span class="line">    List&lt;Menu&gt; children = menus.stream()</span><br><span class="line">            .filter(menu1 -&gt; menu1.getParentId().equals(menu.getId()))</span><br><span class="line">            .map(menu1 -&gt; menu1.setChildren(getChildren(menu1,menus)))  <span class="comment">//如果有很多的子菜单，那么就可以用到这个递归</span></span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这样的该进，我们就可以实现多层菜单的查询</p><h2 id="查询标签列表"><a href="#查询标签列表" class="headerlink" title="查询标签列表"></a>查询标签列表</h2><h3 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230324170257378.png" alt="image-20230324170257378"></p><p><strong>需求 ：</strong></p><p>提供标签功能，一个文章可以有多个标签。</p><p>在后台需要分页查询标签功能，要求能够根据签名进行分页查询。<strong>后期可以增加备注查询等需求</strong></p><p>注意 ：不要把删除了的标签查询出来  </p><p><img src="/images/image-20230324172918379.png" alt="image-20230324172918379"></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标签请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/content/tag&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *提供标签功能，一个文章可以有多个标签。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在后台需要分页查询标签功能，要求能够根据签名进行分页查询。**后期可以增加备注查询等需求**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意 ：不要把删除了的标签查询出来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 第几页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment">//     * <span class="doctag">@param</span> name 标签名</span></span><br><span class="line"><span class="comment">//     * <span class="doctag">@param</span> remark 备注</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;PageVo&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize, TagListDto tagListDto)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tagService.pageTagList(pageNum,pageSize,tagListDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service层实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标签表服务接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ray2310</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;tagService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;TagMapper, Tag&gt; <span class="keyword">implements</span> <span class="title class_">TagService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现分页tag列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;PageVo&gt; <span class="title function_">pageTagList</span><span class="params">(Integer pageNum, Integer pageSize, TagListDto tagListDto)</span> &#123;</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Tag&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Tag&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//如果他们有值 ，那么就会调用这个方法， 如果没有就不会调用</span></span><br><span class="line">        wrapper.eq(StringUtils.hasText(tagListDto.getName()),Tag::getName,tagListDto.getName());</span><br><span class="line">        wrapper.eq(StringUtils.hasText(tagListDto.getRemark()),Tag::getRemark,tagListDto.getRemark());</span><br><span class="line">        page(page,wrapper);</span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(page.getRecords(),page.getTotal());</span><br><span class="line">        <span class="comment">//封装数据返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h2><h3 id="接口-3"><a href="#接口-3" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230326051807981.png" alt="image-20230326051807981"></p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TODO 新增标签， 测试时需要在数据库记录中有创建时间、更新时间、创建人、创建人字段</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addTag</span><span class="params">(<span class="meta">@RequestBody</span> TagListDto tagListDto)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tagService.addTag(tagListDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serivce层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 新增标签需求   需要在数据库记录中有创建时间、更新时间、创建人、创建人字段</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addTag</span><span class="params">(TagListDto tagListDto)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 接收请求信息,判断信息是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(tagListDto))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.TAG_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 获取标签创建者 、获取创建时间</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line">    <span class="comment">//3. 将的到的信息转换为tag 存储到数据库中</span></span><br><span class="line">    <span class="type">Tag</span> <span class="variable">tag</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>();</span><br><span class="line">    tag.setName(tagListDto.getName());</span><br><span class="line">    tag.setRemark(tagListDto.getRemark());</span><br><span class="line">    tag.setCreateBy(userId);</span><br><span class="line">    save(tag);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(tag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><h3 id="接口-4"><a href="#接口-4" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230326054428595.png" alt="image-20230326054428595"></p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteTag</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tagService.deleteTag(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//todo 删除标签需求 需要设置逻辑删除 也就是</span></span><br><span class="line"><span class="comment">//`del_flag` int DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteTag</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 从数据库中查找要删除的id</span></span><br><span class="line">    <span class="comment">//2. 修改其中的delFlag = 1</span></span><br><span class="line">    <span class="comment">//返回删除信息</span></span><br><span class="line">    UpdateWrapper&lt;Tag&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    updateWrapper.set(<span class="string">&quot;del_flag&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h2><h3 id="接口-5"><a href="#接口-5" class="headerlink" title="接口"></a>接口</h3><ol><li>先获取接口信息</li></ol><p><img src="/images/image-20230326062601718.png" alt="image-20230326062601718"></p><ol start="2"><li>修改接口</li></ol><p><img src="/images/image-20230326063414438.png" alt="image-20230326063414438"></p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><ol><li>首先获取指定id的标签</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getTagById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tagService.getTagById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取需要修改的标签信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getTagById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">TagDto</span> <span class="variable">dto</span> <span class="operator">=</span> BeanCopyUtils.copyBean(tag, TagDto.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(dto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改获取的内容</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateTag</span><span class="params">(<span class="meta">@RequestBody</span> TagDto tagDto)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tagService.updateTag(tagDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 修改信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateTag</span><span class="params">(TagDto tagDto)</span> &#123;</span><br><span class="line">    System.out.println(tagDto.toString());</span><br><span class="line">    UpdateWrapper&lt;Tag&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.eq(<span class="string">&quot;id&quot;</span>,tagDto.getId());</span><br><span class="line">    updateWrapper.set(<span class="string">&quot;name&quot;</span>,tagDto.getName());</span><br><span class="line">    updateWrapper.set(<span class="string">&quot;remark&quot;</span>,tagDto.getRemark());</span><br><span class="line">    update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><h3 id="接口-6"><a href="#接口-6" class="headerlink" title="接口"></a>接口</h3><ol><li>首先获取所有的分类信息接口</li></ol><p><img src="/images/image-20230326070053043.png" alt="image-20230326070053043"></p><ol start="2"><li>获取所有的标签请求接口</li></ol><p></p><p><img src="/images/image-20230326070301832.png" alt="image-20230326070301832"></p><ol start="3"><li>上传图片接口</li></ol><p><img src="/images/image-20230326070423388.png" alt="image-20230326070423388"></p><ol start="4"><li>写博文接口</li></ol><p><img src="/images/image-20230326070444466.png" alt="image-20230326070444466"></p><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><ol><li><strong>首先获取所有的分类信息接口</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取所有分类信息</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/category/listAllCategory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAllCategory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> categoryService.listAllCategory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAllCategory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询出所有没有删除的分类</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Category::getStatus, SystemConstants.CATEGORY_STATUS);<span class="comment">//没有被禁用的</span></span><br><span class="line">    queryWrapper.eq(Category::getDelFlag,SystemConstants.CATEGORY_NOTDEL);<span class="comment">//没有被删除的</span></span><br><span class="line">    List&lt;Category&gt; list = list(queryWrapper);</span><br><span class="line">    List&lt;CategoryVo&gt; categoryVo1s = BeanCopyUtils.copyBeanList(list, CategoryVo.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(categoryVo1s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>获取所有的标签信息</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取所有的标签信息</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/tag/listAllTag&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAllTag</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tagService.listAllTag();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取所有的标签，不分页的</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAllTag</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询出所有没有删除的标签</span></span><br><span class="line">    LambdaQueryWrapper&lt;Tag&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Tag::getDelFlag, SystemConstants.TAG_NOTDEL);</span><br><span class="line">    List&lt;Tag&gt; list = list(queryWrapper);</span><br><span class="line">    List&lt;TagVo&gt; tagVos = BeanCopyUtils.copyBeanList(list, TagVo.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(tagVos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>上传图片接口</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadImg</span><span class="params">(MultipartFile img)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadService.uploadImg(img);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.blog.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.blog.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.blog.service.UploadService;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Region;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件到七牛云</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;oss&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 实现文件的上传</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadImg</span><span class="params">(MultipartFile img)</span> &#123;</span><br><span class="line">        <span class="comment">//判断文件的大小</span></span><br><span class="line">        <span class="comment">//获取原始文件名进行判断</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span>(!originalFilename.endsWith(<span class="string">&quot;.png&quot;</span>) &amp;&amp; !originalFilename.endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.FILE_TYPE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果通过，上传文件到oss</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> uploadOSS(img);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">uploadOSS</span><span class="params">(MultipartFile imgFile)</span>&#123;</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Region.autoRegion());</span><br><span class="line">        <span class="comment">//...其他参数参考类注释</span></span><br><span class="line">        <span class="type">UploadManager</span> <span class="variable">uploadManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadManager</span>(cfg);</span><br><span class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//images目录下的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> imgFile.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;images/&quot;</span>+originalFilename;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将前端传过来的imgFile文件转换成一个inputStream，然后</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> imgFile.getInputStream();</span><br><span class="line">            <span class="type">Auth</span> <span class="variable">auth</span> <span class="operator">=</span> Auth.create(accessKey, secretKey);</span><br><span class="line">            <span class="type">String</span> <span class="variable">upToken</span> <span class="operator">=</span> auth.uploadToken(bucket);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> uploadManager.put(inputStream,key,upToken,<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//解析上传成功的结果</span></span><br><span class="line">                <span class="type">DefaultPutRet</span> <span class="variable">putRet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">                System.out.println(putRet.key);</span><br><span class="line">                System.out.println(putRet.hash);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">r</span> <span class="operator">=</span> ex.response;</span><br><span class="line">                System.err.println(r.toString());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.err.println(r.bodyString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                    <span class="comment">//ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">//ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//文件地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://rrpanx30j.hd-bkt.clouddn.com/images/&quot;</span>+ originalFilename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>写文章实现</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">writeArticle</span><span class="params">(<span class="meta">@RequestBody</span> ArticleVo articleVo)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.writeArticle(articleVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 后台写文章详情</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">//添加事务</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">writeArticle</span><span class="params">(ArticleVo articleVo)</span> &#123;</span><br><span class="line">    <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> BeanCopyUtils.copyBean(articleVo, Article.class);</span><br><span class="line">    save(article);</span><br><span class="line">    <span class="comment">//将标签id的集合存入标签文章集合表中</span></span><br><span class="line">    List&lt;ArticleTag&gt; collect = articleVo.getTags().stream().map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(article.getId(), tagId)).collect(Collectors.toList());</span><br><span class="line">    articleTagService.saveBatch(collect);</span><br><span class="line">   <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h2><p>需求 ：点击修改文章时能够跳转回到写博文页面 </p><p><strong>回显该文章的全部信息</strong></p><p>用户可以在该页面进行修改博文信息，点击更新后可以实现修改文章</p><h3 id="接口-7"><a href="#接口-7" class="headerlink" title="接口"></a>接口</h3><ol><li>根据id获取博文</li></ol><p><img src="/images/image-20230328201801346.png" alt="image-20230328201801346"></p><p><img src="/images/image-20230328201812622.png" alt="image-20230328201812622"></p><ol start="2"><li>修改博文</li></ol><p><img src="/images/image-20230328205243997.png" alt="image-20230328205243997"></p><h3 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h3><ol><li>按文章id查询文章回显数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取要更新的博文</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateBefore</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.updateBefore(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台更新博文前获取博文所有信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 文章id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回所有信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateBefore</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 首先根据id获取所有信息</span></span><br><span class="line">    <span class="type">AdminArticleVo</span> <span class="variable">articleVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(getById(id), AdminArticleVo.class);</span><br><span class="line">    <span class="comment">//2. 获取所有的标签id，然后找出我们需要的</span></span><br><span class="line">    List&lt;Long&gt; ids = articleTagService.selectByArticleId(id);</span><br><span class="line">    articleVo.setTags(ids);</span><br><span class="line">    <span class="comment">//2. 根据文章id 获取其所有的标签tags</span></span><br><span class="line">    System.out.println(articleVo);</span><br><span class="line">    <span class="comment">//3. 封装返回</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(articleVo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>修改更新</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 更新文章</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateNow</span><span class="params">(<span class="meta">@RequestBody</span> AdminArticleVo articleVo)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.updateNow(articleVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先更新请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleVo 需要更新的文章</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateNow</span><span class="params">(AdminArticleVo articleVo)</span> &#123;</span><br><span class="line">       <span class="comment">// UpdateWrapper&lt;Article&gt; wrapper = new UpdateWrapper&lt;&gt;();</span></span><br><span class="line">       <span class="comment">// wrapper.eq(&quot;id&quot;,articleVo.getId());</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> BeanCopyUtils.copyBean(articleVo, Article.class);</span><br><span class="line"><span class="comment">//        wrapper.set(&quot;id&quot;,articleVo.getId());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;title&quot;,articleVo.getTitle());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;content&quot;,articleVo.getContent());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;summary&quot;,articleVo.getSummary());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;category_id&quot;,articleVo.getCategoryId());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;thumbnail&quot;,articleVo.getThumbnail());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;is_top&quot;,articleVo.getIsTop());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;status&quot;,articleVo.getStatus());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;view_count&quot;,articleVo.getViewCount());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;is_comment&quot;,articleVo.getIsComment());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;update_by&quot;,articleVo.getUpdateBy());</span></span><br><span class="line"><span class="comment">//        wrapper.set(&quot;update_time&quot;,articleVo.getUpdateTime());</span></span><br><span class="line"><span class="comment">//        update(wrapper);</span></span><br><span class="line">        updateById(article);</span><br><span class="line">        <span class="comment">//先删除对应的映射关系</span></span><br><span class="line">        articleTagService.deleteByArticleId(articleVo.getId(),articleVo.getTags());</span><br><span class="line">        <span class="comment">//然后重新添加新增的标签映射关系</span></span><br><span class="line">        List&lt;ArticleTag&gt; collect = articleVo.getTags().stream().map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(article.getId(), tagId)).collect(Collectors.toList());</span><br><span class="line">        articleTagService.saveBatch(collect);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleTagServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleTagMapper, ArticleTag&gt; <span class="keyword">implements</span> <span class="title class_">ArticleTagService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">selectByArticleId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        List&lt;ArticleTag&gt; list = list();</span><br><span class="line">        List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(ArticleTag articleTag : list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(articleTag.getArticleId().equals(id))&#123;</span><br><span class="line">                <span class="type">Long</span> <span class="variable">tagId</span> <span class="operator">=</span> articleTag.getTagId();</span><br><span class="line">                ids.add(tagId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByArticleId</span><span class="params">(Long id,List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(ArticleTag::getArticleId,id);</span><br><span class="line">        remove(wrapper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><p>需求 ，删除文章是指<strong>逻辑删除</strong>，而不是真的删除</p><h3 id="接口-8"><a href="#接口-8" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230328214440779.png" alt="image-20230328214440779"></p><h3 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteArticleById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.deleteArticleById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id逻辑删除文章</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 文章id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteArticleById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    UpdateWrapper&lt;Article&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    wrapper.set(<span class="string">&quot;del_flag&quot;</span>,SystemConstants.DELETE);</span><br><span class="line">    update(wrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><h3 id="接口-9"><a href="#接口-9" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230326081110657.png" alt="image-20230326081110657"></p><p><img src="/images/image-20230326081713597.png" alt="image-20230326081713597"></p><h3 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/article/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize, ArticleSummaryDto articleSummary)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.getAllArticle(pageNum,pageSize,articleSummary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 后台博文获取所有博文</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getAllArticle</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize, ArticleSummaryDto articleSummary)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//如果有categoryId ，那么查询和传入的就需要相同</span></span><br><span class="line">    <span class="comment">//状态 ： 正式发布</span></span><br><span class="line">    queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_PUT);</span><br><span class="line">    <span class="comment">//置顶的文章（对isTop进行排序）</span></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    Page&lt;Article&gt; pageN = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    Page&lt;Article&gt; page = page(pageN, queryWrapper);</span><br><span class="line">    <span class="comment">//查询categoryName ，因为我们封装的是categoryName，但是查询出来的确实categoryId，所以需要在进行查询</span></span><br><span class="line">    List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">    List&lt;AdminArticleVo&gt; articleVos = BeanCopyUtils.copyBeanList(articles, AdminArticleVo.class);</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(articleVos, page.getTotal());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导出Excel文件"><a href="#导出Excel文件" class="headerlink" title="导出Excel文件"></a>导出Excel文件</h2><p>需求 ： 将我们需要的文件 ，比如标签信息等导出成为一个Excel文件</p><h3 id="接口-10"><a href="#接口-10" class="headerlink" title="接口"></a>接口<img src="/images/image-20230327170559042.png" alt="image-20230327170559042"></h3><h3 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="comment">//1. 设置下载文件的请求头</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebUtils.setDownLoadHeader(<span class="string">&quot;分类.xlsx&quot;</span>,response);</span><br><span class="line">        List&lt;CategoryVo&gt; list = categoryService.listAllCategory();</span><br><span class="line">        <span class="comment">//2. 获取导出的数据</span></span><br><span class="line">        <span class="comment">//3. 把数据写道Excel</span></span><br><span class="line">        List&lt;ExcelCategoryVo&gt; excelCategoryVos = BeanCopyUtils.copyBeanList(list, ExcelCategoryVo.class);</span><br><span class="line">        EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class).autoCloseStream(Boolean.FALSE).sheet(<span class="string">&quot;分类导出&quot;</span>)</span><br><span class="line">                .doWrite(excelCategoryVos);</span><br><span class="line">        <span class="comment">//4. 如果出现异常响应json格式</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);</span><br><span class="line">        WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><p>只针对有权限的用户访问能够访问的信息</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li>在springSecurity中添加</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br></pre></td></tr></table></figure><ol start="2"><li>在需要访问的方法上加</li></ol><p><img src="/images/image-20230327185502326.png" alt="image-20230327185502326"></p><ol start="3"><li>封装权限到loginUser中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.blog.mapper.MenuMapper;</span><br><span class="line"><span class="keyword">import</span> com.blog.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.blog.utils.SystemConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用该方法来重写用户登录的校验工作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 传入username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据用户名查询数据库用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="comment">//判断是否查询到  ： 未查到抛出异常   ： 查到然后作比较</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 还需要做的 : 后台用户查询权限信息封装</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户是管理员</span></span><br><span class="line">        <span class="keyword">if</span>(user.getType().equals(SystemConstants.ADMIN))&#123;</span><br><span class="line">            <span class="comment">//查询用户权限集合</span></span><br><span class="line">            List&lt;String&gt; perms = menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line">            <span class="comment">//封装到loginUser</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,perms);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回用户信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜单列表"><a href="#菜单列表" class="headerlink" title="菜单列表"></a>菜单列表</h2><p><strong>需求 ：</strong></p><p>展示菜单列表，不需要进行分页。可以正对菜单名做模糊查询，也可以根据菜单状态进行查询。菜单要按照父菜单id 和 OrderNum进行排序</p><h3 id="接口-11"><a href="#接口-11" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230329110738310.png" alt="image-20230329110738310"></p><h3 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 菜单列表</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getAll</span><span class="params">(String status,String menuName)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> menuService.getAll(status,menuName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">展示菜单列表，不需要进行分页。可以正对菜单名做模糊查询，也可以根据菜单状态进行查询。</span></span><br><span class="line"><span class="comment">菜单要按照父菜单id 和 OrderNum进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getAll</span><span class="params">(String status, String menuName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 按要求查询出所有的菜单</span></span><br><span class="line">    LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(Menu::getDelFlag,SystemConstants.NOT_DELETE);</span><br><span class="line">    wrapper.like(Objects.nonNull(menuName),Menu::getMenuName,menuName);</span><br><span class="line">    wrapper.like(Objects.nonNull(status),Menu::getStatus,status);</span><br><span class="line">    <span class="comment">//2. 按照父菜单 和 orderNum进行排序</span></span><br><span class="line">    wrapper.orderByAsc(Menu::getParentId);</span><br><span class="line">    wrapper.orderByAsc(Menu::getOrderNum);</span><br><span class="line">    List&lt;Menu&gt; list = list(wrapper);</span><br><span class="line">    List&lt;MenuVo&gt; menuVos = BeanCopyUtils.copyBeanList(list, MenuVo.class);</span><br><span class="line">    <span class="comment">//3. 封装为Vo，然后在放到集合中返回</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(menuVos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增菜单"><a href="#新增菜单" class="headerlink" title="新增菜单"></a>新增菜单</h2><h3 id="接口-12"><a href="#接口-12" class="headerlink" title="接口"></a>接口</h3><p><strong>注意： 这里的接口路径应该是：<code>system/menu</code></strong></p><p><img src="/images/image-20230329114721619.png" alt="image-20230329114721619"></p><h3 id="实现-13"><a href="#实现-13" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 新增菜单</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addMenu</span><span class="params">(<span class="meta">@RequestBody</span> Menu menu)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> menuService.addMenu(menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 新增菜单 或者按钮</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(menu.getIcon()))&#123;</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.ICON_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(menu.getMenuName()))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.MENU_NAME_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(menu.getPath()))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PATH_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    save(menu);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h2><p>需求： </p><ol><li><p>不能将自己的上级菜单设置自己</p><p>1系统管理01system1M00system02021-11-12 10:46:190系统管理目录0</p></li></ol><h3 id="接口-13"><a href="#接口-13" class="headerlink" title="接口"></a>接口</h3><ol><li>查询对应的菜单信息</li></ol><p><img src="/images/image-20230329121149241.png" alt="image-20230329121149241"></p><ol start="2"><li>更新菜单接口</li></ol><p><img src="/images/image-20230329121228032.png" alt="image-20230329121228032"></p><h3 id="实现-14"><a href="#实现-14" class="headerlink" title="实现"></a>实现</h3><ol><li>查询所要修改的信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 根据id查询对应菜单</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">selectById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> menuService.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 根据id查询对应信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">selectById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">MenuVo</span> <span class="variable">menuVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(menu, MenuVo.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(menuVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改，要求 不能使父菜单设置成为自己本身</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateMenu</span><span class="params">(<span class="meta">@RequestBody</span> Menu menu)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> menuService.updateMenu(menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 更新菜单</span></span><br><span class="line"><span class="comment">//不能让菜单的父菜单 == 菜单本身</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateMenu</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">    System.out.println(menu);</span><br><span class="line">    <span class="keyword">if</span>(menu.getParentId().equals(menu.getId()))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARENT_NOT_SELF);</span><br><span class="line">    &#125;</span><br><span class="line">    LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(Menu::getId,menu.getId());</span><br><span class="line">    remove(wrapper);</span><br><span class="line">    save(menu);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除菜单"><a href="#删除菜单" class="headerlink" title="删除菜单"></a>删除菜单</h2><p><strong>要求 ： 不能删除有子菜单的，逻辑删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">public ResponseResult deleteById(@PathVariable Long id)&#123;</span><br><span class="line">    return menuService.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 根据id删除菜单</span></span><br><span class="line"><span class="comment">//不能删除有子菜单的父菜单</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//查询是否有父菜单</span></span><br><span class="line">    <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    List&lt;Menu&gt; list = list();</span><br><span class="line">    <span class="keyword">for</span>(Menu children: list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (children.getParentId().equals(id)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不能删除！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.CHILDREN_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    UpdateWrapper&lt;Menu&gt; wrapper= <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    wrapper.set(<span class="string">&quot;del_flag&quot;</span>,SystemConstants.DELETE);</span><br><span class="line">    update(wrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="角色列表"><a href="#角色列表" class="headerlink" title="角色列表"></a>角色列表</h2><h3 id="接口-14"><a href="#接口-14" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230330191331750.png" alt="image-20230330191331750"></p><p><img src="/images/image-20230330191955499.png" alt="image-20230330191955499"></p><h3 id="实现-15"><a href="#实现-15" class="headerlink" title="实现"></a>实现</h3><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取角色列表</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getList</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize,String roleName,String status)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> roleService.getList(pageNum,pageSize,roleName,status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有的角色， 需要可以根据角色名 and 状态 模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNum 页数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 每页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roleName 角色名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 封装返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getList</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize, String roleName, String status)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 先查询出未删除的</span></span><br><span class="line">    LambdaQueryWrapper&lt;Role&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(Role::getDelFlag, SystemConstants.NOT_DELETE);</span><br><span class="line">    <span class="comment">//2. 按照求排序</span></span><br><span class="line">    wrapper.orderByAsc(Role::getRoleSort);</span><br><span class="line">    <span class="comment">//3. 进行模糊查询</span></span><br><span class="line">    wrapper.like(Objects.nonNull(roleName),Role::getRoleName,roleName);</span><br><span class="line">    wrapper.like(Objects.nonNull(status),Role::getStatus,status);</span><br><span class="line">    <span class="comment">//4. 分页</span></span><br><span class="line">    Page&lt;Role&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    page(page,wrapper);</span><br><span class="line">    <span class="comment">//5. 封装返回</span></span><br><span class="line">    List&lt;Role&gt; records = page.getRecords();</span><br><span class="line">    List&lt;RoleVo&gt; roleVos = BeanCopyUtils.copyBeanList(records, RoleVo.class);</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(roleVos,page.getTotal());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改变角色状态"><a href="#改变角色状态" class="headerlink" title="改变角色状态"></a>改变角色状态</h2><h3 id="接口-15"><a href="#接口-15" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230330194015196.png" alt="image-20230330194015196"></p><h3 id="实现-16"><a href="#实现-16" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里注意， 前端接口中的请求体 中定义的id 不是和数据库中对应的 而使roleId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roleDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/changeStatus&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> RoleDto roleDto)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>+ roleDto);</span><br><span class="line">    <span class="keyword">return</span> roleService.changeStatus(roleDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改变角色状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roleDto 封装角色id 和状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">changeStatus</span><span class="params">(RoleDto roleDto)</span> &#123;</span><br><span class="line">    UpdateWrapper&lt;Role&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,roleDto.getRoleId());</span><br><span class="line">    wrapper.set(<span class="string">&quot;status&quot;</span>,roleDto.getStatus());</span><br><span class="line">    update(wrapper);</span><br><span class="line">    <span class="type">Role</span> <span class="variable">byId</span> <span class="operator">=</span> getById(roleDto.getRoleId());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="新增角色"><a href="#新增角色" class="headerlink" title="新增角色"></a>新增角色</h2><h3 id="接口-16"><a href="#接口-16" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230330200602548.png" alt="image-20230330200602548"></p><p>响应格式：</p><p><img src="/images/image-20230330200905395.png" alt="image-20230330200905395"></p><ol start="2"><li>实现新增接口</li></ol><p><img src="/images/image-20230330201053562.png" alt="image-20230330201053562"></p><h3 id="实现-17"><a href="#实现-17" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取菜单下拉树列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/treeselect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">treeselect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//复用之前的selectMenuList方法。方法需要参数，参数可以用来进行条件查询，而这个方法不需要条件，所以直接new Menu()传入</span></span><br><span class="line">    List&lt;Menu&gt; menus = menuService.selectMenuList(<span class="keyword">new</span> <span class="title class_">Menu</span>());</span><br><span class="line">    List&lt;MenuTreeVo&gt; options =  SystemConverter.buildMenuSelectTree(menus);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取子菜单</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SystemConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;MenuTreeVo&gt; <span class="title function_">buildMenuSelectTree</span><span class="params">(List&lt;Menu&gt; menus)</span> &#123;</span><br><span class="line">        List&lt;MenuTreeVo&gt; MenuTreeVos = menus.stream()</span><br><span class="line">                .map(m -&gt; <span class="keyword">new</span> <span class="title class_">MenuTreeVo</span>(<span class="literal">null</span>, m.getId(), m.getMenuName(), m.getParentId()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        List&lt;MenuTreeVo&gt; options = MenuTreeVos.stream()</span><br><span class="line">                .filter(o -&gt; o.getParentId().equals(<span class="number">0L</span>))</span><br><span class="line">                .map(o -&gt; o.setChildren(getChildList(MenuTreeVos, o)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到子节点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;MenuTreeVo&gt; <span class="title function_">getChildList</span><span class="params">(List&lt;MenuTreeVo&gt; list, MenuTreeVo option)</span> &#123;</span><br><span class="line">        List&lt;MenuTreeVo&gt; options = list.stream()</span><br><span class="line">                .filter(o -&gt; Objects.equals(o.getParentId(), option.getId()))</span><br><span class="line">                .map(o -&gt; o.setChildren(getChildList(list, o)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加角色</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">AddRole</span><span class="params">(<span class="meta">@RequestBody</span> RoleDto roleDto)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> roleService.AddRole(roleDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">AddRole</span><span class="params">(RoleDto roleDto)</span> &#123;</span><br><span class="line">    <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> BeanCopyUtils.copyBean(roleDto, Role.class);</span><br><span class="line">    save(role);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改角色信息"><a href="#修改角色信息" class="headerlink" title="修改角色信息"></a>修改角色信息</h2><h3 id="接口-17"><a href="#接口-17" class="headerlink" title="接口"></a>接口</h3><ol><li>信息回显</li></ol><p><img src="/images/image-20230402121643054.png" alt="image-20230402121643054"></p><ol start="2"><li>加载角色菜单树请求</li></ol><p><img src="/images/image-20230402122531724.png" alt="image-20230402122531724"></p><ol start="3"><li>进行修改</li></ol><p><img src="/images/image-20230402125750495.png" alt="image-20230402125750495"></p><h3 id="实现-18"><a href="#实现-18" class="headerlink" title="实现"></a>实现</h3><ol><li>实现信息回显</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id获取需要修改的角色信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 角色id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getRoleById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">RoleVo</span> <span class="variable">roleVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(role, RoleVo.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(roleVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现权限树的回显</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回显对应id的角色的权限树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/roleMenuTreeselect/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">roleMenuTreeSelect</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 先查寻对应角色的权限id集合， 然后，将id集合一一对应查询出对应的权限集合</span></span><br><span class="line">    List&lt;Menu&gt; menus = menuService.selectMenuList(<span class="keyword">new</span> <span class="title class_">Menu</span>());</span><br><span class="line">    LambdaQueryWrapper&lt;RoleMenu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(RoleMenu::getRoleId,id);</span><br><span class="line">    List&lt;RoleMenu&gt; list = roleMenuService.list(wrapper);    <span class="comment">//对应的id集合</span></span><br><span class="line">    List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(RoleMenu menu : list)&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">menuId</span> <span class="operator">=</span> menu.getMenuId();</span><br><span class="line">        ids.add(menuId);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;MenuTreeVo&gt; menuTreeVos = SystemConverter.buildMenuSelectTree(menus);</span><br><span class="line">    <span class="type">RoleMenuTreeSelectVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleMenuTreeSelectVo</span>(ids, menuTreeVos);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>实现信息修改</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行修改 ，注意关联对应的菜单树信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> role 传入对应的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">    updateById(role);</span><br><span class="line">    <span class="comment">//删除之前的菜单关系</span></span><br><span class="line">    LambdaQueryWrapper&lt;RoleMenu&gt; roleMenuLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    roleMenuLambdaQueryWrapper.eq(RoleMenu::getRoleId,role.getId());</span><br><span class="line">    roleMenuService.remove(roleMenuLambdaQueryWrapper);</span><br><span class="line">    <span class="comment">//重新建立菜单关系</span></span><br><span class="line">    <span class="comment">//还需要将角色和对应的菜单权限信息添加</span></span><br><span class="line">    Long[] menuIds = role.getMenuIds();</span><br><span class="line">    <span class="keyword">for</span>(Long id : menuIds)&#123;</span><br><span class="line">        roleMenuService.save(<span class="keyword">new</span> <span class="title class_">RoleMenu</span>(role.getId(),id));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h2><h3 id="接口-amp-实现"><a href="#接口-amp-实现" class="headerlink" title="接口&amp;实现"></a>接口&amp;实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteRole</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> roleService.deleteRole(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除角色信息， 注意还要删除对应的角色关联的菜单</span></span><br><span class="line"><span class="comment"> * 还有就是逻辑删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 角色id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteRole</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    UpdateWrapper&lt;Role&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    wrapper.set(<span class="string">&quot;del_flag&quot;</span>,SystemConstants.DELETE);</span><br><span class="line">    update(wrapper);</span><br><span class="line">    <span class="comment">//删除对应的关联信息</span></span><br><span class="line">    LambdaQueryWrapper&lt;RoleMenu&gt; roleMenuLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    roleMenuLambdaQueryWrapper.eq(RoleMenu::getRoleId,id);</span><br><span class="line">    roleMenuService.remove(roleMenuLambdaQueryWrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h2><h3 id="接口-18"><a href="#接口-18" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230402133128250.png" alt="image-20230402133128250"></p><p><img src="/images/image-20230402133613323.png" alt="image-20230402133613323"></p><h3 id="实现-19"><a href="#实现-19" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 后台获取用户列表</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(<span class="type">int</span> pageNum ,<span class="type">int</span> pageSize,String userName,String status,String phonenumber)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userService.listAll(pageNum,pageSize,userName,status,phonenumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行用户列表查询</span></span><br><span class="line"><span class="comment"> * 要求： 1. 能够进行分页展示 2. 可以通过用户名 进行模糊查询 3. 可以通过手机号、状态进行查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNum 当前页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phonenumber 手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAll</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize, String userName, String status,String phonenumber)</span> &#123;</span><br><span class="line">    <span class="comment">// 可以通过用户名 进行模糊查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//可以通过手机号、状态进行查询</span></span><br><span class="line">    wrapper.like(StringUtils.hasText(userName),User::getUserName,userName);</span><br><span class="line">    wrapper.eq(StringUtils.hasText(status),User::getStatus,status);</span><br><span class="line">    wrapper.eq(StringUtils.hasText(phonenumber),User::getPhonenumber,phonenumber);</span><br><span class="line">    <span class="comment">// 能够进行分页展示</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    page(page,wrapper);</span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    List&lt;UserVo&gt; userVos = BeanCopyUtils.copyBeanList(records, UserVo.class);</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(userVos,page.getTotal());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>首先要返回所有的角色列表（状态正常，没有删除的）</li><li>用户输入密码存储时需要进行加密存储</li><li>相关信息不能为空</li><li>相关用户名、手机号、邮箱…不能相同</li><li></li></ol><h3 id="接口-19"><a href="#接口-19" class="headerlink" title="接口"></a>接口</h3><ol><li>查询角色列表</li></ol><p><img src="/images/image-20230402135245059.png" alt="image-20230402135245059"></p><ol start="2"><li>添加用户</li></ol><p><img src="/images/image-20230402140509829.png" alt="image-20230402140509829"></p><h3 id="实现-20"><a href="#实现-20" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户</span></span><br><span class="line"><span class="comment"> 1. 首先要返回所有的角色列表（状态正常，没有删除的    ）</span></span><br><span class="line"><span class="comment"> 2. 用户输入密码存储时需要进行加密存储</span></span><br><span class="line"><span class="comment"> 3. 相关信息不能为空</span></span><br><span class="line"><span class="comment"> 4. 相关用户名、手机号、邮箱...不能相同</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addUser</span><span class="params">(User userDto)</span> &#123;</span><br><span class="line">    <span class="comment">//对数据进行非空判断 要求用户名 密码 等都不为空</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.hasText(userDto.getUserName()))&#123;</span><br><span class="line">        ResponseResult.errorResult(AppHttpCodeEnum.USERNAME_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.hasText(userDto.getPassword()))&#123;</span><br><span class="line">        ResponseResult.errorResult(AppHttpCodeEnum.PASSWORD_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( !StringUtils.hasText(userDto.getEmail()))&#123;</span><br><span class="line">        ResponseResult.errorResult(AppHttpCodeEnum.EMAIL_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( !StringUtils.hasText(userDto.getNickName()))&#123;</span><br><span class="line">        ResponseResult.errorResult(AppHttpCodeEnum.NICKNAME_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断数据库中是否存在用户</span></span><br><span class="line">    <span class="keyword">if</span>(usernameExist(userDto.getUserName()))&#123;</span><br><span class="line">        <span class="comment">//用户已经存在</span></span><br><span class="line">        ResponseResult.errorResult(USERNAME_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nickNameExist(userDto.getNickName()))&#123;</span><br><span class="line">        <span class="comment">//昵称存在</span></span><br><span class="line">        ResponseResult.errorResult(NICKNAME_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(phoneNumberExist(userDto.getPhonenumber()))&#123;</span><br><span class="line">        <span class="comment">//昵称存在</span></span><br><span class="line">        ResponseResult.errorResult(PHONENUMBER_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(EmailExist(userDto.getEmail()))&#123;</span><br><span class="line">        <span class="comment">//昵称存在</span></span><br><span class="line">        ResponseResult.errorResult(EMAIL_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//密码加密处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span> + userDto.getPassword());</span><br><span class="line">    userDto.setPassword(passwordEncoder.encode(userDto.getPassword())); <span class="comment">//设置加密之后的密码</span></span><br><span class="line"></span><br><span class="line">    save(userDto);  </span><br><span class="line">    <span class="comment">//添加对应的角色用户信息关系</span></span><br><span class="line">    List&lt;Long&gt; roleIds = userDto.getRoleIds();</span><br><span class="line">    <span class="keyword">for</span> (Long roleId : roleIds)&#123;</span><br><span class="line">        userRoleService.save(<span class="keyword">new</span> <span class="title class_">UserRole</span>(userDto.getId(),roleId));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><h3 id="接口-20"><a href="#接口-20" class="headerlink" title="接口"></a>接口</h3><ol><li>回显信息</li></ol><p><img src="/images/image-20230402150040611.png" alt="image-20230402150040611"></p><ol start="2"><li>更新</li></ol><p><img src="/images/image-20230402150017375.png" alt="image-20230402150017375"></p><h3 id="实现-21"><a href="#实现-21" class="headerlink" title="实现"></a>实现</h3><ol><li>获取信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回显要删除的用户信息</span></span><br><span class="line"><span class="comment"> * 需要回显用户关联的角色状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 查询用户信息回显</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//2. 查询角色信息</span></span><br><span class="line">    List&lt;Role&gt; roles = roleService.list();</span><br><span class="line">    <span class="comment">//3. 查询用户角色管理信息</span></span><br><span class="line">    LambdaQueryWrapper&lt;UserRole&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(UserRole::getUserId,id);</span><br><span class="line">    List&lt;UserRole&gt; list = userRoleService.list(wrapper);</span><br><span class="line">    List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(UserRole userRole : list)&#123;</span><br><span class="line">        ids.add(userRole.getRoleId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">UserUpdateDataVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserUpdateDataVo</span>(ids, roles, user);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>进行修改</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    updateById(user);</span><br><span class="line">    LambdaQueryWrapper&lt;UserRole&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(UserRole::getUserId,user.getId());</span><br><span class="line">    userRoleService.remove(wrapper);</span><br><span class="line">    <span class="comment">//添加对应的角色用户信息关系</span></span><br><span class="line">    List&lt;Long&gt; roleIds = user.getRoleIds();</span><br><span class="line">    <span class="keyword">for</span> (Long roleId : roleIds)&#123;</span><br><span class="line">        userRoleService.save(<span class="keyword">new</span> <span class="title class_">UserRole</span>(user.getId(),roleId));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="接口-amp-实现-1"><a href="#接口-amp-实现-1" class="headerlink" title="接口&amp;实现"></a>接口&amp;实现</h3><p><img src="/images/image-20230402144510809.png" alt="image-20230402144510809"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑删除用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    wrapper.set(<span class="string">&quot;del_flag&quot;</span>, SystemConstants.DELETE);</span><br><span class="line">    update(wrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分类查询"><a href="#分类查询" class="headerlink" title="分类查询"></a>分类查询</h2><h3 id="接口-21"><a href="#接口-21" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230402162209400.png" alt="image-20230402162209400"><img src="/images/image-20230402162215972.png" alt="image-20230402162215972"></p><h3 id="实现-22"><a href="#实现-22" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 获取所有分类,并分页展示</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAll</span><span class="params">(<span class="type">int</span> pageNum ,<span class="type">int</span> pageSize,CategoryVo categoryVo)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> categoryService.listAllPage(pageNum,pageSize,categoryVo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页导出所有分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNum 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAllPage</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize,CategoryVo categoryVo)</span> &#123;</span><br><span class="line">    <span class="comment">//先获取所有可用的分类</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//进行模糊查询</span></span><br><span class="line">    queryWrapper.like(Objects.nonNull(categoryVo.getName()),Category::getName,categoryVo.getName());</span><br><span class="line">    queryWrapper.like(Objects.nonNull(categoryVo.getStatus()),Category::getStatus,categoryVo.getStatus());</span><br><span class="line">    <span class="comment">//判断是否可用</span></span><br><span class="line">    queryWrapper.eq(Category::getStatus, SystemConstants.CATEGORY_STATUS);<span class="comment">//没有被禁用的</span></span><br><span class="line">    queryWrapper.eq(Category::getDelFlag,SystemConstants.CATEGORY_NOTDEL);<span class="comment">//没有被删除的</span></span><br><span class="line">    <span class="comment">//进行分页处理</span></span><br><span class="line">    Page&lt;Category&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    page(page,queryWrapper);</span><br><span class="line">    <span class="comment">//按照响应格式返回</span></span><br><span class="line">    List&lt;Category&gt; records = page.getRecords();</span><br><span class="line">    List&lt;CategoryVo&gt; list = BeanCopyUtils.copyBeanList(records, CategoryVo.class);</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(list,page.getTotal());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h2><h3 id="接口-22"><a href="#接口-22" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230402162430663.png" alt="image-20230402162430663"></p><h3 id="实现-23"><a href="#实现-23" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> categoryVo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addCategory</span><span class="params">(CategoryVo categoryVo)</span> &#123;</span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> BeanCopyUtils.copyBean(categoryVo, Category.class);</span><br><span class="line">    save(category);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h2><h3 id="接口-23"><a href="#接口-23" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230402162935277.png" alt="image-20230402162935277"></p><ol start="2"><li>修改</li></ol><p><img src="/images/image-20230402163345281.png" alt="image-20230402163345281"></p><h3 id="实现-24"><a href="#实现-24" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id获取分类信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Category</span> <span class="variable">byId</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">CategoryVo</span> <span class="variable">categoryVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(byId, CategoryVo.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(categoryVo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> categoryVo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateCategory</span><span class="params">(CategoryVo categoryVo)</span> &#123;</span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> BeanCopyUtils.copyBean(categoryVo, Category.class);</span><br><span class="line">    updateById(category);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="接口-amp-实现-2"><a href="#接口-amp-实现-2" class="headerlink" title="接口&amp; 实现"></a>接口&amp; 实现</h3><p><img src="/images/image-20230402163637266.png" alt="image-20230402163637266"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑删除分类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteCategory</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    UpdateWrapper&lt;Category&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    wrapper.set(<span class="string">&quot;del_flag&quot;</span>,SystemConstants.DELETE);</span><br><span class="line">    update(wrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="友链列表"><a href="#友链列表" class="headerlink" title="友链列表"></a>友链列表</h2><h3 id="接口-24"><a href="#接口-24" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230402164805566.png" alt="image-20230402164805566"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getAllLink</span><span class="params">(<span class="type">int</span> pageNum ,<span class="type">int</span> pageSize ,String name ,String status)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> linkService.getAll(pageNum,pageSize,name,status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getAll</span><span class="params">(<span class="type">int</span> pageNum, <span class="type">int</span> pageSize, String name, String status)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Link&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.like(StringUtils.hasText(name),Link::getName,name);</span><br><span class="line">    wrapper.eq(StringUtils.hasText(status),Link::getStatus,status);</span><br><span class="line">    Page&lt;Link&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    page(page,wrapper);</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(page.getRecords(),page.getTotal());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增友链"><a href="#新增友链" class="headerlink" title="新增友链"></a>新增友链</h2><h3 id="接口-25"><a href="#接口-25" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230402165612366.png" alt="image-20230402165612366"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addLink</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(linkService.save(link));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改友链"><a href="#修改友链" class="headerlink" title="修改友链"></a>修改友链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getLinkById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Link</span> <span class="variable">byId</span> <span class="operator">=</span> linkService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(byId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateLink</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>&#123;</span><br><span class="line">    linkService.updateById(link);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除友链"><a href="#删除友链" class="headerlink" title="删除友链"></a>删除友链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">deleteLink</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    UpdateWrapper&lt;Link&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">    wrapper.set(<span class="string">&quot;del_flag&quot;</span>, SystemConstants.DELETE);</span><br><span class="line">    linkService.update(wrapper);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动归背包2</title>
      <link href="/post/231939d2.html"/>
      <url>/post/231939d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474. 一和零"></a>474. 一和零</h1><blockquote><p><a href="https://leetcode.cn/problems/ones-and-zeroes/">力扣题目链接</a></p><p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p><p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p><p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p><p>示例 1：</p><ul><li>输入：strs &#x3D; [“10”, “0001”, “111001”, “1”, “0”], m &#x3D; 5, n &#x3D; 3</li><li>输出：4</li><li>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,”0001”,”1”,”0”} ，因此答案是 4 。 其他满足题意但较小的子集包括 {“0001”,”1”} 和 {“10”,”1”,”0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</li></ul><p>示例 2：</p><ul><li>输入：strs &#x3D; [“10”, “0”, “1”], m &#x3D; 1, n &#x3D; 1</li><li>输出：2</li><li>解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</li></ul><p>提示：</p><ul><li>1 &lt;&#x3D; strs.length &lt;&#x3D; 600</li><li>1 &lt;&#x3D; strs[i].length &lt;&#x3D; 100</li><li>strs[i] 仅由 ‘0’ 和 ‘1’ 组成</li><li>1 &lt;&#x3D; m, n &lt;&#x3D; 100</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>初次接触这种题 ，我基本上是想不出很好的解法，但是学了dp之后 ，才开始学会慢慢的将题目抽象化。但是对于这道题，我还是很难相处如何抽象成为我们能够接触的算法</p><p>跟随<a href="https://www.programmercarl.com/">代码随想录</a>的脚步 ，我才清楚的知道如何 解决这类题，如何抽象题目的信息作为我们解题的关键</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从题目中【请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 】这是我们需要得到的结果。那么我们就可以以这个为着手点。</p><p>其包括两个变量 <strong>m 个 0 和 n 个 1</strong>。那么按照一维数组的思路是很难说清楚的。所以我们这里用二维数组来定义dp数组</p><p>按照我们之前的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[j] =  Math.max(dp[j],dp[i- weight[i]] + value[i])</span><br><span class="line"><span class="comment">//它的意思就是 容量为 j 的背包 所容纳物品的最大价值为dp[j]</span></span><br></pre></td></tr></table></figure><p>同理到这道题，我们定义dp数组的含义就可以这样定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容量为i个0和 j个1组成的背包  所能容纳的物品的最大数量(子集个数)为dp[i][j]</span></span><br><span class="line">dp[i][j] = Math.max(dp[i][j],dp[i- zeroNumber][j - oneNumber] + <span class="number">1</span>); <span class="comment">//加1代表的是自己个数+1</span></span><br></pre></td></tr></table></figure><p>**那么我们抽象的结果就是： **</p><p><strong><code>物品(子集) 是由 0和1组成。</code></strong></p><p><strong><code>背包（子集个数）是由 m个0 和 n个1组成。</code></strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>既然思路我们根据抽象的结果大致有了了解 ， 那么我们就可以按照动归五部曲来进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//每个物品&quot;10&quot; ,&quot;0001&quot;...表示的是一个由 x个0 和 y个1组成</span></span><br><span class="line">        <span class="comment">//1. 首先确定dp数组的含义</span></span><br><span class="line">        <span class="comment">//2. 确 定递推公式</span></span><br><span class="line">        <span class="comment">//dp[i][j] 是指有i 个 0 和 j 个 1 组成的容器所能存储的物品的最大数量为dp[i][j]</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+ <span class="number">1</span>][n +<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//3. 初始化dp数组     </span></span><br><span class="line">        <span class="comment">//dp[0][0] = 0 就是代表由0个0 和 0个1组成的容器能够存储的物品最大数量为0</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4. 确定遍历顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt;strs.length;i++)&#123;</span><br><span class="line">            <span class="comment">//先得出每个商品的 0 和 1 的个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">zeroNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">oneNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k &lt; strs[i].length();k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[i].charAt(k) == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    zeroNumber++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    oneNumber++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//然后遍历内层背包</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> m; x &gt;= zeroNumber;x--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> n; y &gt;= oneNumber; y--)&#123;</span><br><span class="line">                    dp[x][y] = Math.max(dp[x][y],dp[x - zeroNumber][y - oneNumber] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.打印dp数组及返回结果</span></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230322150215008.png" alt="image-20230322150215008"></p><h1 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a>494. 目标和</h1><blockquote><p><a href="https://leetcode.cn/problems/target-sum/">力扣题目链接</a></p><p>难度：中等</p><p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p><p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p><p>示例：</p><ul><li>输入：nums: [1, 1, 1, 1, 1], S: 3</li><li>输出：5</li></ul><p>解释：</p><ul><li>-1+1+1+1+1 &#x3D; 3</li><li>+1-1+1+1+1 &#x3D; 3</li><li>+1+1-1+1+1 &#x3D; 3</li><li>+1+1+1-1+1 &#x3D; 3</li><li>+1+1+1+1-1 &#x3D; 3</li></ul><p>一共有5种方法让最终目标和为3。</p><p>提示：</p><ul><li>数组非空，且长度不会超过 20 。</li><li>初始的数组的和不会超过 1000 。</li><li>保证返回的最终结果能被 32 位整数存下。</li></ul></blockquote><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>还是按照之前的分析方法【返回可以使最终数组和为目标数 S 的所有添加符号的方法数。】这是题目的需求</p><p>其实一开始我的思路是使用回溯算法直接将所有的结果得出，然后再返回列表大小</p><p>具体代码这里就不是实现了，具体参考<strong>代码随想录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target, <span class="type">int</span> sum, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result.push_back(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 sum + candidates[i] &gt; target 就终止遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.size() &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            path.push_back(candidates[i]);</span><br><span class="line">            backtracking(candidates, target, sum, i + <span class="number">1</span>);</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.pop_back();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> S)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (S &gt; sum) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案</span></span><br><span class="line">        <span class="keyword">if</span> ((S + sum) % <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案，两个int相加的时候要各位小心数值溢出的问题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bagSize</span> <span class="operator">=</span> (S + sum) / <span class="number">2</span>; <span class="comment">// 转变为组合总和问题，bagsize就是要求的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下为回溯法代码</span></span><br><span class="line">        result.clear();</span><br><span class="line">        path.clear();</span><br><span class="line">        sort(nums.begin(), nums.end()); <span class="comment">// 需要排序</span></span><br><span class="line">        backtracking(nums, bagSize, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后运行的结果显示超时了。所以说回溯的解法是靠不住的。这里我们就可以用到动态规划了</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>首先得到我们数组的总和为sum ，那么目标结论就是<strong>target &#x3D; 加法总和  - 减法总和</strong></p><p>假设加法的总和为x，那么减法对应的总和就是sum - x。</p><p>所以我们要求的是 x - (sum - x) &#x3D; target</p><p>x &#x3D; (target + sum) &#x2F; 2</p><p><strong>此时问题就转化为，装满容量为加法总和（x）的背包，有几种方法</strong>。</p><p>那么dp数组的含义我们就可以确定下来了</p><p><strong><code>dp[j]  : 装满容量为 j 的背包 ，总共有dp[j] 种方法 </code></strong></p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>根据我们的思路 就可以按照动归五部曲来进行实现</p><ol><li><p>含义：  <strong><code>dp[j]  : 装满容量为 j 的背包 ，总共有dp[j] 种方法 </code></strong></p></li><li><p>动归表达式 ：   <code>dp[j] += dp[j - nums[i]];</code></p></li><li><p>初始化 ： dp[0] 表示装满背包容量为 0 的背包 ，总共有1种方法，那就是什么都不装</p></li><li><p>遍历顺序 ：外层遍历物品 ，内层遍历背包</p></li><li><p>打印并返回结果</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) sum += nums[i];</span><br><span class="line"><span class="comment">//如果target过大 sum将无法满足</span></span><br><span class="line">        <span class="keyword">if</span> ( target &lt; <span class="number">0</span> &amp;&amp; sum &lt; -target) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((target + sum) % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (target + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(size &lt; <span class="number">0</span>) size = -size;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> size; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解AOP思想</title>
      <link href="/post/51453cee.html"/>
      <url>/post/51453cee.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>概念 ： AOP为Aspect Oriented Programming的缩写， 意思为<strong>切面编程。</strong></p><p><strong>他是一种可以在不修改原来核心代码的情况下给程序动态统一进增强的一种技术</strong></p><p>​<strong>springAOP : 批量对spring容器中的bean的方法做增强，并且这种<code>增强不会与原来方法中的代码耦合</code></strong></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspect<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速入门实现"><a href="#快速入门实现" class="headerlink" title="快速入门实现"></a>快速入门实现</h2><h3 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将类交给容器去管理</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//作用 ： 告诉Spring容器，这是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将类交给容器去管理</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//作用 ： 告诉Spring容器，这是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(&quot;需要增强的路径地址&quot;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在被调用的方法之前执行</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span><span class="comment">//增强是针对哪些方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodbefore</span><span class="params">()</span>&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="aop核心概念"><a href="#aop核心概念" class="headerlink" title="aop核心概念"></a>aop核心概念</h2><p><strong>连接点 ： 【joinpoint】</strong>所谓的连接点就是能够被增强到的点，在spring中 只支持方法类型的连接点</p><p><strong>切入点 ： 【pointcut】所谓的切入点，就是指被增强的连接点</strong></p><p>**通知&#x2F;增强 ：【Advice】 **所谓的通知是指jurisdiction增强的代码</p><p>**目标对象 ： 【Target】 **被增强的对象就是目标对象</p><p><strong>切面： 【Aspect】: 是指切入点 和通知（引介） 的 结合</strong></p><p>**代理 ： 【Proxy】 **一个类被aop增强后，所产生一个结果的代理类</p><h3 id="切入点-1"><a href="#切入点-1" class="headerlink" title="切入点"></a>切入点</h3><ol><li>**切入点表达式： **</li></ol><p><img src="/images/image-20230320191539415.png" alt="image-20230320191539415"></p><p>举例： </p><p><img src="/images/image-20230320191636878.png" alt="image-20230320191636878"></p><ol start="2"><li><strong>切点函数(用的不多)</strong></li></ol><p>我们可以在要增强的方法上加上注解。然后使用@annotation来表示对加了什么注解的方法进行增强。</p><p><img src="/images/image-20230320192100758.png" alt="image-20230320192100758"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLog &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">businessName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在自定义注解上需要加</li></ol><p><code>@Retention(RetentionPolicy.RUNTIME)</code><br><code>@Target(ElementType.METHOD)</code></p><ol start="2"><li>在需要被注解增强的相关方法上加上我们自定义的注解的注解名就可以实现增强</li><li>在切面类上进行添加切入点等信息</li></ol><p><img src="/images/image-20230320192458549.png" alt="image-20230320192458549"></p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p><strong>几种通知的分类</strong></p><p><img src="/images/image-20230320192755168.png" alt="image-20230320192755168"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.pdai.springframework.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pdai</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知: 进入方法&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知: 退出方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result return val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知, 返回值: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterThrowing</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知, 异常: &quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终通知.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p>  如何使用 ？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知: 进入方法前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知: 退出方法后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意点 ： 如果目标方法有返回值 ，那么对应的切面类中的环绕通知的方法也必须有返回值</strong></p><h3 id="AspectJ注解方式"><a href="#AspectJ注解方式" class="headerlink" title="AspectJ注解方式"></a>AspectJ注解方式</h3><p>基于XML的声明式AspectJ存在一些不足，需要在Spring配置文件配置大量的代码信息，为了解决这个问题，Spring 使用了@AspectJ框架为AOP的实现提供了一套注解。</p><table><thead><tr><th><strong>注解名称</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><strong>@Aspect</strong></td><td><strong>用来定义一个切面。</strong></td></tr><tr><td>@pointcut</td><td>用于定义切入点表达式。在使用时还需要定义一个包含名字和任意参数的方法签名来表示切入点名称，这个方法签名就是一个返回值为void，且方法体为空的普通方法。</td></tr><tr><td>@Before</td><td>用于定义前置通知，相当于BeforeAdvice。在使用时，通常需要指定一个value属性值，该属性值用于指定一个切入点表达式(可以是已有的切入点，也可以直接定义切入点表达式)。</td></tr><tr><td>@AfterReturning</td><td>用于定义后置通知，相当于AfterReturningAdvice。在使用时可以指定pointcut &#x2F; value和returning属性，其中pointcut &#x2F; value这两个属性的作用一样，都用于指定切入点表达式。</td></tr><tr><td><strong>@Around</strong></td><td><strong>用于定义环绕通知，相当于MethodInterceptor。在使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。</strong></td></tr><tr><td>@After-Throwing</td><td>用于定义异常通知来处理程序中未处理的异常，相当于ThrowAdvice。在使用时可指定pointcut &#x2F; value和throwing属性。其中pointcut&#x2F;value用于指定切入点表达式，而throwing属性值用于指定-一个形参名来表示Advice方法中可定义与此同名的形参，该形参可用于访问目标方法抛出的异常。</td></tr><tr><td>@After</td><td>用于定义最终final 通知，不管是否异常，该通知都会执行。使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。</td></tr><tr><td>@DeclareParents</td><td>用于定义引介通知，相当于IntroductionInterceptor (不要求掌握)。</td></tr></tbody></table><hr><hr><h2 id="获取被增强方法相关信息"><a href="#获取被增强方法相关信息" class="headerlink" title="获取被增强方法相关信息"></a><strong>获取被增强方法相关信息</strong></h2><p>我们实际对方法进行增强时往往还需要获取到被增强方法的相关信息，比如 ： 方法名，参数，返回值，异常信息….</p><p>我们除了在环绕通知外的所有通知方法中增加一个JoinPoint类型的参数。这个参数封装了被增强方法的相关信息 。我们还可以通过这个参数获取到除了异常对象 和返回值 之外的所有信息。</p><p><img src="/images/image-20230320194616436.png" alt="image-20230320194616436"></p><p><img src="/images/image-20230320195321351.png" alt="image-20230320195321351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于controller层的方法增强</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line">    <span class="comment">//获取被增强方法上的注解对象</span></span><br><span class="line">    <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> getSystemLog(joinPoint);</span><br><span class="line">    log.info(<span class="string">&quot;============Start============&quot;</span>);</span><br><span class="line">    <span class="comment">// 打印请求 URL</span></span><br><span class="line">    log.info(<span class="string">&quot;URL            : &#123;&#125;&quot;</span>,request.getRequestURL());</span><br><span class="line">    <span class="comment">// 打印描述信息</span></span><br><span class="line">    log.info(<span class="string">&quot;BusinessName   : &#123;&#125;&quot;</span>,systemLog.businessName());</span><br><span class="line">    <span class="comment">// 打印 Http method</span></span><br><span class="line">    log.info(<span class="string">&quot;HTTP Method    : &#123;&#125;&quot;</span>,request.getMethod());</span><br><span class="line">    <span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">    log.info(<span class="string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),((MethodSignature) joinPoint.getSignature()).getName());</span><br><span class="line">    <span class="comment">// 打印请求的 IP</span></span><br><span class="line">    log.info(<span class="string">&quot;IP             : &#123;&#125;&quot;</span>,request.getRemoteHost());</span><br><span class="line">    <span class="comment">// 打印请求入参</span></span><br><span class="line">    log.info(<span class="string">&quot;Request Args   : &#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs()) );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于service层的方法增强</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getSignature().getDeclaringTypeName();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取 类名：  &quot;</span> + className);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取方法名 ： &quot;</span>  + methodName);</span><br><span class="line"></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取参数；&quot;</span> + Arrays.toString(args));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取参数(转为json格式)；&quot;</span> + JSON.toJSONString(args));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异常</p><p><img src="/images/image-20230320202111363.png" alt="image-20230320202111363"></p><h2 id="多切面增强顺序"><a href="#多切面增强顺序" class="headerlink" title="多切面增强顺序"></a>多切面增强顺序</h2><p><strong>通过@Order的大小来规定多个切面的顺序</strong></p><p><img src="/images/image-20230320203705453.png" alt="image-20230320203705453"></p><h2 id="参考学习说明："><a href="#参考学习说明：" class="headerlink" title="参考学习说明："></a><strong>参考学习说明：</strong></h2><p><strong>视频学习 ： 三更springAOP</strong></p><p><strong>相关资料参考 ：<a href="https://pdai.tech/md/spring/spring-x-framework-aop.html">https://pdai.tech/md/spring/spring-x-framework-aop.html</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily-Blog项目前台日志</title>
      <link href="/post/43f6e4ef.html"/>
      <url>/post/43f6e4ef.html</url>
      
        <content type="html"><![CDATA[<h1 id="daily-blog项目"><a href="#daily-blog项目" class="headerlink" title="daily- blog项目"></a>daily- blog项目</h1><h2 id="快速搭建项目"><a href="#快速搭建项目" class="headerlink" title="快速搭建项目"></a>快速搭建项目</h2><p>创建完数据库对应的表 等操作之后，进入idea</p><h3 id="使用EasyCode快速创建工程"><a href="#使用EasyCode快速创建工程" class="headerlink" title="使用EasyCode快速创建工程"></a>使用EasyCode快速创建工程</h3><ol><li>首先连接数据库</li><li>然后在对应的表上点击，然后GeneraleCode</li><li>如果想要删除表名中的前缀 ，就可以使用removePre</li><li>创建包、实体类、dao等都可以自动生成</li></ol><p><img src="/images/image-20230311094114784.png" alt="image-20230311094114784"></p><h3 id="自动生成的代码修改"><a href="#自动生成的代码修改" class="headerlink" title="自动生成的代码修改"></a>自动生成的代码修改</h3><p>根据自己的需求，修改相应的代码 比如 ： 删除其中的继承东西等</p><p>我们这里暂时不做任何修改</p><p><img src="/images/image-20230311101039158.png" alt="image-20230311101039158"></p><p>接下来就是修改实体类对应的信息</p><p>比如： 我们需要添加实体类与数据库中表的对应关系用 <code>@TableName(&quot;sg_article&quot;)</code> , 对于主键自增的字段使用<code>@TableId</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章表(Article)表实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ray2310</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-03-11 09:42:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@TableName(&quot;sg_article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改service、dao等层"><a href="#修改service、dao等层" class="headerlink" title="修改service、dao等层"></a>修改service、dao等层</h3><p>对于Mapper层 ，因为使用的是Mybatis-plus,所以使用的Mapper就方便很多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Article&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Article&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>impl实现类上加注解</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置Controller及其注意事项"><a href="#配置Controller及其注意事项" class="headerlink" title="配置Controller及其注意事项"></a>配置Controller及其注意事项</h3><p>Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Article&gt; <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Article&gt; list = articleService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>对于使用模块化项目，我们再配置完成后需要重新install项目，这样不同模块配置的内容才会加载出来</p><p><img src="/images/image-20230311101949457.png" alt="image-20230311101949457"></p><h2 id="表的设计分析"><a href="#表的设计分析" class="headerlink" title="表的设计分析"></a>表的设计分析</h2><p><img src="/images/image-20230311102627224.png" alt="image-20230311102627224"></p><h2 id="通用的响应实体类-和-响应枚举"><a href="#通用的响应实体类-和-响应枚举" class="headerlink" title="通用的响应实体类 和 响应枚举"></a>通用的响应实体类 和 响应枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blog.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.blog.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ray2310</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = AppHttpCodeEnum.SUCCESS.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = AppHttpCodeEnum.SUCCESS.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result.error(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result.ok(code, <span class="literal">null</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getMsg());</span><br><span class="line">        <span class="keyword">if</span>(data!=<span class="literal">null</span>) &#123;</span><br><span class="line">            result.setData(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(AppHttpCodeEnum enums)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setAppHttpCodeEnum(enums,enums.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(AppHttpCodeEnum enums, String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setAppHttpCodeEnum(enums,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">setAppHttpCodeEnum</span><span class="params">(AppHttpCodeEnum enums)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> okResult(enums.getCode(),enums.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResponseResult <span class="title function_">setAppHttpCodeEnum</span><span class="params">(AppHttpCodeEnum enums, String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> okResult(enums.getCode(),msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; error(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(T data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blog.enums;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 专门存放枚举的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AppHttpCodeEnum</span> &#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    NEED_LOGIN(<span class="number">401</span>,<span class="string">&quot;需要登录后操作&quot;</span>),</span><br><span class="line">    NO_OPERATOR_AUTH(<span class="number">403</span>,<span class="string">&quot;无权限操作&quot;</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">500</span>,<span class="string">&quot;出现错误&quot;</span>),</span><br><span class="line">    USERNAME_EXIST(<span class="number">501</span>,<span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line">     PHONENUMBER_EXIST(<span class="number">502</span>,<span class="string">&quot;手机号已存在&quot;</span>), EMAIL_EXIST(<span class="number">503</span>, <span class="string">&quot;邮箱已存在&quot;</span>),</span><br><span class="line">    REQUIRE_USERNAME(<span class="number">504</span>, <span class="string">&quot;必需填写用户名&quot;</span>),</span><br><span class="line">    CONTENT_NOT_NULL(<span class="number">506</span>, <span class="string">&quot;评论内容不能为空&quot;</span>),</span><br><span class="line">    FILE_TYPE_ERROR(<span class="number">507</span>, <span class="string">&quot;文件类型错误，请上传png文件&quot;</span>),</span><br><span class="line">    USERNAME_NOT_NULL(<span class="number">508</span>, <span class="string">&quot;用户名不能为空&quot;</span>),</span><br><span class="line">    NICKNAME_NOT_NULL(<span class="number">509</span>, <span class="string">&quot;昵称不能为空&quot;</span>),</span><br><span class="line">    PASSWORD_NOT_NULL(<span class="number">510</span>, <span class="string">&quot;密码不能为空&quot;</span>),</span><br><span class="line">    EMAIL_NOT_NULL(<span class="number">511</span>, <span class="string">&quot;邮箱不能为空&quot;</span>),</span><br><span class="line">    NICKNAME_EXIST(<span class="number">512</span>, <span class="string">&quot;昵称已存在&quot;</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="number">505</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    <span class="type">int</span> code;</span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    AppHttpCodeEnum(<span class="type">int</span> code, String errorMessage)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用前端接口时出现权限不够</strong></p><p><img src="/images/image-20230311130111226.png" alt="image-20230311130111226"></p><p>同时会出现无法显示的问题， 那是因为我们前后端不在同一个域中，需要在mvc配置文件中配置跨域连调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现跨域配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="博客前台"><a href="#博客前台" class="headerlink" title="博客前台"></a>博客前台</h1><h2 id="热门文章列表"><a href="#热门文章列表" class="headerlink" title="热门文章列表"></a>热门文章列表</h2><p><img src="/images/image-20230311102117772.png" alt="image-20230311102117772"></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>查询出浏览量最高的前10篇文章的信息。 要求展示文章标题和浏览量。八能够让用户自己点击跳转到具体的文章详请进行浏览</p><p>注意 :  <code>不要把草稿展示出来 ，不要把删除的文章查询出来</code></p><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>将返回值使用 通用的返回响应</p><p>controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 查询热门文章</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hotArticleList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询热门文章，然后封装成ResponseResult ，然后返回</span></span><br><span class="line">    <span class="keyword">return</span> articleService.hotArticleList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 查询热门文章</span></span><br><span class="line">    <span class="comment">/*需求:</span></span><br><span class="line"><span class="comment">    查询出浏览量最高的前10篇文章的信息。 要求展览示文章标题和浏量。八能够让用户自己点击跳转到具体的文章详请进行浏览</span></span><br><span class="line"><span class="comment">    注意 :`不要把草稿展示出来 ，不要把删除的文章查询出来`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询热门文章 封装返回</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//用 LambdaQueryWrapper 写查询条件</span></span><br><span class="line">        queryWrapper.eq(Article::getStatus,<span class="number">0</span>);</span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(page))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.valueOf(<span class="string">&quot;暂无热门文章&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里老师的代码有错误，分页没有被加进去 ，我们自己需要修改</p><h3 id="使用VO优化"><a href="#使用VO优化" class="headerlink" title="使用VO优化"></a>使用VO优化</h3><p><img src="/images/image-20230311141200213.png" alt="image-20230311141200213"></p><p>需求 : 从我们的出的接口的返回值我们就可以看出，我们需要的只是博客内容的访问量 以及 博客名 而不是所有的内容都返回。这样不仅会造成信息泄露 ，如果文章字数过多，还会造成内存额外消耗。所以我们需要进行优化</p><p>经过处理的类我们叫做 VO类型的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口文档中要去响应回去的字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotArticle</span> &#123;</span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//文章标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再通过类型拷贝，就可以将我们需要的数据返回，而不是返回所有【拷贝的原理是两个类的属性相同】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">List&lt;HotArticle&gt; hotArticles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 类的赋值拷贝 Article中的某些字段 ---&gt; HotArticle</span></span><br><span class="line"><span class="comment">//使用BeanUtils进行拷贝</span></span><br><span class="line"><span class="keyword">for</span> (Article article : articles)&#123;</span><br><span class="line">    <span class="type">HotArticle</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotArticle</span>();</span><br><span class="line">    BeanUtils.copyProperties(article,vo);</span><br><span class="line">    hotArticles.add(vo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ResponseResult.okResult(hotArticles);</span><br></pre></td></tr></table></figure><h3 id="封装Bean拷贝工具类"><a href="#封装Bean拷贝工具类" class="headerlink" title="封装Bean拷贝工具类"></a>封装Bean拷贝工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有关拷贝工具类的封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ray2310</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanCopyUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanCopyUtils</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现属性拷贝</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; V <span class="title function_">copyBean</span><span class="params">(Object source,Class&lt;V&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="comment">//利用反射创建目标对象</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = clazz.newInstance();</span><br><span class="line">            <span class="comment">//实现属性的拷贝</span></span><br><span class="line">            BeanUtils.copyProperties(source,result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是list集合的属性拷贝 ，就直接调用该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 源列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 需要转换的类型的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回转换后的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;O,V&gt; List&lt;V&gt; <span class="title function_">copyBeanList</span><span class="params">(List&lt;O&gt; list , Class&lt;V&gt; clazz )</span>&#123;</span><br><span class="line">        List&lt;V&gt; collect = list.stream()</span><br><span class="line">                .map(o -&gt; copyBean(o, clazz))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分类列表需求"><a href="#分类列表需求" class="headerlink" title="分类列表需求"></a>分类列表需求</h2><p><img src="/images/image-20230311145817223.png" alt="image-20230311145817223"></p><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>页面上需要展示分类列表， 用户可以通过点击具体的分类查看该分类下的文章列表。</p><p>注意: 1. 要求只展示有发布展示文章的分类 。 2. 必须是正常状态的分类</p><h3 id="表信息"><a href="#表信息" class="headerlink" title="表信息"></a>表信息</h3><p><img src="/images/image-20230311150302648.png" alt="image-20230311150302648"></p><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="/images/image-20230311151015334.png" alt="image-20230311151015334"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 分类请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getCategoryList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryService.getCategoryList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路： </p><ol><li>先在文章表中查询 status（文章发布or未发布）为 0 的，也就是发布了的 。还有就是未删除的</li><li>查出上一步的之后只需要查分类id就可以了（category_id）</li><li>然后再到category表中查出对应的名称即可</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先我们使用EasyCode生成对应的mapper、pojo实体类等</p><p>完成service层等的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 分类请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 先在文章表中查询 status（文章发布or未发布）为 0 的，也就是发布了的 。还有就是未删除的</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_PUT);</span><br><span class="line">        List&lt;Article&gt; articles = articleService.list(queryWrapper);</span><br><span class="line">        <span class="comment">//2. 查出上一步的之后只需要查分类id就可以了（category_id）</span></span><br><span class="line">        <span class="comment">//todo 函数式编程 ，用来将查询到的id查询category</span></span><br><span class="line">        Set&lt;Long&gt; categoryIds = articles.stream()</span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Article, Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Article article)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> article.getCategoryId();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).collect(Collectors.toSet());</span><br><span class="line">        <span class="comment">//3. 然后再到category表中查出对应的名称即可 ,还需要判断分类的状态是正常的</span></span><br><span class="line">        List&lt;Category&gt; categories = listByIds(categoryIds);</span><br><span class="line">        <span class="comment">//4. 判断分类的状态是正常的</span></span><br><span class="line">        List&lt;Category&gt; collect = categories.stream().filter(category -&gt; category.getStatus().equals(SystemConstants.ARTICLE_CATEGORY_STATUS)).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//5. 封装状态</span></span><br><span class="line">        List&lt;CategoryVo&gt; categoryVoList = BeanCopyUtils.copyBeanList(collect, CategoryVo.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(categoryVoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意点-了解函数式编程"><a href="#注意点-了解函数式编程" class="headerlink" title="注意点: 了解函数式编程"></a>注意点: 了解函数式编程</h4><h2 id="分页查询文章列表"><a href="#分页查询文章列表" class="headerlink" title="分页查询文章列表"></a>分页查询文章列表</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>在首页查询文章页面都有文章列表  ，首页 ：查询所有文章 </p><p>分类页面： 查询对应分类的文章列表</p><p>要求 ：：1. 只能查询正式发布的文章 2. 置顶文章要显示在最前面</p><p>​</p><h3 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="/images/image-20230312143807864.png" alt="image-20230312143807864"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 文章分页</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/articleList&quot;)</span></span><br><span class="line"><span class="comment">//如果在请求路径后面直接 /+值的 需要使用 @PathVariable</span></span><br><span class="line"><span class="comment">//如果是从请求体中获取出来的就需要加上 @RequestBody</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> articleService.articleList(pageNum,pageSize,categoryId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照要求 ，我们需要将查询到的信息传入前端， 但是 不能将全部信息传入 ，所以就需要<strong>将查询到的信息进行封装</strong></p><p>  <code>List&lt;ArticleListVo&gt; articleListVo = BeanCopyUtils.copyBeanList(page.getRecords(), ArticleListVo.class);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 文章分页</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在首页查询文章页面都有文章列表  ，首页 ：查询所有文章</span></span><br><span class="line"><span class="comment">分类页面： 查询对应分类的文章列表</span></span><br><span class="line"><span class="comment">要求 ：：1. 只能查询正式发布的文章 2. 置顶文章要显示在最前面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    <span class="comment">//如果有categoryId ，那么查询和传入的就需要相同</span></span><br><span class="line">    queryWrapper.eq(Objects.nonNull(categoryId) &amp;&amp; categoryId &gt; <span class="number">0</span>,Article::getCategoryId,categoryId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 ： 正式发布</span></span><br><span class="line">    queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_PUT);</span><br><span class="line">    <span class="comment">//置顶的文章（对isTop进行排序）</span></span><br><span class="line">    queryWrapper.orderByDesc(Article::getIsTop);</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    Page&lt;Article&gt; pageN = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    Page&lt;Article&gt; page = page(pageN, queryWrapper);</span><br><span class="line">    <span class="comment">//封装查询结果</span></span><br><span class="line">    List&lt;ArticleListVo&gt; articleListVo = BeanCopyUtils.copyBeanList(page.getRecords(), ArticleListVo.class);</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(articleListVo, page.getTotal());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们封装的是categoryName，但是查询出来的确实categoryId，所以需要在查询后进行给categoryName赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Article article  : records)&#123;</span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(article.getCategoryId());</span><br><span class="line">    article.setCategoryName(category.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页配置"><a href="#分页配置" class="headerlink" title="分页配置"></a>分页配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * myBatisPlus分页配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mb.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改时间格式配置"><a href="#修改时间格式配置" class="headerlink" title="修改时间格式配置"></a>修改时间格式配置</h4><p>在WebConfig中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 修改时间格式 【yyyy-MM-dd HH:mm:ss】 </span></span><br><span class="line"><span class="comment">// 其实也可以直接在相关字段上加注解</span></span><br><span class="line"><span class="comment">// @JsonFormat(timezone=&quot;GMT+8&quot;,pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="comment">// 只是这样做可以使所有的时间格式都转换</span></span><br><span class="line"><span class="meta">@Bean</span><span class="comment">//使用@Bean注入fastJsonHttpMessageConvert</span></span><br><span class="line"><span class="keyword">public</span> HttpMessageConverter <span class="title function_">fastJsonHttpMessageConverters</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.需要定义一个Convert转换消息的对象</span></span><br><span class="line">    <span class="type">FastJsonHttpMessageConverter</span> <span class="variable">fastConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>();</span><br><span class="line">    <span class="type">FastJsonConfig</span> <span class="variable">fastJsonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonConfig</span>();</span><br><span class="line">    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">    fastJsonConfig.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);</span></span><br><span class="line"></span><br><span class="line">    fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);</span><br><span class="line">    fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">    HttpMessageConverter&lt;?&gt; converter = fastConverter;</span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    converters.add(fastJsonHttpMessageConverters());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章详情接口"><a href="#文章详情接口" class="headerlink" title="文章详情接口"></a>文章详情接口</h2><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h3><p>要在文章列表页面点击阅读全文时能够跳转到文章详情页面 ，可以让用户阅读文章正文</p><p>要求： 1. 要在文章详情中展示其分类名</p><h3 id="接口信息"><a href="#接口信息" class="headerlink" title="接口信息"></a>接口信息</h3><p><img src="/images/image-20230312164517847.png" alt="image-20230312164517847"></p><p>响应格式</p><p><img src="/images/image-20230312164556027.png" alt="image-20230312164556027"></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 查询文章详情</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetails</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> articleService.getArticleDetails(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 查询文章详情</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要在文章列表页面点击阅读全文时能够跳转到文章详情页面 ，可以让用户阅读文章正文</span></span><br><span class="line"><span class="comment">要求： 1. 要在文章详情中展示其分类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetails</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//根据文章id查询文章</span></span><br><span class="line">    <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//转换成vo格式</span></span><br><span class="line">    <span class="type">ArticleDetailVo</span> <span class="variable">articleDetailVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article, ArticleDetailVo.class);</span><br><span class="line">    <span class="comment">//根据分类id查询分类名</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> articleDetailVo.getCategoryId();</span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">    <span class="keyword">if</span>(category == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articleDetailVo);</span><br><span class="line">    &#125;</span><br><span class="line">    articleDetailVo.setCategoryName(category.getName());</span><br><span class="line">    <span class="comment">//封装响应，返回</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(articleDetailVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="友链查询"><a href="#友链查询" class="headerlink" title="友链查询"></a>友链查询</h2><h3 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h3><p> 如果进行评论 ，那么就可以将用户的网站名、地址、描述、logo放上去</p><h3 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="/images/image-20230312170340390.png" alt="image-20230312170340390"></p><p>响应格式</p><p><img src="/images/image-20230312170721528.png" alt="image-20230312170721528"></p><h3 id="表信息-1"><a href="#表信息-1" class="headerlink" title="表信息"></a>表信息</h3><p><img src="/images/image-20230312170447017.png" alt="image-20230312170447017"></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/link&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LinkService linkService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 获取所有友链</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAllLink&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkService.getAllLink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;linkService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;LinkMapper, Link&gt; <span class="keyword">implements</span> <span class="title class_">LinkService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// todo 获取所有友链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果进行评论 ，那么就可以将用户的网站名、地址、描述、logo放上去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询所有审核通过的</span></span><br><span class="line">        LambdaQueryWrapper&lt;Link&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">        queryWrapper.eq(Link::getStatus, SystemConstants.LINK_STATUS_NORMAL);</span><br><span class="line">        List&lt;Link&gt; links = list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;LinkVo&gt; linkVos = BeanCopyUtils.copyBeanList(links, LinkVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(linkVos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230316110227487.png" alt="image-20230316110227487"></p><p><img src="/images/image-20230316110924073.png" alt="image-20230316110924073"></p><p>响应</p><p><img src="/images/image-20230316112155537.png" alt="image-20230316112155537"></p><h3 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a>需求</h3><p>不仅需要实现评论 ，还要实现”父子评论“</p><h3 id="表分析"><a href="#表分析" class="headerlink" title="表分析"></a>表分析</h3><p><img src="/images/image-20230316110441239.png" alt="image-20230316110441239"></p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/comment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 评论列表</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/commentList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId ,Integer pageNum , Integer pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commentService.commentList(articleId,pageNum,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CommentMapper, Comment&gt; <span class="keyword">implements</span> <span class="title class_">CommentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 评论列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//根据文章id 所对应的 根评论(root_id = -1)</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//对articleId进行判断</span></span><br><span class="line">        queryWrapper.eq(Comment::getArticleId,articleId);</span><br><span class="line">        queryWrapper.eq(Comment::getRootId, SystemConstants.ARTICLE_ROOT_COMMENT);</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Comment&gt; pageN = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        Page&lt;Comment&gt; page = page(pageN, queryWrapper);</span><br><span class="line">        <span class="comment">//封装返回</span></span><br><span class="line">        List&lt;CommentVo&gt; list = toCommentVoList(page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(list,page.getTotal()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//comment 集合 和commentVo 集合的拷贝</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">toCommentVoList</span><span class="params">(List&lt;Comment&gt; list)</span>&#123;</span><br><span class="line">        List&lt;CommentVo&gt; commentVos = BeanCopyUtils.copyBeanList(list, CommentVo.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历vo</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : commentVos)&#123;</span><br><span class="line">            <span class="comment">//通过createBy查询用户的昵称并且赋值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> userService.getById(commentVo.getCreateBy()).getNickName();</span><br><span class="line">            commentVo.setUsername(nickName);</span><br><span class="line">            <span class="comment">//通过 toCommentUserId查询用户ude昵称并赋值</span></span><br><span class="line">            <span class="comment">//如果 toCommentUserId != -1才进行查询</span></span><br><span class="line">            <span class="keyword">if</span> (commentVo.getToCommentId() != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">toCommentName</span> <span class="operator">=</span> userService.getById(commentVo.getToCommentId()).getNickName();</span><br><span class="line">                commentVo.setToCommentUserName(toCommentName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> commentVos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询根评论对应的子评论"><a href="#查询根评论对应的子评论" class="headerlink" title="查询根评论对应的子评论"></a><code>查询根评论对应的子评论</code></h2><p>也就是多条评论</p><p><img src="/images/image-20230316122832752.png" alt="image-20230316122832752"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有根评论对应的子评论的集合 ，并且赋值给对应的属性children</span></span><br><span class="line"> <span class="keyword">for</span> (CommentVo commentVo : list)&#123;</span><br><span class="line">     <span class="comment">//查询对应子评论</span></span><br><span class="line">     List&lt;CommentVo&gt; children = getChildren(commentVo.getId());</span><br><span class="line">     commentVo.setChildren(children);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/todo 评论列表</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">    <span class="comment">//根据文章id 所对应的 根评论(root_id = -1)</span></span><br><span class="line">    LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//对articleId进行判断</span></span><br><span class="line">    queryWrapper.eq(Comment::getArticleId,articleId);</span><br><span class="line">    queryWrapper.eq(Comment::getRootId, SystemConstants.ARTICLE_ROOT_COMMENT);</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    Page&lt;Comment&gt; pageN = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    Page&lt;Comment&gt; page = page(pageN, queryWrapper);</span><br><span class="line">    <span class="comment">//封装返回</span></span><br><span class="line">    List&lt;CommentVo&gt; list = toCommentVoList(page.getRecords());</span><br><span class="line">    <span class="comment">//查询所有根评论对应的子评论的集合 ，并且赋值给对应的属性children</span></span><br><span class="line">    <span class="keyword">for</span> (CommentVo commentVo : list)&#123;</span><br><span class="line">        <span class="comment">//查询对应子评论</span></span><br><span class="line">        List&lt;CommentVo&gt; children = getChildren(commentVo.getId());</span><br><span class="line">        commentVo.setChildren(children);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(list,page.getTotal()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 根据根评论的id查询对应的子评论的集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">getChildren</span><span class="params">(Long commentId)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Comment::getRootId,commentId);</span><br><span class="line">    List&lt;Comment&gt; list = list(queryWrapper);</span><br><span class="line">    <span class="comment">//封装成为CommentVo，然后返回</span></span><br><span class="line">    <span class="keyword">return</span> toCommentVoList(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//comment 集合 和commentVo 集合的拷贝</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">toCommentVoList</span><span class="params">(List&lt;Comment&gt; list)</span>&#123;</span><br><span class="line">    List&lt;CommentVo&gt; commentVos = BeanCopyUtils.copyBeanList(list, CommentVo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历vo</span></span><br><span class="line">    <span class="keyword">for</span> (CommentVo commentVo : commentVos)&#123;</span><br><span class="line">        <span class="comment">//通过createBy查询用户的昵称并且赋值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> userService.getById(commentVo.getCreateBy()).getNickName();</span><br><span class="line">        commentVo.setUsername(nickName);</span><br><span class="line">        <span class="comment">//通过 toCommentUserId查询用户ude昵称并赋值</span></span><br><span class="line">        <span class="comment">//如果 toCommentUserId != -1才进行查询</span></span><br><span class="line">        <span class="keyword">if</span> (commentVo.getToCommentId() != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">toCommentName</span> <span class="operator">=</span> userService.getById(commentVo.getToCommentId()).getNickName();</span><br><span class="line">            commentVo.setToCommentUserName(toCommentName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> commentVos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="发表评论"><a href="#发表评论" class="headerlink" title="发表评论"></a>发表评论</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p><img src="/images/image-20230316124356854.png" alt="image-20230316124356854"></p><p><img src="/images/image-20230316124520194.png" alt="image-20230316124520194"></p><p>如果是友链 type为 1</p><p>还需要有请求体</p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.entity.Comment;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.vo.CommentVo;</span><br><span class="line"><span class="keyword">import</span> com.blog.domain.vo.PageVo;</span><br><span class="line"><span class="keyword">import</span> com.blog.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.blog.exception.SystemException;</span><br><span class="line"><span class="keyword">import</span> com.blog.mapper.CommentMapper;</span><br><span class="line"><span class="keyword">import</span> com.blog.service.CommentService;</span><br><span class="line"><span class="keyword">import</span> com.blog.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.blog.utils.BeanCopyUtils;</span><br><span class="line"><span class="keyword">import</span> com.blog.utils.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> com.blog.utils.SystemConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.BaseRowSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CommentMapper, Comment&gt; <span class="keyword">implements</span> <span class="title class_">CommentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 评论列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//根据文章id 所对应的 根评论(root_id = -1)</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//对articleId进行判断</span></span><br><span class="line">        queryWrapper.eq(Comment::getArticleId,articleId);</span><br><span class="line">        queryWrapper.eq(Comment::getRootId, SystemConstants.ARTICLE_ROOT_COMMENT);</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Comment&gt; pageN = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        Page&lt;Comment&gt; page = page(pageN, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装返回</span></span><br><span class="line">        List&lt;CommentVo&gt; list = toCommentVoList(page.getRecords());</span><br><span class="line">        <span class="comment">//查询所有根评论对应的子评论的集合 ，并且赋值给对应的属性children</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : list)&#123;</span><br><span class="line">            <span class="comment">//查询对应子评论</span></span><br><span class="line">            List&lt;CommentVo&gt; children = getChildren(commentVo.getRootId());</span><br><span class="line">            commentVo.setChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(list,page.getTotal()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 添加评论</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(Comment comment)</span> &#123;</span><br><span class="line">        <span class="comment">//评论内容不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(comment.getContent()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.CONTENT_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        save(comment);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 根据根评论的id查询对应的子评论的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">getChildren</span><span class="params">(Long commentId)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Comment::getRootId,commentId);</span><br><span class="line">        queryWrapper.orderByAsc(Comment::getCreateTime);</span><br><span class="line">        List&lt;Comment&gt; list = list(queryWrapper);</span><br><span class="line">        <span class="comment">//封装成为CommentVo，然后返回</span></span><br><span class="line">        <span class="keyword">return</span> toCommentVoList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo comment 集合 和commentVo 集合的拷贝</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">toCommentVoList</span><span class="params">(List&lt;Comment&gt; list)</span>&#123;</span><br><span class="line">        List&lt;CommentVo&gt; commentVos = BeanCopyUtils.copyBeanList(list, CommentVo.class);</span><br><span class="line">        <span class="comment">//遍历vo</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : commentVos)&#123;</span><br><span class="line">            <span class="comment">//通过createBy查询用户的昵称并且赋值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> userService.getById(commentVo.getCreateBy()).getNickName();</span><br><span class="line">            commentVo.setUsername(nickName);</span><br><span class="line">            <span class="comment">//通过 toCommentUserId查询用户ude昵称并赋值</span></span><br><span class="line">            <span class="comment">//如果 toCommentUserId != -1才进行查询</span></span><br><span class="line">            <span class="keyword">if</span> (commentVo.getToCommentUserId() != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">toCommentUserName</span> <span class="operator">=</span> userService.getById(commentVo.getToCommentUserId()).getNickName();</span><br><span class="line">                commentVo.setToCommentUserName(toCommentUserName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> commentVos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="友链评论"><a href="#友链评论" class="headerlink" title="友链评论"></a>友链评论</h2><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230318111815616.png" alt="image-20230318111815616"></p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/linkCommentList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listCommentList</span><span class="params">(Integer pageNum , Integer pageSize)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commentService.commentList(SystemConstants.COMMENT_TYPE_FRIEND,<span class="literal">null</span>,pageNum,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CommentMapper, Comment&gt; <span class="keyword">implements</span> <span class="title class_">CommentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 评论列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(String commentType, Long articleId, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//根据文章id 所对应的 根评论(root_id = -1)</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对articleId进行判断  ，必须是文章评论再显示这个条件</span></span><br><span class="line">        queryWrapper.eq(SystemConstants.COMMENT_TYPE_ARTICLE.equals(commentType),Comment::getArticleId,articleId);</span><br><span class="line">        queryWrapper.eq(Comment::getRootId, SystemConstants.ARTICLE_ROOT_COMMENT);</span><br><span class="line">        <span class="comment">//评论类型</span></span><br><span class="line">        queryWrapper.eq(Comment::getType,commentType);</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Comment&gt; pageN = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        Page&lt;Comment&gt; page = page(pageN, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装返回</span></span><br><span class="line">        List&lt;CommentVo&gt; list = toCommentVoList(page.getRecords());</span><br><span class="line">        <span class="comment">//查询所有根评论对应的子评论的集合 ，并且赋值给对应的属性children</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : list)&#123;</span><br><span class="line">            <span class="comment">//查询对应子评论</span></span><br><span class="line">            List&lt;CommentVo&gt; children = getChildren(commentVo.getRootId());</span><br><span class="line">            commentVo.setChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(list,page.getTotal()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h2><h3 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230318125856965.png" alt="image-20230318125856965"></p><h3 id="表分析-1"><a href="#表分析-1" class="headerlink" title="表分析"></a>表分析</h3><p><img src="/images/image-20230318125957961.png" alt="image-20230318125957961"></p><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.userInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 用户中心</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line">        <span class="comment">//根据当前用户id查询当前用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="comment">//封装成userInfoVo返回</span></span><br><span class="line">        <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user, UserInfoVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(userInfoVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="个人信息curd"><a href="#个人信息curd" class="headerlink" title="个人信息curd"></a>个人信息curd</h3><h4 id="头像上传—-使用七牛云"><a href="#头像上传—-使用七牛云" class="headerlink" title="头像上传—-使用七牛云"></a>头像上传—-使用七牛云</h4><p><img src="/images/image-20230318132126703.png" alt="image-20230318132126703"></p><p>首先上传至web应用服务器 ，然后再从web服务器上传至 oss</p><h4 id="接口-3"><a href="#接口-3" class="headerlink" title="接口"></a>接口</h4><p><strong>上传文件需求 ：</strong> </p><p><img src="/images/image-20230318141309454.png"></p><p><strong>更新个人信息需求 ：</strong> </p><p><img src="/images/image-20230318145103396.png" alt="image-20230318145103396"></p><h4 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h4><p>上传文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadImg</span><span class="params">(MultipartFile img)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadService.uploadImg(img);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件到七牛云</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;oss&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UploadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 实现文件的上传</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">uploadImg</span><span class="params">(MultipartFile img)</span> &#123;</span><br><span class="line">        <span class="comment">//判断文件的大小</span></span><br><span class="line">        <span class="comment">//获取原始文件名进行判断</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span>(!originalFilename.endsWith(<span class="string">&quot;.png&quot;</span>) &amp;&amp; !originalFilename.endsWith(<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.FILE_TYPE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果通过，上传文件到oss</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> uploadOSS(img);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">uploadOSS</span><span class="params">(MultipartFile imgFile)</span>&#123;</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Region.autoRegion());</span><br><span class="line">        <span class="comment">//...其他参数参考类注释</span></span><br><span class="line">        <span class="type">UploadManager</span> <span class="variable">uploadManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadManager</span>(cfg);</span><br><span class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//images目录下的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> imgFile.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;images/&quot;</span>+originalFilename;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将前端传过来的imgFile文件转换成一个inputStream，然后</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> imgFile.getInputStream();</span><br><span class="line">            <span class="type">Auth</span> <span class="variable">auth</span> <span class="operator">=</span> Auth.create(accessKey, secretKey);</span><br><span class="line">            <span class="type">String</span> <span class="variable">upToken</span> <span class="operator">=</span> auth.uploadToken(bucket);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> uploadManager.put(inputStream,key,upToken,<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//解析上传成功的结果</span></span><br><span class="line">                <span class="type">DefaultPutRet</span> <span class="variable">putRet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">                System.out.println(putRet.key);</span><br><span class="line">                System.out.println(putRet.hash);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">r</span> <span class="operator">=</span> ex.response;</span><br><span class="line">                System.err.println(r.toString());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.err.println(r.bodyString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                    <span class="comment">//ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">//ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//文件地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://rrpanx30j.hd-bkt.clouddn.com/images/&quot;</span>+ originalFilename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新个人信息实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.userInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUserInfo(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 用户中心</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line">        <span class="comment">//根据当前用户id查询当前用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="comment">//封装成userInfoVo返回</span></span><br><span class="line">        <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user, UserInfoVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(userInfoVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 更新个人信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateUserInfo</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        updateById(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h1><h3 id="接口-4"><a href="#接口-4" class="headerlink" title="接口"></a>接口</h3><p><img src="/images/image-20230313163836015.png" alt="image-20230313163836015"></p><h3 id="请求and响应信息"><a href="#请求and响应信息" class="headerlink" title="请求and响应信息"></a>请求and响应信息</h3><p><img src="/images/image-20230313163731178.png" alt="image-20230313163731178"></p><h3 id="表分析-2"><a href="#表分析-2" class="headerlink" title="表分析"></a>表分析</h3><p><img src="/images/image-20230313180949226.png" alt="image-20230313180949226"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><img src="/images/image-20230313181433354.png" alt="image-20230313181433354"></p><p> <strong>登录</strong></p><p>​<strong>①自定义登录接口</strong></p><p>​<strong>调用ProviderManager的方法进行认证 如果认证成功生成jwt</strong></p><p>​<strong>把信息存入redis中</strong></p><p>​<strong>②自定义UserDetailsService</strong></p><p>​<strong>在这个实现类中进行查询数据库操作</strong></p><p>​<strong>注意配置密码加密BCryptPasswordCoder</strong></p><p><strong>校验</strong></p><p>​<strong>①自定义jwt认证过滤器</strong></p><p>​<strong>获取token</strong></p><p>​<strong>解析token获取其中的userId</strong></p><p>​<strong>从redis中获取用户信息</strong></p><p>​<strong>存入securityContextHolder</strong></p><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringSecurity启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jwt依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h3><h2 id="登录校验过滤器代码实现"><a href="#登录校验过滤器代码实现" class="headerlink" title="登录校验过滤器代码实现"></a>登录校验过滤器代码实现</h2><p><strong>校验</strong></p><p>​<strong>①自定义jwt认证过滤器</strong></p><p>​<strong>获取token</strong></p><p>​<strong>解析token获取其中的userId</strong></p><p>​<strong>从redis中获取用户信息</strong></p><p>​<strong>存入securityContextHolder</strong></p><p><strong>JwtAuthenticationTokenFilter</strong></p><h3 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h3><ol><li>重新jwt过滤器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token))&#123;</span><br><span class="line">            <span class="comment">//说明该接口不需要登录，直接放行</span></span><br><span class="line">            filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token获取其中的userId</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = JwtUtil.parseJWT(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果异常， 那么就是token超时或者非法</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//返回异常信息</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(httpServletResponse, JSON.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(SystemConstants.LOGIN_KEY_PREFIX + userId);</span><br><span class="line">        <span class="comment">//如果获取不到</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class="line">            <span class="comment">//提示重新登录</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(httpServletResponse, JSON.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入securityContextHolder</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        filterChain.doFilter(httpServletRequest,httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将过滤器加入到SecurityConfig的配置文件中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpSecurity</span> <span class="variable">disable</span> <span class="operator">=</span> http.csrf().disable();</span><br><span class="line">        System.out.println(<span class="string">&quot;----&quot;</span>+disable.toString());</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//不通过session获取SecurityContext</span></span><br><span class="line">                <span class="comment">//对于登录接口 ，匿名访问</span></span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/login&quot;</span>).anonymous()</span><br><span class="line"><span class="comment">//用于测试的接口---友链                </span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/link/getAllLink&quot;</span>).authenticated()</span><br><span class="line">                <span class="comment">//剩下的都不需要认证即可访问</span></span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                        .and()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                ;</span><br><span class="line">        http.logout().disable();</span><br><span class="line">        <span class="comment">//允许跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">        <span class="comment">//将自定义的filter添加到过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认证授权异常处理"><a href="#认证授权异常处理" class="headerlink" title="认证授权异常处理"></a>认证授权异常处理</h2><p>未处理的异常</p><p><img src="/images/image-20230315092254529.png" alt="image-20230315092254529"></p><p>上面这种异常处理的方式不符合项目接口的规范，所以我们<strong>需要自定义异常处理</strong></p><p>实现的认证失败的接口处理</p><h3 id="AuthenticationEntryPoint认证失败处理"><a href="#AuthenticationEntryPoint认证失败处理" class="headerlink" title="AuthenticationEntryPoint认证失败处理"></a>AuthenticationEntryPoint认证失败处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证失败处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//判断异常的类型信息</span></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BadCredentialsException)&#123;</span><br><span class="line">            result = ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_ERROR.getCode(),e.getMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsufficientAuthenticationException)&#123;</span><br><span class="line">            result = ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_ERROR);</span><br><span class="line">        &#125;<span class="comment">//其他情况</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result = ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),<span class="string">&quot;认证失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//响应给前端</span></span><br><span class="line">        WebUtils.renderString(httpServletResponse, JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AccessDeniedHandler授权失败处理"><a href="#AccessDeniedHandler授权失败处理" class="headerlink" title="AccessDeniedHandler授权失败处理"></a>AccessDeniedHandler授权失败处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权失败处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="comment">//响应给前端</span></span><br><span class="line">        WebUtils.renderString(httpServletResponse, JSON.toJSONString(result));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="放入SecurityConfig中"><a href="#放入SecurityConfig中" class="headerlink" title="放入SecurityConfig中"></a>放入SecurityConfig中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//配置认证和授权的异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对于controller层出现的异常"><a href="#对于controller层出现的异常" class="headerlink" title="对于controller层出现的异常"></a>对于controller层出现的异常</h2><p>比如向如下的异常， 用户登录时没有输入用户名，那么如果我们不在controller层进行拦截 ，他就会进入service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">        <span class="comment">//提示 要传用户名</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.REQUIRE_USERNAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> blogLoginService.login(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们直接在controller层进行拦截</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li>自定义异常类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(AppHttpCodeEnum httpCodeEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(httpCodeEnum.getMsg());</span><br><span class="line">        <span class="built_in">this</span>.code = httpCodeEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = httpCodeEnum.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置自定义异常拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义的controller层异常拦截</span></span><br><span class="line"><span class="comment"> * 对于controller层的异常 ，直接进行拦截返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ControllerAdvice</span></span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span>      <span class="comment">//使用之后可以直接使用log</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">systemExceptionHandler</span><span class="params">(SystemException e)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 打印异常信息</span></span><br><span class="line">        log.error(<span class="string">&quot;出现了异常!  &#123;&#125;&quot;</span>,e);</span><br><span class="line">        <span class="comment">//2. 从异常对象中获取提示信息</span></span><br><span class="line">        <span class="comment">//3. 封装返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(e.getCode(),e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><h3 id="接口-5"><a href="#接口-5" class="headerlink" title="接口"></a>接口</h3><p>需要token</p><p><img src="/images/image-20230315101032018.png" alt="image-20230315101032018"></p><p>登录时 ，我们将用户的相关信息存入到了redis中 ，同时也包括token</p><p>如果想要退出 ，我们只需要删除redis中的用户登录数据即可</p><h3 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> blogLoginService.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 退出登录</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取 token 解析获取 userId</span></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line"></span><br><span class="line">    redisCache.deleteObject(SystemConstants.LOGIN_KEY_PREFIX + userId);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注册系统"><a href="#注册系统" class="headerlink" title="注册系统"></a>注册系统</h1><h2 id="接口-6"><a href="#接口-6" class="headerlink" title="接口"></a>接口</h2><p><img src="/images/image-20230318151249833.png" alt="image-20230318151249833"></p><h2 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.register(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务层实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="comment">//todo 注册用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//对数据进行非空判断 要求用户名 密码 等都不为空</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            ResponseResult.errorResult(AppHttpCodeEnum.USERNAME_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( StringUtils.hasText(user.getPassword()))&#123;</span><br><span class="line">            ResponseResult.errorResult(AppHttpCodeEnum.PASSWORD_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( StringUtils.hasText(user.getEmail()))&#123;</span><br><span class="line">            ResponseResult.errorResult(AppHttpCodeEnum.EMAIL_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( StringUtils.hasText(user.getNickName()))&#123;</span><br><span class="line">            ResponseResult.errorResult(AppHttpCodeEnum.NICKNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断数据库中是否存在用户</span></span><br><span class="line">        <span class="keyword">if</span>(usernameExist(user.getUserName()))&#123;</span><br><span class="line">            <span class="comment">//用户已经存在</span></span><br><span class="line">            ResponseResult.errorResult(USERNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nickNameExist(user.getNickName()))&#123;</span><br><span class="line">            <span class="comment">//昵称存在</span></span><br><span class="line">            ResponseResult.errorResult(NICKNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">///密码加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePass</span> <span class="operator">=</span> passwordEncoder.encode(user.getPassword());</span><br><span class="line">        user.setPassword(encodePass); <span class="comment">//设置加密之后的密码</span></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 判断用户名是否存在</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">usernameExist</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> count(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(count &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//todo 判断昵称是否存在</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">nickNameExist</span><span class="params">(String nickName)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getNickName,nickName);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> count(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(count &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP Implement</title>
      <link href="/post/1c0a3278.html"/>
      <url>/post/1c0a3278.html</url>
      
        <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><h2 id="KMP-的思想"><a href="#KMP-的思想" class="headerlink" title="KMP 的思想"></a>KMP 的思想</h2><p><strong>kmp的思想就是当出现字符串不匹配的情况时，可以知道一部分之前已经匹配的文本内容，利用这些信息避免从头再去匹配</strong></p><p>怎么记录之前已经匹配的内容 ？</p><p>一般使用前缀表来做记录</p><h4 id="前缀表-：-记录了模式串-和-文本串-不匹配的时候，-模式串应该从哪里开始重新匹配的信息"><a href="#前缀表-：-记录了模式串-和-文本串-不匹配的时候，-模式串应该从哪里开始重新匹配的信息" class="headerlink" title="前缀表 ：  记录了模式串 和 文本串 不匹配的时候， 模式串应该从哪里开始重新匹配的信息"></a>前缀表 ：  记录了模式串 和 文本串 不匹配的时候， 模式串应该从哪里开始重新匹配的信息</h4><blockquote><p>案例  （下文所有都会拿这两个举例）：</p><p> 文本串  : 【 a a b a a b a a f a】</p><p>模式串  ： 【 a a b a a f】</p></blockquote><h4 id="有关前缀表"><a href="#有关前缀表" class="headerlink" title="有关前缀表"></a>有关前缀表</h4><h5 id="什么是前缀"><a href="#什么是前缀" class="headerlink" title="什么是前缀 ?"></a>什么是前缀 ?</h5><p>​字符串中前缀是指 <strong>不包含最后一个字符</strong>的<strong>所有以第一个字符开头的连续子字符串</strong></p><p>以模式串为例</p><p>【a a b a a f】</p><p>它的前缀有 </p><blockquote><p>[ a ]</p><p>[ a a ]</p><p>[ a a b ]</p><p>[ a a b a]</p><p>[ a a b a a]</p></blockquote><h5 id="什么是后缀"><a href="#什么是后缀" class="headerlink" title="什么是后缀 ?"></a>什么是后缀 ?</h5><p>​字符串中后缀是指 <strong>不包含第一个字符</strong>的所有<strong>以最后一个字符结尾的连续子字符串</strong></p><p>以模式串为例</p><p>【a a b a a f】</p><p>它的后缀有</p><blockquote><p>[ f ]</p><p>[ a f ]</p><p>[ a a f ]</p><p>[ b a a f ]</p><p>[ a b a a f ] </p></blockquote><h5 id="最长相等前后缀"><a href="#最长相等前后缀" class="headerlink" title="最长相等前后缀"></a>最长相等前后缀</h5><p>以模式串为例</p><p>【a a b a a f】 那么这个的最长相等连续字串就是 0 </p><p>如果是【a a】 那么它的最长相等连续字串就是 1 </p><p>如果是【a a b】 那么它的最长相等连续字串就是 0 </p><p>如果是【a a b a 】 那么它的最长相等连续字串就是 1 </p><p>如果是【a a b a a】 那么它的最长相等连续字串就是 2</p><h2 id="得到前缀表"><a href="#得到前缀表" class="headerlink" title="得到前缀表"></a>得到前缀表</h2><p>下标  ：[ 0 1 2 3 4 5 ]</p><p>模式串: [ a a b a a  f ]</p><p>前缀表: [ 0 1 0 1 2 0 ]    ——&gt; 我们得到前缀表就是 最长相等前后缀 ，也就是最长相等连续子串</p><h3 id="如何利用前缀表找到字符不匹配时指针应该移动的位置"><a href="#如何利用前缀表找到字符不匹配时指针应该移动的位置" class="headerlink" title="如何利用前缀表找到字符不匹配时指针应该移动的位置"></a>如何利用前缀表找到字符不匹配时指针应该移动的位置</h3><p> 文本串  : 【 a a b a a b a a f a】</p><p>下标 ：    【 0 1 2 3 4 5…】</p><p>模式串  : 【 a a b a a f 】</p><p>前缀表 :  【 0 1 0 1 2 0】</p><p><strong>根据不匹配的前一位即前面匹配的那一位的最长相等前后缀的next[i] 的值</strong>  和 <strong>上面的文本串的下标 进行匹配</strong> ，从而找到指针应该移动的位置</p><p>从上面的图中 <strong>我们就可以得到 在 文本串的【索引 5】 的地方开始就无法匹配 ， 那么我们要找的就是【索引 4】所对应的前缀表的数值</strong></p><p> <strong>与之对应的值 为 2 那么我们就从文本串中找到下标为 2 的，从那里开始重新匹配</strong></p><h1 id="实现KMP"><a href="#实现KMP" class="headerlink" title="实现KMP"></a>实现KMP</h1><h2 id="构造前缀表"><a href="#构造前缀表" class="headerlink" title="构造前缀表"></a>构造前缀表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String s , <span class="type">int</span>[] next)</span>&#123;</span><br><span class="line">    <span class="comment">//初始化指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    next[<span class="number">0</span>] = j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; s.length();i++)&#123;</span><br><span class="line">        <span class="comment">//前后缀 不相等的情况</span></span><br><span class="line">        <span class="keyword">while</span>( j &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j + <span class="number">1</span>))&#123;</span><br><span class="line">            j = next[j];<span class="comment">//回退</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前后缀 相等的情况</span></span><br><span class="line">      <span class="keyword">if</span>(s.charAt(i) == s.charAt(j + <span class="number">1</span>))&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j; <span class="comment">//对前缀表进行赋值 ，赋值最长相等前后缀</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用前缀表来匹配数组"><a href="#用前缀表来匹配数组" class="headerlink" title="用前缀表来匹配数组"></a>用前缀表来匹配数组</h3><p>找出文串中 模式串第一个字符的位置（从 0 开始）</p><p>答 ： 返回当前在文本串匹配的最后一个位置 i ， 然后再减去模式串的长度 ，就是文本串中模式串的第一个字符的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//文本串 模式串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String str , String needle)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(needle.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">1</span> ; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ; i&lt;str.length;i++)&#123;</span><br><span class="line">        <span class="comment">//不匹配情况</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; str.charAt(i) != needle.charAt( j - <span class="number">1</span>))&#123;</span><br><span class="line">            j = next[j];<span class="comment">//j 寻找之前匹配好的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//匹配的情况</span></span><br><span class="line">        <span class="keyword">if</span>(str.charAt(i) == needle.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == needle.length() - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - needle.length() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之----01背包题目解析</title>
      <link href="/post/32bb74e9.html"/>
      <url>/post/32bb74e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="分割等和子串"><a href="#分割等和子串" class="headerlink" title="分割等和子串"></a>分割等和子串</h1><blockquote><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">题目链接(opens new window)</a></p><p>题目难易：中等</p><p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p>注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200</p><p>示例 1:</p><ul><li>输入: [1, 5, 11, 5]</li><li>输出: true</li><li>解释: 数组可以分割成 [1, 5, 5] 和 [11].</li></ul><p>示例 2:</p><ul><li>输入: [1, 2, 3, 5]</li><li>输出: false</li><li>解释: 数组不能分割成两个元素和相等的子集.</li></ul><p>提示：</p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 200</li><li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 100</li></ul></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这种类型的题 我们一上来首先想到的肯定不是动归 ，而使回溯，回溯解决切割问题。但是这道题相对于也是可以使用dp去解决的</p><p>这道题 他求解的是是否可以分割成两个<strong>相等的子集</strong>  ，既然想要相同， 那么想要相同，那sum肯定不能是基数 ，如果是奇数 那么就不可能平分 ，所以我们可以先进行判断 ，排除一些不可能的结果。</p><h3 id="动归五部曲"><a href="#动归五部曲" class="headerlink" title="动归五部曲"></a>动归五部曲</h3><ol><li><code>确定dp数组 含义 以及下标的含义</code></li></ol><p>首先对比背包问题使用dp的的方法</p><ul><li>背包问题 ：   <strong>dp[j] ： 表示 背包容量为 j 的背包 所能存放的物品的最大价值是dp[j]</strong></li></ul><p>所以说对于本体来讲 ，我们使用的是 数值 那么它的重量 和 价值是相同的</p><ul><li>本体dp : <strong>dp[j]  :  表示 背包容量为 j 的背包 ，所能容纳的最大重量为dp[j]</strong></li></ul><p> 我们所求的最大重量  : 就是 子集中的元素相加最大 </p><p>容量  ： 给定的数组中的所有元素之和 &#x2F; 2得到的结果  + 1 就是最大容量‘【加一是因为整除他会向下取整】</p><p>容量最大值 ： 【注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200】 那么就是 （100 * 200 ）&#x2F;2</p><ol start="2"><li><code>确定dp公式</code></li></ol><p>我们要求的是dp[j] 也就是容量为 j 的背包的最大重量</p><p>那么也就是对于每一个 dp[j] 我们都要比较大小 ，然后返回最大的即可</p><p><strong>本题，相当于背包里放入数值，那么物品i的重量是nums[i]，其价值也是nums[i]。</strong></p><p><code>dp[j] = Math.max(dp[j] , dp[j - nums[i]] + nums[i])</code></p><ol start="3"><li><code>dp的初始化 及大小</code></li></ol><p>对于dp数组而言 ， 它的初始化 是根据题意来进行写的， 我们这里就是初始化为 0</p><p>dp数组的大小 也就是背包的所能承受的最大重量</p><p><strong>容量  ：</strong> 给定的数组中的所有元素之和 &#x2F; 2得到的结果  + 1 就是最大容量‘【加一是因为整除他会向下取整】</p><p><strong>容量最大值 ：</strong> 【注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200】 那么就是 （100 * 200 ）&#x2F;2</p><ol start="4"><li><code>遍历顺序</code></li></ol><p>同样的 和背包问题一样， 我们这里需要两层遍历 </p><p><strong>第一层遍历数值</strong></p><p><strong>第二层遍历背包</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始 01背包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--) &#123; <span class="comment">// 每一个元素一定是不可重复放入，所以从大到小遍历</span></span><br><span class="line">        dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我们不能只简单的实现dp数组 ，根据题目要求 ，我们需要判断 该数组能否完成分割 ，也就是dp数组的最大重量是否等于背包的最大重量</p><p>所以需要进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(dp[target] == target)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="整体代码实现"><a href="#整体代码实现" class="headerlink" title="整体代码实现"></a>整体代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//总和为奇数，不能平分</span></span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">                <span class="comment">//物品 i 的重量是 nums[i]，其价值也是 nums[i]</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j-nums[i]] + nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后一块石头的重量"><a href="#最后一块石头的重量" class="headerlink" title="最后一块石头的重量"></a>最后一块石头的重量</h1><blockquote><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/">题目链接(opens new window)</a></p><p>题目难度：中等</p><p>有一堆石头，每块石头的重量都是正整数。</p><p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;&#x3D; y。那么粉碎的可能结果如下：</p><p>最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。</p><p>示例：</p><ul><li>输入：[2,7,4,1,8,1]</li><li>输出：1</li></ul><p>解释：</p><ul><li>组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，</li><li>组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，</li><li>组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，</li><li>组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</li></ul><p>提示：</p><ul><li>1 &lt;&#x3D; stones.length &lt;&#x3D; 30</li><li>1 &lt;&#x3D; stones[i] &lt;&#x3D; 1000</li></ul></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>本题的目的是让我们找到碰撞之后 ，重量最小的石头的重量。 同样的 ， 我们可以将其换位思考变化为背包问题</p><p>关键点:</p><ul><li><p>如果 x &#x3D;&#x3D; y，那么两块石头都会被完全粉碎；</p></li><li><p>如果 x !&#x3D; y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。</p></li></ul><p>碰撞之后的重量最小的石头 ，那么就相当于 <strong>将两个大小相似的石头进行碰撞 ，到最后剩下的 那么一定是重量最小的石头 ，因为我们找的是重量相近的两个石头碰撞</strong></p><p><strong>那么问题的关键就是怎么寻找重量相近的石头</strong> ，答案很简单</p><p><strong>先对数组进行求和sum ，然后将 sum&#x2F; 2 ，得到一个结果target ，那么另一个值就是 (sum - sum&#x2F;2) —&gt;（sum -target）</strong></p><p><strong>那么我们所需要的最小值就一定是 target - (sum - target) 的绝对值 ，为什么取绝对值 ? 因为我们不知道 target 和 sum-target到底哪个大</strong></p><h3 id="动归五部曲-1"><a href="#动归五部曲-1" class="headerlink" title="动归五部曲"></a>动归五部曲</h3><ol><li>确定dp数组及其含义</li></ol><p>就刚刚我们的思路而言 ，本题的思路 和 实现 上一题 基本上是如出一辙 。 </p><p><strong>dp[j] 表示  ：  容量为 j 的背包 ，放置的物品的最大重量为dp[j]</strong></p><p>换位思考到本题即可 </p><ol start="2"><li>确定dp数组公式</li></ol><p><code>dp[j] = Math.max(dp[j] , dp[j - nums[i]] + nums[i])</code></p><ol start="3"><li>dp数组的初始化</li></ol><p>这里我们全部初始化为0 即可</p><p>大小 ：也就是数组中的所有元素之和 &#x2F; 2得到的结果  + 1 就是最大容量【加一是因为整除他会向下取整】</p><ol start="4"><li>确定遍历顺序</li></ol><p>和前面的题一样。 如果使用一维dp数组，物品遍历的for循环放在外层，遍历背包的for循环放在内层，且内层for循环倒序遍历</p><h3 id="最后返回"><a href="#最后返回" class="headerlink" title="最后返回"></a>最后返回</h3><p><strong>相撞之后剩下的最小石头重量就是 (sum - dp[target]) - dp[target]  —&gt; sum  - 2 * dp[target]</strong></p><h2 id="整体代码实现-1"><a href="#整体代码实现-1" class="headerlink" title="整体代码实现"></a>整体代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : stones) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//初始化dp数组</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stones.length; i++) &#123;</span><br><span class="line">            <span class="comment">//采用倒序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= stones[i]; j--) &#123;</span><br><span class="line">                <span class="comment">//两种情况，要么放，要么不放</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - <span class="number">2</span> * dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis解决秒杀下单</title>
      <link href="/post/5bc74249.html"/>
      <url>/post/5bc74249.html</url>
      
        <content type="html"><![CDATA[<h2 id="秒杀接口"><a href="#秒杀接口" class="headerlink" title="秒杀接口"></a>秒杀接口</h2><p><img src="/images/image-20230308132933280.png" alt="image-20230308132933280"></p><h2 id="基础下单实现"><a href="#基础下单实现" class="headerlink" title="基础下单实现"></a>基础下单实现</h2><p>controller层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀下单业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/voucher-order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IVoucherOrderService voucherOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;seckill/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long voucherId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> voucherOrderService.seckillVoucher(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现下单【未涉及下单模块】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现优惠卷下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>  <span class="comment">//添加事务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 查询优惠券id</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2. 查询优惠卷信息</span></span><br><span class="line">        <span class="comment">//3. 判断秒杀是否开启</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 是，判断库存是否充足</span></span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">stock</span> <span class="operator">=</span> voucher.getStock();</span><br><span class="line">        <span class="keyword">if</span> (stock &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;已经被抢完了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//-------基础场景下的下单业务------------------</span></span><br><span class="line">        <span class="comment">//5，扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock -1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">//扣减库存</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 6.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 6.2.用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 6.3.代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们点击限时抢购时 ，如果所有条件允许，就会下单成功</p><p><img src="/images/image-20230308133341411.png" alt="image-20230308133341411"></p><p>数据库优惠卷数量也会减1</p><p><img src="/images/image-20230308133414881.png" alt="image-20230308133414881"></p><p>订单表也会添加订单</p><p><img src="/images/image-20230308133515779.png" alt="image-20230308133515779"></p><p>上述就是实现最基本的优惠卷下单功能。当然真实的业务场景绝对不会是向我们这么简单的。</p><p>在同一时间会有上万的用户同时点击限时抢购 按钮，此刻的并发量就会达到非常大。就会出现一系列的安全问题。</p><p>比如: 超卖问题、一人一单问题、集群模式下线程安全问题….. 。下面我们就需要解决这些问题</p><h2 id="库存超卖问题"><a href="#库存超卖问题" class="headerlink" title="库存超卖问题"></a>库存超卖问题</h2><p>在高并发的场景下会出现的情况</p><p><img src="/images/image-20230308140426085.png" alt="image-20230308140426085"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 库存不足</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5，扣减库存</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">    .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">    .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line">    <span class="comment">//扣减库存</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​假设线程1过来查询库存，判断出来库存大于1，正准备去扣减库存，但是还没有来得及去扣减，此时线程2过来，线程2也去查询库存，发现这个数量一定也大于1，那么这两个线程都会去扣减库存，最终多个线程相当于一起去扣减库存，此时就会出现库存的超卖问题。</p><h3 id="解决办法—–加锁"><a href="#解决办法—–加锁" class="headerlink" title="解决办法—–加锁"></a>解决办法—–加锁</h3><p><strong>悲观锁：</strong></p><p> 悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等</p><p><strong>乐观锁：</strong></p><p>  乐观锁：会有一个版本号，每次操作数据会对版本号+1，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如cas</p><p>  乐观锁的典型代表：就是cas，利用cas进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 &#x3D;&#x3D; 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值</p><p>  其中do while 是为了在操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次。</p><h4 id="乐观锁方案"><a href="#乐观锁方案" class="headerlink" title="乐观锁方案"></a>乐观锁方案</h4><p><strong>方案一:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//5，扣减库存</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">    .setSql(<span class="string">&quot;stock = stock -1&quot;</span>)   <span class="comment">//set stock = stock -1</span></span><br><span class="line">    <span class="comment">//where id = ？ and stock = ?</span></span><br><span class="line">    .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,voucher.getStock())</span><br><span class="line">    .update();</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line">    <span class="comment">//扣减库存</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败</p><p><strong>方案二：</strong></p><p>之前的方式要修改前后都保持一致，但是这样我们分析过，成功的概率太低，所以我们的乐观锁需要变一下，改成stock大于0 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>); <span class="comment">//where id = ? and stock &gt; 0</span></span><br></pre></td></tr></table></figure><h2 id="一人一单问题"><a href="#一人一单问题" class="headerlink" title="一人一单问题"></a>一人一单问题</h2><p> ::: 要求同一个优惠券，一个用户只能下一单</p><p>这里提到了非常多的问题，我们需要慢慢的来思考，首先我们的初始方案是封装了一个createVoucherOrder方法，同时为了确保他线程安全，在方法上添加了一把synchronized 锁</p><p>intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new出来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法</p><p>加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (UserId.toString().intern())&#123;</span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> orderService.createVoucherOrder(voucherId);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整个代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现优惠卷秒杀下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Transactional  //添加事务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 查询优惠券id</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2. 查询优惠卷信息</span></span><br><span class="line">        <span class="comment">//3. 判断秒杀是否开启</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 是，判断库存是否充足</span></span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">stock</span> <span class="operator">=</span> voucher.getStock();</span><br><span class="line">        <span class="keyword">if</span> (stock &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;已经被抢完了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//todo 需要给当前对象加锁操作----------------------</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取互斥锁，只允许一个进入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">synchronized</span> (UserId.toString().intern())&#123;</span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> orderService.createVoucherOrder(voucherId);</span><br><span class="line">            <span class="comment">//关闭锁</span></span><br><span class="line">           <span class="comment">// lock.unLock();</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//todo------------------------------</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于一人一单加安全锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span>&#123;</span><br><span class="line">        <span class="comment">//判断用户是否购买过</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一人一单解决,加锁</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, UserId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该用户已经购买过了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 库存充足，扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>) <span class="comment">//对乐观锁的判断</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span>(!update)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//创建用户id，代金卷id ，订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        order.setId(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 创建订单  .返回订单信息</span></span><br><span class="line">        order.setUserId(UserId);</span><br><span class="line">        order.setVoucherId(voucherId);</span><br><span class="line">        save(order);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**<code>使用切面代理需要注意的点</code> **： 在项目启动的地方，暴露代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//暴露代理对象</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HmDianPingApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HmDianPingApplication.class, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;Local :&quot;</span> + <span class="string">&quot;http://localhost:8081/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><p><img src="/images/image-20230308153843557.png" alt="image-20230308153843557"></p><p>一个用户数量只会减少一个</p><p><img src="/images/image-20230308153858380.png" alt="image-20230308153858380"></p><p>以上的一人一单方法只适合单体情况下，如果在集群模式下就会失败</p><blockquote><p>通过idea提供的功能，自己开启集群。操作如下: </p><p><img src="/images/image-20230308154751054.png" alt="image-20230308154751054"><img src="/images/image-20230308154909373.png" alt="image-20230308154909373">通过以下设置覆盖yaml文件中的端口<img src="/images/image-20230308154925328.png" alt="image-20230308154925328"></p></blockquote><p><code>锁的原理: </code>在我们当前的jvm内部维护了一个锁监控器对象 ，我们这里用的是userId，userId在常量池中存储</p><p>在一个jvm中，维护了一个线程池，所以当id相同时 ，他永远都是一个锁（锁的监视器是同一个）。 但是如果是集群模式下就是多个jvm，多个jvm中的锁监视器是多个tomcat ，多个jvm，多个常量池。而常量池中的userId只是存储在jvm1的常量池中，而非同时几个都存在。</p><p>所以另一个就会成功。所以还会出现线程安全问题</p><p><img src="/images/image-20230308155628427.png" alt="image-20230308155628427"></p><h4 id="需要使用实现跨jvm的锁-，也就是-分布式锁"><a href="#需要使用实现跨jvm的锁-，也就是-分布式锁" class="headerlink" title="需要使用实现跨jvm的锁 ，也就是 分布式锁"></a>需要使用实现跨jvm的锁 ，也就是 分布式锁</h4><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>​<img src="/images/image-20230308160300414.png" alt="image-20230308160300414"></p><p><strong>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</strong></p><p>分布式锁的核心思想就是 ：<strong>让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</strong></p><h3 id="分布式锁满足的条件"><a href="#分布式锁满足的条件" class="headerlink" title="分布式锁满足的条件"></a>分布式锁满足的条件</h3><p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p><p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p><p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p><p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p><p>安全性：安全也是程序中必不可少的一环</p><h3 id="常见的三种分布式锁"><a href="#常见的三种分布式锁" class="headerlink" title="常见的三种分布式锁"></a>常见的三种分布式锁</h3><p>​<code>Mysql：</code>mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少见</p><p>​<code>Redis：</code><strong>redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</strong></p><p>​<code>Zookeeper：</code>zookeeper也是企业级开发中较好的一个实现分布式锁的方案，由于本套视频并不讲解zookeeper的原理和分布式锁的实现，所以不过多阐述</p><p>基于redis实现分布式锁</p><p><img src="/images/image-20230308162013971.png"></p><p>实现分布式锁时需要实现的两个基本方法：</p><ul><li><p>获取锁：</p><ul><li>互斥：确保只能有一个线程获取锁</li><li>非阻塞：尝试一次，成功返回true，失败返回false</li></ul></li><li><p>释放锁：</p><ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间</li></ul><p><img src="/post/5bc74249/BaiduNetdiskDownload/Redis-笔记资料/02-实战篇/讲义/Redis实战篇.assets/1653382669900.png" alt="1653382669900"></p></li></ul><p>核心思路：</p><p>我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的线程，等待一定时间后重试即可</p><ul><li>同时可以解决误删锁的问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁的名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>)+<span class="string">&quot;=&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 获取分布式锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeOutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程的表示</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ID_PREFIX +  Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, value, timeOutSec, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//注意自动拆箱出现的空指针错误</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 释放锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取锁中的标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两种锁的 标识是否一致</span></span><br><span class="line">        <span class="keyword">if</span>(id.equals(threadId))&#123;</span><br><span class="line">            stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> orderService.createVoucherOrder(voucherId);</span><br><span class="line">&#125;  <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unLock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lua脚本-解决多条命令原子性问题"><a href="#Lua脚本-解决多条命令原子性问题" class="headerlink" title="Lua脚本 解决多条命令原子性问题"></a>Lua脚本 解决多条命令原子性问题</h2><p><strong>Redis提供了Lua脚本功能，<code>在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性</code>。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></strong></p><h4 id="Redis提供的调用函数"><a href="#Redis提供的调用函数" class="headerlink" title="Redis提供的调用函数"></a>Redis提供的调用函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;命令名称&#x27;</span>, <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;其它参数&#x27;</span>, ...)</span><br></pre></td></tr></table></figure><p>例如，我们要执行set name jack，则脚本是这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行 set name jack</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure><p>例如，我们要先执行set name Rose，再执行get name，则脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先执行 set name jack</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>)</span><br><span class="line"># 再执行 get name</span><br><span class="line"><span class="keyword">local</span> name = redis.call(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"># 返回</span><br><span class="line"><span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><p>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下 ：</p><p><img src="/images/image-20230308172145161.png"></p><p>用Lua编写下列业务流程</p><p><img src="/images/image-20230308172758871.png" alt="image-20230308172758871"></p><p><img src="/images/image-20230308172902548.png" alt="image-20230308172902548"></p><p>java调用Lua脚本改进分布式锁</p><ol><li>写lua脚本</li></ol><p><img src="/images/image-20230308173218574.png" alt="image-20230308173218574"></p><ol start="2"><li>在idea中插入</li></ol><p><img src="/images/image-20230308174342095.png" alt="image-20230308174342095"></p><ol start="3"><li>加载脚本</li></ol><p><img src="/images/image-20230308174521789.png" alt="image-20230308174521789"></p><ol start="4"><li>调用脚本</li></ol><p><img src="/images/image-20230308174604208.png" alt="image-20230308174604208"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/post/a80d0031.html"/>
      <url>/post/a80d0031.html</url>
      
        <content type="html"><![CDATA[<h3 id="参考-代码随想录"><a href="#参考-代码随想录" class="headerlink" title="参考 : 代码随想录"></a>参考 : 代码随想录</h3><p><img src="/images/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%80%BB%E7%BB%93%E5%A4%A7%E7%BA%B21.jpg" alt="img"></p><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><p><strong>动态规划问题，将拆解为如下五步曲，这五步都搞清楚了，才能说把动态规划真的掌握了！</strong></p><ol><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><p>发出这样的问题之前，其实可以自己先思考这三个问题：</p><ul><li>这道题目我举例推导状态转移公式了么？</li><li>我打印dp数组的日志了么？</li><li>打印出来了dp数组和我想的一样么？</li></ul><p><strong>如果这灵魂三问自己都做到了，基本上这道题目也就解决了</strong></p><h1 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h1><p>详解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  0 1背包问题</span></span><br><span class="line"><span class="comment"> *有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。</span></span><br><span class="line"><span class="comment"> * 每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">beibao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] weight = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] value = &#123;<span class="number">15</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bagSize</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        testWeightBagProblem(weight,value,bagSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态规划获得结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight 物品的重量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 物品的价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bagSize 背包的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWeightBagProblem</span><span class="params">(<span class="type">int</span>[] weight , <span class="type">int</span>[] value, <span class="type">int</span> bagSize)</span>&#123;</span><br><span class="line">        <span class="comment">//动归五部曲</span></span><br><span class="line">        <span class="comment">//todo 1. 确定dp数组的意义</span></span><br><span class="line">        <span class="comment">//dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少。</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[weight.length][bagSize + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//todo 2. 确定递推公式</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * dp[i][j] = max(dp[i-1][j],dp[i-1][j - weight[i]] + value[i])</span></span><br><span class="line"><span class="comment">         * 由dp[i - 1][j]推出，即背包容量为j，里面不放物品i的最大价值，此时dp[i][j]就是dp[i - 1][j]。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 由dp[i - 1][j - weight[i]]推出，dp[i - 1][j - weight[i]] 为背包容量为j - weight[i]的时候不放物品i的最大价值，</span></span><br><span class="line"><span class="comment">         *      那么dp[i - 1][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//todo 3. 初始化dp</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 首先从dp[i][j]的定义出发，如果背包容量j为0的话，即dp[i][0]，无论是选取哪些物品，背包价值总和一定为0。</span></span><br><span class="line"><span class="comment">         *  有dp方程可以看出i 是由 i-1 推导出来，那么i为0的时候就一定要初始化。</span></span><br><span class="line"><span class="comment">         *  dp[0][j]，即：i为0，存放编号0的物品的时候，各个容量的背包所能存放的最大价值。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  那么很明显</span></span><br><span class="line"><span class="comment">         *          当 j &lt; weight[0]的时候，dp[0][j] 应该是 0，因为背包容量比编号0的物品重量还小。</span></span><br><span class="line"><span class="comment">         *          当j &gt;= weight[0]时，dp[0][j] 应该是value[0]，因为背包容量放足够放编号0物品</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * dp[0][j] 和 dp[i][0] 都已经初始化了，那么其他下标应该初始化多少呢？</span></span><br><span class="line"><span class="comment">         *    其实从递归公式： dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</span></span><br><span class="line"><span class="comment">         *    可以看出dp[i][j] 是由左上方数值推导出来了，那么 其他下标初始为什么数值都可以，因为都会被覆盖</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span>weight[<span class="number">0</span>]; j &lt;= bagSize;j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//todo 4. 遍历的顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i &lt; weight.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> ; j &lt;= bagSize;j++)&#123;</span><br><span class="line">                <span class="comment">//如果背包容量小于物品大小，直接跳过</span></span><br><span class="line">                <span class="keyword">if</span>(j &lt; weight[i])&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 当前背包的容量可以放下物品i</span></span><br><span class="line"><span class="comment">                     * 那么此时分两种情况：</span></span><br><span class="line"><span class="comment">                     *    1、不放物品i</span></span><br><span class="line"><span class="comment">                     *    2、放物品i</span></span><br><span class="line"><span class="comment">                     * 比较这两种情况下，哪种背包中物品的最大价值最大</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i-<span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//todo 5. 打印结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; dp.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span> ;j&lt; dp[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                System.out.print(dp[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化-使用一维数组"><a href="#优化-使用一维数组" class="headerlink" title="优化: 使用一维数组"></a>优化: 使用一维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> First;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用一维数组代替二维数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yiweibeibao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] weight = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] value = &#123;<span class="number">15</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">45</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bagSize</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        WeightBagProblem(weight,value,bagSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用一维数组写出背包问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> weight 物体的重量   [i]索引代表物体编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 物品的价值 [i] 索引代表物体编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bagSize 背包的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">WeightBagProblem</span><span class="params">(<span class="type">int</span>[] weight, <span class="type">int</span>[] value, <span class="type">int</span> bagSize)</span> &#123;</span><br><span class="line">        <span class="comment">//todo 1. 确定dp数组的含义</span></span><br><span class="line">        <span class="comment">//容量为j的背包，所背的物品价值可以最大为dp[j]。</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[bagSize + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//todo 2. 确定递推公式</span></span><br><span class="line">        <span class="comment">//dp[j] =  max(dp[j],dp[j - weight[i]])</span></span><br><span class="line">        <span class="comment">//todo 3. 初始化dp数组</span></span><br><span class="line">       <span class="comment">//dp[0] = 0;       其实初始化和不初始化都一样</span></span><br><span class="line">        <span class="comment">//todo 4. 确立好遍历顺序 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i &lt; weight.length;i++)&#123;</span><br><span class="line">            <span class="comment">//从尾到头遍历，  避免重复添加物品</span></span><br><span class="line">             <span class="comment">// 当物品的重量  &gt;  当前背包的容量时 停止添加</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=bagSize ;j &gt;= weight[i];j--)&#123;</span><br><span class="line">                dp[j] = Math.max(dp[j] , dp[j - weight[i]] + value[i]);</span><br><span class="line">                System.out.println(Arrays.toString(dp));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//todo 5. 打印结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= bagSize; j++)&#123;</span><br><span class="line">            System.out.print(dp[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/images/image-20230310180708966.png" alt="image-20230310180708966"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashSet源码剖析</title>
      <link href="/post/d7392437.html"/>
      <url>/post/d7392437.html</url>
      
        <content type="html"><![CDATA[<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>set之所以没有放到和Collection接口一块学习是因为set接口底层实现的还是Map接口。他只是相当于在map接口上做了一次封装。</p><p>set接口常用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码中的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Set</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>;</span><br><span class="line">    Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">    Object[] toArray();</span><br><span class="line">    &lt;T&gt; T[] toArray(T[] a);</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">default</span> Spliterator&lt;E&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliterator(<span class="built_in">this</span>, Spliterator.DISTINCT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特征:</p><ul><li><code>不能存放重复的元素</code></li><li>**<code>存放数据是无序的</code> **(即添加和取出的顺序是不同的，虽然取出的顺序不一致，但是不会一直变)</li><li>set接口对象不能通过索引来获取</li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h2 id="hashSet底层hashMap"><a href="#hashSet底层hashMap" class="headerlink" title="hashSet底层hashMap"></a><code>hashSet底层hashMap</code></h2><p><code>而hashMap的底层其实是数组 + 链表 + 红黑树</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码，hashSet的构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Math.max((<span class="type">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>底层如何实现:  hash() + equals()</p><p><img src="/images/image-20230305122509155.png" alt="image-20230305122509155"></p><ol><li>先获取元素的hash值</li><li>对hash值进行运算，得出一个索引值（就是存放在哈希表的位置号）</li><li>如果该位置上没有其他元素，则直接存入，如果有，那么就需要进行hash比较(调用equals方法) 不同就添加在该位置上元素的后面。相同则添加失败</li></ol><h3 id="Hash中添加元素重点★★★★★"><a href="#Hash中添加元素重点★★★★★" class="headerlink" title="Hash中添加元素重点★★★★★"></a><code>Hash中添加元素</code>重点★★★★★</h3><ol><li>调用add</li></ol><p><img src="/images/image-20230305123104209.png" alt="image-20230305123104209"></p><ol start="2"><li>进入put方法。 key就是传入的值。value就是上面的PRESENT【它的作用就是一个静态的常量】</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map【要与后备映射中的对象关联的虚拟值】</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230305123234788.png" alt="image-20230305123234788"></p><ol start="3"><li>进入hash(key)方法 ，得到hash值</li></ol><p><img src="/images/image-20230305123530495.png" alt="image-20230305123530495"></p><p>无符号右移16位。源码详情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">计算 key.hashCode（） 并将较高的哈希位传播 （XOR） 到较低的哈希位。由于该表使用二次方掩码，因此仅在当前掩码上方的位数上变化的哈希集将始终发生冲突。（已知的例子包括一组 Float 键，在小表中保存连续的整数。因此，我们应用了一个转换，将更高位的影响向下分散。在速度、效用和位传播质量之间需要权衡。因为许多常见的哈希集已经合理分布（所以不会从传播中受益），并且因为我们使用树来处理箱中的大量碰撞，所以我们只是以最便宜的方式对一些移位进行 XOR 以减少系统损失，并合并最高位的影响，否则由于表边界，这些位永远不会在索引计算中使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><code>执行putVal方法【重点】</code>★★★★★</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Map.put（）的相关方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现 Map.put 和相关方法。</span></span><br><span class="line"><span class="comment">形参:</span></span><br><span class="line"><span class="comment">哈希 – 键的哈希</span></span><br><span class="line"><span class="comment">密钥 – 密钥</span></span><br><span class="line"><span class="comment">值 – 要放置的值</span></span><br><span class="line"><span class="comment">onlyIfAbsent – 如果为 true，则不更改现有值</span></span><br><span class="line"><span class="comment">逐出 – 如果为 false，则表处于创建模式。</span></span><br><span class="line"><span class="comment">返回值:</span></span><br><span class="line"><span class="comment">上一个值，如果没有，则为 null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">//定义的辅助变量</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">//table就是hashMap的一个数组， 类型是Node[]</span></span><br><span class="line">    <span class="comment">//resize() : 重置数组大小，首次扩容到16个空间</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1. 根据key得到的hash值 ，去计算该key应该存放到table表的哪个索引位置。并把这个位置的对象赋给p</span></span><br><span class="line">    <span class="comment">//2. 判断这个p是否等于null ， 如果是null，就创建一个Node</span></span><br><span class="line">    <span class="comment">//然后放在tab[i]的位置</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样&amp;&amp;</span></span><br><span class="line">        <span class="comment">//并且满足 准备加入的key 和 p指向的Node接待你的key是同一个对象 或者 不是同一个对象，但是内容相同</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//判断是否是一颗红黑树，如果是 那么就调用红黑树的putVal来进行添加</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">//如果table对应的索引位置已经是一个链表，那么就使用for循环进行比较，如果最后都不同，那么就加入到链表的最后</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>hashSet的扩容机制</p><p><img src="/images/image-20230305135528049.png" alt="image-20230305135528049"></p><ol><li><strong>首次扩容为 16 临界值（threshold） 是16 * 加载因子 也就是 0.75 &#x3D; 12</strong> </li><li><strong>如果table数组用到了临界值12 ，那么就会扩容到16 * 2 &#x3D; 32, 与此同时，新的临界值就是 32 * 0.75 &#x3D; 24以此类推</strong></li><li><strong>如果一个链表的个数到达 8 个及以上， 并且数组table的大小 &gt;&#x3D; 64 ，那么就会进行树化(红黑树！)否则任然采用数组扩容机制</strong></li><li>对于java8来说，和java7之前的有所不同的是，他是先进行添加（如果达到阙值，比如：第一次添加为12），那么就是先将需要添加的元素进行添加，然后再进行扩容。</li><li></li></ol><p><img src="/images/HashMap_base.png" alt="HashMap_base"></p><h3 id="影响hashSet的性能"><a href="#影响hashSet的性能" class="headerlink" title="影响hashSet的性能"></a>影响hashSet的性能</h3><p>影响<em>HashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p><hr><p> <code>hashCode()</code>和<code>equals()</code>: </p><p><strong><code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”</strong>。</p><p>所以，如果要将自定义的对象放入到<code>HashMap</code>或<code>HashSet</code>中，需要**@Override** <code>hashCode()</code>和<code>equals()</code>方法。</p><h3 id="HashMap中的get方法"><a href="#HashMap中的get方法" class="headerlink" title="HashMap中的get方法"></a>HashMap中的get方法</h3><h5 id="hashSet中的获取元素是通过迭代器来实现，但是迭代器也是通过hashMap实现"><a href="#hashSet中的获取元素是通过迭代器来实现，但是迭代器也是通过hashMap实现" class="headerlink" title="hashSet中的获取元素是通过迭代器来实现，但是迭代器也是通过hashMap实现"></a>hashSet中的获取元素是通过迭代器来实现，但是迭代器也是通过hashMap实现</h5><ol><li><p><strong>首先直接调用HashMap的keySet（）方法获得一个Set对象，该Set对象的实际类型是KeySet对象</strong></p></li><li><p><strong>接着再调用KeySet对象的iterator（）方法，该方法会返回一个KeyIterator对象</strong></p></li><li><p><strong>最后向调用者返回迭代器对象</strong></p></li></ol><p>get() 方法是根据指定的key返回value， 对于hash来说，虽然他底层实现是通过hashMap来实现的，但是它却不是继承HashMap 。而是Collection接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过上面的调用得到该方法【hashMap中的方法】</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.getValue()</code>。因此<code>getEntry()</code>是算法的核心。 算法思想是首先通过<code>hash()</code>函数得到对应<code>bucket</code>的下标，然后依次遍历冲突链表，通过<code>key.equals(k)</code>方法来判断是否是要找的那个<code>entry</code>。</p><p><img src="/images/HashMap_getEntry-1678064417966-3.png" alt="HashMap_getEntry"></p><p>上图中<code>hash(k)&amp;(table.length-1)</code>等价于<code>hash(k)%table.length</code>，原因是<em>HashMap</em>要求<code>table.length</code>必须是2的指数，因此<code>table.length-1</code>就是二进制低位全是1，跟<code>hash(k)</code>相与会将哈希值的高位全抹掉，剩下的就是余数了</p><h2 id="HashSet子类—-LinkedHashSet"><a href="#HashSet子类—-LinkedHashSet" class="headerlink" title="HashSet子类—-LinkedHashSet"></a>HashSet子类—-LinkedHashSet</h2><p>同时实现set接口</p><ul><li>底层是LinkedhashMap，维护的是数组 +  双向链表</li><li>不允许添加重复的元素</li><li>使用hashCode来决定元素的存储位置。同时使用链表又使得位置连续</li><li>添加的元素是有序的(双向链表！)</li></ul><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认初始range为16</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><p>对于添加元素 和之前的相差不大，只是在加入节点时有下列的修改</p><ol><li>先求hash值，再求索引</li><li>确定元素在hashTable(hash表)的位置。然后将元素加入双向链表中。</li><li>需要将pre 和 next 都进行赋值</li></ol><p><img src="/images/image-20230306105200875.png" alt="image-20230306105200875"></p><h3 id="遍历得到元素"><a href="#遍历得到元素" class="headerlink" title="遍历得到元素"></a>遍历得到元素</h3><p><img src="/images/LinkedHashMap_base.png" alt="LinkedHashMap_base.png"></p><p>事实上<em>LinkedHashMap</em>是<em>HashMap</em>的直接子类，<strong>二者唯一的区别是*LinkedHashMap*在*HashMap*的基础上，采用双向链表(doubly-linked list)的形式将所有<code>entry</code>连接起来，这样是为保证元素的迭代顺序跟插入顺序相同</strong>。上图给出了<em>LinkedHashMap</em>的结构图，主体部分跟<em>HashMap</em>完全一样，多了<code>header</code>指向双向链表的头部(是一个哑元)，<strong>该双向链表的迭代顺序就是<code>entry</code>的插入顺序</strong>。</p><p>除了可以保迭代历顺序，这种结构还有一个好处 :<br> <strong>迭代LinkedHashMap时不需要像HashMap那样遍历整个<code>table</code>，而只需要直接遍历<code>header</code>指向的双向链表即可</strong>，也就是说<em>LinkedHashMap</em>的迭代时间就只跟<code>entry</code>的个数相关，而跟<code>table</code>的大小无关。</p><hr><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈队列详解</title>
      <link href="/post/78be656d.html"/>
      <url>/post/78be656d.html</url>
      
        <content type="html"><![CDATA[<p>​对于java语言来说，如果需要实现栈队列的数据结构，我们已经不需要自己手动实现了，java内部已经帮我们实现好了栈和队列，而且在其基础上又有了优化</p><p>​<strong>当需要使用栈时，Java已不推荐使用<em>Stack</em>，而是推荐使用更高效的<em>ArrayDeque</em>；既然<em>Queue</em>只是一个接口，当需要使用队列时也就首选<em>ArrayDeque</em>了(次选是<em>LinkedList</em>)</strong></p><h1 id="队列（先进先出）"><a href="#队列（先进先出）" class="headerlink" title="队列（先进先出）"></a>队列（先进先出）</h1><p>对于栈来说，java内部封装Stack方法，但是没有封装Queue的方法。只有实现了接口</p><h2 id="Queue接口"><a href="#Queue接口" class="headerlink" title="Queue接口"></a>Queue接口</h2><p><em>Queue</em>接口继承自Collection接口，除了最基本的Collection的方法之外，它还支持额外的<em>insertion</em>, <em>extraction</em>和<em>inspection</em>操作。这里有两组格式，<strong>共6个方法，一组是抛出异常的实现；另外一组是返回值的实现(没有则返回null)。</strong></p><hr><p><img src="/images/image-20230305084707140.png" alt="image-20230305084707140"></p><h2 id="Deque—-继承Queue的接口"><a href="#Deque—-继承Queue的接口" class="headerlink" title="Deque—-继承Queue的接口"></a>Deque—-继承Queue的接口</h2><p>双向队列，也就是既可以实现队首插入、删除、查看。也可以实现队尾插入、删除、查看的操作。通过这些操作能够更加高效的实现我们所需的操作</p><p><strong>由于Deque是双向的，所以可以对队列的头和尾都进行操作，它同时也支持两组格式，一组是抛出异常的实现；另外一组是返回值的实现(没有则返回null)。</strong></p><p><img src="/images/image-20230305085129505.png" alt="image-20230305085129505"></p><p>因为双向队列的缘故，我们既可以将其当作队列，也可以将当作栈 。</p><p>如果将Deque当作队列和 Queue一样使用。那么对应Queue的方法就是这些</p><p><img src="/images/image-20230305085338508.png" alt="image-20230305085338508"></p><p>对应Queue中的方法</p><p><img src="/images/image-20230305085458034.png" alt="image-20230305085458034"></p><h1 id="栈（先进后出）"><a href="#栈（先进后出）" class="headerlink" title="栈（先进后出）"></a>栈（先进后出）</h1><p>如果将Deque当作栈来使用,那么就是先进后出的一种结果。因此我们对应的方法就是下面这些</p><p><img src="/images/image-20230305090025862.png" alt="image-20230305090025862"></p><h1 id="Deque的实现类"><a href="#Deque的实现类" class="headerlink" title="Deque的实现类"></a>Deque的实现类</h1><p><em>ArrayDeque</em>和<em>LinkedList</em>是<em>Deque</em>的两个通用实现，由于官方更推荐使用<em>AarryDeque</em>用作栈和队列,所以说，我们这里就着重了解ArrayDeque的实现</p><h2 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h2><p><em>ArrayDeque</em>底层通过数组实现，为了满足可以同时在数组两端插入或删除元素的需求，该数组还必须是循环的，即**循环数组(circular array)**，也就是说数组的任何一点都可能被看作起点或者终点。</p><p><strong><em>ArrayDeque</em>是非线程安全的(not thread-safe)，</strong>当多个线程同时使用的时候，需要程序员手动同步；另外，该容器不允许放入<code>null</code>元素。</p><hr><p><img src="/images/ArrayDeque_base.png" alt="ArrayDeque_base.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由源码我们可以知道，它的初始容量为8</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>容量满时翻倍</p><p><img src="/images/ArrayDeque_doubleCapacity.png" alt="ArrayDeque_doubleCapacity.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Doubles the capacity of this deque.  Call only when full, i.e.,</span></span><br><span class="line"><span class="comment"> * when head and tail have wrapped around to become equal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doubleCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span> head == tail;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> elements.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> n - p; <span class="comment">// number of elements to the right of p  head右边元素的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> n &lt;&lt; <span class="number">1</span>;<span class="comment">//原空间的2倍</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Sorry, deque too big&quot;</span>);</span><br><span class="line">    Object[] a = <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">    System.arraycopy(elements, p, a, <span class="number">0</span>, r);<span class="comment">//复制右半部分，对应上图中绿色部分</span></span><br><span class="line">    System.arraycopy(elements, <span class="number">0</span>, a, r, p);<span class="comment">//复制左半部分，对应上图中灰色部分</span></span><br><span class="line"></span><br><span class="line">    elements = a;</span><br><span class="line">    head = <span class="number">0</span>;</span><br><span class="line">    tail = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addFirst"><a href="#addFirst" class="headerlink" title="addFirst"></a>addFirst</h3><p><code>addFirst(E e)</code>的作用是在<em>Deque</em>的首端插入元素，也就是在<code>head</code>的前面插入元素，在空间足够且下标没有越界的情况下，只需要将<code>elements[--head] = e</code>即可。</p><p><img src="/images/ArrayDeque_addFirst.png" alt="ArrayDeque_addFirst.png"></p><p>要考虑的需求 ： </p><p>1.空间是否够用</p><p>2.下标是否越界的问题。</p><p>上图中，如果<code>head</code>为<code>0</code>之后接着调用<code>addFirst()</code>，虽然空余空间还够用，但<code>head</code>为<code>-1</code>，下标越界了。下列代码很好的解决了这两个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addFirst(E e)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)<span class="comment">//不允许放入null</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;<span class="comment">//2.下标是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (head == tail)<span class="comment">//1.空间是否够用</span></span><br><span class="line">        doubleCapacity();<span class="comment">//扩容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addLast"><a href="#addLast" class="headerlink" title="addLast"></a>addLast</h3><p><code>addLast(E e)</code>的作用是在<em>Deque</em>的尾端插入元素，也就是在<code>tail</code>的位置插入元素，由于<code>tail</code>总是指向下一个可以插入的空位，因此只需要<code>elements[tail] = e;</code>即可。插入完成后再检查空间，如果空间已经用光，则调用<code>doubleCapacity()</code>进行扩容。</p><hr><p><img src="/images/ArrayDeque_addLast.png" alt="ArrayDeque_addLast.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)<span class="comment">//不允许放入null</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    elements[tail] = e;<span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)<span class="comment">//下标越界处理</span></span><br><span class="line">        doubleCapacity();<span class="comment">//扩容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pollFirst"><a href="#pollFirst" class="headerlink" title="pollFirst"></a>pollFirst</h3><p><code>pollFirst()</code>的作用是删除并返回<em>Deque</em>首端元素，也即是<code>head</code>位置处的元素。如果容器不空，只需要直接返回<code>elements[head]</code>即可，当然还需要处理下标的问题。由于<code>ArrayDeque</code>中不允许放入<code>null</code>，当<code>elements[head] == null</code>时，意味着容器为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">pollFirst</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> elements[head];</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)<span class="comment">//null值意味着deque为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    elements[h] = <span class="literal">null</span>;<span class="comment">//let GC work</span></span><br><span class="line">    head = (head + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);<span class="comment">//下标越界处理</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pollLast"><a href="#pollLast" class="headerlink" title="pollLast"></a>pollLast</h3><p><code>pollLast()</code>的作用是删除并返回<em>Deque</em>尾端元素，也即是<code>tail</code>位置前面的那个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">pollLast</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);<span class="comment">//tail的上一个位置是最后一个元素</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> elements[t];</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)<span class="comment">//null值意味着deque为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    elements[t] = <span class="literal">null</span>;<span class="comment">//let GC work</span></span><br><span class="line">    tail = t;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="peekFirst"><a href="#peekFirst" class="headerlink" title="peekFirst"></a>peekFirst</h3><p><code>peekFirst()</code>的作用是返回但不删除<em>Deque</em>首端元素，也即是<code>head</code>位置处的元素，直接返回<code>elements[head]</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">peekFirst</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> elements[head]; <span class="comment">// elements[head] is null if deque empty</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="peekLast"><a href="#peekLast" class="headerlink" title="peekLast"></a>peekLast</h3><p><code>peekLast()</code>的作用是返回但不删除<em>Deque</em>尾端元素，也即是<code>tail</code>位置前面的那个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">peekLast</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> elements[(tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列叫做PriorityQueue"><a href="#优先队列叫做PriorityQueue" class="headerlink" title="优先队列叫做PriorityQueue"></a>优先队列叫做<em>PriorityQueue</em></h2><p><strong>优先队列的作用是能保证每次取出的元素都是队列中权值最小的</strong>(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，<strong>元素大小的评判可以通过元素本身的自然顺序(*natural ordering*)，也可以通过构造时传入的比较器</strong>(<em>Comparator</em>，类似于C++的仿函数)。</p><hr><p>参考实现:  <a href="https://pdai.tech/md/java/collection/java-collection-PriorityQueue.html">https://pdai.tech/md/java/collection/java-collection-PriorityQueue.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection 集合源码剖析</title>
      <link href="/post/4509351.html"/>
      <url>/post/4509351.html</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java_collections_overview.png" alt="java_collections_overview.png (1391×849)"></p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="ArrayList源码剖析"><a href="#ArrayList源码剖析" class="headerlink" title="ArrayList源码剖析"></a>ArrayList源码剖析</h2><p>添加元素分析</p><p><a href="/images/AarrayList%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.jpg">ArrayList数组源码剖析</a></p><h3 id="三个构造器"><a href="#三个构造器" class="headerlink" title="三个构造器"></a>三个构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment">     * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment">     * iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//将另一个数组直接全部赋值给新的数组，然后初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于图中的拷贝如下图</p><p><img src="/post/4509351/Rayce_codingData\source\images\image-20230303103719089.png" alt="image-20230303103719089"></p><h3 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h3><p>他不仅可以实现添加，也可以实现插入操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts the specified element at the specified position in this</span></span><br><span class="line"><span class="comment">     * list. Shifts the element currently at that position (if any) and</span></span><br><span class="line"><span class="comment">     * any subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以及对应的addAll方法,也可以是实现插入操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment">     * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment">     * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment">     * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment">     * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment">     * specified collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index at which to insert the first element from the</span></span><br><span class="line"><span class="comment">     *              specified collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Set方法"><a href="#Set方法" class="headerlink" title="Set方法"></a>Set方法</h3><p>对于set方法，就像源码中提及的那样，如果判断索引位置数组下标没有越界，那么就直接赋值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//下标越界检查</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    elementData[index] = element;<span class="comment">//赋值到指定位置，复制的仅仅是引用</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><p>获取数据索引位置数据，检查是否越界。如果没有，然后返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];<span class="comment">//注意类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><p>传入要删除位置的索引，然后将索引位置后面的元素全部向前挪一位即可（赋值拷贝）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">//清除该位置的引用，让GC起作用</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="trimToSize-方法"><a href="#trimToSize-方法" class="headerlink" title="trimToSize()方法"></a>trimToSize()方法</h3><p>作用 : <code>将底层数组的容量调整为当前列表保存的实际元素的大小的功能。</code> ,以减少内存的开销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the</span></span><br><span class="line"><span class="comment">     * list&#x27;s current size.  An application can use this operation to minimize</span></span><br><span class="line"><span class="comment">     * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == <span class="number">0</span>)</span><br><span class="line">            ? EMPTY_ELEMENTDATA</span><br><span class="line">            : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="indexOf-—获取元素第一次出现的位置"><a href="#indexOf-—获取元素第一次出现的位置" class="headerlink" title="indexOf()—获取元素第一次出现的位置"></a>indexOf()—获取元素第一次出现的位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the first occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="comment">//因为List可以存储null对象，所以源码地方在这里将其考虑进去，分开进行索引</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="lastIndexOf-—-获取元素最后一次出现的位置"><a href="#lastIndexOf-—-获取元素最后一次出现的位置" class="headerlink" title="lastIndexOf() — 获取元素最后一次出现的位置"></a>lastIndexOf() — 获取元素最后一次出现的位置</h3><p>从最后开始索引，然后出现的第一个就是最后一个。源码牛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the last occurrence of the specified element</span></span><br><span class="line"><span class="comment">     * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList源码剖析"><a href="#LinkedList源码剖析" class="headerlink" title="LinkedList源码剖析"></a>LinkedList源码剖析</h2><p><code>LinkedList&lt;E&gt; res = new LinkedList&lt;&gt;();</code></p><p><em>LinkedList</em>同时实现了<em>List</em>接口和<em>Deque</em>接口，所以说我们既可以将其视为一个容器，又可以将其视为一个队列乃至栈</p><p><em>LinkedList</em>底层<strong>通过双向链表实现</strong></p><p>​<em>LinkedList</em>通过<code>first</code>和<code>last</code>引用分别指向链表的第一个和最后一个元素。注意这里没有所谓的哑元，当链表为空的时候<code>first</code>和<code>last</code>都指向<code>null</code>。</p><p>LinkedList它的内部定义了一个私有的Node<E>链表 </E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三个构造器-1"><a href="#三个构造器-1" class="headerlink" title="三个构造器"></a>三个构造器</h3><p><code>transient是Java语言的关键字，用来表示一个成员变量不是该对象序列化的一部分</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment"> * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment"> * iterator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as first element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getFirst-获取第一个元素"><a href="#getFirst-获取第一个元素" class="headerlink" title="getFirst() 获取第一个元素"></a>getFirst() 获取第一个元素</h3><p>只要对LinkedList一设置值，那么last 和first就会被赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the first element in this list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the first element in this list</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">       <span class="keyword">return</span> f.item;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="getLast-获取最后一个元素"><a href="#getLast-获取最后一个元素" class="headerlink" title="getLast() 获取最后一个元素:"></a>getLast() 获取最后一个元素:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the last element in this list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the last element in this list</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> E <span class="title function_">getLast</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">      <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">      <span class="keyword">return</span> l.item;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素（如下）"><a href="#删除元素（如下）" class="headerlink" title="删除元素（如下）"></a>删除元素（如下）</h3><h3 id="removeFirst-removeLast-remove-e-remove-index"><a href="#removeFirst-removeLast-remove-e-remove-index" class="headerlink" title="removeFirst(), removeLast(), remove(e), remove(index)"></a>removeFirst(), removeLast(), remove(e), remove(index)</h3><p><img src="/post/4509351/Rayce_codingData\source\images\image-20230303121617318.png" alt="image-20230303121617318"></p><p>从源码中我们可以得出,如果需要删除某个节点，那么就将这个节点传入，或者传入该节点的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;</span><br><span class="line">       <span class="comment">// assert x != null;</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;<span class="comment">// 第一个元素</span></span><br><span class="line">           first = next;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           prev.next = next;</span><br><span class="line">           x.prev = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;<span class="comment">// 最后一个元素</span></span><br><span class="line">           last = prev;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           next.prev = prev;</span><br><span class="line">           x.next = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       x.item = <span class="literal">null</span>; <span class="comment">// GC</span></span><br><span class="line">       size--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于removeFirst 和 removeLast</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">       <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Unlinks non-null first node f.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">       <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">       f.item = <span class="literal">null</span>;</span><br><span class="line">       f.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">       first = next;</span><br><span class="line">       <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">           last = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           next.prev = <span class="literal">null</span>;</span><br><span class="line">       size--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">       <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Unlinks non-null last node l.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> E <span class="title function_">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> &#123;</span><br><span class="line">       <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> l.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">       l.item = <span class="literal">null</span>;</span><br><span class="line">       l.prev = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">       last = prev;</span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="literal">null</span>)</span><br><span class="line">           first = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           prev.next = <span class="literal">null</span>;</span><br><span class="line">       size--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="add方法-1"><a href="#add方法-1" class="headerlink" title="add方法"></a>add方法</h3><p>对于Add方法，官网给出了两类添加的方法，一种是直接添加到链表的末尾。还有一种是插入链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Links e as last element.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">       last = newNode;</span><br><span class="line">       <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           l.next = newNode;</span><br><span class="line">       size++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">//先检查索引位置是否越界</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index == size)</span><br><span class="line">            linkLast(element);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            linkBefore(element, node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;</span><br><span class="line">        <span class="comment">// assert succ != null;</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">        succ.prev = newNode;</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll()"></a>addAll()</h3><p>同样，addAll也是有两种构造器，第一个是将另一个集合全部添加到链表的末尾，另一个是将另一个集合添加到指定的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts all of the elements in the specified collection into this</span></span><br><span class="line"><span class="comment">    * list, starting at the specified position.  Shifts the element</span></span><br><span class="line"><span class="comment">    * currently at that position (if any) and any subsequent elements to</span></span><br><span class="line"><span class="comment">    * the right (increases their indices).  The new elements will appear</span></span><br><span class="line"><span class="comment">    * in the list in the order that they are returned by the</span></span><br><span class="line"><span class="comment">    * specified collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index index at which to insert the first element</span></span><br><span class="line"><span class="comment">    *              from the specified collection</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> c collection containing elements to be added to this list</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">       Object[] a = c.toArray();</span><br><span class="line">       <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">       <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       Node&lt;E&gt; pred, succ;</span><br><span class="line">       <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">           succ = <span class="literal">null</span>;</span><br><span class="line">           pred = last;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           succ = node(index);</span><br><span class="line">           pred = succ.prev;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">           <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) o;</span><br><span class="line">           Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">               first = newNode;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               pred.next = newNode;</span><br><span class="line">           pred = newNode;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">           last = pred;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           pred.next = succ;</span><br><span class="line">           succ.prev = pred;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       size += numNew;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Set方法-1"><a href="#Set方法-1" class="headerlink" title="Set方法"></a>Set方法</h3><p>对于set方法，就像源码中提及的那样，如果判断索引位置数组下标没有越界，那么就直接赋值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Replaces the element at the specified position in this list with the</span></span><br><span class="line"><span class="comment">  * specified element.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index index of the element to replace</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> element element to be stored at the specified position</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> the element previously at the specified position</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">     checkElementIndex(index);</span><br><span class="line">     Node&lt;E&gt; x = node(index);</span><br><span class="line">     <span class="type">E</span> <span class="variable">oldVal</span> <span class="operator">=</span> x.item;</span><br><span class="line">     x.item = element;</span><br><span class="line">     <span class="keyword">return</span> oldVal;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="get方法-1"><a href="#get方法-1" class="headerlink" title="get方法"></a>get方法</h3><p>获取数据索引位置数据，检查是否越界。如果没有，然后返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Clear"><a href="#Clear" class="headerlink" title="Clear()"></a>Clear()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all of the elements from this list.</span></span><br><span class="line"><span class="comment"> * The list will be empty after this call returns.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span></span><br><span class="line">    <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></span><br><span class="line">    <span class="comment">//   more than one generation</span></span><br><span class="line">    <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; ) &#123;</span><br><span class="line">        Node&lt;E&gt; next = x.next;</span><br><span class="line">        x.item = <span class="literal">null</span>;</span><br><span class="line">        x.next = <span class="literal">null</span>;</span><br><span class="line">        x.prev = <span class="literal">null</span>;</span><br><span class="line">        x = next;</span><br><span class="line">    &#125;</span><br><span class="line">    first = last = <span class="literal">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看元素（indexOf-x2F-lastIndexOf）"><a href="#查看元素（indexOf-x2F-lastIndexOf）" class="headerlink" title="查看元素（indexOf &#x2F; lastIndexOf）"></a>查看元素（indexOf &#x2F; lastIndexOf）</h3><p>和ArrayList集合一样，indexOf作用就是为了返回元素首次出现的位置</p><p>而lastIndexOf就是返回元素最后出现的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the index of the last occurrence of the specified element</span></span><br><span class="line"><span class="comment"> * in this list, or -1 if this list does not contain the element.</span></span><br><span class="line"><span class="comment"> * More formally, returns the highest index &#123;<span class="doctag">@code</span> i&#125; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment"> * or -1 if there is no such index.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o element to search for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the index of the last occurrence of the specified element in</span></span><br><span class="line"><span class="comment"> *         this list, or -1 if this list does not contain the element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Queue-lt-Integer-gt-queue-new-LinkedList-lt-gt"><a href="#Queue-lt-Integer-gt-queue-new-LinkedList-lt-gt" class="headerlink" title="Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();"></a><code>Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</code></h3><p><code>使用接口 对象名 = new 类名; 方式实例化的对象只能调用接口中有的方法，而不能调用类中特有的方法。</code></p><p>而使用类名 对象名 &#x3D; new 类名;方式创建出来的对象可以调用所有的方法</p><p>对于LinkedList() 它同样可以实现队列</p><p>方法有</p><ul><li>peek() —– 返回队列的头部</li><li>element() —–返回队列的头部【 此方法与 peek 的不同之处仅在于，如果此队列为空，它会抛出异常。】</li><li>poll() ——出列</li><li>offer() —– 入列【使用容量受限队列时，此方法通常更可取， add后者只能通过引发异常来插入元素。】</li><li>add() ——入列</li><li>remove() —– 删除队列的头部</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : f.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves, but does not remove, the head (first element) of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> 检索但不删除此队列的头部。 此方法与 peek 的不同之处仅在于，如果此队列为空，它会抛出异常。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">element</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head (first element) of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this list, or &#123;<span class="doctag">@code</span> null&#125; if this list is empty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Retrieves and removes the head (first element) of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the head of this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> 检索并删除此队列的头部，如果此队列为空，则返回 null 。</span></span><br><span class="line"><span class="comment">返回值:</span></span><br><span class="line"><span class="comment">此队列的头部，或者 null 如果此队列为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the specified element as the tail (last element) of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e the element to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Queue#offer&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> add(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Deque双端队列"><a href="#Deque双端队列" class="headerlink" title="Deque双端队列"></a>Deque<code>双端队列</code></h3><p>它在queue的基础上又增加了<strong>特殊情况</strong>，也就是返回值</p><p>此接口定义访问双端元素的方法。提供了插入、删除和检查元素的方法。这些方法中的每一个都以两种形式存在：一<strong>种在操作失败时引发异常</strong>，<strong>另一种返回特殊值（ null 或 false，具体取决于操作）</strong>。后一种形式的插入操作专门设计用于容量受限 Deque 的实现;在大多数实现中，插入操作不会失败。</p><p><img src="/post/4509351/Rayce_codingData\source\images\image-20230303133956540.png" alt="image-20230303133956540"></p><p>详见源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the front of this list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to insert</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Deque#offerFirst&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       addFirst(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Inserts the specified element at the end of this list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to insert</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Deque#offerLast&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       addLast(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves, but does not remove, the first element of this list,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the first element of this list, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">    *         if this list is empty</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">peekFirst</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves, but does not remove, the last element of this list,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the last element of this list, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">    *         if this list is empty</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">peekLast</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">return</span> (l == <span class="literal">null</span>) ? <span class="literal">null</span> : l.item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves and removes the first element of this list,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the first element of this list, or &#123;<span class="doctag">@code</span> null&#125; if</span></span><br><span class="line"><span class="comment">    *     this list is empty</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">pollFirst</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Retrieves and removes the last element of this list,</span></span><br><span class="line"><span class="comment">    * or returns &#123;<span class="doctag">@code</span> null&#125; if this list is empty.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the last element of this list, or &#123;<span class="doctag">@code</span> null&#125; if</span></span><br><span class="line"><span class="comment">    *     this list is empty</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">pollLast</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">return</span> (l == <span class="literal">null</span>) ? <span class="literal">null</span> : unlinkLast(l);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pushes an element onto the stack represented by this list.  In other</span></span><br><span class="line"><span class="comment">    * words, inserts the element at the front of this list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addFirst&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e the element to push</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       addFirst(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pops an element from the stack represented by this list.  In other</span></span><br><span class="line"><span class="comment">    * words, removes and returns the first element of this list.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #removeFirst()&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the element at the front of this list (which is the top</span></span><br><span class="line"><span class="comment">    *         of the stack represented by this list)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> removeFirst();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Removes the first occurrence of the specified element in this</span></span><br><span class="line"><span class="comment">    * list (when traversing the list from head to tail).  If the list</span></span><br><span class="line"><span class="comment">    * does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the list contained the specified element</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeFirstOccurrence</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> remove(o);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Removes the last occurrence of the specified element in this</span></span><br><span class="line"><span class="comment">    * list (when traversing the list from head to tail).  If the list</span></span><br><span class="line"><span class="comment">    * does not contain the element, it is unchanged.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the list contained the specified element</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeLastOccurrence</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考来源-https-pdai-tech-md-java-collection-java-collection-Queue-amp-Stack-html"><a href="#参考来源-https-pdai-tech-md-java-collection-java-collection-Queue-amp-Stack-html" class="headerlink" title="参考来源: https://pdai.tech/md/java/collection/java-collection-Queue&amp;Stack.html"></a>参考来源: <a href="https://pdai.tech/md/java/collection/java-collection-Queue&Stack.html">https://pdai.tech/md/java/collection/java-collection-Queue&amp;Stack.html</a></h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯到底怎么用？</title>
      <link href="/post/9184f38e.html"/>
      <url>/post/9184f38e.html</url>
      
        <content type="html"><![CDATA[<h1 id="回溯的适用范围"><a href="#回溯的适用范围" class="headerlink" title="回溯的适用范围"></a>回溯的适用范围</h1><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><h4 id="三大关键点"><a href="#三大关键点" class="headerlink" title="三大关键点"></a>三大关键点</h4><p><strong><code>回溯法解决的问题都可以抽象为树形结构</code></strong></p><p>**<code>集合的大小就构成了树的宽度，递归的深度，都构成的树的深度</code>**。</p><p><strong><code>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）</code></strong></p><h4 id="回溯模板就是递归三部曲"><a href="#回溯模板就是递归三部曲" class="headerlink" title="回溯模板就是递归三部曲"></a>回溯模板就是递归三部曲</h4><h2 id="遇到题目的解法"><a href="#遇到题目的解法" class="headerlink" title="遇到题目的解法"></a>遇到题目的解法</h2><p>首先，一定要分类是哪类题。组合、分割、子集还是棋盘…</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>最经典的题目</p><blockquote><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p><p>示例:<br>输入: n &#x3D; 4, k &#x3D; 2<br>输出:<br>[<br>[2,4],<br>[3,4],<br>[2,3],<br>[1,2],<br>[1,3],<br>[1,4],<br>]</p></blockquote><p>在没有学习回溯之前我们可能就是只会n层for循环来解决这种题</p><p>在学习了回溯之后，我们就可以先进行画图分析【图片来自代码随想录: 连接<a href="https://www.programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%9B%9E%E6%BA%AF%E6%B3%95%E4%B8%89%E9%83%A8%E6%9B%B2">代码随想录 (programmercarl.com)</a>】</p><p><img src="/images/20201123195223940.png" alt="77.组合"></p><p>思路很显然就是递归三部曲</p><ul><li>递归返回值、参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">    combineHelper(....);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">combineHelper</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//终止条件</span></span><br><span class="line"><span class="keyword">if</span> (path.size() == k)&#123;</span><br><span class="line">    result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单层递归逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++)&#123;</span><br><span class="line">    path.add(i);</span><br><span class="line">    combineHelper(n, k, i + <span class="number">1</span>);</span><br><span class="line">    path.removeLast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这种类型的题思路我们需要很清晰</p><p>因为这道题他需要的是【1 … n 中所有可能的 k 个数的组合】那么其中的重点我们就可以get到</p><ol><li>组合！！！</li><li>给出的元素不重复</li><li>需要的是k个数的组合</li><li>根据实例给出的答案可以得出【各个集合不重复】</li></ol><p>由上述的get点，我们就可以是实现我们的思路了。</p><p><code>组合: </code> 那么就是 使用回溯算法</p><p><code>给出的元素不重复: </code> 不需要我们自己手动去重</p><p><code>得出的各个集合不重复: </code> 需要使用index指针来移动递归的位置</p><h3 id="组合Ⅱ"><a href="#组合Ⅱ" class="headerlink" title="组合Ⅱ"></a>组合Ⅱ</h3><p>根据上一题的思路，我们再来看看这道题的解法</p><blockquote><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><p>说明：</p><ul><li>所有数字都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p>示例 1: 输入: k &#x3D; 3, n &#x3D; 7 输出: [[1,2,4]]</p><p>示例 2: 输入: k &#x3D; 3, n &#x3D; 9 输出: [[1,2,6], [1,3,5], [2,3,4]]</p></blockquote><p><strong>get关键点</strong></p><ol><li>组合</li><li>解集不能重复</li><li>给出的元素不重复</li><li>所有相加之和为 n 的 k 个数的组合</li></ol><p>根据上面我们罗列的要求，我们就可以实现思路了。</p><p><code>组合: </code> 那么就是 使用回溯算法</p><p><code>给出的元素不重复: </code> 不需要我们自己手动去重</p><p><code>解集不能包含重复的组合: </code> 使用index指针来移动递归的位置</p><p>题目中需要得是【和为n的k个数】</p><p>那么就需要将得出的数进行相加，如果和为 n 那么就将得出集合加入结果集中</p><p>此时我们传参就不能再向之前那样了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">backTracking(n, k, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span> targetSum, <span class="type">int</span> k, <span class="type">int</span> index, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们需要传入求和的参数sum，来对每一个得出的元素进行相加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单层递归的逻辑</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; k ;i++ )&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    path.add(i);</span><br><span class="line">    backTracking(targetSum,k, i + <span class="number">1</span>,sum);</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    sum-=i;</span><br><span class="line">    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合总和Ⅱ"><a href="#组合总和Ⅱ" class="headerlink" title="组合总和Ⅱ"></a>组合总和Ⅱ</h3><blockquote><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用一次。</p><p>说明： 所有数字（包括目标数）都是正整数。解集不能包含重复的组合。</p><ul><li>示例 1:</li><li>输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,</li><li>所求解集为</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>示例 2:</li><li>输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,</li><li>所求解集为:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p><strong>get关键点</strong></p><ol><li>组合</li><li>解集不能重复</li><li><code>给出的元素重复</code></li><li>所有数组中元素之和为 target的组合</li></ol><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a><code>重点</code></h3><p>给出的元素重复</p><p>因为给出的元素重复，而我们的结果集中不能有重复的组合，那么我们单层递归的逻辑就需要发生一些改变</p><p>如图:【图片来自代码随想录: <a href="https://www.programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%9B%9E%E6%BA%AF%E6%B3%95%E4%B8%89%E9%83%A8%E6%9B%B2">代码随想录 (programmercarl.com)</a>】</p><p><img src="/images/20201123202736384.png" alt="40.组合总和II"></p><ol><li>首先我们需要将题目中给出的数组进行排序，让相同的元素处于相邻的位置</li><li>借用used数组，对已经用过的数组中的元素进行标记</li><li>判断如果<code>i &gt; 0 &amp;&amp; nums[i] == nums[i-1] &amp;&amp; used == 0</code> ， 那么就可以说明相邻的数组是重复的，只需要跳过本次循环即可。</li><li>对于树枝循环，如果数组使用过了，那么就设置对应的used[i] &#x3D;&#x3D; 1;  当一个树枝走到头 ，也就是到达叶子节点。那么就进行回溯，将used数组中设置的1清 0 。调用下一个树枝时重新进行设置used &#x3D; 1 。进入③再次进行判断</li><li>直到index指向数组的最后一个元素。那么递归就结束了</li></ol><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//2. 借用used数组，对已经用过的数组中的元素进行标记</span></span><br><span class="line">    <span class="type">int</span>[] used;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">int</span>[candidates.length];</span><br><span class="line">        <span class="comment">// 1. 为了将重复的数字都放到一起，所以先进行排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backTracking(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于大于target的元素不进行递归，降低时间复杂度</span></span><br><span class="line">            <span class="keyword">if</span> (sum + candidates[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.  出现重复节点，同层的第一个节点已经被访问过，所以直接跳过</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4. 对于树枝上使用过的元素进行赋值为 1</span></span><br><span class="line">            used[i] = <span class="number">1</span>;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            <span class="comment">// 5. 每个节点仅能选择一次，所以从下一位开始</span></span><br><span class="line">            backTracking(candidates, target, i + <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="number">0</span>;</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切割字符串"><a href="#切割字符串" class="headerlink" title="切割字符串"></a>切割字符串</h3><blockquote><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p><p>返回 s 所有可能的分割方案。</p><p>示例: 输入: “aab” 输出: [ [“aa”,”b”], [“a”,”a”,”b”] ]</p></blockquote><p>get关键点</p><ol><li>分割成一些字符串</li><li>每个字符串都是回文串</li></ol><p>根据上面的要求，我们首先能确定的是这道题用回溯算法做</p><p>那么就可以将这道题抽象成为一个树结构</p><p>如图:【图片来自代码随想录: <a href="https://www.programmercarl.com/0077.%E7%BB%84%E5%90%88.html#%E5%9B%9E%E6%BA%AF%E6%B3%95%E4%B8%89%E9%83%A8%E6%9B%B2">代码随想录 (programmercarl.com)</a>】</p><p><img src="/images/131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.jpg" alt="131.分割回文串"></p><p>其次，我们需要判断我们切割的字符字串是不是回文串</p><p>判断我们就可以封装成为一个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//判断是否是回文串</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> startIndex, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于切割字符串，因为我们已经确定这道题使用回溯算法做，那么就可以用递归三部曲</p><ul><li>确定递归参数，返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; path  = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    backTracking(s, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(String s ,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><p>只有切割完毕才会收集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(index &gt;= s.length())&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单层递归逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; s.length() ; i++)&#123;</span><br><span class="line">    <span class="comment">//切割字符串，然后判断字符串是否是回文串， 如果不是，那么就跳过本次的循环，直接进行下一轮</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(index,i);</span><br><span class="line">    <span class="keyword">if</span>(isPalindrome(str,index,i + <span class="number">1</span>))&#123;</span><br><span class="line">        path.add(str);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   backTracking(s,i+<span class="number">1</span>);</span><br><span class="line">    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集问题"><a href="#子集问题" class="headerlink" title="子集问题"></a>子集问题</h3><blockquote><p>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例: 输入: nums &#x3D; [1,2,3] 输出: [ [3],  [1],  [2],  [1,2,3],  [1,3],  [2,3],  [1,2],  [] ]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/post/376d0826.html"/>
      <url>/post/376d0826.html</url>
      
        <content type="html"><![CDATA[<h1 id="题40-组合总和三"><a href="#题40-组合总和三" class="headerlink" title="题40.组合总和三"></a>题40.组合总和三</h1><blockquote><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的每个数字在每个组合中只能使用 一次 。</p></blockquote><p>注意：<strong>解集不能包含重复的组合。</strong>  </p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>], target = <span class="number">8</span>,</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">6</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">7</span>],</span><br><span class="line">[<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">5</span>,</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">[<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先根据我们之前的总结，可以确定这道题我们需要到回溯</p><p>【回溯可以解决的问题 : </p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><p>】</p><p><img src="/images/20210130173631174.png" alt="回溯算法理论基础"></p><p>如果按照我们之前的思路，那么这道题就是经典的递归回溯三部曲,[参考上面的图示]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(XXX,XXX ,xxx)</span>&#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">for</span>(....)&#123;</span><br><span class="line">    <span class="comment">//递归内容</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//回溯...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致思路基本就是这样的。</p><p>但是： 这道题中有一个很重要的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//candidates 中的每个数字在每个组合中只能使用 一次 。</span></span><br><span class="line"><span class="comment">//注意：解集不能包含重复的组合。  </span></span><br></pre></td></tr></table></figure><p>所以：在使用递归解决时我们就必须得注意</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(candidates.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        combine(candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> target,<span class="type">int</span> sum ,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt;nums.length ;i++)&#123;</span><br><span class="line">            sum += nums[i];   </span><br><span class="line">            combine(nums,target,sum,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯部分</span></span><br><span class="line">            sum -= nums[i];</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照这样做出来，那么对于平常的组合问题是没有问题得，但是这道题中得限制条件却不能满足</p><p><code>注意：解集不能包含重复的组合。 </code></p><p><img src="/images/image-20230222142918310.png"></p><p>由此我们可以看出他是无法满足我们设置的必要条件的，</p><h2 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h2><ol><li>先对数组进行排序，让相同的元素放在相同的位置</li><li>然后使用如果前后两个元素相同，那么就将后面相同的元素跳过</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i &gt; index &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] )&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以保证所有相同的元素中只有一个1 进入了循环</p><p><img src="/images/image-20230222143834784.png" alt="image-20230222143834784"></p><h3 id="优化三"><a href="#优化三" class="headerlink" title="优化三"></a>优化三</h3><p>如果按照之前的解法，我们就必须将所有的元素都进行相加，判断。如果这样那么效率就会大大降低</p><p>对于那些没有用的元素我们其实可以不进行相加的，在for循环判断时就可以剃齿多余的运算，从而节省效率</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(candidates.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        combine(candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> target,<span class="type">int</span> sum ,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//优化部分，对于sum += nums[i] &gt; target的部分可以不进行递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt;nums.length &amp;&amp; sum + nums[i] &lt;= target;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; index &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] )&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">         <span class="comment">//   System.out.println(&quot;第&quot;+ i +&quot;次&quot;+ nums[i]);</span></span><br><span class="line">            combine(nums,target,sum,i+<span class="number">1</span>);</span><br><span class="line">            sum -= nums[i];</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关图片取自代码随想录-题目来源力扣40"><a href="#相关图片取自代码随想录-题目来源力扣40" class="headerlink" title="相关图片取自代码随想录,题目来源力扣40"></a>相关图片取自<code>代码随想录</code>,题目来源力扣40</h2><h1 id="题131-分割回文串"><a href="#题131-分割回文串" class="headerlink" title="题131.分割回文串"></a>题131.分割回文串</h1><blockquote><p>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。回文串 是正着读和反着读都一样的字符串。</p></blockquote><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;aab&quot;</span></span><br><span class="line">输出：[[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>],[<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;b&quot;</span>]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;a&quot;</span></span><br><span class="line">输出：[[<span class="string">&quot;a&quot;</span>]]</span><br><span class="line">提示：</span><br><span class="line"><span class="number">1</span> &lt;= s.length &lt;= <span class="number">16</span></span><br><span class="line">s 仅由小写英文字母组成</span><br></pre></td></tr></table></figure><h2 id="思路-实现"><a href="#思路-实现" class="headerlink" title="思路 + 实现"></a>思路 + 实现</h2><p>【分割】 从这一关键字中我们就可以看出这种类型的题需要用到递归回溯算法</p><p>【分割成一些子串，使每个子串都是 回文串 。】那么我们就需要实现方法判断是不是回文串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVir</span><span class="params">(String str ,<span class="type">int</span> start ,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="comment">//根据回文串的特点，正反读都一样</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>start ,i &lt;=  end ; i++,end--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(i) != str.charAt(end))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回归到这道题本身，那么就可以判断是否子串是回文串了</p><p>接下来就是实现递归回溯的思路(递归三部曲)</p><ol><li>确定递归函数的参数、返回值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(String str , <span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>确定递归终止的条件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(index &gt;= str.length())&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>单层递归回溯的逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index , i &lt; s.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(isVir(s,index , i))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(s,index,i + <span class="number">1</span>);</span><br><span class="line">        path.add(str);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    combine(s,i+<span class="number">1</span>);</span><br><span class="line">    path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现版"><a href="#实现版" class="headerlink" title="实现版"></a>实现版</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        combine(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(String str , <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= str.length())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//单层递归的逻辑</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; str.length() ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVir(str,index,i))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> str.substring(index ,i + <span class="number">1</span>);</span><br><span class="line">                path.add(s1); </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">              combine(str,i+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                path.remove(path.size()- <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVir</span><span class="params">(String str , <span class="type">int</span> start ,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>start;i &lt; end;i++,end--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != str.charAt(end))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题93-复原-IP-地址"><a href="#题93-复原-IP-地址" class="headerlink" title="题93. 复原 IP 地址"></a>题<a href="https://leetcode.cn/problems/restore-ip-addresses/">93. 复原 IP 地址</a></h1><blockquote><p> <strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔。</p></blockquote><ul><li>例如：<code>&quot;0.1.2.201&quot;</code> 和<code> &quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。</li></ul><blockquote><p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>&#39;.&#39;</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;25525511135&quot;</span><br><span class="line">输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;0000&quot;</span><br><span class="line">输出：[&quot;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;101023&quot;</span><br><span class="line">输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]</span><br></pre></td></tr></table></figure><h2 id="思路-实现-1"><a href="#思路-实现-1" class="headerlink" title="思路 + 实现"></a>思路 + 实现</h2><p>首先我们可以确定有效ip的逻辑</p><ul><li>段位以0为开头的数字不合法</li><li>段位里有非正整数字符不合法</li><li>段位如果大于255了不合法</li></ul><p>满足以上三点就可以作为有效ip</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否是有效ip</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVir</span><span class="params">(String str,<span class="type">int</span> start ,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断第一个数是否未0</span></span><br><span class="line">      <span class="keyword">if</span>(str.charAt(start) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断数字是否是0-9之间的，有没有特殊字符</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">tmep</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(str.charAt(i) &lt; <span class="string">&#x27;0&#x27;</span> || str.charAt(i) &gt; <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          tmep = <span class="number">10</span> * tmep + (str.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span>(tmep &gt; <span class="number">255</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>接下来就是递归回溯三步</p><ul><li>确定递归函数、返回值、参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index为层序递归的索引 number添加‘ . ’的次数 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(String s ,<span class="type">int</span> index,<span class="type">int</span> number)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果该字符串是有效ip就加入</span></span><br><span class="line"><span class="keyword">if</span>(number == <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isVir(s,index,s.length()))&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单层递归回溯逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; s.length();i++)&#123;</span><br><span class="line">    <span class="comment">//符合有效ip的逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(isVir(s,index,i))&#123;</span><br><span class="line">        <span class="comment">//加小数点</span></span><br><span class="line">        s = s.substring(<span class="number">0</span>,i+<span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.substring(i+<span class="number">1</span>);</span><br><span class="line">        path.add(s);</span><br><span class="line">        number++;</span><br><span class="line">        <span class="comment">//注意细节 ，因为我们多加了点， 所以下次递归就需要再往后移，不然就会出现第一</span></span><br><span class="line">        combine(s,i+<span class="number">2</span>,umber);</span><br><span class="line">        number--;</span><br><span class="line">        <span class="comment">//重点，删除多余的  . </span></span><br><span class="line">        s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>); <span class="comment">// 回溯删掉逗点   </span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String &gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先判断是否是</span></span><br><span class="line">        <span class="keyword">if</span>(s.length() &lt; <span class="number">4</span> || s.length() &gt; <span class="number">12</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        combine(s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// StringBuilder sb = new StringBuilder();</span></span><br><span class="line">    <span class="comment">//number代表的是字符串中插入 ‘ . ’的次数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(String s ,<span class="type">int</span> index,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVir(s,index,s.length() - <span class="number">1</span> ))&#123;</span><br><span class="line">                res.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单层递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i &lt; s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVir(s,index,i))&#123;</span><br><span class="line">                s = s.substring(<span class="number">0</span>,i + <span class="number">1</span>) + <span class="string">&#x27;.&#x27;</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">                number++;</span><br><span class="line">                combine(s,i+<span class="number">2</span>,number);</span><br><span class="line">                number--;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>); <span class="comment">// 回溯删掉逗点   </span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否是有效ip</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVir</span><span class="params">(String str,<span class="type">int</span> start ,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断第一个数是否未0</span></span><br><span class="line">        <span class="keyword">if</span>(str.charAt(start) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断数字是否是0-9之间的，有没有特殊字符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmep</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) &lt; <span class="string">&#x27;0&#x27;</span> || str.charAt(i) &gt; <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmep = <span class="number">10</span> * tmep + (str.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(tmep &gt; <span class="number">255</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转字符串中的单词</title>
      <link href="/post/a669b1a7.html"/>
      <url>/post/a669b1a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><h2 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="151. 反转字符串中的单词"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词</a></h2><p>难度中等758收藏分享切换为英文接收动态反馈</p><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题如果我们按照之前固有的思路来解的话那就是用split来分割， 然后再进行反转就可以了，但是这样题目就失去了本身的意义。所以我们这里不借助String的本身的工具，而是自定义实现删除空格</p><p>操作虽然只有三步，但是每一步需要思考的东西有很多。所以这道题需要我们仔细的去琢磨</p><p>分三步进行操作 :</p><ol><li>删除多余的空格</li><li>反转所有的字符串</li><li>反转字符串中的单词</li></ol><h3 id="删除多余空格"><a href="#删除多余空格" class="headerlink" title="删除多余空格"></a>删除多余空格</h3><p>对于我们java选手来说，不需要去重定义String数组的大小，只需要用StringBuilder 或者StringBuffer就可以完成拼接</p><p>所以<strong>只需要考虑在什么时候拼接最为合适即可</strong></p><p>所以我们就不需要双指针了，一个指针就可以完成，当然双指针仍然是最优解。</p><ol><li>删除字符串前面的空格</li></ol><p>删除前面的空格也不需要我们做什么操作，如果发现有空格那么我们就直接跳过就行了。指针向后移即可。</p><ol start="2"><li>删除字符串中间的空格</li></ol><p>当前面的空格移除完毕之后，剩下的就该中间的了。此时，执政就会指向字母所在的地方。我们需要做的就是删除中间多余的空格(需要留一个)。如何删除呢 ？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先之前已经删除完字符串前面的空格了，所以之后的指针指向的第一个一定是字母，所以就会拼接上去</span><br><span class="line">之后。指针就指向第二个，此时index - <span class="number">1</span> 是一定大于 <span class="number">0</span> 的</span><br><span class="line">同时指针一直向后移动。当index 指向<span class="string">&#x27; &#x27;</span>时让他继续拼接 ，但是</span><br><span class="line">   当index 和index - <span class="number">1</span>同时都为<span class="string">&#x27; &#x27;</span>时 ，这是我们就需要跳过一次循环，让他停止拼接一次。</span><br><span class="line">这样就实现了删除中间多余的<span class="string">&#x27; &#x27;</span>的操作了</span><br></pre></td></tr></table></figure><ol start="3"><li>删除字符串后面的空格</li></ol><p>最后只可能出现唯一一种情况就是多了一个空格，因为我们之前在这一步</p><p><code>if(fast - 1 &gt; 0 &amp;&amp; s.charAt(fast-1) == s.charAt(fast) &amp;&amp; s.charAt(fast) == &#39; &#39;)</code></p><p>如果最后两个都是空格，那么他只会删除一个，所以有可能会出现多余空格。我们只需要在其有的可能下删除一个即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">delete</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>,slow = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//处理前面的空格</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span>(s.length() &gt; <span class="number">0</span> &amp;&amp; fast &lt; s.length() &amp;&amp; s.charAt(fast) ==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理中间多余的空格</span></span><br><span class="line">    <span class="keyword">for</span>(;fast &lt;s.length() ;fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast - <span class="number">1</span> &gt; <span class="number">0</span> &amp;&amp; s.charAt(fast-<span class="number">1</span>) == s.charAt(fast) &amp;&amp; s.charAt(fast) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            str.append(s.charAt(fast));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str.charAt(str.length()-<span class="number">1</span>) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        str.deleteCharAt(str.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理后序空格</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//删除多余的空格</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> delete(s);</span><br><span class="line">        <span class="comment">//反转所有的字符串</span></span><br><span class="line">        reverseString(res,<span class="number">0</span>,res.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//反转部分字符串</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span><span class="number">0</span>,end = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; res.length();i++)&#123;</span><br><span class="line">            <span class="comment">//遇到字符串</span></span><br><span class="line">            <span class="keyword">if</span>(!flag || (res.charAt(i)!=<span class="string">&#x27; &#x27;</span> &amp;&amp; res.charAt(i-<span class="number">1</span>)==<span class="string">&#x27; &#x27;</span>))&#123;</span><br><span class="line">                start = i;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//字符串结束</span></span><br><span class="line">            <span class="keyword">if</span>(flag &amp;&amp; res.charAt(i) ==<span class="string">&#x27; &#x27;</span> )&#123;</span><br><span class="line">                end = i-<span class="number">1</span>;</span><br><span class="line">                reverseString(res,start,end);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//字符串结尾的转</span></span><br><span class="line">            <span class="keyword">if</span>(flag &amp;&amp; (i==(res.length()-<span class="number">1</span>)) &amp;&amp; res.charAt(i) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                end = i;</span><br><span class="line">                reverseString(res,start,end);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> StringBuilder <span class="title function_">delete</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>,slow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//处理前面的空格</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(s.length() &gt; <span class="number">0</span> &amp;&amp; fast &lt; s.length() &amp;&amp; s.charAt(fast) ==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理中间多余的空格</span></span><br><span class="line">        <span class="keyword">for</span>(;fast &lt;s.length() ;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast - <span class="number">1</span> &gt; <span class="number">0</span> &amp;&amp; s.charAt(fast-<span class="number">1</span>) == s.charAt(fast) &amp;&amp; s.charAt(fast) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                str.append(s.charAt(fast));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(str.length()-<span class="number">1</span>) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            str.deleteCharAt(str.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理后序空格</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Evaluate项目开发日志</title>
      <link href="/post/e5d1c0d6.html"/>
      <url>/post/e5d1c0d6.html</url>
      
        <content type="html"><![CDATA[<h1 id="黑马点评项目的学习日志"><a href="#黑马点评项目的学习日志" class="headerlink" title="黑马点评项目的学习日志"></a>黑马点评项目的学习日志</h1><p>项目需要实现的功能介绍</p><p><img src="/images/image-20230218101124109.png" alt=""></p><p>项目架构</p><p><img src="/images/image-20230218101531022.png" alt="image-20230218101531022"></p><p>前端登录 ，使用nginx启动前端项目 ，然后访问8080端口，必须是在后端项目启动的情况下</p><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p><code>Bean --- &gt;  String : </code>  <code>Bean.toString()</code></p><p><code>String ----&gt; Bean : </code> <code>Shop shop = JSONUtil.toBean(shopJson, Shop.class);</code></p><p><code>Bean ----&gt;hashMap :</code> <code> Map&lt;String, Object&gt; map1 = BeanUtil.beanToMap(userDTO);</code></p><p><code>hash ----&gt;Bean :  </code>  <code>UserDTO userDTO1 = BeanUtil.mapToBean(map, UserDTO.class, true);</code></p><h1 id="2023-2-18—–短信登录"><a href="#2023-2-18—–短信登录" class="headerlink" title="2023.2.18—–短信登录"></a>2023.2.18—–短信登录</h1><p>​</p><p>基于session实现发送验证码登录</p><h3 id="流程图的分析"><a href="#流程图的分析" class="headerlink" title="流程图的分析"></a><strong>流程图的分析</strong></h3><h4 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h4><p><img src="/images/image-20230218111418914.png" alt="image-20230218111418914"></p><p>接口:<code>@PostMapping(&quot;/user/code&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span> userService.sendCode(phone,session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line"><span class="comment">// TODO 实现发送验证码方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 校验手机号是否合格</span></span><br><span class="line"><span class="comment">     * 2. 不合格怎么做</span></span><br><span class="line"><span class="comment">     //合格..........</span></span><br><span class="line"><span class="comment">     * 1. 生成验证码</span></span><br><span class="line"><span class="comment">     * 2. 保存验证码到 session</span></span><br><span class="line"><span class="comment">     * 3. 发送验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1. 校验手机号是否合格（一般使用正则表达式去校验） 这里我们封装到RefexUtils.isPhoneInvalid是否是无效手机号</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isNotNumber</span> <span class="operator">=</span> RegexUtils.isPhoneInvalid(phone);</span><br><span class="line">    <span class="comment">//不是手机号</span></span><br><span class="line">    <span class="keyword">if</span>(isNotNumber)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误 !!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合格，是手机号</span></span><br><span class="line">    <span class="comment">//1. 生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">    log.debug(<span class="string">&quot;发送短信验证码成功 !&quot;</span>);    <span class="comment">//需要调用阿里云的测试，暂时不是重点 ，无需实现</span></span><br><span class="line">    <span class="comment">//返回ok就行了</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="短信验证码登录"><a href="#短信验证码登录" class="headerlink" title="短信验证码登录"></a>短信验证码登录</h4><p><img src="/images/image-20230218111427520.png" alt="image-20230218111427520"></p><ol><li>提交验证码和手机号，并且进行判断是否正确</li><li><strong>正确 : <strong>就继续 ，</strong>错误</strong>  : 返回验证码错误</li><li>调用数据库查询用户是否存在</li><li><strong>存在的话</strong> : 保存用户信息到session，<strong>不存在</strong> : 就跳转到注册页面 ，注册并保存到数据库</li></ol><p>接口 : <code>@PostMapping(&quot;/user/login&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="keyword">return</span>  userService.login(loginForm,session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="comment">//1. 提交验证码和手机号，并且进行判断是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="comment">//2. **正确 : **就继续 ，**错误**  : 返回验证码错误</span></span><br><span class="line">    <span class="keyword">if</span>(!loginForm.getPhone().equals(phone) || !loginForm.getCode().equals(code))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号/验证码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 调用数据库查询用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. **存在的话** : 保存用户信息到session，**不存在** : 就跳转到注册页面 ，注册并保存到数据库</span></span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setPhone(phone);</span><br><span class="line">    <span class="comment">//生成随机的用户名</span></span><br><span class="line">    user.setNickName(<span class="string">&quot;user_&quot;</span> + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="校验登录状态"><a href="#校验登录状态" class="headerlink" title="校验登录状态"></a>校验登录状态</h4><p><img src="/images/image-20230218131635655.png"></p><p>在拦截器中是实现校验功能</p><p>​流程</p><ol><li>获取请求携带的cookie</li><li>获取用户</li><li>判断用户是否存在，<strong>存在 :</strong> 保存该线程 ，**不存在 :**拦截</li></ol><h5 id="首先实现拦截器"><a href="#首先实现拦截器" class="headerlink" title="首先实现拦截器"></a><strong>首先实现拦截器</strong></h5><p>在拦截器中我们就可以实现我们需要的登录流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config.Handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.UserHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置登录校验拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求携带的cookie</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 获取用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span>  session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 判断用户是否存在，**存在 :** 保存该线程 ，**不存在 :**拦截</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 保存信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser((UserDTO) user);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁用户的信息，避免信息的泄露 ，防止内存泄露</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//移除用户 ,清除的是线程中的</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在mvc配置类中添加拦截器"><a href="#在mvc配置类中添加拦截器" class="headerlink" title="在mvc配置类中添加拦截器"></a>在mvc配置类中添加拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmdp.config.Handler.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">        <span class="comment">//排除不需要拦截的路径</span></span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="comment">//1. 提交验证码和手机号，并且进行判断是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="comment">//2. **正确 : **就继续 ，**错误**  : 返回验证码错误</span></span><br><span class="line">    <span class="keyword">if</span>(phone == <span class="literal">null</span> || !loginForm.getCode().equals(code))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号/验证码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 调用数据库查询用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. **存在的话** : 保存用户信息到session，**不存在** : 就跳转到注册页面 ，注册并保存到数据库</span></span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        user = createUserWithPhone( phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为这样会将所有的用户的信息都传过来，这样不利于保护用户隐私 ，所以我们映射到前端的时候不能将全部的信息都返回</span></span><br><span class="line"><span class="comment">     * 仅仅返回一些简单的信息即可，所以我们就用到了UserDTO</span></span><br><span class="line"><span class="comment">     * 使用Bean.copyProperties就可以将user中的属性的值拷贝一份给userDto</span></span><br><span class="line"><span class="comment">     * 然后存储到session的就是我们的UserDTo对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,userDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于返回的信息，因为我们登录时会设置密码等 ，一系列隐私属性，如果我们返回前端这些属性的话，那么势必会造成信息泄露。所以为例用户安全着想 我们映射到前端的时候不能将全部的信息都返回 。 仅仅返回一些简单的信息即可，所以我们就用到了<code>UserDTO</code>  。 使用<code>Bean.copyProperties</code>就可以将user中的属性的值拷贝一份给<code>userDto</code>。 然后存储到session的就是我们的<code>UserDTo</code>对象， 这样就避免用户信息在传入前端时出现信息泄露的风险。</p><h5 id="获取当前用户并返回"><a href="#获取当前用户并返回" class="headerlink" title="获取当前用户并返回"></a>获取当前用户并返回</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 获取当前登录的用户并返回</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集群的Session共享问题"><a href="#集群的Session共享问题" class="headerlink" title="集群的Session共享问题"></a>集群的Session共享问题</h2><p>存储的信息是在单线程中的，所以多台Tomcat并不能共享session的存储空间 ，当请求切换到不同的tomcat服务器导致数据丢失的问题 ——session共享问题</p><p><img src="/images/image-20230218145140010.png" alt="image-20230218145140010"></p><p>当用户第一次进入系统时，<strong>tomcat服务器①</strong>接收到请求，然后进行处理用户的请求（登录注册等）。</p><p>当用户第二次进入系统时 ，被负载均衡到了<strong>tomca服务器②</strong> 。用户的信息其实是已经注册了的，但是这里却无法获取。导致用户还得注册…这会造成用户体验感很差，所以我们需要继续处理。 </p><p>这就是Session共享的问题</p><p>解决办法： </p><pre><code> 实现session共享。</code></pre><p>Redis实现解决Session共享问题</p><p>使用redis代替session解决。</p><h2 id="基于Redis实现共享session登录"><a href="#基于Redis实现共享session登录" class="headerlink" title="基于Redis实现共享session登录"></a>基于Redis实现共享session登录</h2><p><img src="/images/image-20230218151559751.png"></p><ol><li>当我们实现生成验证码时 ，就可以直接将以  <code>【手机号为 key ： 验证码为value】</code> 保存到reids中 </li><li>输入完验证码，点击登录的时候。进行校验，我们就可以在redis中查询当前手机号保存的value与输入的进行比较。如果比较正确就下一步</li><li>根据手机号查询是否有这个用户。如果有就保存这个用户的信息到redis ，<code>【以随机的token为key : 用户信息为value】</code> 。</li><li>如果没有查到，那么就注册新的用户。然后保存到数据库（mysql），然后再回到<strong>步骤3</strong>进行</li></ol><p><img src="/images/image-20230218151620667.png" alt="image-20230218151620667"></p><ol start="5"><li><p>校验登录状态时， 请求就会携带着token。</p></li><li><p>然后我们就可以通过携带得token得value属性值判断用户是否存在。如果存在，那么就保存用户到<code>ThreadLocal</code>中，然后放行该请求。</p></li><li><p>如果不存在，那么拦截器就会拦截请求</p></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li>发送短信验证码，然后将验证码保存到redis中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 生成验证码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line"><span class="comment">/**-----------------</span></span><br><span class="line"><span class="comment">         * 保存验证码到redis中</span></span><br><span class="line"><span class="comment">         * 添加业务前缀</span></span><br><span class="line"><span class="comment">         * 设置验证码的有效期2分钟</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 实现发送验证码方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 校验手机号是否合格</span></span><br><span class="line"><span class="comment">         * 2. 不合格怎么做</span></span><br><span class="line"><span class="comment">         //合格..........</span></span><br><span class="line"><span class="comment">         * 1. 生成验证码</span></span><br><span class="line"><span class="comment">         * 2. 保存验证码到 session</span></span><br><span class="line"><span class="comment">         * 3. 发送验证码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//1. 校验手机号是否合格（一般使用正则表达式去校验） 这里我们封装到RefexUtils.isPhoneInvalid是否是无效手机号</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isNotNumber</span> <span class="operator">=</span> RegexUtils.isPhoneInvalid(phone);</span><br><span class="line">    <span class="comment">//不是手机号</span></span><br><span class="line">    <span class="keyword">if</span>(isNotNumber)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误 !!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合格，是手机号</span></span><br><span class="line">    <span class="comment">//1. 生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">/**-----------------</span></span><br><span class="line"><span class="comment">         * 保存验证码到redis中</span></span><br><span class="line"><span class="comment">         * 添加业务前缀</span></span><br><span class="line"><span class="comment">         * 设置验证码的有效期 2分钟</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------</span></span><br><span class="line">    log.debug(<span class="string">&quot;发送短信验证码成功 ! 验证码为  : [&quot;</span> + code + <span class="string">&quot;]&quot;</span>);    <span class="comment">//需要调用阿里云的测试，暂时不是重点 ，无需实现</span></span><br><span class="line">    <span class="comment">//返回ok就行了</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>点击登录的时候。进行校验，我们就可以在redis中查询当前手机号保存的value与输入的进行比较</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="comment">//1. 提交验证码和手机号，并且进行判断是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">    <span class="comment">//2. **正确 : **就继续 ，**错误**  : 返回验证码错误</span></span><br><span class="line">    <span class="keyword">if</span>(phone == <span class="literal">null</span> || !loginForm.getCode().equals(code))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 调用数据库查询用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. **存在的话** : 保存用户信息到session，**不存在** : 就跳转到注册页面 ，注册并保存到数据库</span></span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        user = createUserWithPhone( phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.保存用户信息到 redis中</span></span><br><span class="line"><span class="comment">     * 2. 随机生成token， 作为登录令牌</span></span><br><span class="line"><span class="comment">     * 3. 将user对象转成hashmap去存储</span></span><br><span class="line"><span class="comment">     * 4. 存储</span></span><br><span class="line"><span class="comment">     * 5. 返回token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">            CopyOptions.create().setIgnoreNullValue(<span class="literal">true</span>).</span><br><span class="line">                    setFieldValueEditor((filedName , fieldValue) -&gt; fieldValue.toString()));  <span class="comment">//将对象转成map</span></span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY+token,map);</span><br><span class="line">    <span class="comment">//存储完成设置有效期 30 min</span></span><br><span class="line">    stringRedisTemplate.expire(LOGIN_USER_KEY + token, LOGIN_USER_TTL ,TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果用户30分钟内一直进行访问的话，那么有效期就会不断的变化，所以我么就需要再拦截器中设置，一旦用户点击，就是有了请求</span></span><br><span class="line"><span class="comment">     * 那么就重置30分钟，一直往复的设值，那么就实现了用户30分钟不点点击就删除token的设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重点1"><a href="#重点1" class="headerlink" title="重点1"></a><strong>重点1</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.保存用户信息到 redis中</span></span><br><span class="line"><span class="comment">     * 2. 随机生成token， 作为登录令牌</span></span><br><span class="line"><span class="comment">     * 3. 将user对象转成hashmap去存储</span></span><br><span class="line"><span class="comment">     * 4. 存储</span></span><br><span class="line"><span class="comment">     * 5. 返回token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line"><span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"><span class="comment">//3. 将user对象转成hashmap去存储</span></span><br><span class="line">Map&lt;String, Object&gt; map = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),                                             CopyOptions.create().setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">    .setFieldValueEditor((filedName , fieldValue) -&gt; fieldValue.toString())); </span><br><span class="line"><span class="comment">//上面那样写的目的是为了实现bean转换成map，因为我们的redis中的hash结构key 和 value全都是String类型，而在UserDTO中，id属性为Long类型，无法无法强转为String类型，所以就需要我们自定以hash中的存储类型为Long类型</span></span><br><span class="line"></span><br><span class="line">stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY+token,map);</span><br><span class="line"><span class="comment">//存储完成设置有效期 30 min</span></span><br><span class="line">stringRedisTemplate.expire(LOGIN_USER_KEY + token, LOGIN_USER_TTL ,TimeUnit.MINUTES);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果用户30分钟内一直进行访问的话，那么有效期就会不断的变化，所以我么就需要再拦截器中设置，一旦用户点击，就是有了请求</span></span><br><span class="line"><span class="comment">     * 那么就重置30分钟，一直往复的设值，那么就实现了用户30分钟不点点击就删除token的设置</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><h4 id="重点2"><a href="#重点2" class="headerlink" title="重点2"></a>重点2</h4><p>重置token的时常，实现30分钟为点击删除token 以及**<code>一旦点击某个请求就重置token的时间</code>**</p><p>方法： 新增一个拦截器，只处理点击请求就重置token时间的问题</p><p><img src="/images/image-20230218164320306.png" alt="image-20230218164320306"></p><p>两个不同作用的拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config.Handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.UserHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.LOGIN_USER_KEY;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.LOGIN_USER_TTL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击某个请求， 就重置token时间的拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preHandler</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">preHandler</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求携带的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> LOGIN_USER_KEY+ token;</span><br><span class="line">        <span class="comment">//2. 基于token获取redis中用户</span></span><br><span class="line">        <span class="comment">//3. 判断用户是否存在 ,如果不存在直接放行，不进行下面的步骤</span></span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isBlank(token))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Object, Object&gt; map = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">//将redis查询到的用户信息hashmap转换成user对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(map, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//4. 保存信息到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key,LOGIN_USER_TTL , TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config.Handler;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.UserHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置登录校验拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截请求， 仅需要判断是否需要拦截，不需要做其他的事情</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(UserHolder.getUser() == <span class="literal">null</span>)&#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由用户，放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MVC配置文件中设置拦截器的执行顺序</p><p>通过后面的order(x); &#x2F;&#x2F;x数字越小优先级越高，越先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">        <span class="comment">//排除不需要拦截的路径</span></span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">                ).order(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先执行</span></span><br><span class="line">        <span class="comment">//拦截所有的请求 ，作用就是用户登录了就点击刷新token消失的时间</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">preHandler</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2023-2-20—–商户查询缓存"><a href="#2023-2-20—–商户查询缓存" class="headerlink" title="2023.2.20—–商户查询缓存"></a>2023.2.20—–商户查询缓存</h1><h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p> 数据交换的缓存区，<strong>是存储数据的临时地方，一般读写效率高</strong></p><p>web应用中： </p><p><img src="/images/image-20230219102223739.png" alt="image-20230219102223739"></p><p>缓存在web应用中，缓存可以降低后端的负载、提高读写效率、降低响应时间</p><p>成本 : 数据的一致性成本、代码维护成本、运维成本…..</p><h2 id="如何添加缓存"><a href="#如何添加缓存" class="headerlink" title="如何添加缓存"></a>如何添加缓存</h2><p>业务流程分析 与 模型</p><p><img src="/images/image-20230219102703659.png" alt="image-20230219102703659"></p><ol><li><p>从redis中查询商铺的缓存</p></li><li><p>判断redis中是否存在该id的商户</p></li><li><p>如果存在  ： 返回商户的信息</p></li><li><p>如果不存在:  根据传入的id查询数据库 ，判断数据库中是否存在商户，如果不存在就返回401 </p></li><li><p>数据库中 商户如果存在就将商户信息写入redis</p></li><li><p>返回商户信息</p></li></ol><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="keyword">implements</span> <span class="title class_">IShopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Iid</span> <span class="operator">=</span> String.valueOf(id); <span class="comment">//强转时会出现异常</span></span><br><span class="line"><span class="comment">//        1. 从redis中查询商铺的缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(Iid);</span><br><span class="line"><span class="comment">//        2. 判断redis中是否存在该id的商户</span></span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;</span><br><span class="line"><span class="comment">//        3. 如果存在  ： 返回商户的信息</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shopN</span> <span class="operator">=</span> getById(id);</span><br><span class="line"><span class="comment">//        4. 如果不存在:</span></span><br><span class="line"><span class="comment">//        4.1根据传入的id查询数据库 ，判断数据库中是否存在商户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="keyword">if</span>(shopN == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//4.3 如果不存在就返回401</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4.2数据库中 商户如果存在就将商户信息写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,shopN.toString());</span><br><span class="line"><span class="comment">//        6. 返回商户信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shopN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给商品类型添加redis缓存"><a href="#给商品类型添加redis缓存" class="headerlink" title="给商品类型添加redis缓存"></a>给商品类型添加redis缓存</h4><p><img src="/images/image-20230219115421961.png" alt="image-20230219115421961"></p><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopTypeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShopTypeMapper, ShopType&gt; <span class="keyword">implements</span> <span class="title class_">IShopTypeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ShopType</span> <span class="variable">shopType</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShopType</span>();</span><br><span class="line">        <span class="comment">//先查看缓存中是否存在</span></span><br><span class="line">        List&lt;String&gt; range = stringRedisTemplate.opsForList().range(<span class="string">&quot;shopTypeList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//如果存在，那么就直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(!range.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(range);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不存在，先从数据库中查到，然后再交给redis，然后再返回</span></span><br><span class="line">        List&lt;ShopType&gt; sort = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="keyword">for</span>(ShopType item : sort)&#123;</span><br><span class="line">            stringRedisTemplate.opsForList().rightPush(<span class="string">&quot;shopTypeList&quot;</span>, JSONUtil.toJsonStr(item));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; typeList = stringRedisTemplate.opsForList().range(<span class="string">&quot;shopTypeList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存更新策略-—双写一致性问题"><a href="#缓存更新策略-—双写一致性问题" class="headerlink" title="缓存更新策略- —双写一致性问题"></a>缓存更新策略- —双写一致性问题</h2><blockquote><p>解决数据同步的问题</p></blockquote><p>解决策略</p><p><img src="/images/image-20230219115845335.png" alt="image-20230219115845335"></p><p><strong>场景：</strong></p><p><strong>低一致性需求： 使用内存淘汰机制，例如店铺类型的查询缓存</strong></p><p><strong>高一致性需求： 主动更新，并且使用超时剔除作为兜底方案。例如店铺的详情查询</strong></p><h3 id="主动更新的策略"><a href="#主动更新的策略" class="headerlink" title="主动更新的策略"></a>主动更新的策略</h3><ol><li><strong><code>由缓存的调用者，在更新数据库的同时更新缓存</code></strong>(常用！)</li><li>缓存与数据库整合为一个服务，由服务来维护一致性。，调用者无需关系缓存一致性问题</li><li>调用者只操作缓存，由其他线程异步的将缓存数据持久化到数据库，保证最终的一致</li></ol><h3 id="主动更新策略的考虑问题"><a href="#主动更新策略的考虑问题" class="headerlink" title="主动更新策略的考虑问题"></a>主动更新策略的考虑问题</h3><p>删除缓存还是更新缓存？</p><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存</li></ul><p>如何保证缓存与数据库的操作的同时成功或失败？</p><ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用TCC等</li></ul><p>分布式事务方案先操作缓存还是先操作数据库？</p><ul><li>先操作数据库，再删除缓存 &#x2F; 反之亦可</li></ul><h3 id="缓存更新策略的最佳实践方案："><a href="#缓存更新策略的最佳实践方案：" class="headerlink" title="缓存更新策略的最佳实践方案："></a>缓存更新策略的最佳实践方案：</h3><p>低一致性需求：</p><ul><li>使用Redis自带的内存淘汰机制</li></ul><p>高一致性需求：</p><ul><li>主动更新，并以超时剔除作为兜底方案<ul><li>读操作：缓存命中则直接返回缓存未命中则查询数据库，并写入缓存，设定超时时间</li><li>写操作：先写数据库，然后再删除缓存要确保数据库与缓存操作的原子性</li></ul></li></ul><h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><p><strong>查询商户时设置超时删除策略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.2数据库中 商户如果存在就将商户信息写入redis ,超时删除30min</span></span><br><span class="line">stringRedisTemplate.opsForValue().set(key,shopN.toString(),<span class="number">30</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><p>每次更新数据时，就会先删除缓存，然后再从次查询时会先从数据库中查出更新过的数据保存到缓存中去，然后再回显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shop 商铺数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">    <span class="comment">// 写入数据库</span></span><br><span class="line">    <span class="keyword">return</span> shopService.update(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    <span class="comment">//todo 更新数据库删除缓存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//添加事务</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 更新数据库</span></span><br><span class="line">        updateById(shop);</span><br><span class="line">        <span class="keyword">if</span>(shop.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">//删除缓存</span></span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><code>缓存穿透</code></h2><p> <strong>指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li><p>缓存空对象 ： 如果用户恶意多次查找数据库和缓存中都不存在的对象，我们可以给这种对象赋一个空的对象到redis，这样无论多少次恶意请求，他都不会多次访问数据库，只要一次访问不到，那么就只能到缓存中拿空对象了</p><ol><li>优点：实现简单，维护方便</li><li>缺点：额外的内存消耗可能造成短期的不一致</li><li>控制ttl时间，可以实现短期不一致的降低</li></ol><p><img src="/images/image-20230219132600823.png" alt="image-20230219132600823"></p></li><li><p>布隆过滤</p><ol><li>优点 ：内存占用非常小</li><li>缺点： 实现复杂、存在误判的可能</li></ol></li></ol><p><img src="/images/image-20230219133017662.png" alt="image-20230219133017662"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p><img src="/images/image-20230219133356865.png"></p><ol><li>如果用户第一次查询，没有从缓存和数据库中查出数据，那么就创建一个空值(key1， “” )，存入redis</li><li>后面如果再次查询不存在的用户key1，那么就可以从缓存中查询将空值拿出来，然后直接返回，这样就可以不用操作数据库</li><li>如果2中拿出来的值为null，那么就说明店铺</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用缓存穿透</span></span><br><span class="line"><span class="comment">         * 判断是否为null ，因为如果是null的话</span></span><br><span class="line"><span class="comment">         * ---------------需要好好理解以下逻辑---------------------</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">/*isNotBlank : 判断某字符串是否不为空且长度不为0且不由空白符&quot;&quot;(whitespace)构成</span></span><br><span class="line"><span class="comment">        如果缓存中有查询需要的数据且不等于”“，那么就会在上面一步直接返回</span></span><br><span class="line"><span class="comment">        如果查询出有需要的数据且值为空”“(不等于null) 那么就会到我们这一步进行返回，因为之前查过数据库，没有这个数据</span></span><br><span class="line"><span class="comment">        如果之前没查过这个数据，那么就不会给他赋值为”“ 而至直接查出来的是null，就去数据库中查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="keyword">if</span>(shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ---------------------------------------------------</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="type">Shop</span> <span class="variable">shopN</span> <span class="operator">=</span> getById(id);</span><br><span class="line"><span class="comment">//        4. 如果不存在:</span></span><br><span class="line"><span class="comment">//        4.1根据传入的id查询数据库 ，判断数据库中是否存在商户</span></span><br><span class="line"><span class="keyword">if</span>(shopN == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">//4.3 如果不存在就返回401</span></span><br><span class="line">    <span class="comment">/**使用缓存穿透</span></span><br><span class="line"><span class="comment">             *查出数据库中也不存在，那么设置一个空值，下次(在规定时间内)再查他就不会再到数据库中查了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个逻辑的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id; <span class="comment">//强转时会出现异常</span></span><br><span class="line"><span class="comment">//        1. 从redis中查询商铺的缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"><span class="comment">//        2. 判断redis中是否存在该id的商户</span></span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;</span><br><span class="line"><span class="comment">//        3. 如果存在： 返回商户的信息</span></span><br><span class="line">            <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用缓存穿透</span></span><br><span class="line"><span class="comment">         * 判断是否为null ，因为如果是null的话</span></span><br><span class="line"><span class="comment">         * ---------------需要好好理解以下逻辑---------------------</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*isNotBlank : 判断某字符串是否不为空且长度不为0且不由空白符&quot;&quot;(whitespace)构成</span></span><br><span class="line"><span class="comment">        如果缓存中有查询需要的数据且不等于”“，那么就会在上面一步直接返回</span></span><br><span class="line"><span class="comment">        如果查询出有需要的数据且值为空”“(不等于null) 那么就会到我们这一步进行返回，因为之前查过数据库，没有这个数据</span></span><br><span class="line"><span class="comment">        如果之前没查过这个数据，那么就不会给他赋值为”“ 而至直接查出来的是null，就去数据库中查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ---------------------------------------------------</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shopN</span> <span class="operator">=</span> getById(id);</span><br><span class="line"><span class="comment">//        4. 如果不存在:</span></span><br><span class="line"><span class="comment">//        4.1根据传入的id查询数据库 ，判断数据库中是否存在商户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="keyword">if</span>(shopN == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//4.3 如果不存在就返回401</span></span><br><span class="line">            <span class="comment">/**使用缓存穿透</span></span><br><span class="line"><span class="comment">             *查出数据库中也不存在，那么设置一个空值，下次(在规定时间内)再查他就不会再到数据库中查了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4.2数据库中 商户如果存在就将商户信息写入redis ,超时删除30min</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,shopN.toString(),<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line"><span class="comment">//        6. 返回商户信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shopN);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="缓存穿透产生的原因是什么？"><a href="#缓存穿透产生的原因是什么？" class="headerlink" title="缓存穿透产生的原因是什么？"></a>缓存穿透产生的原因是什么？</h3><p>用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力</p><h4 id="缓存穿透的解决方案有哪些？"><a href="#缓存穿透的解决方案有哪些？" class="headerlink" title="缓存穿透的解决方案有哪些？"></a>缓存穿透的解决方案有哪些？</h4><p>缓存null值、布隆过滤、增强id的复杂度，避免被猜测id规律、做好数据的基础格式校验、加强用户权限校验、做好热点参数的限流</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><code>缓存雪崩</code></h2><p>缓存雪崩是指在<strong>同一时段大量的缓存key同时失效或者Redis服务宕机</strong>，<strong>导致大量请求到达数据库</strong>，带来巨大压力。</p><p>服务延机最为可怕。</p><p>解决方案：</p><p><strong>给不同的Key的TTL添加随机值</strong>、利用Redis集群提高服务的可用性、给缓存业务添加降级限流策略、<strong>给业务添加多级缓存</strong></p><p>（后面的三个暂未实现）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id + RandomUtil.randomInt(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><code>缓存击穿</code></h2><p>缓存击穿问题也叫<strong>热点Key问题</strong>，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><h3 id="解决方法（需要在一致性和可用性上做出选择）"><a href="#解决方法（需要在一致性和可用性上做出选择）" class="headerlink" title="解决方法（需要在一致性和可用性上做出选择）"></a>解决方法（需要在一致性和可用性上做出选择）</h3><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>优点 ：</p><ul><li>没有额外的内存消耗</li><li>保证了一致性</li><li>实现简单</li></ul><p>缺点：</p><ul><li>性能受影响</li><li>可能有死锁风险</li></ul><p><img src="/images/image-20230219165700880.png" alt="image-20230219165700880"></p><ol><li>从redis中查询数据，如果没查到，那么就返回null，到数据库中找，然后返回</li><li>如果找到了</li><li>判断缓存是否过期，未过期那就返回，并说明找到了</li><li>如果缓存过期了<ol><li>尝试获取互斥锁，并判断是否获取到了互斥锁</li><li>如果获取到了，那么就开启独立线程，然后再从数据库中找打，然后写入redis并设置逻辑过期时间</li><li>释放互斥锁</li></ol></li></ol><h4 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h4><p>优点： </p><ul><li>线程无需等待</li><li>性能优秀</li></ul><p>缺点：</p><ul><li>不保证一致性</li><li>有额外的内存消耗</li><li>实现复杂</li></ul><p><img src="/images/image-20230219145335330.png" alt="image-20230219145335330"></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p><strong><code>互斥锁的方式：</code></strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法一： 缓存空对象解决缓存穿透</span></span><br><span class="line">    <span class="comment">//Shop shop = queryWithPassThrough(id);</span></span><br><span class="line">    <span class="comment">//方法二 ： 互斥锁解决 缓存击穿</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">    <span class="keyword">if</span>(shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 返回商户信息</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 缓存</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    <span class="comment">// 1. 从redis中查询商铺的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//  2. 判断redis中是否存在该id的商户</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;</span><br><span class="line">        <span class="comment">//3. 如果存在： 返回商户的信息</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shopN</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//未命中---------尝试获取互斥锁--------</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 判断获取互斥锁是否成功</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//2.失败休眠，成功就获取</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            queryWithMutex(id);     <span class="comment">//递归重试获取互斥锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//！获取互斥锁成功</span></span><br><span class="line">        shopN = getById(id);</span><br><span class="line">        <span class="keyword">if</span>(shopN == <span class="literal">null</span>)&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.2数据库中 商户如果存在就将商户信息写入redis ,超时删除30min</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shopN),<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放互斥锁</span></span><br><span class="line">        unLock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 返回商户信息</span></span><br><span class="line">    <span class="keyword">return</span> shopN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 获取锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(aBoolean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 释放锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//todo 缓存穿透</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    <span class="comment">// 1. 从redis中查询商铺的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//  2. 判断redis中是否存在该id的商户</span></span><br><span class="line">    <span class="keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;</span><br><span class="line">        <span class="comment">//3. 如果存在： 返回商户的信息</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shopN</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">// 4. 如果不存在:</span></span><br><span class="line">    <span class="keyword">if</span>(shopN == <span class="literal">null</span>)&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.2数据库中 商户如果存在就将商户信息写入redis ,超时删除30min</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shopN),<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//   6. 返回商户信息</span></span><br><span class="line">    <span class="keyword">return</span> shopN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>方法二： 逻辑过期解决缓存击穿</code></p><p>暂未实现</p><h2 id="缓存工具封装"><a href="#缓存工具封装" class="headerlink" title="缓存工具封装"></a>缓存工具封装</h2><h3 id="方法：-java转json"><a href="#方法：-java转json" class="headerlink" title="方法： java转json"></a>方法： java转json</h3><p>将Java对象序列化为json并存储在String类型的key中，并且能够设置TTL过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time , TimeUnit unit)</span>&#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value),time,unit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法：-java转json，用于处理缓存击穿"><a href="#方法：-java转json，用于处理缓存击穿" class="headerlink" title="方法： java转json，用于处理缓存击穿"></a>方法： java转json，用于处理缓存击穿</h3><p>将Java对象序列化为json并存储在String类型的key中，并且能够设置TTL过期时间，用于处理缓存击穿问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time , TimeUnit unit)</span>&#123;</span><br><span class="line">    <span class="comment">//设置逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(value);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(time));</span><br><span class="line">    <span class="comment">//写入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法：-根据指定key查询缓存，并转为指定类型"><a href="#方法：-根据指定key查询缓存，并转为指定类型" class="headerlink" title="方法： 根据指定key查询缓存，并转为指定类型"></a>方法： 根据指定key查询缓存，并转为指定类型</h3><p>根据指定key查询缓存，并转为指定类型，利用缓存空值的方式解决缓存穿透问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 封装 解决缓存穿透问题</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> keyPre key的实际前缀</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> id 需要查询的XXX的id</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> type 查询的信息的类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> dbFallback 函数式编程的方法</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> time 缓存时间</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> unit 时间单位(TimeUnit.MINUTES)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;R&gt; 返回值类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> &lt;ID&gt; id的类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 返回查询到的信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">    String keyPre, ID id , Class&lt;R&gt; type , Function&lt;ID , R&gt; dbFallback,</span></span><br><span class="line"><span class="params">    Long time , TimeUnit unit)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPre + id;</span><br><span class="line">    <span class="comment">// 1. 从redis中查询商铺的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">Json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//  2. 判断redis中是否存在该id的商户</span></span><br><span class="line">    <span class="keyword">if</span>(StrUtil.isNotBlank(Json))&#123;</span><br><span class="line">        <span class="comment">//3. 如果存在 : 返回信息</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(Json, type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Json != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">    <span class="comment">// 4. 如果不存在:</span></span><br><span class="line">    <span class="keyword">if</span>(r == <span class="literal">null</span>)&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.set(key,r,time,unit);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2023-2-24-—–-优惠劵秒杀"><a href="#2023-2-24-—–-优惠劵秒杀" class="headerlink" title="2023.2.24 —– 优惠劵秒杀"></a>2023.2.24 —– 优惠劵秒杀</h1><h2 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h2><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p><img src="/images/image-20230220174004660.png" alt="image-20230220174004660"></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：</p><ul><li>id的规律性太明显</li><li>受单表数据量的限制</li><li>容易造成数据泄露的问题</li></ul><h3 id="全局ID生成器"><a href="#全局ID生成器" class="headerlink" title="全局ID生成器"></a>全局ID生成器</h3><p>它是一种在分布式系统下用来生成全局唯一id的工具，（也称分布式唯一id）。</p><p>特性：<code> 唯一性、高性能、高可用、安全性、递增性</code></p><p>ID的自增：  不使用redis自增的数值，而是拼接一些其他的信息  :  </p><p><img src="/images/image-20230220175541092.png" alt="image-20230220175541092"></p><p>ID的组成 ： </p><ul><li>符号位： 1bit ，永远为0</li><li>时间戳：31bit，以秒为单位，可以使用69年</li><li>序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</li></ul><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * id生成器</span></span><br><span class="line"><span class="comment"> * 时间戳</span></span><br><span class="line"><span class="comment"> * - 符号位： 1bit ，永远为0</span></span><br><span class="line"><span class="comment"> * - 时间戳：31bit，以秒为单位，可以使用69年</span></span><br><span class="line"><span class="comment"> * - 序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">//起始时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1620995200L</span>;</span><br><span class="line">    <span class="comment">//设置序列号的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPre)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSeconds</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSeconds - BEGIN_TIMESTAMP; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 生成序列号 (将日期精确到天)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="type">Long</span> <span class="variable">aLong</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPre + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 拼接</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | aLong;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>全局ID的生成策略 ： UUID、Redis自增、snowflake算法、数据库自增</p><p>Redis自增ID策略：每天一个key，方便统计订单量</p><p><code>ID构造是 时间戳 + 计数器</code></p><h2 id="实现优惠卷秒杀下单"><a href="#实现优惠卷秒杀下单" class="headerlink" title="实现优惠卷秒杀下单"></a>实现优惠卷秒杀下单</h2><p>背景</p><p><img src="/images/image-20230220183703503.png" alt="image-20230220183703503"></p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p>下单时需要判断两点：</p><ul><li><p>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</p></li><li><p>库存是否充足，不足则无法下单</p></li></ul><p><img src="/images/image-20230220193729761.png" alt="image-20230220193729761"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//1. 提交优惠卷id</span><br><span class="line"></span><br><span class="line">//2. 查询优惠卷信息</span><br><span class="line"></span><br><span class="line">//3. 判断秒杀是否开启</span><br><span class="line">    //否 返回异常， 结束</span><br><span class="line"></span><br><span class="line">//4. 是，判断库存是否充足</span><br><span class="line">    //否 返回异常， 结束</span><br><span class="line"></span><br><span class="line">//5. 是，扣减库存，创建订单，返回订单信息</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现优惠卷秒杀下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 提交优惠卷id</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2. 查询优惠卷信息</span></span><br><span class="line">        <span class="comment">//3. 判断秒杀是否开启</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 是，判断库存是否充足</span></span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">stock</span> <span class="operator">=</span> voucher.getStock();</span><br><span class="line">        <span class="keyword">if</span> (stock == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;已经被抢完了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 是，扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">        <span class="comment">//6. 创建订单  .返回订单信息</span></span><br><span class="line">        <span class="keyword">if</span>(!update)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//创建用户id，代金卷id ，订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        order.setId(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        order.setUserId(UserId);</span><br><span class="line">        order.setVoucherId(voucherId);</span><br><span class="line">        save(order);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h2><p>问题描述：</p><p><strong>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：</strong></p><p><img src="/images/image-20230220201354715.png" alt="image-20230220201354715"></p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><p>乐观锁 和悲观锁！！！</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁的关键是判断之前查询得到的数据是否有被修改过，常见的方式有两种： 版本号法、CAS法…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5. 是，扣减库存</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">        .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,voucher.getStock()) <span class="comment">//对乐观锁的判断</span></span><br><span class="line">        .update()</span><br></pre></td></tr></table></figure><h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单</p><p><img src="/images/image-20230220203918035.png" alt="image-20230220203918035"></p><ol><li><p>提交优惠卷id</p></li><li><p>查询优惠卷信息</p></li><li><p>判断秒杀是否开启<br>&#x2F;&#x2F;否 返回异常， 结束</p></li><li><p>是，判断库存是否充足<br>&#x2F;&#x2F;否 返回异常， 结束</p></li><li><p>是，扣减库存，创建订单，返回订单信息</p></li><li><p>根据用户id和优惠卷id查询该用户是否下过单，如果下过直接返回异常，反之继续执行之前的操作</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现优惠卷秒杀下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 提交优惠卷id</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">//2. 查询优惠卷信息</span></span><br><span class="line">        <span class="comment">//3. 判断秒杀是否开启</span></span><br><span class="line">        <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 是，判断库存是否充足</span></span><br><span class="line">            <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">stock</span> <span class="operator">=</span> voucher.getStock();</span><br><span class="line">        <span class="keyword">if</span> (stock &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;已经被抢完了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="keyword">synchronized</span> (UserId.toString().intern())&#123;</span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> createVoucherOrder(voucherId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于一人一单加安全锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span>&#123;</span><br><span class="line">        <span class="comment">//判断用户是否购买过</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一人一单解决,加锁</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, UserId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该用户已经购买过了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 库存充足，扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>) <span class="comment">//对乐观锁的判断</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span>(!update)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//创建用户id，代金卷id ，订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        order.setId(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 创建订单  .返回订单信息</span></span><br><span class="line">        order.setUserId(UserId);</span><br><span class="line">        order.setVoucherId(voucherId);</span><br><span class="line">        save(order);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2023-2-28—–实现秒杀业务出现问题"><a href="#2023-2-28—–实现秒杀业务出现问题" class="headerlink" title="2023.2.28—–实现秒杀业务出现问题"></a>2023.2.28—–实现秒杀业务出现问题</h1><p>优惠卷秒杀持续ing…..</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p><strong>多线程状态下实现同步的锁。</strong></p><p><img src="/images/image-20230221082416027.png" alt="image-20230221082416027"></p><p>之前我们设置的锁，只是相对于同一jvm下的，如果部署在集群模式下那么这种情况就会出现危险，还是会引起插麦问题，或者说超问题下单。所以这里就需要用到分布式锁</p><p>​<strong><code>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</code></strong></p><p>功能</p><p><img src="/images/image-20230221082817862.png" alt="image-20230221082817862"></p><h3 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h3><p>分布式锁的核心是<code>多进程之间互斥</code>, 满足这一点，常见的有三种</p><p><img src="/images/image-20230221083012392.png" alt="image-20230221083012392"></p><h4 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h4><p>互斥，确保只有一个线程获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果获取锁失败，直接返回false</span></span><br><span class="line"><span class="comment">//成功则执行下面的业务逻辑</span></span><br><span class="line">SETNX lock thread1 </span><br><span class="line">EXPIRE lock <span class="number">10</span>    </span><br></pre></td></tr></table></figure><p>添加过期时间，防止服务延机导致服务挂了。</p><p>业务逻辑</p><p><img src="/images/image-20230221085225113.png" alt="image-20230221085225113"></p><ol><li>先尝试获取锁，返回结果。失败返回false</li><li>成功就执行业务，最后释放锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//todo 获取分布式锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeOutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程的表示</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, value + <span class="string">&quot;&quot;</span>, timeOutSec, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意自动拆箱出现的空指针错误</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//todo 释放锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手动释放</span></span><br><span class="line"><span class="comment">//超时自动释放：根据上面设置的过期时间</span></span><br><span class="line"><span class="comment">//del lock</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//todo 释放锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取互斥锁，只允许一个进入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//1. 创建锁对象</span></span><br><span class="line"><span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + UserId, stringRedisTemplate);</span><br><span class="line"><span class="comment">//2. 获取锁 ( 设置超时时间)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line"><span class="comment">//2.1 S获取锁不成功</span></span><br><span class="line"><span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单！&quot;</span>);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.2 获取锁成功</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> orderService.createVoucherOrder(voucherId);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//关闭锁</span></span><br><span class="line">    lock.unLock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现优惠卷秒杀下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 提交优惠卷id</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">//2. 查询优惠卷信息</span></span><br><span class="line">    <span class="comment">//3. 判断秒杀是否开启</span></span><br><span class="line">    <span class="keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 是，判断库存是否充足</span></span><br><span class="line">    <span class="comment">//否 返回异常， 结束</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">stock</span> <span class="operator">=</span> voucher.getStock();</span><br><span class="line">    <span class="keyword">if</span> (stock &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;已经被抢完了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取互斥锁，只允许一个进入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//1. 创建锁对象</span></span><br><span class="line">    <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + UserId, stringRedisTemplate);</span><br><span class="line">    <span class="comment">//2. 获取锁 ( 设置超时时间)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">    <span class="comment">//2.1 获取锁不成功</span></span><br><span class="line">    <span class="keyword">if</span>(!isLock)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单！&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.2 获取锁成功</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">IVoucherOrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="keyword">return</span> orderService.createVoucherOrder(voucherId);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭锁</span></span><br><span class="line">        lock.unLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于一人一单加安全锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户是否购买过</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">UserId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一人一单解决,加锁</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, UserId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;该用户已经购买过了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 库存充足，扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">        .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>) <span class="comment">//对乐观锁的判断</span></span><br><span class="line">        .update();</span><br><span class="line">    <span class="keyword">if</span>(!update)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//创建用户id，代金卷id ，订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    order.setId(orderId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 创建订单  .返回订单信息</span></span><br><span class="line">    order.setUserId(UserId);</span><br><span class="line">    order.setVoucherId(voucherId);</span><br><span class="line">    save(order);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分布式锁的改进"><a href="#分布式锁的改进" class="headerlink" title="分布式锁的改进"></a>分布式锁的改进</h3><p><img src="/images/image-20230221091548158.png" alt="image-20230221091548158"></p><p>防止因为业务阻塞而引起的误删除其他人的锁。</p><h4 id="改进方法："><a href="#改进方法：" class="headerlink" title="改进方法："></a><strong>改进方法：</strong></h4><p><code>在执行释放锁的时候需要再次确认是否是自己的锁</code></p><ol><li><p>在获取锁时存入线程标示（可以用UUID表示）</p></li><li><p>在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p><ol><li>如果一致则释放锁 ； b. 如果不一致则不释放锁</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>)+<span class="string">&quot;=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//todo 获取分布式锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeOutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程的表示</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> ID_PREFIX +  Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, value + <span class="string">&quot;&quot;</span>, timeOutSec, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//注意自动拆箱出现的空指针错误</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 释放锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取锁中的标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断两种标识是否一致</span></span><br><span class="line">        <span class="keyword">if</span>(id.equals(threadId))&#123;</span><br><span class="line">            stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于Redis的分布式锁实现思路：</p><ul><li>利用set nx ex获取锁，并设置过期时间，保存线程标示</li><li>释放锁时先判断线程标示是否与自己一致，一致则删除锁</li></ul><p>特性：</p><ul><li>利用set nx满足互斥性</li><li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用Redis集群保证高可用和高并发特性</li></ul><p>之前实现的分布式锁存在的问题</p><p><img src="/images/image-20230221110429194.png" alt="image-20230221110429194"></p><h2 id="总结问题"><a href="#总结问题" class="headerlink" title="总结问题"></a>总结问题</h2><p>根据项目实现思路一步步排查，依旧出现无法秒杀的问题，以及一人一单的问题依旧无法准确实现</p><p><code>暂未解决！！！</code></p><h1 id="2023-3-1-——达人探店"><a href="#2023-3-1-——达人探店" class="headerlink" title="2023.3.1 ——达人探店"></a>2023.3.1 ——达人探店</h1><h2 id="实现发表文章及其照片"><a href="#实现发表文章及其照片" class="headerlink" title="实现发表文章及其照片"></a>实现发表文章及其照片</h2><p><img src="/images/image-20230222195140077.png"></p><p>上传文件的请求</p><h3 id="实现上传文件"><a href="#实现上传文件" class="headerlink" title="实现上传文件"></a>实现上传文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> image 接收文件的地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;blog&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取原始文件名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 生成新文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> createNewFileName(originalFilename);</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));</span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            log.debug(<span class="string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createNewFileName</span><span class="params">(String originalFilename)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> StrUtil.subAfter(originalFilename, <span class="string">&quot;.&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 生成目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> name.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">d1</span> <span class="operator">=</span> hash &amp; <span class="number">0xF</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> (hash &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">        <span class="comment">// 判断目录是否存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, StrUtil.format(<span class="string">&quot;/blogs/&#123;&#125;/&#123;&#125;&quot;</span>, d1, d2));</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成文件名</span></span><br><span class="line">        <span class="keyword">return</span> StrUtil.format(<span class="string">&quot;/blogs/&#123;&#125;/&#123;&#125;/&#123;&#125;.&#123;&#125;&quot;</span>, d1, d2, name, suffix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于保存文件的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 保存文件</span></span><br><span class="line">image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));</span><br></pre></td></tr></table></figure><p>这个需要我们自己去修改成为本地的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMAGE_UPLOAD_DIR</span> <span class="operator">=</span> <span class="string">&quot;N:\\hepre\\nginx-1.18.0\\html\\hmdp\\imgs\\&quot;</span>;</span><br></pre></td></tr></table></figure><p>然后就可以点击发布博客【接口： <code>/blog</code>】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/blog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IBlogService blogService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        blog.setUserId(user.getId());</span><br><span class="line">        <span class="comment">// 保存探店博文</span></span><br><span class="line">        blogService.save(blog);</span><br><span class="line">        <span class="comment">// 返回id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230222194418221.png" alt="image-20230222194418221"></p><h3 id="查看文章"><a href="#查看文章" class="headerlink" title="查看文章"></a>查看文章</h3><p>接口:【点击文章就是显示文章的id】</p><p><img src="/images/image-20230222194937433.png" alt="image-20230222194937433"></p><p>然后根据文章的id查询文章的详细信息，最后返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/blog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hot&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryHotBlog</span><span class="params">(<span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户查询</span></span><br><span class="line">        Page&lt;Blog&gt; page = blogService.query()</span><br><span class="line">                .orderByDesc(<span class="string">&quot;liked&quot;</span>)</span><br><span class="line">                .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">        <span class="comment">// 获取当前页数据</span></span><br><span class="line">        List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">        <span class="comment">// 查询用户</span></span><br><span class="line">        records.forEach(blog -&gt;&#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> blog.getUserId();</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">            blog.setName(user.getNickName());</span><br><span class="line">            blog.setIcon(user.getIcon());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogService.queryBlogById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章点赞功能实现-基于redis实现"><a href="#文章点赞功能实现-基于redis实现" class="headerlink" title="文章点赞功能实现(基于redis实现)"></a>文章点赞功能实现(基于redis实现)</h2><p>接口</p><p><img src="/images/image-20230222195249196.png" alt="image-20230222195249196"></p><p>需求分析</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li></ul><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><ol><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ol><h3 id="实现点赞功能"><a href="#实现点赞功能" class="headerlink" title="实现点赞功能"></a>实现点赞功能</h3><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todo 点赞功能实现</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/like/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.likeBlog(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现功能 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2. 判断当前用户是否点赞</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;blog:liked&quot;</span> + id;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span><br><span class="line">    <span class="comment">//3.如果未点赞，可以实现点赞</span></span><br><span class="line">    <span class="keyword">if</span>(BooleanUtil.isFalse(isMember))&#123;</span><br><span class="line">        <span class="comment">//3.1 数据库点赞数 + 1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update()</span><br><span class="line">            .setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">        <span class="comment">//3.2 保存用户到Redis的set集合中</span></span><br><span class="line">        <span class="keyword">if</span>(isSuccess)&#123;</span><br><span class="line">            stringRedisTemplate.opsForSet().add(key,userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 如果已经点过赞，点击的话就会 取消点赞</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//4.1数据库点赞数 - 1</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update()</span><br><span class="line">            .setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2 将用户从点赞列表中移除</span></span><br><span class="line">        <span class="keyword">if</span>(isSuccess)&#123;</span><br><span class="line">            stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点赞了就会出现红色，同时redis中就会保存点赞用户的id及其作品</p><p><img src="/images/image-20230222205625368.png" alt="image-20230222205625368"></p><p><img src="/images/image-20230222205738444.png" alt="image-20230222205738444"></p><p>当我们再次按点赞按钮的时候，它的点赞数就会减一，同时redis中保存的数据也会同步的删除</p><h2 id="点赞排行榜功能"><a href="#点赞排行榜功能" class="headerlink" title="点赞排行榜功能"></a>点赞排行榜功能</h2><p>仿微信实现早点赞的先排在前面</p><p><img src="/images/image-20230222210004796.png" alt="image-20230222210004796"></p><p>需求：按照点赞时间先后排序，返回Top5的用户</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ol><li>根据传入的blog的id查询出前几名的用户id</li><li>根据用户id查询出用户</li><li>再将user转换成为userDTO为了保护用户的信息安全</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 点赞用户列表查询</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 查询点赞前 top5的用户</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;blog:liked&quot;</span> + id;</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(top5 == <span class="literal">null</span> || top5.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解析出用户id</span></span><br><span class="line">    List&lt;Long&gt; userIds = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 针对点赞用户排序的问题的改进</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, userIds);</span><br><span class="line">    <span class="comment">//根据用户id查询用户</span></span><br><span class="line">    <span class="comment">//List&lt;UserDTO&gt; userDTOs = userService.listByIds(userIds).stream().map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class)).collect(Collectors.toList());</span></span><br><span class="line">    List&lt;UserDTO&gt; userDTOS = userService.query().in(<span class="string">&quot;id&quot;</span>, userIds).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list().</span><br><span class="line">        stream().map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230222220209567.png" alt="image-20230222220209567"></p><h1 id="2023-3-5-—–关注"><a href="#2023-3-5-—–关注" class="headerlink" title="2023.3.5 —–关注"></a>2023.3.5 —–关注</h1><p>实现接口 ： </p><p><img src="/images/image-20230223183510487.png" alt="image-20230223183510487"></p><p>实现关注和取关的接口，对于博主和关注者之间使用一张关联表</p><p><img src="/images/image-20230223183648078.png" alt="image-20230223183648078"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/follow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IFollowService followService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 关注还是取关</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId ,<span class="meta">@PathVariable(&quot;isFollow&quot;)</span> <span class="type">boolean</span> isFollow)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> followService.follow(followUserId,isFollow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 判断是否关注</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/or/not/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> followService.isFollow(followUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service层实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="keyword">implements</span> <span class="title class_">IFollowService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 关注还是取关</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, <span class="type">boolean</span> isFollow)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 获取登录的用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//1。 判断到底是关注还是取关</span></span><br><span class="line">        <span class="keyword">if</span>(isFollow)&#123;</span><br><span class="line">            <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">            follow.setUserId(userId);</span><br><span class="line">            follow.setFollowUserId(followUserId);</span><br><span class="line">            save(follow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取消关注</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;().eq(<span class="string">&quot;user_id&quot;</span>,userId).eq(<span class="string">&quot;follow_user_id&quot;</span>,followUserId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户是否关注</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followUserId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(Long followUserId)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId).count();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(count &gt; <span class="number">0</span>);    <span class="comment">//如果大于0就代表关注</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h2><p>点击用户头像查看个人主页</p><p><img src="/images/image-20230223185935621.png" alt="image-20230223185935621"></p><h4 id="点击头像查看用户笔记实现"><a href="#点击头像查看用户笔记实现" class="headerlink" title="点击头像查看用户笔记实现"></a>点击头像查看用户笔记实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据当前用户查询它的博客</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> current</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBolgByUserId</span><span class="params">(<span class="meta">@RequestParam(value = &quot;current&quot;,defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//根据用户查询</span></span><br><span class="line">    Page&lt;Blog&gt; page = blogService.query().eq(<span class="string">&quot;user_id&quot;</span>, id).page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line">    <span class="comment">//获取当前页的数据</span></span><br><span class="line">    List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转换为UserDTO</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共同关注查看"><a href="#共同关注查看" class="headerlink" title="共同关注查看"></a>共同关注查看</h3><p>需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同好友。</p><p><strong>两个用户的交集</strong>，也就是两个set集合的交集</p><p><img src="/images/image-20230223195046909.png" alt="image-20230223195046909"></p><p>首先将关注的用户存入Redis中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FollowServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="keyword">implements</span> <span class="title class_">IFollowService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 关注还是取关</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, <span class="type">boolean</span> isFollow)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 获取登录的用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;</span><br><span class="line">        <span class="comment">//1。 判断到底是关注还是取关</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当需要关注时，加入redis</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(isFollow)&#123;</span><br><span class="line">            <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">            follow.setUserId(userId);</span><br><span class="line">            follow.setFollowUserId(followUserId);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSecc</span> <span class="operator">=</span> save(follow);</span><br><span class="line">            <span class="keyword">if</span>(isSecc)&#123;</span><br><span class="line">                <span class="comment">//把当前用户的id，放入redis的set集合中</span></span><br><span class="line">                stringRedisTemplate.opsForSet().add(key,followUserId.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取消关注</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSucc</span> <span class="operator">=</span> remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId));</span><br><span class="line">            <span class="keyword">if</span> (isSucc)&#123;</span><br><span class="line">                <span class="comment">//把关注的用户id从redis中移除</span></span><br><span class="line">                stringRedisTemplate.opsForSet().remove(key,followUserId.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现共同关注"><a href="#实现共同关注" class="headerlink" title="实现共同关注"></a>实现共同关注</h2><p>实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找目标用户和当前用户(此时登录的)的（共同关注）交集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/common/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> followService.followCommons(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询当前用户和目标用户的共同关注</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 目标用户的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;<span class="comment">//当前用户</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + id; <span class="comment">//目标用户的key</span></span><br><span class="line">    <span class="comment">//2. 求交集</span></span><br><span class="line">    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key1, key2);</span><br><span class="line">    <span class="comment">//没有交集的情况</span></span><br><span class="line">    <span class="keyword">if</span>(intersect == <span class="literal">null</span> || intersect.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有交集</span></span><br><span class="line">    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    List&lt;UserDTO&gt; userDTOS = service.listByIds(ids).stream().map(user -&gt;</span><br><span class="line">            BeanUtil.copyProperties(user, UserDTO.class)</span><br><span class="line">    ).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230223200613390.png" alt="image-20230223200613390"></p><p><img src="/images/image-20230223200706294.png" alt="image-20230223200706294"></p><h2 id="关注推送实现"><a href="#关注推送实现" class="headerlink" title="关注推送实现"></a>关注推送实现</h2><p>关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。</p><p><img src="/images/image-20230223201442598.png" alt="image-20230223201442598"></p><h3 id="Feed流模式"><a href="#Feed流模式" class="headerlink" title="Feed流模式"></a><code>Feed流模式</code></h3><p><img src="/images/image-20230223201343539.png" alt="image-20230223201343539"></p><h4 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h4><p><img src="/images/image-20230223202907097.png" alt="image-20230223202907097"></p><p>张三、李四、王五三个人假设都发了微博，赵六关注了李四和张三，当赵六刷新信息的时候。它的收件箱就会拉去他关注的人发的微博</p><p><img src="/images/image-20230223203124382.png" alt="image-20230223203124382"></p><p>然后再收件箱中对赵六关注的人发的微博按照时间戳进行排序，最终得到按照时间的微博</p><p><code>如果赵六关注的人比较多，那么拉去微博就会很慢，非常耗内存</code></p><h4 id="读模式"><a href="#读模式" class="headerlink" title="读模式"></a>读模式</h4><p>将微博直接全部推送给每一个粉丝，然后获取</p><p><code>但是这样对于粉丝多的来说就会非常耗内存</code></p><p><img src="/images/image-20230223203408590.png" alt="image-20230223203408590"></p><h4 id="推拉混合模式"><a href="#推拉混合模式" class="headerlink" title="推拉混合模式"></a>推拉混合模式</h4><p>推拉结合模式：也叫做读写混合，兼具推和拉两种模式的优点。</p><p><img src="/images/image-20230223203611083.png" alt="image-20230223203611083"></p><p>使用两种结合的方式，就可以完美解决两种冲突的问题</p><p><img src="/images/image-20230223203859734.png" alt="image-20230223203859734"></p><h4 id="需求实现："><a href="#需求实现：" class="headerlink" title="需求实现："></a>需求实现：</h4><ol><li>修改新增探店笔记的业务，在<strong>保存blog到数据库的同时，推送到粉丝的收件箱</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.saveBlog(blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现</p><ol start="2"><li><code>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果数据有变化的话，最好不要使用list来做排序</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 获取登录用户</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    blog.setUserId(user.getId());</span><br><span class="line">    <span class="comment">//2.  保存探店博文</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> save(blog);</span><br><span class="line">    <span class="keyword">if</span>(!succ)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记保存失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 查询笔记作者的所有粉丝</span></span><br><span class="line">    <span class="comment">//sql语句 ： select * from tb_follow where follow_user_id = ?</span></span><br><span class="line">    List&lt;Follow&gt; follows = followService.query().eq(<span class="string">&quot;follow_user_id&quot;</span>, user.getId()).list();</span><br><span class="line">    <span class="comment">//4. 推送笔记id个所有的粉丝</span></span><br><span class="line">    <span class="keyword">for</span> (Follow follow : follows) &#123;</span><br><span class="line">        <span class="comment">//获取每一个粉丝</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> follow.getUserId();</span><br><span class="line">        <span class="comment">//推送，收件箱 key粉丝的id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;feeds:&quot;</span> + userId;</span><br><span class="line">        <span class="comment">//推送笔记，按时间戳排序</span></span><br><span class="line">        stringRedisTemplate.opsForZSet().add(key,blog.getId().toString(),System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ol start="3"><li>查询收件箱数据时，可以实现分页查询</li></ol><p><img src="/images/image-20230223210902878.png" alt="image-20230223210902878"></p><p>实现接口 : </p><p>两个重点： </p><ol><li>每次查询完要分析出本次查询的最小时间戳 ，这将作为下一次查询的起始（最大值）</li><li>找到查询出的最小元素的个数，并将其跳过，从下一个开始查</li></ol><h1 id="2023-3-6—–实现用户签到"><a href="#2023-3-6—–实现用户签到" class="headerlink" title="2023.3.6—–实现用户签到"></a>2023.3.6—–实现用户签到</h1><h3 id="对于redis中的GEO数据结构"><a href="#对于redis中的GEO数据结构" class="headerlink" title="对于redis中的GEO数据结构"></a>对于redis中的GEO数据结构</h3><p><img src="/images/image-20230226121538319.png" alt="image-20230226121538319"></p><p><strong>例题：</strong> 搜索天安门（ 116.397904 39.909005 ）附近10km内的所有火车站，并按照距离升序排序</p><p>实现方法：</p><blockquote><p>官网文档：</p><p>查询的中心点由以下强制选项之一提供：</p><ul><li><code>FROMMEMBER</code>：使用给定的现有在排序集中的位置。<code>&lt;member&gt;</code></li><li><code>FROMLONLAT</code>：使用给定的和位置。<code>&lt;longitude&gt;``&lt;latitude&gt;</code></li></ul><p>查询的形状由以下强制选项之一提供：</p><ul><li><code>BYRADIUS</code>：与<a href="https://redis.io/commands/georadius"><code>GEORADIUS</code></a>类似，根据给定的圆形区域搜索。<code>&lt;radius&gt;</code></li><li><code>BYBOX</code>：在轴对齐的矩形内搜索，由 和 确定。<code>&lt;height&gt;``&lt;width&gt;</code></li></ul><p>该命令可选择使用以下选项返回其他信息：</p><ul><li><code>WITHDIST</code>：同时返回返回的项目与指定中心点的距离。距离以为半径或高度和宽度参数指定的相同单位返回。</li><li><code>WITHCOORD</code>：同时返回匹配项的经度和纬度。</li><li><code>WITHHASH</code>：还以 52 位无符号整数的形式返回项目的原始地理哈希编码排序集分数。这仅对低级黑客或调试有用，否则对一般用户兴趣不大。</li></ul><p>默认情况下，匹配项返回时未排序。要对它们进行排序，请使用以下两个选项之一：</p><ul><li><code>ASC</code>：相对于中心点，从最近到最远对返回的项目进行排序。</li><li><code>DESC</code>：相对于中心点，从最远到最近对返回的项目进行排序。</li></ul><p>默认情况下，将返回所有匹配项。若要将结果限制为前 N 个匹配项，请使用 <strong><code>COUNT&lt;count&gt;</code></strong> 选项。 使用该选项时，一旦找到足够的匹配项，该命令就会返回。这意味着返回的结果可能不是最接近指定点的结果，但服务器为生成它们而投入的工作量要少得多。 如果未提供，该命令将执行与指定区域匹配的项目数成比例的工作并对其进行排序， 因此，即使只返回几个结果，使用非常小的选项查询非常大的区域也可能很慢。<code>ANY``ANY``COUNT</code></p></blockquote><p>GEO数据结构用于解决附近商户查询的问题，但是由于项目目前使用的数据都是虚假数据。对于真实业务的逻辑及其实现思路都不太清除，所以次模块未完成</p><h2 id="用bitMap实现用户签到"><a href="#用bitMap实现用户签到" class="headerlink" title="用bitMap实现用户签到"></a>用bitMap实现用户签到</h2><p><img src="/images/image-20230226143845401.png" alt="image-20230226143845401"></p><h3 id="bitMap的用法"><a href="#bitMap的用法" class="headerlink" title="bitMap的用法"></a>bitMap的用法</h3><p><img src="/images/image-20230226143938875.png" alt="image-20230226143938875"></p><h3 id="实现用户签到"><a href="#实现用户签到" class="headerlink" title="实现用户签到"></a>实现用户签到</h3><p><img src="/images/image-20230226144954055.png" alt="image-20230226144954055"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.sign();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * todo 实现用户签到</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2. 获取日期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">//3. 拼接key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span><span class="string">&quot;sign:&quot;</span> + userId + now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">    <span class="comment">//4. 获取今天是本月的第几天</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nowDayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">    <span class="comment">//5. 写入redis setbit key offset 1</span></span><br><span class="line">    stringRedisTemplate.opsForValue().setBit(key,nowDayOfMonth - <span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计当前用户连续签到天数"><a href="#统计当前用户连续签到天数" class="headerlink" title="统计当前用户连续签到天数"></a>统计当前用户连续签到天数</h3><p><img src="/images/image-20230226150740763.png" alt="image-20230226150740763"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sign/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.signCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//2. 获取日期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">//3. 拼接key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span><span class="string">&quot;sign:&quot;</span> + userId + now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">    <span class="comment">//4. 获取今天是本月的第几天</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nowDayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">    <span class="comment">//5. 获取本月到今天为止所有的签到记录</span></span><br><span class="line">    List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(</span><br><span class="line">            key, BitFieldSubCommands.create()</span><br><span class="line">                    .get(BitFieldSubCommands.BitFieldType.unsigned(nowDayOfMonth)).valueAt(<span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="literal">null</span> ||  result.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> result.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="literal">null</span> || num == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环遍历</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((num &amp; <span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//未签到，跳出循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已签到 ，计数器+1</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        num &gt;&gt;&gt;= <span class="number">1</span>;<span class="comment">//二进制右移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的java客户端</title>
      <link href="/post/d9b734d.html"/>
      <url>/post/d9b734d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>引入依赖</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;redis.chlients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/xxx&gt;</span><br></pre></td></tr></table></figure><ol><li>建立连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;IP地址&quot;</span> ,<span class="number">6379</span>);</span><br><span class="line">    jedsi.auth(<span class="string">&quot;密码&quot;</span>); </span><br><span class="line">    jedis.select(<span class="string">&quot;1&quot;</span>); <span class="comment">//选择数据库</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>操作数据,测试String</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    sout</span><br><span class="line">    <span class="type">Sitrng</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    sout</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>关闭连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jedis != <span class="literal">null</span>)&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="springDataRedis"><a href="#springDataRedis" class="headerlink" title="springDataRedis"></a>springDataRedis</h1><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成</p><p>其中对Redis的集成模块就叫做SpringDataRedis</p><p>官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li><strong>提供了对不同Redis客户端的整合（Lettuce和Jedis）</strong></li><li><strong>提供了RedisTemplate统一API来操作Redis</strong></li><li><strong>支持Redis的发布订阅模型</strong></li><li><strong>支持Redis哨兵和Redis集群</strong></li><li><strong>支持基于Lettuce的响应式编程</strong></li><li><strong>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</strong></li><li><strong>支持基于Redis的JDKCollection实现</strong></li></ul><h3 id="RedisTemplate工具类"><a href="#RedisTemplate工具类" class="headerlink" title="RedisTemplate工具类"></a>RedisTemplate工具类</h3><p><img src="/images/1676608553685-762cc763-8a75-422c-9461-e569b8c6ee61.png" alt="img"></p><h3 id="使用RedisTemplate统一API来操作Redis"><a href="#使用RedisTemplate统一API来操作Redis" class="headerlink" title="使用RedisTemplate统一API来操作Redis"></a>使用<strong>RedisTemplate统一API来操作Redis</strong></h3><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建RedisTemplate对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><ol><li>实现对数据的操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//写入一条数据</span></span><br><span class="line">     redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果: </p><p><img src="/images/1676609065382-4b9c84a7-071d-4e51-8d47-3bbe7bfb0169.png" alt="img"></p><p><img src="/images/1676609078844-5dd841c8-6729-4044-b63f-d457a3c62463.png" alt="img"></p><p>​需要解决的问题</p><p>因为使用redisTemplate.opsForValue().set(“name”,”虎哥”);得到的不是一个String 类型的字符串，而使一个Object对象</p><p>所以存入的就会是java对象，那么就需要对对象进行序列化，从而得到我们需要的类型</p><h3 id="解决RedisTemplate序列化的两种方案"><a href="#解决RedisTemplate序列化的两种方案" class="headerlink" title="解决RedisTemplate序列化的两种方案"></a>解决RedisTemplate序列化的两种方案</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><ol><li><strong>自定义RedisTemplate</strong></li><li><strong>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> second.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建配置文件的原因:</span></span><br><span class="line"><span class="comment"> * 但我们进行写入操作时，在redis数据库中存储的确实一段\xAC\xED\x00\x05t\x00\x06\xE8\x99\x8E\xE5\x93\xA5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        <span class="comment">//创建redisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//连接工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建json序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">//设置key序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置value序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果</p><p><img src="/images/1676609346379-4e1de992-af7b-42b7-a142-7b8980c7f921.png" alt="img"></p><p>这样就是我们所需要的结果，但是与此同时，他却不满足内存的要求，因为他多了一个@Class：”second.pojo.user” 这是我们自己定义的接收数据的实体类。他将会占用很大的内存。所以我们就不能这么做。就需要再次进行升级</p><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><ol><li><strong>使用StringRedisTemplate</strong></li><li><strong>写入Redis时，手动把对象序列化为JSON</strong></li><li><strong>读取Redis时，手动把读取到的JSON反序列化为对象</strong></li></ol><p>通过这样得到的结果才是我们真正需要的结果</p><p>而Spring官方也同样推出了一个更为好用的<code>**StringRedisTemplate统一API来操作Redis**</code></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">@Test</span><br><span class="line">void getTest() throws JsonProcessingException &#123;</span><br><span class="line">    user usr1 = new user(&quot;小花&quot;, 21);</span><br><span class="line">    //手动序列化  : 将java对象转换为json</span><br><span class="line">    String s = mapper.writeValueAsString(usr1);</span><br><span class="line">    //进行操作</span><br><span class="line">    stringRedisTemplate.opsForValue().set(&quot;user:300&quot;,s);</span><br><span class="line">    System.out.println(&quot;s==&quot; + s);</span><br><span class="line">    //读取数据</span><br><span class="line">    String s1 = stringRedisTemplate.opsForValue().get(&quot;user:300&quot;);</span><br><span class="line">    user user = mapper.readValue(s1, user.class);</span><br><span class="line">    System.out.println(&quot;数据为 ： &quot; + user);</span><br><span class="line">    /**</span><br><span class="line">     * 得到的数据（在redis中存储的） :</span><br><span class="line">     * &#123;</span><br><span class="line">     *   &quot;name&quot;: &quot;小花&quot;,</span><br><span class="line">     *   &quot;age&quot;: 21</span><br><span class="line">     * &#125;</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/1676610240800-380eb8b3-e710-463d-b3eb-b57cb3fdb867.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础学习</title>
      <link href="/post/a1845f33.html"/>
      <url>/post/a1845f33.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis学习"><a href="#Redis学习" class="headerlink" title="Redis学习"></a>Redis学习</h1><h2 id="Redis数据结构介绍"><a href="#Redis数据结构介绍" class="headerlink" title="Redis数据结构介绍"></a>Redis数据结构介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>事务的差异(BASE)：  只能满足基本的事务，也有可能无法满足</li><li>存储差异： 存储的是内存中，扩展类型是水平</li><li><strong>使用场景 ： 【数据结构统一，对一致性、安全性要求不高、对性能要求过高】</strong></li><li><strong>单线程 ，每个命令具有原子性</strong></li><li><strong>低延迟，速度快</strong></li><li><strong>支持数据的持久化</strong></li><li><strong>支持主从集群，分片集群 ， 支持多语言客户端</strong></li><li>基于C语言写的</li></ul><h3 id="配置相关及其遇到的问题"><a href="#配置相关及其遇到的问题" class="headerlink" title="配置相关及其遇到的问题"></a>配置相关及其遇到的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//说明</span></span><br><span class="line">bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">requirepass <span class="number">0000</span>  # 修改的是密码</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">port <span class="number">6379</span> # 默认端口号</span><br><span class="line"></span><br><span class="line">dir .   # 工作目录，默认是当前目录，也就是当我们启动redis时系统所在的目录，所有的日志、持久化等文件都会保存在这个目录中</span><br><span class="line"></span><br><span class="line">database <span class="number">1</span> # 设置数据库数量为<span class="number">1</span> ，默认为<span class="number">16</span> ，编号就是<span class="number">0</span> - <span class="number">15</span></span><br><span class="line"></span><br><span class="line">maxmemory 512mb #默认的redis能够使用的最大内存</span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span>  # 路径在我们执行redis-server的目录下</span><br></pre></td></tr></table></figure><p>进入redis安装目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/redis-<span class="number">7.0</span><span class="number">.8</span></span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><h4 id="redis客户端链接失败的解决办法"><a href="#redis客户端链接失败的解决办法" class="headerlink" title="redis客户端链接失败的解决办法"></a>redis客户端链接失败的解决办法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h3 id="启动相关的配置"><a href="#启动相关的配置" class="headerlink" title="启动相关的配置"></a>启动相关的配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis# 启动redis</span><br><span class="line">systemctl stop redis  # 停止redis</span><br><span class="line">systemctl restart redis#重启</span><br><span class="line">systemctl status redis #查看状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis  #让redis开机自启</span><br></pre></td></tr></table></figure><h4 id="命令行模式启动使用redis"><a href="#命令行模式启动使用redis" class="headerlink" title="命令行模式启动使用redis"></a>命令行模式启动使用redis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动</span></span><br><span class="line">redis-cli -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span> -a <span class="number">0000</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭</span></span><br><span class="line">redis-cli -u <span class="number">0000</span> shutdown</span><br></pre></td></tr></table></figure><h2 id="Redis通用命令"><a href="#Redis通用命令" class="headerlink" title="Redis通用命令"></a>Redis通用命令</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">KEYS key1: </span><br><span class="line"><span class="comment">//查看所有符合模板的key1</span></span><br><span class="line"></span><br><span class="line">DEL key1: </span><br><span class="line"><span class="comment">//删除一个指定的key1</span></span><br><span class="line"></span><br><span class="line">EXISTS key1: </span><br><span class="line"><span class="comment">//判断key1是否存在</span></span><br><span class="line"></span><br><span class="line">EXPIRE key1 : </span><br><span class="line"><span class="comment">//给key1 设置有效值， 到期自动删除</span></span><br><span class="line"></span><br><span class="line">TTL key1:</span><br><span class="line"><span class="comment">//查看key1的剩余有效时间</span></span><br><span class="line"></span><br><span class="line">help <span class="title function_">XXX</span><span class="params">(命令语句如：keys)</span></span><br><span class="line"><span class="comment">//获取帮助，相当于获取该语句的文档</span></span><br></pre></td></tr></table></figure><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><p>String的常见命令有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SET：</span><br><span class="line">    <span class="comment">//添加或者修改已经存在的一个String类型的键值对</span></span><br><span class="line">GET：</span><br><span class="line">    <span class="comment">//根据key获取String类型的value</span></span><br><span class="line">MSET：</span><br><span class="line">    <span class="comment">//批量添加多个String类型的键值对</span></span><br><span class="line">MGET：</span><br><span class="line">    <span class="comment">//根据多个key获取多个String类型的value</span></span><br><span class="line">INCR：</span><br><span class="line">    <span class="comment">//让一个整型的key自增1</span></span><br><span class="line">INCRBY:</span><br><span class="line"><span class="comment">//让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</span></span><br><span class="line">INCRBYFLOAT：</span><br><span class="line">    <span class="comment">//让一个浮点类型的数字自增并指定步长</span></span><br><span class="line">SETNX：</span><br><span class="line">    <span class="comment">//添加一个String类型的键值对，前提是这个key不存在，否则不执行</span></span><br><span class="line">SETEX：</span><br><span class="line">    <span class="comment">//添加一个String类型的键值对，并且指定有效期</span></span><br></pre></td></tr></table></figure><h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><strong>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</strong></p><p><img src="/images/image-20230216190937660.png" alt="image-20230216190937660"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">HSET key field value：</span><br><span class="line">    <span class="comment">//添加或者修改hash类型key的field的值</span></span><br><span class="line">HGET key field：</span><br><span class="line">    <span class="comment">//获取一个hash类型key的field的值</span></span><br><span class="line">HMSET：</span><br><span class="line">    <span class="comment">//批量添加多个hash类型key的field的值</span></span><br><span class="line">HMGET：</span><br><span class="line">    <span class="comment">//批量获取多个hash类型key的field的值</span></span><br><span class="line">HGETALL：</span><br><span class="line">    <span class="comment">//获取一个hash类型的key中的所有的field和value</span></span><br><span class="line">HKEYS：</span><br><span class="line">    <span class="comment">//获取一个hash类型的key中的所有的field</span></span><br><span class="line">HVALS：</span><br><span class="line">    <span class="comment">//获取一个hash类型的key中的所有的value</span></span><br><span class="line">HINCRBY:</span><br><span class="line"><span class="comment">//让一个hash类型key的字段值自增并指定步长</span></span><br><span class="line">HSETNX：</span><br><span class="line">    <span class="comment">//添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</span></span><br></pre></td></tr></table></figure><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。</p><p>既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等</p><p><strong>List的常见命令有：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LPUSH key  element ... ：</span><br><span class="line">    <span class="comment">//向列表左侧插入一个或多个元素</span></span><br><span class="line">LPOP key：</span><br><span class="line">    <span class="comment">//移除并返回列表左侧的第一个元素，没有则返回nil</span></span><br><span class="line">RPUSH key  element ... ：</span><br><span class="line">    <span class="comment">//向列表右侧插入一个或多个元素</span></span><br><span class="line">RPOP key：</span><br><span class="line">    <span class="comment">//移除并返回列表右侧的第一个元素</span></span><br><span class="line">LRANGE key star end：</span><br><span class="line">    <span class="comment">//返回一段角标范围内的所有元素</span></span><br><span class="line">BLPOP和BRPOP：</span><br><span class="line">    <span class="comment">//与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230216192504699.png" alt="image-20230216192504699"></p><p><code>注意</code> : </p><p>​LRANGE key star end：它的范围是从 0 开始算起的</p><p>​阻塞队列  ： 入口和出口在不同边 、 出队时采用BLPOP或BRPOP</p><h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。</p><p>因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><p>String的常见命令有 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SADD key member ... ：</span><br><span class="line">    <span class="comment">//向set中添加一个或多个元素</span></span><br><span class="line">SREM key member ... : </span><br><span class="line"><span class="comment">//移除set中的指定元素</span></span><br><span class="line">SCARD key： </span><br><span class="line">    <span class="comment">//返回set中元素的个数</span></span><br><span class="line">SISMEMBER key member：</span><br><span class="line">    <span class="comment">//判断一个元素是否存在于set中</span></span><br><span class="line">SMEMBERS：</span><br><span class="line">    <span class="comment">//获取set中的所有元素</span></span><br><span class="line">SINTER key1 key2 ... ：</span><br><span class="line">    <span class="comment">//求key1与key2的交集</span></span><br><span class="line">SDIFF key1 key2 ... ：</span><br><span class="line">    <span class="comment">//求key1与key2的差集</span></span><br><span class="line">SUNION key1 key2 ..：</span><br><span class="line">    <span class="comment">//求key1和key2的并集</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/image-20230216192945167.png" alt="image-20230216192945167"></p><h2 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h2><p>​Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。</p><p>SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ZADD key score member：</span><br><span class="line">    <span class="comment">//添加一个或多个元素到sorted set ，如果已经存在则更新其score值</span></span><br><span class="line">ZREM key member：</span><br><span class="line">    <span class="comment">//删除sorted set中的一个指定元素</span></span><br><span class="line">ZSCORE key member :</span><br><span class="line"><span class="comment">//获取sorted set中的指定元素的score值</span></span><br><span class="line">ZRANK key member：</span><br><span class="line">    <span class="comment">//获取sorted set 中的指定元素的排名</span></span><br><span class="line">ZCARD key：</span><br><span class="line">    <span class="comment">//获取sorted set中的元素个数</span></span><br><span class="line">ZCOUNT key min max：</span><br><span class="line">    <span class="comment">//统计score值在给定范围内的所有元素的个数</span></span><br><span class="line">ZINCRBY key increment member：</span><br><span class="line">    <span class="comment">//让sorted set中的指定元素自增，步长为指定的increment值</span></span><br><span class="line">ZRANGE key min max：</span><br><span class="line">    <span class="comment">//按照score排序后，获取指定排名范围内的元素</span></span><br><span class="line">ZRANGEBYSCORE key min max：</span><br><span class="line">    <span class="comment">//按照score排序后，获取指定score范围内的元素</span></span><br><span class="line">ZDIFF、ZINTER、ZUNION：</span><br><span class="line">    <span class="comment">//求差集、交集、并集</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Security授权实现</title>
      <link href="/post/3a4cd68c.html"/>
      <url>/post/3a4cd68c.html</url>
      
        <content type="html"><![CDATA[<h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><h2 id="重点剖析"><a href="#重点剖析" class="headerlink" title="重点剖析"></a>重点剖析</h2><h4 id="AccessDecisionManager"><a href="#AccessDecisionManager" class="headerlink" title="AccessDecisionManager"></a>AccessDecisionManager</h4><blockquote><p> AccessDecisionManager (访问决策管理器)，用来决定此次访问是否被允许。</p></blockquote><p><img src="/images/image-20220110110946267.png" alt="image-20220110110946267"></p><h4 id="AccessDecisionVoter"><a href="#AccessDecisionVoter" class="headerlink" title="AccessDecisionVoter"></a>AccessDecisionVoter</h4><blockquote><p>AccessDecisionVoter (访问决定投票器)，投票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票。</p></blockquote><p><img src="/images/image-20220110111011018.png" alt="image-20220110111011018"></p><p>AccesDecisionVoter 和 AccessDecisionManager 都有众多的实现类，在 AccessDecisionManager 中会换个遍历 AccessDecisionVoter，进而决定是否允许用户访问，因而 AaccesDecisionVoter 和 AccessDecisionManager 两者的关系类似于 AuthenticationProvider 和 ProviderManager 的关系。</p><h4 id="ConfigAttribute"><a href="#ConfigAttribute" class="headerlink" title="ConfigAttribute"></a>ConfigAttribute</h4><blockquote><p>ConfigAttribute，用来保存授权时的角色信息</p></blockquote><p><img src="/images/image-20220110111037603.png" alt="image-20220110111037603"></p><p>在 Spring Security 中，用户请求一个资源(通常是一个接口或者一个 Java 方法)需要的角色会被封装成一个 ConfigAttribute 对象，在 ConfigAttribute 中只有一个 getAttribute方法，该方法返回一个 String 字符串，就是角色的名称。一般来说，角色名称都带有一个 <code>ROLE_</code> 前缀，投票器 AccessDecisionVoter 所做的事情，其实就是比较用户所具各的角色和请求某个<br>资源所需的 ConfigAtuibute 之间的关系。</p><h3 id="调用步骤"><a href="#调用步骤" class="headerlink" title="调用步骤"></a>调用步骤</h3><p>首先. 调用对应接口时，需要的角色会被封装到<code>ConfigAttribute</code> 对象中来保存权限信息 ，只有保存了权限信息才能进行调用 ，在<code>ConfigAttribute</code>中有方法名为<code>getAttribute</code>的，它返回的是一个字符串，就是角色名称。</p><p>接下来.  通过<code>AccessDecisionManager</code> (访问决策管理器) 来对不同的权限设置不同的<code>AccessDecisionVoter</code> (访问决定投票器),从而实现决定用户是否能够访问</p><p><img src="/images/image-20230214190729821.png" alt="image-20230214190729821"></p><h2 id="所需的拦截器FilterSecurityInterceptor"><a href="#所需的拦截器FilterSecurityInterceptor" class="headerlink" title="所需的拦截器FilterSecurityInterceptor"></a>所需的拦截器<code>FilterSecurityInterceptor</code></h2><h2 id="实现案例"><a href="#实现案例" class="headerlink" title="实现案例"></a>实现案例</h2><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>在前面的案例中，我们配置的 URL 拦截规则和请求 URL 所需要的权限都是通过代码来配置的，这样就比较死板，如果想要调整访问某一个 URL 所需要的权限，就需要修改代码。</p><p>动态管理权限规则就是我们将 URL 拦截规则和访问 URI 所需要的权限都保存在数据库中，这样，在不修改源代码的情况下，只需要修改数据库中的数据，就可以对权限进行调整。</p><p><code>用户&lt;--中间表--&gt; 角色 &lt;--中间表--&gt; 菜单</code></p><h3 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for menu</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `menu`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="keyword">pattern</span>` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of menu</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;/admin/**&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;/user/**&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;/guest/**&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for menu_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `menu_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `menu_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `mid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `mid` (`mid`),</span><br><span class="line">  KEY `rid` (`rid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `menu_role_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`mid`) <span class="keyword">REFERENCES</span> `menu` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `menu_role_ibfk_2` <span class="keyword">FOREIGN</span> KEY (`rid`) <span class="keyword">REFERENCES</span> `role` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of menu_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu_role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu_role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu_role` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `menu_role` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nameZh` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>, <span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;ROLE_GUEST&#x27;</span>, <span class="string">&#x27;游客&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enabled` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `locked` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;blr&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `uid` (`uid`),</span><br><span class="line">  KEY `rid` (`rid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user_role_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`uid`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `user_role_ibfk_2` <span class="keyword">FOREIGN</span> KEY (`rid`) <span class="keyword">REFERENCES</span> `role` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="创建-springboot-应用"><a href="#创建-springboot-应用" class="headerlink" title="创建 springboot 应用"></a>创建 springboot 应用</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库相关的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:com/blr/mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.blr.entity</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enabled;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> locked;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> roles.stream().map(r -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(r.getName())).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnabled</span><span class="params">(<span class="type">boolean</span> enabled)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocked</span><span class="params">(<span class="type">boolean</span> locked)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.locked = locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">getRoles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nameZh;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameZh</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nameZh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNameZh</span><span class="params">(String nameZh)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nameZh = nameZh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">getRoles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPattern</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPattern</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;Role&gt; <span class="title function_">getUserRoleByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">    User <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> &#123;</span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">getAllMenu</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 mapper 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blr.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;loadUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blr.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where username = #&#123;username&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserRoleByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.blr.entity.Role&quot;</span>&gt;</span></span><br><span class="line">        select r.*</span><br><span class="line">        from role r,</span><br><span class="line">             user_role ur</span><br><span class="line">        where ur.uid = #&#123;uid&#125;</span><br><span class="line">          and ur.rid = r.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.blr.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MenuResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.blr.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.blr.entity.Role&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rnameZh&quot;</span> <span class="attr">property</span>=<span class="string">&quot;nameZh&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllMenu&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MenuResultMap&quot;</span>&gt;</span></span><br><span class="line">        select m.*, r.id as rid, r.name as rname, r.nameZh as rnameZh</span><br><span class="line">        from menu m</span><br><span class="line">                 left join menu_role mr on m.`id` = mr.`mid`</span><br><span class="line">                 left join role r on r.`id` = mr.`rid`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建 service 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserMapper userMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setRoles(userMapper.getUserRoleByUid(user.getId()));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuService</span><span class="params">(MenuMapper menuMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.menuMapper = menuMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">getAllMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuMapper.getAllMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建测试 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/guest/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">guest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello guest&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 CustomSecurityMetadataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title class_">FilterInvocationSecurityMetadataSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MenuService menuService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomSecurityMetadataSource</span><span class="params">(MenuService menuService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.menuService = menuService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> ((FilterInvocation) object).getRequest().getRequestURI();</span><br><span class="line">        List&lt;Menu&gt; allMenu = menuService.getAllMenu();</span><br><span class="line">        <span class="keyword">for</span> (Menu menu : allMenu) &#123;</span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(menu.getPattern(), requestURI)) &#123;</span><br><span class="line">                String[] roles = menu.getRoles().stream().map(r -&gt; r.getName()).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(roles);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAllConfigAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 Security 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Authorize.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Authorize.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.ObjectPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.intercept.FilterSecurityInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将之前定义的权限数据源 注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerSecurityMetaSource customerSecurityMetaSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(CustomerSecurityMetaSource customerSecurityMetaSource, UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerSecurityMetaSource = customerSecurityMetaSource;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取工厂对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> http.getSharedObject(ApplicationContext.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置自定义的url权限处理</span></span><br><span class="line">        http.apply(<span class="keyword">new</span> <span class="title class_">UrlAuthorizationConfigurer</span>&lt;&gt;(applicationContext))</span><br><span class="line">                .withObjectPostProcessor(<span class="keyword">new</span> <span class="title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> &lt;O <span class="keyword">extends</span> <span class="title class_">FilterSecurityInterceptor</span>&gt; O <span class="title function_">postProcess</span><span class="params">(O object)</span> &#123;</span><br><span class="line">                        object.setSecurityMetadataSource(customerSecurityMetaSource);</span><br><span class="line">                        object.setRejectPublicInvocations(<span class="literal">false</span>);</span><br><span class="line">                        <span class="keyword">return</span> object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动入口类进行测试</p></li></ul><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>部分的代码是由<code>@编程不良人</code>的学习教程中提供的，仅作为自己的学习参考使用！</p><p>作者教程链接 : <u><a href="https://www.baizhiedu.xin/detail/103">Spring Security 最新实战教程</a></u>  </p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Security实现密码加密处理</title>
      <link href="/post/b339061c.html"/>
      <url>/post/b339061c.html</url>
      
        <content type="html"><![CDATA[<h1 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h1><h3 id="常见的几种密码加密的方式"><a href="#常见的几种密码加密的方式" class="headerlink" title="常见的几种密码加密的方式"></a>常见的几种密码加密的方式</h3><ul><li><p>BCryptPasswordEncoder</p><p>BCryptPasswordEncoder 使用 bcrypt 算法对密码进行加密，为了提高密码的安全性，bcrypt算法故意降低运行速度，以增强密码破解的难度。同时 BCryptP asswordEncoder “为自己带盐”开发者不需要额外维护一个“盐” 字段，使用 BCryptPasswordEncoder 加密后的字符串就已经“带盐”了，即使相同的明文每次生成的加密字符串都不相同。</p></li><li><p>Argon2PasswordEncoder</p><p>Argon2PasswordEncoder 使用 Argon2 算法对密码进行加密，Argon2 曾在 Password Hashing Competition 竞赛中获胜。为了解决在定制硬件上密码容易被破解的问题，Argon2也是故意降低运算速度，同时需要大量内存，以确保系统的安全性。</p></li><li><p>Pbkdf2PasswordEncoder</p><p>Pbkdf2PasswordEncoder 使用 PBKDF2 算法对密码进行加密，和前面几种类似，PBKDF2</p><p>算法也是一种故意降低运算速度的算法，当需要 FIPS (Federal Information Processing Standard,美国联邦信息处理标准）认证时，PBKDF2 算法是一个很好的选择。</p></li><li><p>SCryptPasswordEncoder</p><p>SCryptPasswordEncoder 使用scrypt 算法对密码进行加密，和前面的几种类似，serypt 也是一种故意降低运算速度的算法，而且需要大量内存。</p></li></ul><h2 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a>PasswordEncoder</h2><p>源码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.crypto.password;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于编码密码的服务接口。首选实现是 BCryptPasswordEncoder。</span></span><br><span class="line"><span class="comment">* 作者:</span></span><br><span class="line"><span class="comment">* 基思·唐纳德</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line"><span class="comment">//对原始密码进行编码。通常，良好的编码算法会应用 SHA-1 或更大的哈希值以及 8 字节或更大的随机生成盐</span></span><br><span class="line">String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    验证从存储中获取的编码密码是否与提交的原始密码匹配。如果密码匹配，则返回 true;如果不匹配，则返回 false。存储的密码本身永远不会被解码。</span></span><br><span class="line"><span class="comment">    形参:</span></span><br><span class="line"><span class="comment">    原始密码 – 要编码和匹配的原始密码</span></span><br><span class="line"><span class="comment">    编码密码 – 存储中要与之比较的编码密码</span></span><br><span class="line"><span class="comment">    返回值:</span></span><br><span class="line"><span class="comment">    如果编码后的原始密码与存储中的编码密码匹配，则为 true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果应再次对编码的密码以提高安全性，则返回 true，否则返回 false。默认实现始终返回 false。</span></span><br><span class="line"><span class="comment">    形参:</span></span><br><span class="line"><span class="comment">    编码密码 – 要检查的编码密码</span></span><br><span class="line"><span class="comment">    返回值:</span></span><br><span class="line"><span class="comment">    如果应再次对编码的密码进行编码以提高安全性，则为 true，否则为 false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从中我们得出了他的三个实现方法</p><ul><li>encode 用来进行明文加密的</li><li>matches 用来比较密码的方法</li><li>upgradeEncoding 用来给密码进行升级的方法</li></ul><h2 id="DelegatingPasswordEncoder"><a href="#DelegatingPasswordEncoder" class="headerlink" title="DelegatingPasswordEncoder"></a>DelegatingPasswordEncoder</h2><p>根据上面 PasswordEncoder的介绍，可能会以为 Spring security 中默认的密码加密方案应该是四种自适应单向加密函数中的一种，其实不然，</p><h3 id="在-spring-Security-5-0之后，默认的密码加密方案其实是-DelegatingPasswordEncoder。"><a href="#在-spring-Security-5-0之后，默认的密码加密方案其实是-DelegatingPasswordEncoder。" class="headerlink" title="在 spring Security 5.0之后，默认的密码加密方案其实是 DelegatingPasswordEncoder。"></a><strong>在 spring Security 5.0之后，默认的密码加密方案其实是 DelegatingPasswordEncoder。</strong></h3><p>它继承了上面的PasswordEcoder,并且实现了更为强大的功能</p><p>同时它具有更好的兼容性 和 便捷性 以及 安全性</p><h3 id="DelegatingPasswordEncoder源码文档"><a href="#DelegatingPasswordEncoder源码文档" class="headerlink" title="DelegatingPasswordEncoder源码文档"></a><code>DelegatingPasswordEncoder</code>源码文档</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">于前缀标识符委派给另一个密码编码器的密码编码器。</span><br><span class="line"><span class="comment">//构造实例</span></span><br><span class="line">您可以使用 轻松 org.springframework.security.crypto.factory.PasswordEncoderFactories构造实例。或者，您可以创建自己的自定义实例。例如：</span><br><span class="line">   <span class="type">String</span> <span class="variable">idForEncode</span> <span class="operator">=</span> <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line">   <span class="type">Map</span>  <span class="variable">encoders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   encoders.put(idForEncode, <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>());</span><br><span class="line">   encoders.put(<span class="string">&quot;noop&quot;</span>, NoOpPasswordEncoder.getInstance());</span><br><span class="line">   encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Pbkdf2PasswordEncoder</span>());</span><br><span class="line">   encoders.put(<span class="string">&quot;scrypt&quot;</span>, <span class="keyword">new</span> <span class="title class_">SCryptPasswordEncoder</span>());</span><br><span class="line">   encoders.put(<span class="string">&quot;sha256&quot;</span>, <span class="keyword">new</span> <span class="title class_">StandardPasswordEncoder</span>());</span><br><span class="line">  </span><br><span class="line">   <span class="type">PasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelegatingPasswordEncoder</span>(idForEncode, encoders);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//密码存储格式</span></span><br><span class="line">密码的一般格式为：</span><br><span class="line">   &#123;id&#125;encodedPassword</span><br><span class="line">   </span><br><span class="line">这样，“id”是用于查找 PasswordEncoder 应使用的标识符，而“encodedPassword”是所选 PasswordEncoder的原始编码密码。“id”必须位于密码的开头，以“&#123;”开头，以“&#125;”结尾。如果找不到“id”，则“id”将为空。例如，以下内容可能是使用不同“id”编码的密码列表。所有原始密码都是“密码”。</span><br><span class="line">   &#123;bcrypt&#125;$2a$<span class="number">10</span>$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG</span><br><span class="line">   &#123;noop&#125;password</span><br><span class="line">   &#123;pbkdf2&#125;5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc</span><br><span class="line">   &#123;scrypt&#125;$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec05+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=</span><br><span class="line">   &#123;sha256&#125;97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0</span><br><span class="line">   </span><br><span class="line">对于我们上面构建的委派密码编码器：</span><br><span class="line">第一个密码的 PasswordEncoder ID为“bcrypt”，编码密码为“$2a$<span class="number">10</span>$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG”。匹配时，它将委托给 org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><br><span class="line">第二个密码的ID为“noop”，编码密码为 PasswordEncoder “password”。匹配时，它将委托给 NoOpPasswordEncoder</span><br><span class="line">第三个密码的 PasswordEncoder ID为“pbkdf2”，编码密码为“5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc”。匹配时，它将委托给 Pbkdf2PasswordEncoder</span><br><span class="line">第四个密码的 PasswordEncoder ID为“scrypt”，编码密码为“$e 0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec <span class="number">05</span>+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=” 匹配时，它将委托给 org.springframework.security.crypto.scrypt.SCryptPasswordEncoder</span><br><span class="line">最终密码的 ID 为 PasswordEncoder “sha256”，编码密码为“97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0”。匹配时，它将委托给 StandardPasswordEncoder</span><br><span class="line"><span class="comment">//密码编码</span></span><br><span class="line">传递给构造函数的内容 idForEncode 确定将 PasswordEncoder 用于编码密码。在我们上面构造的中 DelegatingPasswordEncoder ，这意味着编码“密码”的结果将被委托给 BCryptPasswordEncoder 并以“&#123;bcrypt&#125;”为前缀。最终结果如下所示：</span><br><span class="line">   &#123;bcrypt&#125;$2a$<span class="number">10</span>$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG</span><br><span class="line">   </span><br><span class="line"><span class="comment">//密码匹配</span></span><br><span class="line">匹配是基于“id”和“id” PasswordEncoder 到构造函数中提供的映射完成的。我们在“密码存储格式”中的示例提供了如何完成此操作的工作示例。默认情况下，使用未映射的“id”（包括空 id）的密码调用的结果 matches(CharSequence, String) 将导致 IllegalArgumentException.可以使用 自定义 setDefaultPasswordEncoderForMatches(PasswordEncoder)此行为。</span><br><span class="line">    </span><br><span class="line">请参阅:</span><br><span class="line">org.springframework.security.crypto.factory.PasswordEncoderFactories</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DelegatingPasswordEncoder源码解读"><a href="#DelegatingPasswordEncoder源码解读" class="headerlink" title="DelegatingPasswordEncoder源码解读"></a><code>DelegatingPasswordEncoder</code>源码解读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelegatingPasswordEncoder</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String idForEncode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoderForEncode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, PasswordEncoder&gt; idToPasswordEncoder;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">PasswordEncoder</span> <span class="variable">defaultPasswordEncoderForMatches</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnmappedIdPasswordEncoder</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DelegatingPasswordEncoder</span><span class="params">(String idForEncode,</span></span><br><span class="line"><span class="params">                                     Map&lt;String, PasswordEncoder&gt; idToPasswordEncoder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idForEncode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;idForEncode cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!idToPasswordEncoder.containsKey(idForEncode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;idForEncode &quot;</span> + idForEncode + <span class="string">&quot;is not found in idToPasswordEncoder &quot;</span> + idToPasswordEncoder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String id : idToPasswordEncoder.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (id.contains(PREFIX)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;id &quot;</span> + id + <span class="string">&quot; cannot contain &quot;</span> + PREFIX);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (id.contains(SUFFIX)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;id &quot;</span> + id + <span class="string">&quot; cannot contain &quot;</span> + SUFFIX);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.idForEncode = idForEncode;</span><br><span class="line">        <span class="built_in">this</span>.passwordEncoderForEncode = idToPasswordEncoder.get(idForEncode);</span><br><span class="line">        <span class="built_in">this</span>.idToPasswordEncoder = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(idToPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="自定义配置文件实现PasswordEncoder接口"><a href="#自定义配置文件实现PasswordEncoder接口" class="headerlink" title="自定义配置文件实现PasswordEncoder接口"></a>自定义配置文件实现<code>PasswordEncoder</code>接口</h3><p><strong>三个方法前面有介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String encode(CharSequence rawPassword) &#123;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean matches(CharSequence rawPassword, String encodedPassword) &#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean upgradeEncoding(String encodedPassword) &#123;</span><br><span class="line">    return PasswordEncoder.super.upgradeEncoding(encodedPassword);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="密码自动升级"><a href="#密码自动升级" class="headerlink" title="密码自动升级"></a>密码自动升级</h2><p>推荐使用DelegatingPasswordEncoder 的另外一个好处就是自动进行密码加密方案的升级，这个功能在整合一些老的系统时非常有用。</p><ul><li>准备库表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`</span><br><span class="line">(</span><br><span class="line">    `id`                    <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `username`              <span class="type">varchar</span>(<span class="number">32</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `password`              <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `enabled`               tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `accountNonExpired`     tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `accountNonLocked`      tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `credentialsNonExpired` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role`</span><br><span class="line">(</span><br><span class="line">    `id`      <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name`    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `name_zh` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="comment">-- 用户角色关系表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role`</span><br><span class="line">(</span><br><span class="line">    `id`  <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    KEY   `uid` (`uid`),</span><br><span class="line">    KEY   `rid` (`rid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入用户数据</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;blr&#x27;</span>, <span class="string">&#x27;&#123;noop&#125;123&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 插入角色数据</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;ROLE_product&#x27;</span>, <span class="string">&#x27;商品管理员&#x27;</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;ROLE_admin&#x27;</span>, <span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;ROLE_user&#x27;</span>, <span class="string">&#x27;用户管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 插入用户角色数据</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role`</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>整合 mybatis</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.baizhi.entity</span></span><br><span class="line"><span class="attr">logging.level.com.baizhi.dao</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><ul><li>编写实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonLocked;</span><br><span class="line">    <span class="keyword">private</span> Boolean credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountNonExpired</span><span class="params">(Boolean accountNonExpired)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNonExpired = accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountNonLocked</span><span class="params">(Boolean accountNonLocked)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNonLocked = accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCredentialsNonExpired</span><span class="params">(Boolean credentialsNonExpired)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.credentialsNonExpired = credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnabled</span><span class="params">(Boolean enabled)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nameZh;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameZh</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nameZh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNameZh</span><span class="params">(String nameZh)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nameZh = nameZh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建dao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;Role&gt; <span class="title function_">getRolesByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">    User <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">        Integer <span class="title function_">updatePassword</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写 mapper</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.baizhi.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;loadUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select id,</span><br><span class="line">               username,</span><br><span class="line">               password,</span><br><span class="line">               enabled,</span><br><span class="line">               accountNonExpired,</span><br><span class="line">               accountNonLocked,</span><br><span class="line">               credentialsNonExpired</span><br><span class="line">        from `user`</span><br><span class="line">        where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRolesByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Role&quot;</span>&gt;</span></span><br><span class="line">        select r.id,</span><br><span class="line">               r.name,</span><br><span class="line">               r.name_zh nameZh</span><br><span class="line">        from `role` r,</span><br><span class="line">             `user_role` ur</span><br><span class="line">        where r.id = ur.rid</span><br><span class="line">          and ur.uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePassword&quot;</span>&gt;</span></span><br><span class="line">      update `user` set password=#&#123;password&#125;</span><br><span class="line">      where username=#&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写service 实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span>,UserDetailsPasswordService &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserDetailService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(user)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setRoles(userDao.getRolesByUid(user.getId()));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">updatePassword</span><span class="params">(UserDetails user, String newPassword)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> userDao.updatePassword(user.getUsername(), newPassword);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">            ((User) user).setPassword(newPassword);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置securityconfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyUserDetailService myUserDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(MyUserDetailService myUserDetailService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myUserDetailService = myUserDetailService;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//查询数据库</span></span><br><span class="line">        auth.userDetailsService(myUserDetailService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动项目测试</li></ul><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>部分的代码是由<code>@编程不良人</code>的学习教程中提供的，仅作为自己的学习参考使用！</p><p>作者教程链接 : <u><a href="https://www.baizhiedu.xin/detail/103">Spring Security 最新实战教程</a></u>  </p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>security实现验证码andRemember-Me</title>
      <link href="/post/1de3cf99.html"/>
      <url>/post/1de3cf99.html</url>
      
        <content type="html"><![CDATA[<h1 id="实现验证码"><a href="#实现验证码" class="headerlink" title="实现验证码"></a>实现验证码</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--验证码相关的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义验证码配置类"><a href="#定义验证码配置类" class="headerlink" title="定义验证码配置类"></a>定义验证码配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rememberme.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Producer;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码相关配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Producer <span class="title function_">kaptcha</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;150&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;50&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.string&quot;</span>, <span class="string">&quot;0123456789&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义验证码的拦截器"><a href="#定义验证码的拦截器" class="headerlink" title="定义验证码的拦截器"></a>定义验证码的拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义验证码Filter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">kaptchaFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义拦截器配置类，实现<code>UsernamePasswordAuthenticationFilter</code></p><p>然后设置默认的拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似源码，定义默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KAPTCHA_KEY</span> <span class="operator">=</span> <span class="string">&quot;kaptcha&quot;</span>;<span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">kaptcha</span> <span class="operator">=</span> KAPTCHA_KEY;</span><br></pre></td></tr></table></figure><p>实现拦截器的验证方法<code>attemptAuthentication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    <span class="comment">//1. 验证请求判断是否为post</span></span><br><span class="line">    <span class="keyword">if</span> (!request.getMethod().equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">KaptchaNotMatchException</span>(<span class="string">&quot;请求异常&quot;</span> + request.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">kaptcha</span> <span class="operator">=</span> request.getParameter(getKaptcha());</span><br><span class="line">    <span class="type">String</span> <span class="variable">sessionKaptcha</span> <span class="operator">=</span> (String) request.getSession().getAttribute(<span class="string">&quot;kaptcha&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(kaptcha)</span><br><span class="line">        &amp;&amp; !ObjectUtils.isEmpty(sessionKaptcha)</span><br><span class="line">        &amp;&amp; kaptcha.equalsIgnoreCase(sessionKaptcha)) &#123;</span><br><span class="line">        <span class="comment">//3. 返回自定义的组件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.attemptAuthentication(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">KaptchaNotMatchException</span>(<span class="string">&quot;验证码异常！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义拦截器配置"><a href="#自定义拦截器配置" class="headerlink" title="自定义拦截器配置"></a>自定义拦截器配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> kaptchaFilter <span class="title function_">KaptchaFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">kaptchaFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">kaptchaFilter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定处理登录</span></span><br><span class="line">        filter.setFilterProcessesUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//setUsername、password....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定接受拦截器的请求参数名</span></span><br><span class="line">        filter.setKaptcha(<span class="string">&quot;kaptcha&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义拦截器的认证管理器</span></span><br><span class="line">        filter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        <span class="comment">//指定认证成功或者失败的请求</span></span><br><span class="line">        filter.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;200&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;用户信息&quot;</span>, (User) authentication.getPrincipal());</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            response.getWriter().println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        filter.setAuthenticationFailureHandler((request, response, exception) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败！！&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;400&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;错误信息&quot;</span>, exception.getMessage());</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            response.getWriter().println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//指定接受拦截器的请求参数名</span></span><br><span class="line">filter.setKaptcha(<span class="string">&quot;kaptcha&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义拦截器的认证管理器</span></span><br><span class="line">filter.setAuthenticationManager(authenticationManagerBean());</span><br></pre></td></tr></table></figure><h2 id="将自定义的拦截器交给容器"><a href="#将自定义的拦截器交给容器" class="headerlink" title="将自定义的拦截器交给容器"></a>将自定义的拦截器交给容器</h2><p>​    用来将自定义<code>AuthenticationManager</code>在工厂中进行暴露,可以在任何位置注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来将自定义AuthenticationManager在工厂中进行暴露,可以在任何位置注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> kaptchaFilter <span class="title function_">KaptchaFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">kaptchaFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">kaptchaFilter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定处理登录</span></span><br><span class="line">        filter.setFilterProcessesUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//setUsername、password....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定接受拦截器的请求参数名</span></span><br><span class="line">        filter.setKaptcha(<span class="string">&quot;kaptcha&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义拦截器的认证管理器</span></span><br><span class="line">        filter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        <span class="comment">//指定认证成功或者失败的请求</span></span><br><span class="line">        filter.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;200&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;用户信息&quot;</span>, (User) authentication.getPrincipal());</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            response.getWriter().println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        filter.setAuthenticationFailureHandler((request, response, exception) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败！！&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;400&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;错误信息&quot;</span>, exception.getMessage());</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            response.getWriter().println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="替换自己的拦截器"><a href="#替换自己的拦截器" class="headerlink" title="替换自己的拦截器"></a>替换自己的拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换默认拦截器</span></span><br><span class="line">        http.addFilterAt(KaptchaFilter(), UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/index&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/loginPages&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/vc.jpg&quot;</span>).permitAll()     <span class="comment">//放行验证码的请求</span></span><br><span class="line"></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/loginPages&quot;</span>)</span><br><span class="line"><span class="comment">//                .loginProcessingUrl(&quot;/doLogin&quot;)</span></span><br><span class="line"><span class="comment">//                .defaultSuccessUrl(&quot;/index&quot;)</span></span><br><span class="line"><span class="comment">//                .failureUrl(&quot;/loginPage&quot;)</span></span><br><span class="line"><span class="comment">//                .and()</span></span><br><span class="line"><span class="comment">//                .logout()</span></span><br><span class="line"><span class="comment">//                .logoutSuccessUrl(&quot;/index&quot;)</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line"><span class="comment">//替换默认拦截器</span></span><br><span class="line">        http.addFilterAt(KaptchaFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller配置验证码拦截器发送的请求"><a href="#controller配置验证码拦截器发送的请求" class="headerlink" title="controller配置验证码拦截器发送的请求"></a>controller配置验证码拦截器发送的请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/vc.jpg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Kaptcha</span><span class="params">(HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> producer.createText();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;kaptcha&quot;</span>, text);</span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> producer.createImage(text);</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端实现请求接口"><a href="#前端实现请求接口" class="headerlink" title="前端实现请求接口"></a>前端实现请求接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">验证码: &lt;input name=&quot;kaptcha&quot; type=&quot;text&quot;/&gt; &lt;img alt=&quot;&quot; th:src=&quot;@&#123;/vc.jpg&#125;&quot;&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h1 id="实现记住我功能（暂未明悉）"><a href="#实现记住我功能（暂未明悉）" class="headerlink" title="实现记住我功能（暂未明悉）"></a>实现记住我功能（暂未明悉）</h1><p><img src="/images/image-20230213204525851.png" alt="image-20230213204525851"></p><p>​登录时勾选 RememberMe 选项，然后重启服务端之后，在测试接口是否能免登录访问。</p><h3 id="实现该功能的拦截器"><a href="#实现该功能的拦截器" class="headerlink" title="实现该功能的拦截器"></a>实现该功能的拦截器</h3><p><code>RememberMeAuthenticationFilter</code></p><p>源码解析：</p><blockquote><p>检测 中SecurityContext是否没有Authentication对象，如果实现请求，则RememberMeServices使用记住我身份验证令牌填充上下文。<br>具体 RememberMeServices 实现将具有由此筛选器调用的方法 RememberMeServices.autoLogin(HttpServletRequest, HttpServletResponse) 。如果此方法返回非 null Authentication 对象，则会将其传递给 AuthenticationManager，以便可以实现任何特定于身份验证的行为。生成的 Authentication （如果成功）将被放入 SecurityContext.<br>如果身份验证成功，则将 发布 InteractiveAuthenticationSuccessEvent 到应用程序上下文。如果身份验证不成功，则不会发布任何事件，因为这通常通过特定于 的应用程序事件进行 AuthenticationManager记录。<br>通常，无论身份验证是成功还是失败，都将允许请求继续。如果需要对经过身份验证的用户的目标进行某种控制， AuthenticationSuccessHandler 则可以注入<br>作者:<br>本·亚历克斯，卢克·泰</p></blockquote><h3 id="分析原理"><a href="#分析原理" class="headerlink" title="分析原理"></a>分析原理</h3><ol><li><p>当在SecurityConfig配置中开启了”记住我”功能之后,在进行认证时如果勾选了”记住我”选项，此时打开浏览器控制台，分析整个登录过程。首先当我们登录时，在登录请求中多了一个 RememberMe 的参数。</p></li><li><p>这个参数就是告诉服务器应该开启 RememberMe功能的。如果自定义登录页面开启 RememberMe 功能应该多加入一个一样的请求参数就可以啦。该请求会被 <code>RememberMeAuthenticationFilter</code>进行拦截然后自动登录</p></li></ol><h2 id="源码执行的方法"><a href="#源码执行的方法" class="headerlink" title="源码执行的方法"></a>源码执行的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   <span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.logger.debug(LogMessage</span><br><span class="line">            .of(() -&gt; <span class="string">&quot;SecurityContextHolder not populated with remember-me token, as it already contained: &#x27;&quot;</span></span><br><span class="line">                  + SecurityContextHolder.getContext().getAuthentication() + <span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//请求到达过滤器之后，首先判断 SecurityContextHolder 中是否有值，没值的话表示用户尚未登录，此时调用 autoLogin 方法进行自动登录。</span></span><br><span class="line">   <span class="type">Authentication</span> <span class="variable">rememberMeAuth</span> <span class="operator">=</span> <span class="built_in">this</span>.rememberMeServices.autoLogin(request, response);</span><br><span class="line">   <span class="keyword">if</span> (rememberMeAuth != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Attempt authenticaton via AuthenticationManager</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         rememberMeAuth = <span class="built_in">this</span>.authenticationManager.authenticate(rememberMeAuth);</span><br><span class="line">         <span class="comment">// Store to SecurityContextHolder</span></span><br><span class="line">         <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">         context.setAuthentication(rememberMeAuth);</span><br><span class="line">         <span class="comment">// 将登录成功的用户信息保存到 SecurityContextHolder 对象中，</span></span><br><span class="line">         SecurityContextHolder.setContext(context);</span><br><span class="line">         onSuccessfulAuthentication(request, response, rememberMeAuth);</span><br><span class="line">         <span class="built_in">this</span>.logger.debug(LogMessage.of(() -&gt; <span class="string">&quot;SecurityContextHolder populated with remember-me token: &#x27;&quot;</span></span><br><span class="line">               + SecurityContextHolder.getContext().getAuthentication() + <span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">         <span class="built_in">this</span>.securityContextRepository.saveContext(context, request, response);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.eventPublisher != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">InteractiveAuthenticationSuccessEvent</span>(</span><br><span class="line">                  SecurityContextHolder.getContext().getAuthentication(), <span class="built_in">this</span>.getClass()));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.successHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.successHandler.onAuthenticationSuccess(request, response, rememberMeAuth);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (AuthenticationException ex) &#123;</span><br><span class="line">         <span class="built_in">this</span>.logger.debug(LogMessage</span><br><span class="line">               .format(<span class="string">&quot;SecurityContextHolder not populated with remember-me token, as AuthenticationManager &quot;</span></span><br><span class="line">                     + <span class="string">&quot;rejected Authentication returned by RememberMeServices: &#x27;%s&#x27;; &quot;</span></span><br><span class="line">                     + <span class="string">&quot;invalidating remember-me token&quot;</span>, rememberMeAuth),</span><br><span class="line">               ex);</span><br><span class="line">         <span class="built_in">this</span>.rememberMeServices.loginFail(request, response);</span><br><span class="line">         onUnsuccessfulAuthentication(request, response, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1）请求到达过滤器之后，首先判断 SecurityContextHolder 中是否有值，没值的话表示用户尚未登录，此时调用 autoLogin 方法进行自动登录。</p><p>(2）当自动登录成功后返回的rememberMeAuth 不为null 时，表示自动登录成功，此时调用 authenticate 方法对 key 进行校验，并且将登录成功的用户信息保存到 SecurityContextHolder 对象中，然后调用登录成功回调，并发布登录成功事件。需要注意的是，登录成功的回调并不包含 RememberMeServices 中的 1oginSuccess 方法。</p><p>(3）如果自动登录失败，则调用 remenberMeServices.loginFail方法处理登录失败回调。onUnsuccessfulAuthentication 和 onSuccessfulAuthentication 都是该过滤器中定义的空方法，并没有任何实现这就是 RememberMeAuthenticationFilter 过滤器所做的事情，成功将 RememberMeServices的服务集成进来</p><h2 id="RememberMeServices"><a href="#RememberMeServices" class="headerlink" title="RememberMeServices"></a>RememberMeServices</h2><p>这里一共定义了三个方法：</p><ol><li>autoLogin 方法可以从请求中提取出需要的参数，完成自动登录功能。</li><li>loginFail 方法是自动登录失败的回调。</li><li>1oginSuccess 方法是自动登录成功的回调。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="传统-web-开发记住我实现"><a href="#传统-web-开发记住我实现" class="headerlink" title="传统 web 开发记住我实现"></a>传统 web 开发记住我实现</h3><p>通过源码分析得知必须在认证请求中加入参数remember-me值为”true,on,yes,1”其中任意一个才可以完成记住我功能,这个时候修改认证界面:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/doLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  记住我: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on|yes|true|1&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置中开启记住我</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .....</span><br><span class="line">                .and()</span><br><span class="line">                .rememberMe() <span class="comment">//开启记住我</span></span><br><span class="line">                <span class="comment">//.alwaysRemember(true) 总是记住我</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前后端分离开发记住我实现"><a href="#前后端分离开发记住我实现" class="headerlink" title="前后端分离开发记住我实现"></a>前后端分离开发记住我实现</h3><h4 id="自定义认证类-LoginFilter"><a href="#自定义认证类-LoginFilter" class="headerlink" title="自定义认证类 LoginFilter"></a>自定义认证类 LoginFilter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义前后端分离认证 Filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line">        <span class="comment">//1.判断是否是 post 方式请求</span></span><br><span class="line">        <span class="keyword">if</span> (!request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.判断是否是 json 格式请求类型</span></span><br><span class="line">        <span class="keyword">if</span> (request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE)) &#123;</span><br><span class="line">            <span class="comment">//3.从 json 数据中获取用户输入用户名和密码进行认证 &#123;&quot;uname&quot;:&quot;xxx&quot;,&quot;password&quot;:&quot;xxx&quot;,&quot;remember-me&quot;:true&#125;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Map&lt;String, String&gt; userInfo = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().readValue(request.getInputStream(), Map.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> userInfo.get(getUsernameParameter());</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userInfo.get(getPasswordParameter());</span><br><span class="line">                <span class="type">String</span> <span class="variable">rememberValue</span> <span class="operator">=</span> userInfo.get(AbstractRememberMeServices.DEFAULT_PARAMETER);</span><br><span class="line">                <span class="keyword">if</span> (!ObjectUtils.isEmpty(rememberValue)) &#123;</span><br><span class="line">                    request.setAttribute(AbstractRememberMeServices.DEFAULT_PARAMETER, rememberValue);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;用户名: &quot;</span> + username + <span class="string">&quot; 密码: &quot;</span> + password + <span class="string">&quot; 是否记住我: &quot;</span> + rememberValue);</span><br><span class="line">                <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, password);</span><br><span class="line">                setDetails(request, authRequest);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.attemptAuthentication(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义-RememberMeService"><a href="#自定义-RememberMeService" class="headerlink" title="自定义 RememberMeService"></a>自定义 RememberMeService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义记住我 services 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPersistentTokenBasedRememberMeServices</span> <span class="keyword">extends</span> <span class="title class_">PersistentTokenBasedRememberMeServices</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPersistentTokenBasedRememberMeServices</span><span class="params">(String key, UserDetailsService userDetailsService, PersistentTokenRepository tokenRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(key, userDetailsService, tokenRepository);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义前后端分离获取 remember-me 方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">rememberMeRequested</span><span class="params">(HttpServletRequest request, String parameter)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getAttribute(parameter).toString();</span><br><span class="line">        <span class="keyword">if</span> (paramValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paramValue.equalsIgnoreCase(<span class="string">&quot;true&quot;</span>) || paramValue.equalsIgnoreCase(<span class="string">&quot;on&quot;</span>)</span><br><span class="line">                    || paramValue.equalsIgnoreCase(<span class="string">&quot;yes&quot;</span>) || paramValue.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置记住我"><a href="#配置记住我" class="headerlink" title="配置记住我"></a>配置记住我</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">        <span class="keyword">return</span> inMemoryUserDetailsManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义 filter 交给工厂管理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginFilter <span class="title function_">loginFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">LoginFilter</span> <span class="variable">loginFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginFilter</span>();</span><br><span class="line">        loginFilter.setFilterProcessesUrl(<span class="string">&quot;/doLogin&quot;</span>);<span class="comment">//指定认证 url</span></span><br><span class="line">        loginFilter.setUsernameParameter(<span class="string">&quot;uname&quot;</span>);<span class="comment">//指定接收json 用户名 key</span></span><br><span class="line">        loginFilter.setPasswordParameter(<span class="string">&quot;passwd&quot;</span>);<span class="comment">//指定接收 json 密码 key</span></span><br><span class="line">        loginFilter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        loginFilter.setRememberMeServices(rememberMeServices()); <span class="comment">//设置认证成功时使用自定义rememberMeService</span></span><br><span class="line">        <span class="comment">//认证成功处理</span></span><br><span class="line">        loginFilter.setAuthenticationSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;用户信息&quot;</span>, authentication.getPrincipal());</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            resp.getWriter().println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//认证失败处理</span></span><br><span class="line">        loginFilter.setAuthenticationFailureHandler((req, resp, ex) -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败: &quot;</span> + ex.getMessage());</span><br><span class="line">            resp.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">            resp.getWriter().println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> loginFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeHttpRequests()</span><br><span class="line">                .anyRequest().authenticated()<span class="comment">//所有请求必须认证</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .rememberMe() <span class="comment">//开启记住我功能  cookie 进行实现  1.认证成功保存记住我 cookie 到客户端   2.只有 cookie 写入客户端成功才能实现自动登录功能</span></span><br><span class="line">                .rememberMeServices(rememberMeServices())  <span class="comment">//设置自动登录使用哪个 rememberMeServices</span></span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint((req, resp, ex) -&gt; &#123;</span><br><span class="line">                    resp.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">                    resp.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">                    resp.getWriter().println(<span class="string">&quot;请认证之后再去处理!&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutRequestMatcher(<span class="keyword">new</span> <span class="title class_">OrRequestMatcher</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/logout&quot;</span>, HttpMethod.DELETE.name()),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/logout&quot;</span>, HttpMethod.GET.name())</span><br><span class="line">                ))</span><br><span class="line">                .logoutSuccessHandler((req, resp, auth) -&gt; &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">                    result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">                    result.put(<span class="string">&quot;用户信息&quot;</span>, auth.getPrincipal());</span><br><span class="line">                    resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">                    resp.setStatus(HttpStatus.OK.value());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">                    resp.getWriter().println(s);</span><br><span class="line">                &#125;)</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// at: 用来某个 filter 替换过滤器链中哪个 filter</span></span><br><span class="line">        <span class="comment">// before: 放在过滤器链中哪个 filter 之前</span></span><br><span class="line">        <span class="comment">// after: 放在过滤器链中那个 filter 之后</span></span><br><span class="line">        http.addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RememberMeServices <span class="title function_">rememberMeServices</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPersistentTokenBasedRememberMeServices</span>(UUID.randomUUID().toString(), userDetailsService(), <span class="keyword">new</span> <span class="title class_">InMemoryTokenRepositoryImpl</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>关于<code>实现记住我功能</code> 部分的代码是由<code>@编程不良人</code>的学习教程中提供的，仅作为自己的学习参考使用！</p><p>作者教程链接 : <u><a href="https://www.baizhiedu.xin/detail/103">Spring Security 最新实战教程</a></u>  </p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义配置拦截器</title>
      <link href="/post/fa5d4e71.html"/>
      <url>/post/fa5d4e71.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义secuirty拦截器"><a href="#自定义secuirty拦截器" class="headerlink" title="自定义secuirty拦截器"></a>自定义secuirty拦截器</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><img src="/post/fa5d4e71/Rayce_codingData\source\images\image-20230212123340894.png" alt="image-20230212123340894"></p><p>很多时候security默认提供的拦截器往往不够用于我们的日常开发，所以我们经常需要自己重写某些拦截器，达到实现开发的需求</p><p>​本文，以重写登录拦截器为例</p><h3 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在指定筛选器类的位置添加筛选器。例如，如果希望筛选器 CustomFilter 注册到与 相同的 UsernamePasswordAuthenticationFilter位置，则可以调用：</span></span><br><span class="line"><span class="comment">   addFilterAt(new CustomFilter(), UsernamePasswordAuthenticationFilter.class)</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">在同一位置注册多个筛选器意味着它们的排序不是确定的。更具体地说，在同一位置注册多个筛选器不会覆盖现有筛选器。相反，不要注册您不想使用的筛选器。</span></span><br><span class="line"><span class="comment">形参:</span></span><br><span class="line"><span class="comment">过滤器 – 要注册的过滤器</span></span><br><span class="line"><span class="comment">atFilter – 已在 Spring Security 注册（即已知）的另一个 Filter 位置。</span></span><br><span class="line"><span class="comment">返回值:</span></span><br><span class="line"><span class="comment">用于 HttpSecurity 进一步的定制</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> HttpSecurity <span class="title function_">addFilterAt</span><span class="params">(Filter filter, Class&lt;? extends Filter&gt; atFilter)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> addFilterAtOffsetOf(filter, <span class="number">0</span>, atFilter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理身份验证表单提交。在 Spring Security 3.0 之前调用 AuthenticationProcessingFilter 。</span></span><br><span class="line"><span class="comment">登录表单必须向此筛选器提供两个参数：用户名和密码。要使用的默认参数名称包含在静态字段 SPRING_SECURITY_FORM_USERNAME_KEY 和 SPRING_SECURITY_FORM_PASSWORD_KEY中。还可以通过设置 usernameParameter and passwordParameter 属性来更改参数名称。</span></span><br><span class="line"><span class="comment">默认情况下，此过滤器响应 URL /login。</span></span><br><span class="line"><span class="comment">自:</span></span><br><span class="line"><span class="comment">3.0</span></span><br><span class="line"><span class="comment">作者:</span></span><br><span class="line"><span class="comment">本·亚历克斯、科林·桑帕莱亚努、卢克·泰勒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_SECURITY_FORM_USERNAME_KEY</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_SECURITY_FORM_PASSWORD_KEY</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathRequestMatcher</span> <span class="variable">DEFAULT_ANT_PATH_REQUEST_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">                                                                                                            <span class="string">&quot;POST&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">usernameParameter</span> <span class="operator">=</span> SPRING_SECURITY_FORM_USERNAME_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">passwordParameter</span> <span class="operator">=</span> SPRING_SECURITY_FORM_PASSWORD_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">postOnly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(DEFAULT_ANT_PATH_REQUEST_MATCHER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(DEFAULT_ANT_PATH_REQUEST_MATCHER, authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="一、创建自定义的拦截器类，继承XXX拦截器，实现重写"><a href="#一、创建自定义的拦截器类，继承XXX拦截器，实现重写" class="headerlink" title="一、创建自定义的拦截器类，继承XXX拦截器，实现重写"></a>一、创建自定义的拦截器类，继承XXX拦截器，实现重写</h3><p>例如：我们重写了登录的拦截器（表单提交），按照我们需要的方式【需要json格式】，来进行修改自定义的拦截器类</p><p>需要做的事情</p><ul><li>判断是否为post的请求</li><li>判断是否为json格式的数据</li><li>将json格式的数据中 获取我们需要的username ， password进行认证</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义前后端分离认证 Filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需要做的三件事</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1. 判断是否为post的请求</span></span><br><span class="line">        <span class="keyword">if</span> (!request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;请求方法不支持&quot;</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断是否为json格式的数据</span></span><br><span class="line">        <span class="keyword">if</span> (request.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE)) &#123;</span><br><span class="line">            <span class="comment">//2.1  提取用户名 ，密码</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 用流的形式去接收</span></span><br><span class="line"><span class="comment">                 * 因为源码中有</span></span><br><span class="line"><span class="comment">                 private String usernameParameter = &quot;username&quot;;</span></span><br><span class="line"><span class="comment">                 private String passwordParameter = &quot;password&quot;;</span></span><br><span class="line"><span class="comment">                 所以我们可以直接继承下来 使用</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Map&lt;String, String&gt; userInfo = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().readValue(request.getInputStream(), Map.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> userInfo.get(getUsernameParameter());</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userInfo.get(getPasswordParameter());</span><br><span class="line">                <span class="comment">//已经获取到了username...</span></span><br><span class="line">                <span class="comment">//2.2 按照源码的实例， 我们就需要将获取的内容封装为一个token</span></span><br><span class="line">                <span class="comment">// UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);</span></span><br><span class="line">                <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, password);</span><br><span class="line">                setDetails(request, authRequest);</span><br><span class="line">                <span class="comment">//最后调用本类中的authenticate</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 将json格式的数据中 获取我们需要的username ， password进行认证</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.attemptAuthentication(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、在自定义的安全配置类中进行配置"><a href="#二、在自定义的安全配置类中进行配置" class="headerlink" title="二、在自定义的安全配置类中进行配置"></a>二、在自定义的安全配置类中进行配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Filter交给容器进行管理</span></span><br><span class="line"><span class="comment"> * 基本是按照源码中的内容去进行配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LoginFilter <span class="title function_">loginFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">LoginFilter</span> <span class="variable">loFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginFilter</span>();</span><br><span class="line">    loFilter.setFilterProcessesUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其中的value属性与 前端form表单中输入用户名的name属性相同</span></span><br><span class="line">    loFilter.setUsernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    loFilter.setPasswordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入自己的AuthenticationManager</span></span><br><span class="line">    loFilter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">    <span class="comment">//认证成功处理 。认证失败处理</span></span><br><span class="line">    loFilter.setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;200&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;用户信息&quot;</span>, (User) authentication.getPrincipal());</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;);</span><br><span class="line">    loFilter.setAuthenticationFailureHandler((request, response, exception) -&gt; &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败！！&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;400&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;错误信息&quot;</span>, exception.getMessage());</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> loFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置自己的身份认证管理员-AuthenticationManager"><a href="#配置自己的身份认证管理员-AuthenticationManager" class="headerlink" title="配置自己的身份认证管理员(AuthenticationManager)"></a>配置自己的身份认证管理员(AuthenticationManager)</h4><p>这样做的目的是为了让我们登录时进行验证的数据是从数据库或者缓存中提取的，而不是仅仅放上默认给出的数据。<strong>所以这一步是必须要进行操作的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入自己的AuthenticationManager</span></span><br><span class="line">loFilter.setAuthenticationManager(authenticationManagerBean());</span><br></pre></td></tr></table></figure><h4 id="重写UserDetails"><a href="#重写UserDetails" class="headerlink" title="重写UserDetails"></a>重写UserDetails</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserDetailsService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(user)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不正确！&quot;</span>);</span><br><span class="line">        <span class="comment">//存在的话 ， 赋予权限信息</span></span><br><span class="line">        List&lt;Role&gt; roles = userDao.getRolesByUid(user.getId());</span><br><span class="line">        user.setRoles(roles);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现注入"><a href="#实现注入" class="headerlink" title="实现注入"></a>实现注入</h4><p>将自己重写的<code>DetailsService</code>进行依赖注入，然后交给<code>AuthenticationManagerBuilder</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建自己userDetailsService，然后交给AuthenticationManagerBuilder来创建我们自己的AuthenticationManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MyUserDetailsService myUserDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">testConfig</span><span class="params">(MyUserDetailsService myUserDetailsService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myUserDetailsService = myUserDetailsService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建自定义的AuthenticationManager，管理自己的DetailsService"><a href="#创建自定义的AuthenticationManager，管理自己的DetailsService" class="headerlink" title="创建自定义的AuthenticationManager，管理自己的DetailsService"></a>创建自定义的<code>AuthenticationManager</code>，管理自己的<code>DetailsService</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> * 创建自己的AuthenticationManager</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">    auth.userDetailsService(myUserDetailsService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将自定义的认证放到容器中，覆盖默认的"><a href="#将自定义的认证放到容器中，覆盖默认的" class="headerlink" title="将自定义的认证放到容器中，覆盖默认的"></a>将自定义的认证放到容器中，覆盖默认的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将自定义的认证暴露在工厂中 （加入到容器中去管理）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、在安全配置类中替换默认的拦截器"><a href="#三、在安全配置类中替换默认的拦截器" class="headerlink" title="三、在安全配置类中替换默认的拦截器"></a>三、在安全配置类中替换默认的拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//前后端分离，数据从json中提取</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin().loginPage(<span class="string">&quot;/loginPages&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable()</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将我们自定义的filter过滤器替换其中的某个过滤器(filter)</span></span><br><span class="line"><span class="comment">         *loginFilter() ---change---&gt; UsernamePasswordAuthenticationFilter</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    http.addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将我们自定义的filter过滤器替换其中的某个过滤器(filter)</p><p>loginFilter() —change—&gt; UsernamePasswordAuthenticationFilter</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解SpringSecurity认证</title>
      <link href="/post/5bc5875b.html"/>
      <url>/post/5bc5875b.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity-–-安全认证"><a href="#SpringSecurity-–-安全认证" class="headerlink" title="SpringSecurity – 安全认证"></a>SpringSecurity – 安全认证</h1><h3 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager)"></a>AuthenticationManager)</h3><p>在spring-security官网中认证是由<code>AuthenticationManager</code>接口来进行负责的，定义为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line">    Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>官方文档解释 :</p><p>尝试对传递 Authentication 的对象进行身份验证，如果成功，则返回完全填充 Authentication 的对象（包括授予的权限）。<br>必须 AuthenticationManager 履行以下有关例外情况的合同：<br>        如果帐户被禁用AuthenticationManager，则必须抛出 ，DisabledException并且可以测试此状态。<br>         如果帐户被锁定AuthenticationManager，则必须抛出 aLockedException，并且可以测试帐户锁定。<br>        如果提供不正确的凭据，则必须抛出 。 BadCredentialsException 虽然上述例外是可选AuthenticationManager 但必须 始终 测试凭据。<br>       应测试异常，如果适用，应按上述顺序抛出（即，如果帐户被禁用或锁定，则身份验证请求将立即被拒绝，并且不执行凭据测试过程）。这可以防止针对已禁用或锁定的帐户测试凭据。<br>形参:<br>身份验证 – 身份验证请求对象<br>返回值:<br>经过完全身份验证的对象，包括凭据<br>抛出:<br>AuthenticationException – 如果身份验证失败</p></blockquote><p>从官方文档我们就可以了解出： 如果</p><ul><li>返回 <code>Authentication</code> 表示认证成功</li><li>返回 抛出<code>AuthenticationException</code> 异常，表示认证失败。</li></ul><p><code>AuthenticationManager</code> 的主要实现类为<code> ProviderManager</code></p><p>​在 <code>ProviderManager</code> 中管理了众多 <code>AuthenticationProvider </code>实例。在一次完整的认证流程中，Spring Security 允许存在多个 <code>AuthenticationProvider</code> ，用来实现多种认证方式，这些 <code>AuthenticationProvider</code> 都是由 <code>ProviderManager</code> 进行统一管理的</p><h3 id="Authentication-—认证信息标记者"><a href="#Authentication-—认证信息标记者" class="headerlink" title="Authentication —认证信息标记者"></a>Authentication —认证信息标记者</h3><p><img src="/images/%E8%AE%A4%E8%AF%81001.png" alt="image-20230211164537431"></p><p>认证以及认证成功的信息主要是由 Authentication 的实现类进行保存的，其接口定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line">Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line">Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line">Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>getAuthorities </code> 获取用户权限信息</li><li><code>getCredentials </code>获取用户凭证信息，一般指密码</li><li><code>getDetails </code> 获取用户详细信息</li><li><code>getPrincipal </code> 获取用户身份信息，用户名、用户对象等</li><li><code>isAuthenticated</code>   用户是否认证成功</li></ul><p>它通过实现类封装了我们需要的用户的信息，我们则是通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) authentication.getPrincipal();</span><br><span class="line">System.out.println(<span class="string">&quot;获取username:&quot;</span> + user.getUsername());</span><br><span class="line">System.out.println(<span class="string">&quot;获取password:&quot;</span> + user.getPassword());</span><br></pre></td></tr></table></figure><p>来实现对用户信息的获取。</p><h3 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h3><blockquote><p> SecurityContextHolder 用来获取登录之后用户信息。Spring Security 会将登录用户数据保存在 Session 中。</p></blockquote><ol><li><p>Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。</p></li><li><p>当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。SecurityContextHolder 中的数据保存默认是通过ThreadLocal 来实现的，使用 ThreadLocal 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。</p></li><li><p>请求处理完毕后，Spring Security 会将 SecurityContextHolder 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。</p></li><li><p>释放线程</p></li></ol><blockquote><p>好处： 方便用户在 Controller、Service 层以及任何代码中获取当前登录用户数据</p></blockquote><p><strong>以上就是在安全认证时，最重要的几个接口</strong></p><h1 id="认证实现"><a href="#认证实现" class="headerlink" title="认证实现"></a>认证实现</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>web和security依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库和mybatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>thymeleaf 和 security 联合依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        springSecurity 和前端的交互--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据库和Mybatis配置"><a href="#数据库和Mybatis配置" class="headerlink" title="数据库和Mybatis配置"></a>数据库和Mybatis配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置thymeleaf的缓存</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># datasource </span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:security/mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">security.pojo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># log为了展现mybatis运行 sql 语句</span></span><br><span class="line"><span class="attr">logging.level.com.security</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="自定义配置MVC层"><a href="#自定义配置MVC层" class="headerlink" title="自定义配置MVC层"></a>自定义配置MVC层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/loginPages&quot;</span>).setViewName(<span class="string">&quot;loginPage&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要配置了常用的公共视图跳转资源的接口，减少了controller层的代码量</p><h2 id="自定义配置Security"><a href="#自定义配置Security" class="headerlink" title="自定义配置Security"></a>自定义配置Security</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="comment">//配置资源...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="void-configure-WebSecurity-web"><a href="#void-configure-WebSecurity-web" class="headerlink" title="void configure(WebSecurity web)"></a>void configure(WebSecurity web)</h3><blockquote><p> 覆盖此方法以配置 WebSecurity。</p><p>​例如，如果您希望忽略某些请求。Spring Security将忽略此方法中指定的端点，这意味着它不会保护它们免受CSRF，XSS，点击劫持等的侵害。相反，如果要保护终结点免受常见漏洞的影响，请参阅 configure(HttpSecurity) 和 HttpSecurity.authorizeRequests 配置方法。</p></blockquote><h3 id="void-configure-HttpSecurity-http-—认证主要配置"><a href="#void-configure-HttpSecurity-http-—认证主要配置" class="headerlink" title="void configure(HttpSecurity http) —认证主要配置"></a>void configure(HttpSecurity http) —认证主要配置</h3><blockquote><p>重写此方法以配置 HttpSecurity.通常，<strong>子类不应通过调用 super 来调用此方法</strong>，因为它可能会覆盖其配置。默认配置为：<br>       http.authorizeRequests().anyRequest().authenticated().and().formLogin().and().httpBasic();</p><p>可以在此处指定任何需要防御常见漏洞的终结点，包括公共终结点。有关公共终结点的更多详细信息，请参阅 HttpSecurity.authorizeRequests 和“permitAll（）”授权规则。<br>形参:<br>HTTP – HttpSecurity 要修改的<br>抛出:<br>Exception – 如果发生错误</p></blockquote><ul><li>permitAll() 代表放行该资源,该资源为公共资源 无需认证和授权可以直接访问</li><li>anyRequest().authenticated() 代表所有请求,必须认证之后才能访问</li><li>formLogin() 代表开启表单认证</li></ul><h2 id="注意-放行资源必须放在所有认证请求之前"><a href="#注意-放行资源必须放在所有认证请求之前" class="headerlink" title="注意: 放行资源必须放在所有认证请求之前!"></a>注意: 放行资源必须放在所有认证请求之前!</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//认证</span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .mvcMatchers(&quot;/index&quot;).permitAll()</span><br><span class="line">            .mvcMatchers(&quot;/loginPages&quot;).permitAll()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin().loginPage(&quot;/loginPages&quot;)</span><br><span class="line">            .loginProcessingUrl(&quot;/doLogin&quot;)</span><br><span class="line">            .usernameParameter(&quot;username&quot;)</span><br><span class="line">            .passwordParameter(&quot;password&quot;)</span><br><span class="line">            .defaultSuccessUrl(&quot;/index&quot;)</span><br><span class="line">            //.successForwardUrl(&quot;/index&quot;)</span><br><span class="line">            //.failureUrl(&quot;/loginPages&quot;)</span><br><span class="line">            // .failureForwardUrl(&quot;/loginPages&quot;)</span><br><span class="line">            //.successHandler(new MyAuthenticationSuccessHandler()) //前后端分离的处理方式</span><br><span class="line">            .failureHandler(new FailureHandler())</span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .invalidateHttpSession(true)        //默认删除session会话</span><br><span class="line">            .clearAuthentication(true)          // 默认清楚认证标记</span><br><span class="line">            .logoutSuccessUrl(&quot;/loginPages&quot;)</span><br><span class="line">            .logoutSuccessHandler(new MyLogout())       //前后端分离注销成功的处理</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="各个方法的详细说明"><a href="#各个方法的详细说明" class="headerlink" title="各个方法的详细说明"></a>各个方法的详细说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> .and()</span><br><span class="line">.logout()</span><br><span class="line">.invalidateHttpSession(<span class="literal">true</span>)        <span class="comment">//默认删除session会话</span></span><br><span class="line">.clearAuthentication(<span class="literal">true</span>)          <span class="comment">// 默认清楚认证标记</span></span><br><span class="line">.logoutSuccessUrl(<span class="string">&quot;/loginPages&quot;</span>)</span><br><span class="line">.logoutSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyLogout</span>())       <span class="comment">//前后端分离注销成功的处理</span></span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><ul><li><strong>通过 logout() 方法开启注销配置</strong></li><li><strong>logoutUrl 指定退出登录请求地址，默认是 GET 请求，路径为 <code>/logout</code></strong></li><li><strong>invalidateHttpSession 退出时是否是 session 失效，默认值为 true</strong></li><li><strong>clearAuthentication 退出时是否清除认证信息，默认值为 true</strong></li><li><strong>logoutSuccessUrl 退出登录时跳转地</strong>址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">.usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">.passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br></pre></td></tr></table></figure><p>一般来讲，我们用户完成输入，表单进行提交时都需要与security中的方法进行匹配</p><p>默认的loginProcessingUrl为<code>login</code>   、 usernameParameter 为 <code>username</code>  、passwordParameter 为 <code>password</code></p><p>因此我们可以通过修改其中的值，来匹配我们自己的接口，及其属性value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">*  .anyRequest().authenticated()</span><br><span class="line">*  下面的所有请求都是需要认证之后的</span><br><span class="line">*</span><br><span class="line">*  .formLogin()</span><br><span class="line">*  开启表单认证（value为登录页面）</span><br><span class="line">*</span><br><span class="line">*  .formLogin().loginPage(<span class="string">&quot;/loginPages&quot;</span>)</span><br><span class="line">*  用于覆盖默认的登录页面 ，“/loginPages”为一个请求接口</span><br><span class="line">*</span><br><span class="line">*  .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">*  用来处理登录请求的url</span><br><span class="line">    </span><br><span class="line">*  .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">*  默认成功地址， 是一个重定向，</span><br><span class="line">*  比如之前打开/hello请求，但是它跳转到了login，登录完成后</span><br><span class="line">*  如果使用的是defaultSuccessUrl ，那么他依然会跳转至/hello请求</span><br><span class="line">    </span><br><span class="line">*   .successForwardUrl(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">*    成功跳转路径， 始终跳转到指定的请求， 比如之前打开/hello请求，但是它跳转到了login，登录完成后</span><br><span class="line">*    如果使用的是上面这个successForwardUrl，那么他就会优先跳转至指定的index请求，而不是/hello</span><br><span class="line">*</span><br><span class="line">*  .failureForwardUrl(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">*   登录失败跳转路径 ,返回的错误信息是在request作用域中</span><br><span class="line">*     展示错误信息 ：th:text=<span class="string">&quot;$&#123;SPRING_SECURITY_LAST_EXCEPTION&#125;&quot;</span>&gt;</span><br><span class="line">*</span><br><span class="line">* .failureUrl()</span><br><span class="line">*   登录失败跳转路径 ,返回的错误信息是在session作用域中</span><br><span class="line">*   展示错误信息 th:text=<span class="string">&quot;$&#123;session.SPRING_SECURITY_LAST_EXCEPTION&#125;&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">*   .and().csrf().disable();</span><br><span class="line">*   关闭跨站请求保护，为了测试</span><br></pre></td></tr></table></figure><p>​ 一般来讲 ， <code>.anyRequest().authenticated()</code> 后面配置的资源&#x2F;请求 ， 他们都是需要实现认证才能被访问的</p><p>所以，我们通常将公共资源放置他之前, 然后用permitAll() 来过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.mvcMatchers(<span class="string">&quot;/index&quot;</span>).permitAll()</span><br><span class="line">.mvcMatchers(<span class="string">&quot;/loginPages&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure><h3 id="void-setApplicationContext-ApplicationContext-context"><a href="#void-setApplicationContext-ApplicationContext-context" class="headerlink" title="void setApplicationContext(ApplicationContext context)"></a>void setApplicationContext(ApplicationContext context)</h3><p>作用： 设置应用上下文</p><h3 id="public-AuthenticationManager-authenticationManagerBean"><a href="#public-AuthenticationManager-authenticationManagerBean" class="headerlink" title="public AuthenticationManager authenticationManagerBean()"></a>public AuthenticationManager authenticationManagerBean()</h3><p>如果我们想要自己设置userDetailsService认证 , 我们就可以通过重写<code>protected void configure(AuthenticationManagerBuilder builder)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    builder.userDetailsService(userDetailsService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来设置我们自己定义的service接口，然后注入到容器中，等待被调用</p><blockquote><p>重写此方法以将 AuthenticationManager 要公开的 from configure(AuthenticationManagerBuilder) 作为 Bean 公开。例如：<br>       @Bean(name name&#x3D;”myAuthenticationManager”)<br>       @Override<br>       public AuthenticationManager authenticationManagerBean() throws Exception {<br>           return super.authenticationManagerBean();<br>       }</p><p>返回值:<br>这 AuthenticationManager<br>抛出:<br>Exception</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//将自定义的认证暴露在工厂中 （加入到容器中去管理）</span><br><span class="line">@Override</span><br><span class="line">@Bean</span><br><span class="line">public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class="line">    return super.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserDetailsService-userDetailsServiceBean"><a href="#UserDetailsService-userDetailsServiceBean" class="headerlink" title="UserDetailsService userDetailsServiceBean()"></a>UserDetailsService userDetailsServiceBean()</h3><p>重写自己的userDetailsService（）然后通过上面的<code>authenticationManagerBean</code>，将自己重写的serivce注入到容器中，作为公开的bean</p><blockquote><p> 重写此方法以将 UserDetailsService 创建自 configure(AuthenticationManagerBuilder) 公开为 Bean。通常，此方法只应执行以下覆盖：<br>       @Bean(name &#x3D; “myUserDetailsService”)<br>       &#x2F;&#x2F; any or no name specified is allowed<br>       @Override<br>       public UserDetailsService userDetailsServiceBean() throws Exception {<br>       return super.userDetailsServiceBean();<br>       }</p><p>要更改返回的实例，开发人员应改为更改userDetailsService()<br>返回值:<br>这 UserDetailsService<br>抛出:<br>Exception –<br>请参阅:<br>userDetailsService()</p></blockquote><h2 id="补充前后端分离实现"><a href="#补充前后端分离实现" class="headerlink" title="补充前后端分离实现"></a>补充前后端分离实现</h2><h3 id="配置登录成功"><a href="#配置登录成功" class="headerlink" title="配置登录成功"></a>配置登录成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogout</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;注销成功！&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;status&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result);</span><br><span class="line">        response.getWriter().println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前端Thymeleaf整合security实现"><a href="#前端Thymeleaf整合security实现" class="headerlink" title="前端Thymeleaf整合security实现"></a>前端Thymeleaf整合security实现</h3><p>外部资源：  xmlns:sec&#x3D;”<a href="http://www.thymeleaf.org/extras/spring-security">http://www.thymeleaf.org/extras/spring-security</a>“  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.otg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>获取用户详细信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.accountNonExpired&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.accountNonLocked&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.credentialsNonExpired&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="重写UserDetailsService"><a href="#重写UserDetailsService" class="headerlink" title="重写UserDetailsService"></a>重写<code>UserDetailsService</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserDetailsService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(user)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不正确！&quot;</span>);</span><br><span class="line">        <span class="comment">//存在的话 ， 赋予权限信息</span></span><br><span class="line">        List&lt;Role&gt; roles = userDao.getRolesByUid(user.getId());</span><br><span class="line">        user.setRoles(roles);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Dao层接口及其mapper"><a href="#实现Dao层接口及其mapper" class="headerlink" title="实现Dao层接口及其mapper"></a>实现Dao层接口及其mapper</h2><p>Dao</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    //根据用户名查询user</span><br><span class="line">    User loadUserByUsername(String username);</span><br><span class="line"></span><br><span class="line">    //根据用户id查询角色</span><br><span class="line">    List&lt;Role&gt; getRolesByUid(Integer uid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;security.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询单个loadUserByUsername--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;loadUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select id,</span><br><span class="line">               username,</span><br><span class="line">               password,</span><br><span class="line">               enabled,</span><br><span class="line">               accountNonExpired,</span><br><span class="line">               accountNonLocked,</span><br><span class="line">               credentialsNonExpired</span><br><span class="line">        from user</span><br><span class="line">        where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询指定行数据 ,表连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRolesByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Role&quot;</span>&gt;</span></span><br><span class="line">        select r.id,</span><br><span class="line">               r.name,</span><br><span class="line">               r.name_zh nameZh</span><br><span class="line">        from role r,</span><br><span class="line">             user_role ur</span><br><span class="line">        where r.id = ur.rid</span><br><span class="line">          and ur.uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>多表联查新思路</strong></p></blockquote><p><img src="/images/%E8%AE%A4%E8%AF%81002.png" alt="image-20230211174448919"></p><h2 id="用户登录数据获取-SecurityContextHolder"><a href="#用户登录数据获取-SecurityContextHolder" class="headerlink" title="用户登录数据获取 (SecurityContextHolder)"></a>用户登录数据获取 (SecurityContextHolder)</h2><p>Spring Security 会将登录用户数据保存在 Session 中。但是，为了使用方便,Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。</p><p>​SecurityContextHolder 中的数据保存默认是通过ThreadLocal 来实现的，使用 ThreadLocal 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。当登录请求处理完毕后，Spring Security 会将 SecurityContextHolder 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到SecurityContextHolder 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将SecurityContextHolder 中的数据清空。</p><p>​<strong>实际上 SecurityContextHolder 中存储是 SecurityContext，在 SecurityContext 中存储是 Authentication。</strong></p><p><img src="/images/%E8%AE%A4%E8%AF%81003.png" alt="image-20230211174448919"></p><ol><li><code>MODE THREADLOCAL</code>：这种存放策略是将 SecurityContext 存放在 ThreadLocal中，大家知道 Threadlocal 的特点是在哪个线程中存储就要在哪个线程中读取，这其实非常适合 web 应用，因为在默认情况下，一个请求无论经过多少 Filter 到达 Servlet，都是由一个线程来处理的。这也是 SecurityContextHolder 的默认存储策略，这种存储策略意味着如果在具体的业务处理代码中，开启了子线程，在子线程中去获取登录用户数据，就会获取不到。</li><li><code>MODE INHERITABLETHREADLOCAL</code>：这种存储模式适用于多线程环境，如果希望在子线程中也能够获取到登录用户数据，那么可以使用这种存储模式。</li><li><code>MODE GLOBAL</code>：这种存储模式实际上是将数据保存在一个静态变量中，在 JavaWeb开发中，这种模式很少使用到。</li></ol><h2 id="自定义认证数据源"><a href="#自定义认证数据源" class="headerlink" title="自定义认证数据源"></a>自定义认证数据源</h2><p><img src="/images/%E8%AE%A4%E8%AF%81004.png" alt="image-20230211180308076"></p><ul><li>发起认证请求，请求中携带用户名、密码，该请求会被<code>UsernamePasswordAuthenticationFilter</code> 拦截</li><li>在<code>UsernamePasswordAuthenticationFilter</code>的<code>attemptAuthentication</code>方法中将请求中用户名和密码，封装为<code>Authentication</code>对象，并交给<code>AuthenticationManager</code> 进行认证</li><li>认证成功，将认证信息存储到 SecurityContextHodler 以及调用记住我等，并回调 <code>AuthenticationSuccessHandler</code> 处理</li><li>认证失败，清除 SecurityContextHodler 以及 记住我中信息，回调 <code>AuthenticationFailureHandler</code> 处理</li></ul><h1 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h1><p>从上面分析中得知，AuthenticationManager 是认证的核心类，但实际上在底层真正认证时还离不开 ProviderManager 以及  AuthenticationProvider 。他们三者关系是样的呢？</p><ul><li><code>AuthenticationManager</code> 是一个认证管理器，它定义了 Spring Security 过滤器要执行认证操作。</li><li><code>ProviderManager</code> AuthenticationManager接口的实现类。Spring Security 认证时默认使用就是 ProviderManager。</li><li><code>AuthenticationProvider</code> 就是针对不同的身份类型执行的具体的身份认证。</li></ul><p> Spring Seourity 中，允许系统同时支持多种不同的认证方式，例如同时支持用户名&#x2F;密码认证、ReremberMe 认证、手机号码动态认证等，而<strong>不同的认证方式对应了不同的 AuthenticationProvider，所以一个完整的认证流程可能由多个 AuthenticationProvider 来提供。</strong></p><p>​<strong>多个 AuthenticationProvider 将组成一个列表，这个列表将由 ProviderManager 代理。</strong>换句话说，在ProviderManager 中存在一个 AuthenticationProvider 列表，在Provider Manager 中遍历列表中的每一个 AuthenticationProvider 去执行身份认证，最终得到认证结果。</p><p>​<strong>ProviderManager 本身也可以再配置一个 AuthenticationManager 作为 parent，</strong>这样当当前ProviderManager 认证失败之后，就可以进入到 parent 中再次进行认证。理论上来说，ProviderManager 的 parent 可以是任意类型的 AuthenticationManager，但是通常都是由ProviderManager 来扮演 parent 的角色，<strong>也就是 ProviderManager 是 ProviderManager 的 parent。</strong>（自己多理解几遍）</p><p>​<strong><code>ProviderManager</code>本身也可以有多个，多个ProviderManager 共用同一个 parent</strong>。有时，一个应用程序有受保护资源的逻辑组（例如，所有符合路径模式的网络资源，如&#x2F;api&#x2F;**），每个组可以有自己的专用 AuthenticationManager。通常，每个组都是一个ProviderManager，它们共享一个父级。然后，父级是一种 <code>全局</code>资源，作为所有提供者的后备资源。</p><p>根据上面的介绍，我们绘出新的 AuthenticationManager、ProvideManager 和 AuthentictionProvider 关系</p><p><img src="/images/%E8%AE%A4%E8%AF%81005.png" alt="image-20230211180915203"></p><p>数据源的获取。<code>默认情况下 AuthenticationProvider  是由 DaoAuthenticationProvider 类来实现认证的，在DaoAuthenticationProvider 认证时又通过 UserDetailsService 完成数据源的校验。</code></p><p><strong>总结: AuthenticationManager 是认证管理器，在 Spring Security 中有全局AuthenticationManager，也可以有局部AuthenticationManager。</strong></p><ul><li><strong>全局的AuthenticationManager用来对全x局认证进行处理</strong></li><li><strong>局部的AuthenticationManager用来对某些特殊资源认证处理。</strong></li></ul><p><strong>当然无论是全局认证管理器还是局部认证管理器都是由 ProviderManger 进行实现。 每一个ProviderManger中都代理一个AuthenticationProvider的列表，列表中每一个实现代表一种身份认证方式。认证时底层数据源需要调用 UserDetailService 来实现。</strong></p><h2 id="配置全局-AuthenticationManager"><a href="#配置全局-AuthenticationManager" class="headerlink" title="配置全局 AuthenticationManager"></a>配置全局 AuthenticationManager</h2><h3 id="默认的全局-AuthenticationManager"><a href="#默认的全局-AuthenticationManager" class="headerlink" title="默认的全局 AuthenticationManager"></a>默认的全局 AuthenticationManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(AuthenticationManagerBuilder builder)</span> &#123;</span><br><span class="line">    <span class="comment">//builder..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springboot 对 security 进行自动配置时自动在工厂中创建一个全局AuthenticationManager</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><ol><li>默认自动配置创建全局AuthenticationManager 默认找当前项目中是否存在自定义 UserDetailService 实例 自动将当前项目 UserDetailService 实例设置为数据源</li><li>默认自动配置创建全局AuthenticationManager 在工厂中使用时直接在代码中注入即可</li></ol><h3 id="自定义全局-AuthenticationManager"><a href="#自定义全局-AuthenticationManager" class="headerlink" title="自定义全局 AuthenticationManager"></a>自定义全局 AuthenticationManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder builder)</span> &#123;</span><br><span class="line">  <span class="comment">//builder ....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><ol><li>一旦通过 configure 方法自定义 AuthenticationManager实现 就回将工厂中自动配置AuthenticationManager 进行覆盖</li><li>一旦通过 configure 方法自定义 AuthenticationManager实现 需要在实现中指定认证数据源对象 UserDetaiService 实例</li><li>一旦通过 configure 方法自定义 AuthenticationManager实现 这种方式创建AuthenticationManager对象工厂内部本地一个 AuthenticationManager 对象 不允许在其他自定义组件中进行注入</li></ol><ul><li><p>用来在工厂中暴露自定义AuthenticationManager 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//1.自定义AuthenticationManager  推荐  并没有在工厂中暴露出来</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义AuthenticationManager: &quot;</span> + builder);</span><br><span class="line">        builder.userDetailsService(userDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//作用: 用来将自定义AuthenticationManager在工厂中进行暴露,可以在任何位置注入</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h1><ul><li>编程不良人</li><li>深入浅出Spring Security (王松)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Shiro</title>
      <link href="/post/8b105180.html"/>
      <url>/post/8b105180.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="Shiro介绍"><a href="#Shiro介绍" class="headerlink" title="Shiro介绍"></a>Shiro介绍</h2><p>​Apache Shiro（发音为“shee-roh”，日语中“城堡”的意思）是一个功能强大且易于使用的 Java 安全框架，可执行身份验证、授权、加密和会话管理，可用于保护任何应用程序 -从命令行应用程序、移动应用程序到最大的 Web 和企业应用程序。</p><p>Shiro 提供应用程序安全 API 来执行以下方面（我喜欢将它们称为应用程序安全的 4 个基石）：</p><ul><li><strong>身份验证 - 证明用户身份，通常称为用户“登录”。</strong></li><li><strong>授权-访问控制</strong></li><li><strong>密码学 - 保护或隐藏数据免遭窥探</strong></li><li><strong>会话管理 - 每个用户的时间敏感状态</strong></li></ul><p>Shiro 还支持一些辅助功能，例如 Web 应用程序安全性、单元测试和多线程支持，但这些功能的存在是为了加强上述四个主要问题。</p><h2 id="官网QuickStart"><a href="#官网QuickStart" class="headerlink" title="官网QuickStart"></a>官网QuickStart</h2><ol><li>Tutorial.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tutorial</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Tutorial.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;My First Apache Shiro Application&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取当前的用户对象Subject</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过当前用户拿到session</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="comment">//3. 判断当前的用户是被认证</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);  <span class="comment">//设置记住我</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);   <span class="comment">//执行了登录操作（暂时看不到 ）</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                <span class="comment">//未知的账户</span></span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="comment">//4. 测试当前用户是否有角色</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="comment">//粗粒度       （暂时为止）</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//细粒度</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这些权限都是在shiro.ini中的</span></span><br><span class="line"><span class="comment">         * admin = *</span></span><br><span class="line"><span class="comment">         * schwartz = lightsaber:*</span></span><br><span class="line"><span class="comment">         * goodguy = winnebago:drive:eagle5</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//是否拥有更高的权限</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们当前使用的shiro很多的用法都可以从<strong>QuickStart</strong>中了解到</p><ol start="2"><li>shiro.ini</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment"># roleName = perm1, perm2, ..., permN</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro重点依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--shiro 和前端的交互--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--基础开发依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--sql驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="项目实现背景介绍"><a href="#项目实现背景介绍" class="headerlink" title="项目实现背景介绍"></a>项目实现背景介绍</h3><pre><code> 我们日常使用的所有应用程序都存在着很多不安全的问题，为了解决这些问题，我们学习SpringSecurity、shiro等技术，为实现密码安全问题，我们会使用md5，md5盐值加密....一系列操作</code></pre><p>​在应用程序中，为了更好的盈利，我们会将普通用户和会员用户进行区分，同时，对于两者之间展现的页面，功能也会有所不同。那么如何实现这种不同</p><p>​本次练习项目就会通过shiro来实现这些操作</p><h3 id="功能实现介绍"><a href="#功能实现介绍" class="headerlink" title="功能实现介绍"></a>功能实现介绍</h3><ul><li>有 <code>vip1</code>身份的用户会展示有关vip1的界面，以及普通用户界面</li><li>有 <code>vip2</code>身份的用户会展示有关vip1的界面，以及普通用户界面</li><li>普通用户只会展示普通用户界面</li><li>登录、退出</li><li>提示用户名或者密码错误</li><li>….</li></ul><p><strong>数据库信息展示</strong></p><p><img src="/images/shiro001.png" alt="image"></p><p><strong>未登录界面展示</strong></p><p><img src="/images/shiro002.png" alt="image"></p><p><strong>登录及其错误提示</strong></p><p><img src="/images/shiro003.png" alt="image"></p><p><strong>vip1用户所在页面展示</strong></p><p><img src="/images/shiro004.png" alt="image"></p><p><strong>普通用户页面展示</strong></p><p><img src="/images/shiro005.png" alt="image"></p><h2 id="关键代码详解"><a href="#关键代码详解" class="headerlink" title="关键代码详解"></a>关键代码详解</h2><p><strong>首先，我们导入以来完成后，需要进行配置自定义配置shiro类，同时用<code>@Configuration</code>注解标注</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//自定义配置类，实现shiro的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shiroConfig</span>&#123;</span><br><span class="line"><span class="comment">//1. shiroFilterFactoryBean</span></span><br><span class="line">        <span class="comment">//2. DefaultWebSecurityManager 安全管理器（关联Realm）</span></span><br><span class="line">        <span class="comment">//3. 创建realm对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在shiro配置类中有三个内置类是十分重要的，他们分别是</p><ul><li><strong>ShiroFilterFactoryBean</strong></li><li><strong>DefaultWebSecurityManager</strong></li><li><strong>realm对象</strong></li></ul><p>他们决定了shiro的工作机制及流程</p><p><img src="/images/shiro006.png" alt="image"></p><p><strong>如图所示</strong></p><h4 id="Realm-："><a href="#Realm-：" class="headerlink" title="Realm ："></a>Realm ：</h4><p>​<strong>Realm ： 作为接收需要接受的安全数据的对象，起着与我们底层的数据交互的作用，它通过封装安全数据，然后放入在Spring的容器中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 创建realm对象,需要自定义类，然后交给spring托管（放到bean中）</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultWebSecurityManager"><a href="#DefaultWebSecurityManager" class="headerlink" title="DefaultWebSecurityManager :"></a>DefaultWebSecurityManager :</h4><p>​<strong>DefaultWebSecurityManager : 作为安全管理员，他的作用就是来关联我们放置在容器中Realm对象，同时，将自身再封装成为Bean交给spring容器来托管，然后等待ShiroFilterFactoryBean的调用。可以看出他是shiro的核心，相当于我们springMVC中的DispatcherServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. DefaultWebSecurityManager 安全管理器（关联Realm）</span></span><br><span class="line"><span class="comment">//@Qualifier(&quot;userRealm&quot;)中的内容就是下面第三步中的@Bean中name属性</span></span><br><span class="line"><span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//用securityManager来关联realm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="comment">//因为我们第三步已经将userRealm交给了spring接管，所以需要传参数来得到，而不是直接new</span></span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ShiroFilterFactoryBean-："><a href="#ShiroFilterFactoryBean-：" class="headerlink" title="ShiroFilterFactoryBean ："></a>ShiroFilterFactoryBean ：</h4><p>​**ShiroFilterFactoryBean ： 作用就是继续关联安全管理器DefaultWebSecurityManager，然后同时将自己也封装成bean **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. shiroFilterFactoryBean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//关联DefaultWebSecurityManager安全管理器</span></span><br><span class="line">    bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加内置过滤器</span></span><br><span class="line"><span class="comment">     * ● anon ： 无需认证即可访问</span></span><br><span class="line"><span class="comment">     * ● authc ：必须认证才能访问</span></span><br><span class="line"><span class="comment">     * ● user ：必须拥有记住我才能访问</span></span><br><span class="line"><span class="comment">     * ● perms  ： 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">     * ● role  ： 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//拦截的请求-----------------------------------</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    filterMap.put(<span class="string">&quot;/vipFirst&quot;</span>,<span class="string">&quot;perms[vip1]&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/vipSecond&quot;</span>,<span class="string">&quot;perms[vip2]&quot;</span>);</span><br><span class="line"></span><br><span class="line">    bean.setFilterChainDefinitionMap(filterMap);<span class="comment">//他的参数是从map集合中拿的,所以需要提前设置一个集合</span></span><br><span class="line">    <span class="comment">//如果没有权限，设置跳转页面(登录的请求)</span></span><br><span class="line">    bean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    <span class="comment">//未授权的请求</span></span><br><span class="line">    <span class="comment">//bean.setUnauthorizedUrl(&quot;&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------------------------</span></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他的拦截请求会通过一个map集合来操作，但是shiro也存在很多的内置过滤器 ， 通过这些过滤器，我们就可以实现请求过滤操作</p><pre><code> * ● anon ： 无需认证即可访问 * ● authc ：必须认证才能访问 * ● user ：必须拥有记住我才能访问 * ● perms  ： 拥有对某个资源的权限才能访问 * ● role  ： 拥有某个角色权限才能访问 </code></pre><p>​在<code>ShiroFilterFactoryBean</code>中我们可以做很多需要的操作比如：</p><ul><li><strong>请求的拦截</strong></li><li><strong>未授权用户页面的跳转</strong></li><li>….</li></ul><p>上述三者的执行顺序虽然是从：S - &gt; D - &gt; R  (简写)</p><p>但是我们在按逻辑写的时候确实 从 ： <strong>R- &gt; D -&gt; S</strong></p><h4 id="对外核心Subject"><a href="#对外核心Subject" class="headerlink" title="对外核心Subject"></a>对外核心Subject</h4><p>与应用程序的代码直接进行交互的对象就是Subject， 它代表的是当前用户，这个用户不仅仅值得是一个具体的人，而是与当前应用交互的任何事物。与Subject进行交互，他就会<strong>将所有的东西全都委托给我们的安全管理员（DefaultWebSecurityManager ），他才是真正的执行者。</strong></p><h4 id="对内核心Realm"><a href="#对内核心Realm" class="headerlink" title="对内核心Realm"></a>对内核心Realm</h4><p>为什么这里我将他作为对内核心，因为我们所有需要进行安全操作的事情都在他的实现类中完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 创建realm对象</span></span><br><span class="line">    <span class="comment">//实现的两个方法就是 springsecurity中授权和认证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"><span class="comment">//认证</span></span><br><span class="line">   <span class="comment">// ....</span></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如：</p><ul><li>对用户进行授权</li><li>认证</li><li>密码保护</li><li>…</li></ul><p><strong>认证</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt; 执行了认证方法&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前的令牌，及其其中的信息</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前的用户 , 封装用户的登录数据(在controller的登录方法中实现)</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.selectUser(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否与数据库中的相同，如果不相同</span></span><br><span class="line">        <span class="keyword">if</span> (!user.getUsername().equals(userToken.getUsername()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//就会抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> subject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">        <span class="comment">//密码认证, shrio来帮助我们实现</span></span><br><span class="line">        <span class="type">AuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user,user.getPassword(),user.getDept());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>授权</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt; 执行了授权方法&quot;</span>);</span><br><span class="line">        <span class="comment">//执行授权的功能</span></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">authorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//将用户所具有的权限存放在数据库中，然后登录时获取用户的全部信息</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//在用户进行认证时我们进行这个操作【AuthenticationInfo info = new SimpleAuthenticationInfo(user,user.getPassword(),user.getDept());】</span></span><br><span class="line">        <span class="comment">//通过他我们就可以拿到数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) subject.getPrincipal();</span><br><span class="line">        <span class="comment">//设置当前用户的权限</span></span><br><span class="line">        authorizationInfo.addStringPermission(user.getDept());</span><br><span class="line">        <span class="comment">//authorizationInfo.addRole(&quot;vip1&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity的使用</title>
      <link href="/post/98c0a732.html"/>
      <url>/post/98c0a732.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​<strong>在web开发中，安全是特别重要的！一般我们实现安全的手段有过滤器、拦截器…</strong></p><p><strong>我们使用SpringSecurity、shiro两个框架是为了更加简洁的实现安全。</strong></p><p>Spring Security 是一个功能强大且高度可定制的<strong>身份验证和访问控制</strong>框架。 它是保护基于 Spring 的应用程序的事实标准。</p><p>Spring Security 是一个专注于为 Java 应用程序提供<strong>身份验证和授权</strong>的框架。 与所有 Spring 项目一样，Spring Security 的真正强大之处在于它可以<strong>轻松扩展以满足自定义需求</strong></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p><img src="/images/security002.png" alt="image-20230206201554494"></p><h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//SpringSecurity配置依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--对Thymeleaf添加Spring Security标签支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--通过整合依赖，我们可以实现对前端页面也进行安全验证--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置实现"><a href="#配置实现" class="headerlink" title="配置实现"></a>配置实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启注解配置</span></span><br><span class="line"><span class="comment">//@EnableWebSecurity是Spring Security用于启用Web安全的注解。</span></span><br><span class="line"><span class="comment">// 典型的用法是该注解用在某个Web安全配置类上(实现了接口WebSecurityConfigurer或者继承自WebSecurityConfigurerAdapter)。</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">securityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="comment">//其中通过继承WebSecurityConfigurerAdapter从而实现相关的方法来实现需要的功能</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 目前可以直接使用</span></span><br><span class="line">    <span class="comment">//需要对密码进行安全加密，在springSecurity5中新增了很多加密格式</span></span><br><span class="line">    <span class="comment">//加密方式： passwordEncoder(new BCryptPasswordEncoder())</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/security001.png" alt="image"></p><h3 id="最主要的两个方法"><a href="#最主要的两个方法" class="headerlink" title="最主要的两个方法"></a>最主要的两个方法</h3><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>通过实现对相关用户的权限赋值，从而实现不同权限展现出来的东西也不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 目前可以直接使用</span></span><br><span class="line">    <span class="comment">//需要对密码进行安全加密，防止反编译破解密码在springSecurity5中新增了很多加密格式</span></span><br><span class="line">    <span class="comment">//加密方式： passwordEncoder(new BCryptPasswordEncoder())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置相关用户对应的权限roles</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;520010&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;tempUser&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;520010&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;rayce&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;520010&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//设置页面的访问权限，例如  /所有人都可以访问</span></span><br><span class="line">    <span class="comment">//其他的功能页，只有对应相关功能权限的人才能进行访问  。 比如：”/first1/**“路径下的所有页面只有有vip1权限的用户可以访问</span></span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/first1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/first2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/first3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制登录页面</span></span><br><span class="line">    <span class="comment">//loginPage                 需要跳转的登录页面。默认为login</span></span><br><span class="line"><span class="comment">//usernameParameter ：           在执行身份验证时查找用户名的 HTTP 参数。默认值为“username” 也可以自定义修改，但是必须和对应属性的name相同用户名参数 – 在执行身份验证时查找用户名的 HTTP 参数</span></span><br><span class="line">    <span class="comment">//password和username处理方法相同</span></span><br><span class="line">    <span class="comment">//successUrl                 转发身份验证成功处理程序</span></span><br><span class="line">    <span class="comment">//loginProcessingUrl        指定用于验证凭据的 URL。</span></span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/to/login&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止用户信息被获取</span></span><br><span class="line">    http.csrf().disable();</span><br><span class="line">    <span class="comment">//作用是记住我， 也就是保存cookie,当我们退出网站时，当时登录的用户不会退出，一般默认保存的cookie为两周</span></span><br><span class="line">    <span class="comment">//rememberMeParameter中的内容时点击记住我按钮的name属性</span></span><br><span class="line">    http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注销 。以及注销成功时需要跳转的请求的地址</span></span><br><span class="line">    http.logout().logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端页面使用security"><a href="#前端页面使用security" class="headerlink" title="前端页面使用security"></a>前端页面使用security</h3><p><strong>注意修改pom中的parent版本为3.0.4.RELESE，这样才会显示我们需要展示的效果，但是页面效果会大打折扣</strong></p><p><strong>添加命名空间</strong></p><p><strong>命名空间改为xmlns:sec&#x3D;”<a href="http://www.thymeleaf.org/extras/spring-security5">http://www.thymeleaf.org/extras/spring-security5</a>“</strong></p><p><img src="/images/security003.png" alt="image"></p><p>使用： </p><p><img src="/images/security004.png" alt="image"></p><h4 id="对于不同板块不同权限的人可见的设置"><a href="#对于不同板块不同权限的人可见的设置" class="headerlink" title="对于不同板块不同权限的人可见的设置"></a>对于不同板块不同权限的人可见的设置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;XXX1&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRoles(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    //需要展示的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;XXX2&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRoles(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    //需要展示的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;XXX3&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRoles(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    //需要展示的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis分页功能</title>
      <link href="/post/2666027e.html"/>
      <url>/post/2666027e.html</url>
      
        <content type="html"><![CDATA[<h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h3><p><strong>几种须知的条件</strong></p><p>​<code>limit index, pageSize</code></p><p>​    <code>index</code> ： 当前页的起始索引</p><p>​    <code>pageSize</code> ： 每页显示的数据条数</p><p>​    <code>pageNum</code> ： 当前页的页码</p><p>​    <code>count</code>  ：总记录数</p><p>   <code>totalPage</code> ：总页数  <code>totalPage = count / pageSize</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果从记录数 / 每页显示的数据 结果无法整除</span></span><br><span class="line"><span class="comment">//这种情况就是还有几条多余的数据无法显示，需要我们自己再添加一页进行显示</span></span><br><span class="line"><span class="keyword">if</span>(count % pagesize != <span class="number">0</span>)&#123;</span><br><span class="line">    totalPage += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> pageSize  = <span class="number">4</span> ，pageNum = <span class="number">1</span>， index= <span class="number">0</span>   limit <span class="number">0</span> ，<span class="number">4</span></span><br><span class="line"> pageSize  = <span class="number">4</span> ，pageNum = <span class="number">3</span>， index= <span class="number">8</span>   limit <span class="number">8</span> ，<span class="number">4</span></span><br><span class="line"> pageSize  = <span class="number">4</span> ，pageNum = <span class="number">6</span>， index= <span class="number">20</span>   limit <span class="number">20</span> ，<span class="number">4</span></span><br><span class="line"><span class="comment">//每页显示4条数据 ，如果当前页为1 ， 那么数据的索引就是从0开始 ,limit后面的数据就是从0 开始，页面显示数据为4条</span></span><br><span class="line"><span class="comment">//每页显示4条数据 ，如果当前页为3 ， 那么数据的索引就是从前两页显示完后的数据（需要显示的数据就是从9 - 12），也就是从2*4=8开始 ,limit后面的数据就是从8开始，页面显示数据为4条</span></span><br><span class="line"><span class="comment">//每页显示4条数据 ，如果当前页为6 ， 那么数据的索引就是从前两页显示完后的数据（需要显示的数据就是从21 - 24），也就是从5*4=20开始 ,limit后面的数据就是从20开始，页面显示数据为4条</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <code>list.forEach(System.out::println);</code>列表查询</p><h3 id="PageInfo中的属性"><a href="#PageInfo中的属性" class="headerlink" title="PageInfo中的属性"></a>PageInfo中的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageInfo</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageNum;  <span class="comment">//当前页的页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;<span class="comment">//每页显示的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;<span class="comment">//当前页显示的真实条数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startRow;<span class="comment">//当前页从第几行开始 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endRow;<span class="comment">//当前页从而几行结束</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total;<span class="comment">//总共有多少条数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pages;<span class="comment">//总共页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;<span class="comment">//存储的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> prePage;<span class="comment">//上一页的页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> nextPage;<span class="comment">//下一页的页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isFirstPage;<span class="comment">//是否为第一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isLastPage;<span class="comment">///是否为最后一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> hasPreviousPage;<span class="comment">//是否有上一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> hasNextPage;<span class="comment">//是否有下一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> navigatePages;<span class="comment">//当前导航分页的页码数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] navigatepageNums;<span class="comment">//导航分页的总页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> navigateFirstPage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> navigateLastPage;</span><br></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>开启分页显示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list/&#123;pageNum&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pageStart</span><span class="params">(<span class="meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum, Model model)</span>&#123;</span><br><span class="line">    PageInfo&lt;employee&gt; page = employeeService.Page(pageNum);</span><br><span class="line">    List&lt;employee&gt; list = page.getList();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在service层中<strong>开启分页以及获取数据</strong>，然后将数据回显到controller层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageInfo&lt;employee&gt; <span class="title function_">Page</span><span class="params">(Integer pageNum)</span> &#123;</span><br><span class="line">    <span class="comment">//开启分页功能，每页显示8条数据</span></span><br><span class="line">    PageHelper.startPage(pageNum,<span class="number">8</span>);</span><br><span class="line">    List&lt;employee&gt; list = EmpMapper.selectAll();</span><br><span class="line">    <span class="keyword">for</span>(employee li : list)&#123;</span><br><span class="line">        <span class="type">dept</span> <span class="variable">dept</span> <span class="operator">=</span> DeptMapper.selectByPrimaryKey(li.getDeptId());</span><br><span class="line">        li.setDep(dept);</span><br><span class="line">    &#125;</span><br><span class="line">    PageInfo&lt;employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--分页的相关功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断是否有前一页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/list/1&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/list/&#x27; + $&#123;page.prePage&#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示需要展示的页码范围 ，通过navigatepage 来进行设置范围--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">&quot;num : $&#123;page.navigatepageNums&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>  <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum==num&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/list/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;[&#x27;+$&#123;num&#125;+&#x27;]&#x27;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#d51313;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>  <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum!=num&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/list/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;num&#125; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断是否有下一页数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasNextPage&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/list/&#x27;+$&#123;page.nextPage&#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/list/&#x27;+$&#123;page.pages&#125;&#125;&quot;</span>&gt;</span>末页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过超链接发送请求的参数，然后通过与controller请求映射进行匹配，从而将请求发送至后端来处理</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github上传本地项目</title>
      <link href="/post/c65f430d.html"/>
      <url>/post/c65f430d.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-首先你需要一个github账号，所以还没有的话先去注册吧！"><a href="#1-首先你需要一个github账号，所以还没有的话先去注册吧！" class="headerlink" title="1. 首先你需要一个github账号，所以还没有的话先去注册吧！"></a>1. 首先你需要一个github账号，所以还没有的话先去注册吧！</h3><p><a href="https://github.com/">https://github.com/</a></p><p>我们使用git需要先安装git工具，这里给出下载地址，下载后一路（傻瓜式安装）直接安装即可：</p><p><a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a></p><h3 id="2-登陆后，进入Github首页，点击New-repository新建一个项目"><a href="#2-登陆后，进入Github首页，点击New-repository新建一个项目" class="headerlink" title="2. 登陆后，进入Github首页，点击New repository新建一个项目"></a>2. 登陆后，进入Github首页，点击New repository新建一个项目</h3><p><img src="/images/1620.png" alt="img"></p><h3 id="3-填写相应信息后点击create-repository即可"><a href="#3-填写相应信息后点击create-repository即可" class="headerlink" title="3. 填写相应信息后点击create repository即可"></a>3. 填写相应信息后点击create repository即可</h3><p><strong>Repository name: 仓库名称（输入名字，最好不要使用中文）</strong></p><p><strong>Description(可选): 仓库描述介绍</strong></p><p><strong>Public, Private : 仓库权限（公开共享，私有或指定合作者）</strong></p><p><strong>Initialize this repository with a README: 添加一个README.md</strong></p><p><strong>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore</strong></p><p><strong>license: 证书类型，对应生成文件LICENSE</strong></p><p><img src="/images/1620-1676610778736-3.png" alt="img"></p><h3 id="4-创建成功以后，界面如下，copy这个地址备用。"><a href="#4-创建成功以后，界面如下，copy这个地址备用。" class="headerlink" title="4. 创建成功以后，界面如下，copy这个地址备用。"></a>4. 创建成功以后，界面如下，<strong>copy这个地址备用</strong>。</h3><p><img src="/images/1620-1676610787206-6.png" alt="img"></p><h3 id="5-接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git-Gui-Here-Git-Bash-Here-这里我们选择Git-Bash-Here，进入如下界面，Test-Bluetooth即为我的项目名。"><a href="#5-接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git-Gui-Here-Git-Bash-Here-这里我们选择Git-Bash-Here，进入如下界面，Test-Bluetooth即为我的项目名。" class="headerlink" title="5. 接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入如下界面，Test_Bluetooth即为我的项目名。"></a>5. 接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为<code>Git Gui Here</code>,<code>Git Bash Here</code>,这里我们选择Git Bash Here，进入如下界面，Test_Bluetooth即为我的项目名。</h3><p><img src="/images/1620-1676610796422-9.png" alt="img"></p><h3 id="6-接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地"><a href="#6-接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地" class="headerlink" title="6. 接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地"></a>6. 接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地</h3><p><code>git clone XXX（XXXX为替换成你之前复制的地址）</code></p><p><img src="/images/1620-1676610807358-12.png" alt="img"></p><h3 id="7-这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都剪切到那个新多出的文件夹下，"><a href="#7-这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都剪切到那个新多出的文件夹下，" class="headerlink" title="7. 这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都剪切到那个新多出的文件夹下，"></a>7. 这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们<strong>把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都剪切到那个新多出的文件夹下</strong>，</h3><p><img src="/images/1620-1676610858852-27.png" alt="img"></p><h3 id="8-接着继续输入命令-cd-Test，进入Test文件夹"><a href="#8-接着继续输入命令-cd-Test，进入Test文件夹" class="headerlink" title="8. 接着继续输入命令 cd Test，进入Test文件夹"></a>8. 接着继续输入命令<code> cd Test</code>，进入Test文件夹</h3><p><img src="/images/1620-1676610816357-15.png" alt="img"></p><h3 id="9-接下来依次输入以下代码即可完成其他剩余操作："><a href="#9-接下来依次输入以下代码即可完成其他剩余操作：" class="headerlink" title="9. 接下来依次输入以下代码即可完成其他剩余操作："></a>9. 接下来依次输入以下代码即可完成其他剩余操作：</h3><p><code>git add *    </code>（注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）</p><p><code>git commit  -m  &quot;提交信息&quot; </code> （注：“提交信息”里面换成你需要，如“first commit”）</p><p><code>git push -u origin main  </code> （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）</p><p><img src="/images/1620-1676610825349-18.png" alt="img"></p><p><img src="/images/1620-1676610834957-21.png" alt="img"></p><p><img src="/images/1620-1676610847575-24.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合数据库</title>
      <link href="/post/510d2824.html"/>
      <url>/post/510d2824.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot整合数据库"><a href="#SpringBoot整合数据库" class="headerlink" title="SpringBoot整合数据库"></a>SpringBoot整合数据库</h2><p><img src="/images/%E6%95%B4%E5%90%88%E6%95%B0%E6%8D%AE%E5%BA%93001.png" alt="image-20230126173115369"></p><p><strong>必须导入的依赖：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mysql驱动--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.32&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>如果用mybatis的话就用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>如果是自己实现的话就用jdbc的依赖</p><h3 id="配置数据库的信息"><a href="#配置数据库的信息" class="headerlink" title="配置数据库的信息"></a>配置数据库的信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.url= jdbc:mysql://localhost:3306/boot</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>将上述的配置整合后SpringBoot就会自动生成DataSource类 ，就可以直接用</strong>  </p><h4 id="springBoot集成jdbc的所有属性方法（源码中JdbcTemplate类）"><a href="#springBoot集成jdbc的所有属性方法（源码中JdbcTemplate类）" class="headerlink" title="springBoot集成jdbc的所有属性方法（源码中JdbcTemplate类）"></a>springBoot集成jdbc的所有属性方法（源码中JdbcTemplate类）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class JdbcTemplate extends JdbcAccessor implements JdbcOperations &#123;</span><br><span class="line">    private static final String RETURN_RESULT_SET_PREFIX = &quot;#result-set-&quot;;</span><br><span class="line">    private static final String RETURN_UPDATE_COUNT_PREFIX = &quot;#update-count-&quot;;</span><br><span class="line">    private boolean ignoreWarnings = true;</span><br><span class="line">    private int fetchSize = -1;</span><br><span class="line">    private int maxRows = -1;</span><br><span class="line">    private int queryTimeout = -1;</span><br><span class="line">    private boolean skipResultsProcessing = false;</span><br><span class="line">    private boolean skipUndeclaredResults = false;</span><br><span class="line">    private boolean resultsMapCaseInsensitive = false;</span><br><span class="line"></span><br><span class="line">    public JdbcTemplate() &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相关功能就可以通过jdbcTemplate实现</p><p><img src="/images/%E6%95%B4%E5%90%88%E6%95%B0%E6%8D%AE%E5%BA%93002.png" alt="image-20230126173439037"></p><p><strong>通过原生的JDBC查询数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class JDBCController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/test01&quot;)</span><br><span class="line">    public String testJDBC()&#123;</span><br><span class="line">        String sql = &quot;select * from employee&quot;;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        for (Map map : maps)&#123;</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;maps&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><p>在springBoot的<strong>application.properties文件中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:com.demo.mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package=com.demo.pojo</span><br><span class="line"># 开启下划线与驼峰命名的转换</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合MyBatis"><a href="#SpringBoot整合MyBatis" class="headerlink" title="SpringBoot整合MyBatis"></a>SpringBoot整合MyBatis</h3><h4 id="连接信息及其相关依赖"><a href="#连接信息及其相关依赖" class="headerlink" title="连接信息及其相关依赖"></a>连接信息及其相关依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!--mysql驱动--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;8.0.32&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="逆向工程驱动"><a href="#逆向工程驱动" class="headerlink" title="逆向工程驱动"></a>逆向工程驱动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>逆向工程配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">targetRuntime: 执行生成的逆向工程的版本</span><br><span class="line">    MyBatis3Simple: 生成基本的CRUD（简洁版）</span><br><span class="line">    MyBatis3: 生成带条件的CRUD（终极版）</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!--数据库本地jar包--&gt;</span><br><span class="line">    &lt;classPathEntry location=&quot;D:\lib\mysql-connector-java-8.0.29.jar&quot;/&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3Simple&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--suppressAllComments 设置为true 则不再生成注释--&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 数据库的连接信息 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/boot&quot;</span><br><span class="line">                        userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;root&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- javaBean : 数据库表对应的实体类--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.demo.pojo&quot; targetProject=&quot;.\src\main\java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SQL映射文件 : 与Mapper接口对应  --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.demo.mapper&quot; targetProject=&quot;.\src\main\resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- Mapper接口 :实现相关功能的接口 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage=&quot;com.demo.mapper&quot; targetProject=&quot;.\src\main\java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 逆向工程的表 与 需要创建的类名 --&gt;</span><br><span class="line">        &lt;!-- tableName 设置为*号，可以对应所有表，此时可以不写domainObjectName --&gt;</span><br><span class="line">        &lt;!-- domainObjectName属性指定 生成出来的实体类的类名 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;employee&quot; domainObjectName=&quot;employee&quot;/&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%95%B4%E5%90%88%E6%95%B0%E6%8D%AE%E5%BA%93003.png" alt="image-20230126173602290"></p><p>通过<strong>generator:generate</strong>即可生成</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目复盘</title>
      <link href="/post/68cfefb7.html"/>
      <url>/post/68cfefb7.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot项目复盘"><a href="#SpringBoot项目复盘" class="headerlink" title="SpringBoot项目复盘"></a>SpringBoot项目复盘</h1><h2 id="项目起始"><a href="#项目起始" class="headerlink" title="项目起始"></a>项目起始</h2><ol><li><strong>确定数据库中的表、主键、各个字段及其代表的含义；确立好表与表之间的关联关系；</strong> （规范好字段的命名规则）**</li><li>按照数据库中表及其字段创建实体类及其属性；<strong>规范好命名规则</strong></li><li>前端确定好页面长什么样，数据以什么格式交互</li><li>导入需要的各种依赖，以及<strong>做好自定义配置</strong></li><li>准备好自己的后台模板，开始实现功能</li></ol><h2 id="实现各个功能"><a href="#实现各个功能" class="headerlink" title="实现各个功能"></a>实现各个功能</h2><h3 id="登录实现"><a href="#登录实现" class="headerlink" title="登录实现"></a>登录实现</h3><ol><li><p>在form表单中实现对账号、密码的输入。通过<code>th:action=&quot;@&#123;/user/login&#125;&quot;</code>将表单数据提交至controller层中</p></li><li><p>在controller层通过匹配方法上的请求映射为<code>@RequestMapping(&quot;/user/login&quot;)</code>的方法。</p></li><li><p>在该方法中实现好对password的判断、是否username为空、username输入有误如何提示、数据如何回显至index页面….</p></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">public String <span class="built_in">login</span>(Model model, HttpSession session,</span><br><span class="line">                    <span class="variable">@RequestParam</span>(<span class="string">&quot;username&quot;</span>) String username ,</span><br><span class="line">                    <span class="variable">@RequestParam</span>(<span class="string">&quot;password&quot;</span>) String password)&#123;</span><br><span class="line">    <span class="selector-tag">if</span>(username !=null &amp;&amp; <span class="string">&quot;123456&quot;</span>.<span class="built_in">equals</span>(password))&#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">&quot;username= &quot;</span> + username);</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">&quot;密码：&quot;</span> + password);</span><br><span class="line">        <span class="comment">//将值（用户名）传进来</span></span><br><span class="line">        <span class="selector-tag">session</span><span class="selector-class">.setAttribute</span>(<span class="string">&quot;loginUser&quot;</span>, username);    </span><br><span class="line">        <span class="selector-tag">return</span> &quot;<span class="selector-tag">redirect</span>:/<span class="selector-tag">main</span><span class="selector-class">.html</span>&quot;;</span><br><span class="line">    &#125;<span class="selector-tag">else</span>&#123;</span><br><span class="line">        <span class="selector-tag">model</span><span class="selector-class">.addAttribute</span>(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        <span class="selector-tag">return</span> &quot;<span class="selector-tag">index</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后台实现数据回显的操作"><a href="#后台实现数据回显的操作" class="headerlink" title="后台实现数据回显的操作"></a>后台实现数据回显的操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;color: red&quot;</span> th:text=<span class="string">&quot;<span class="variable">$&#123;msg&#125;</span>&quot;</span> th:<span class="keyword">if</span>=<span class="string">&quot;<span class="variable">$&#123;not #strings.isEmpty(msg)&#125;</span>&quot;</span>&gt;&lt;/p&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果后端数据判断显示为null或者密码错误。通过上述的语法就可以实现将数据回显出来，而不是一开始就显示数据</p><p>其中输入框提示的信息我们使用国际化的技术，能够实现页面的语言自由切换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--消息回显，登录失败的情况</span></span><br><span class="line"><span class="comment">如果msg的值为空才显示</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputEmail&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>[#&#123;login.username&#125;]<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputEmail&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputPassword&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>[#&#123;login.password&#125;]<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputPassword&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span>  <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.remeber&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2022-2023<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过<code>&lt;label for=&quot;inputEmail&quot; class=&quot;sr-only&quot;&gt;[#&#123;login.username&#125;]&lt;/label&gt;</code>显示提示语。</p><h4 id="在配置中开启国际化"><a href="#在配置中开启国际化" class="headerlink" title="在配置中开启国际化"></a>在配置中开启国际化</h4><ol><li><p>在<code>application.properties</code>配置文件中，通过<code>spring.messages.basename=i18n.login</code>开启我们配置的国际化配置</p></li><li><p>在自定义配置类中开启国际化方法</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往容器中注入组件</span></span><br><span class="line"><span class="comment">//自定义的国际化组件就会生效</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">LocaleResolver</span> <span class="title function_">localeResolver</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLocaleResolver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>config</code>包下创建<code>MyLocaleResolver</code>类实现国际化的接口</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title class_">LocaleResolver</span> &#123;</span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Locale</span> <span class="title function_">resolveLocale</span>(<span class="params">HttpServletRequest httpServletRequest</span>) &#123;</span><br><span class="line">        <span class="comment">//获取请求的语言参数</span></span><br><span class="line">        <span class="title class_">String</span> language = httpServletRequest.<span class="title function_">getParameter</span>(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="title class_">Locale</span> locale = <span class="title class_">Locale</span>.<span class="title function_">getDefault</span>(); <span class="comment">//如果没有就使用</span></span><br><span class="line">        <span class="comment">//如果请求的链接携带了国际化的参数</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title class_">StringUtils</span>.<span class="title function_">isEmpty</span>(language))&#123;</span><br><span class="line">            <span class="comment">//zh_CN</span></span><br><span class="line">            <span class="title class_">String</span>[] split = language.<span class="title function_">split</span>(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家 ，地区</span></span><br><span class="line">           locale = <span class="keyword">new</span> <span class="title class_">Locale</span>(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setLocale</span>(<span class="params">HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在resources文件夹下创建资源包<code>login.properties</code>、 <code>login_en_US.properties</code> 、 <code>login_zh_CN.properties</code>从而实现国际化的要求</li></ol><p><img src="/images/springBoot001.png" alt="image-20230125101827470"></p><h3 id="登录开启拦截器"><a href="#登录开启拦截器" class="headerlink" title="登录开启拦截器"></a>登录开启拦截器</h3><p>为了防止恶意的跳转，我们需要在用户未登录时自动拦截页面，使其跳转到登录页面，从而防止用户未登录就操作</p><ol><li>首先在<code>config</code>包下的<code>myConfig</code>类中添加拦截器配置</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加拦截器配置</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">addInterceptors</span>(<span class="params">InterceptorRegistry registry</span>) &#123;</span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    <span class="comment">//登录拦截器 ，拦截哪些选择 ，排除哪些选择</span></span><br><span class="line">    registry.<span class="title function_">addInterceptor</span>(<span class="keyword">new</span> <span class="title class_">LoginHandlerInterceptor</span>()).<span class="title function_">addPathPatterns</span>(<span class="string">&quot;/**&quot;</span>).<span class="title function_">excludePathPatterns</span>(<span class="string">&quot;/index.html&quot;</span>,</span><br><span class="line">                                                                                                      <span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/dist/**&quot;</span>,<span class="string">&quot;/docs.4.0/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span></span><br><span class="line">                                                                                                      ,<span class="string">&quot;/index.html(l=&#x27;zh_CN&#x27;)&quot;</span>,<span class="string">&quot;/index.html(l=&#x27;en_US&#x27;)&quot;</span>,<span class="string">&quot;/user/LogOut&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>config</code>包下同样创建<code>LoginHandlerInterceptor</code>类，使其实现拦截器接口。从而实现preHandle方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//登录成功之后将用户的信息session传过来</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//登录成功，获取用过户的session</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser == <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;没有权限，请登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="首页实现"><a href="#首页实现" class="headerlink" title="首页实现"></a>首页实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/docs/4.0/assets/img/favicons/favicon.icof&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dashboard Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://getbootstrap.com/docs/4.0/examples/dashboard/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/dist/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/docs/4.0/examples/dashboard/dashboard.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--顶部导航栏--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;common/common::topbar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;common/common::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 ml-sm-auto col-lg-10 pt-3 px-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-toolbar mb-2 mb-md-0&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group mr-2&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-outline-secondary&quot;</span>&gt;</span>Share<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-outline-secondary&quot;</span>&gt;</span>Export<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-outline-secondary dropdown-toggle&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-feather</span>=<span class="string">&quot;calendar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        This week</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;my-4&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myChart&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;380&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core JavaScript</span></span><br><span class="line"><span class="comment">================================================== --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Placed at the end of the document so the pages load faster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">window.jQuery || document.write(&#x27;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/vendor/jquery-slim.min.js&quot;</span>&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/js/vendor/popper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../static/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Icons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/feather-icons/dist/feather.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    feather.replace()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Graphs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/chart.js@2.7.1/dist/Chart.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ctx = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myChart&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myChart = <span class="keyword">new</span> <span class="title class_">Chart</span>(ctx, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">labels</span>: [<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">datasets</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: [<span class="number">15339</span>, <span class="number">21345</span>, <span class="number">18483</span>, <span class="number">24003</span>, <span class="number">23489</span>, <span class="number">24092</span>, <span class="number">12034</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lineTension</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">backgroundColor</span>: <span class="string">&#x27;transparent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderColor</span>: <span class="string">&#x27;#007bff&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderWidth</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pointBackgroundColor</span>: <span class="string">&#x27;#007bff&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">scales</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">yAxes</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">ticks</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">beginAtZero</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">display</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>通过后端登录成功将数据<code>return &quot;redirect:/main.html&quot;;</code>重定向main.html，但是main.html这个地址是我们虚构的首页地址，以防止登录成功将用户信息传入导致用户信息泄露。</p><p><strong>只需要在自定义配置中配置即可</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        配置根目录下的东西可以在这里配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">addViewControllers</span>(<span class="params">ViewControllerRegistry registry</span>) &#123;</span><br><span class="line">        registry.<span class="title function_">addViewController</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">setViewName</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.<span class="title function_">addViewController</span>(<span class="string">&quot;/index.html&quot;</span>).<span class="title function_">setViewName</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="comment">/*将/main.html作为一个跳板，放置用户信息被揭密，*/</span></span><br><span class="line">        registry.<span class="title function_">addViewController</span>(<span class="string">&quot;/main.html&quot;</span>).<span class="title function_">setViewName</span>(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过<code>registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;);</code>调用main.html就可以跳转至<code>dashboard</code>首页</p><h3 id="list页面实现"><a href="#list页面实现" class="headerlink" title="list页面实现"></a>list页面实现</h3><p>list页面作为数据显示的页面，它可以将我们后台传过来的数据通过<code>Thymeleaf</code>语法，将数据显示到后台</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">main</span> <span class="selector-tag">role</span>=&quot;<span class="selector-tag">main</span>&quot; <span class="selector-tag">class</span>=&quot;<span class="selector-tag">col-md-9</span> <span class="selector-tag">ml-sm-auto</span> <span class="selector-tag">col-lg-10</span> <span class="selector-tag">pt-3</span> <span class="selector-tag">px-4</span>&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">h2</span>&gt;<span class="selector-tag">Section</span> <span class="selector-tag">title</span>&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">a</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">btn</span> <span class="selector-tag">btn-sm</span> <span class="selector-tag">btn-success</span>&quot; <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;/<span class="selector-tag">to</span>/<span class="selector-tag">add</span>&#125;&quot;&gt;添加员工&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">table</span><span class="selector-tag">-responsive</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">table</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">table</span> <span class="selector-tag">table</span><span class="selector-tag">-striped</span> <span class="selector-tag">table</span><span class="selector-tag">-sm</span>&quot;&gt;</span><br><span class="line">      &lt;<span class="selector-tag">thead</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;<span class="selector-tag">id</span>&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;<span class="selector-tag">lastName</span>&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;<span class="selector-tag">Email</span>&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;<span class="selector-tag">gender</span>&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;<span class="selector-tag">department</span>&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;<span class="selector-tag">birth</span>&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">th</span>&gt;操作&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;/<span class="selector-tag">thead</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">tbody</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">tr</span> <span class="selector-tag">th</span>:<span class="selector-tag">each</span>=&quot;<span class="selector-tag">li</span> : $&#123;<span class="selector-tag">list</span>&#125;&quot;&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getId</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getLastName</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getEmail</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getGender</span>() == <span class="number">0</span> ? &#x27;女&#x27; : &#x27;男&#x27;&#125;&quot; &gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getDepartment</span>()<span class="selector-class">.getDepartmentName</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-id">#dates</span><span class="selector-class">.format</span>(li.<span class="built_in">getBirth</span>(),<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">          &lt;<span class="selector-tag">td</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">a</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">btn</span> <span class="selector-tag">btn-sm</span> <span class="selector-tag">btn-primary</span>&quot; <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;&#x27;/<span class="selector-tag">updateEmp</span>/&#x27;+$&#123;<span class="selector-tag">li</span><span class="selector-class">.getId</span>()&#125;&#125;&quot;&gt;修改&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">a</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">btn</span> <span class="selector-tag">btn-sm</span> <span class="selector-tag">btn-danger</span>&quot; <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;&#x27;/<span class="selector-tag">deleteEmp</span>/&#x27;+$&#123;<span class="selector-tag">li</span><span class="selector-class">.getId</span>()&#125;&#125;&quot;&gt;删除&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">          &lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/<span class="selector-tag">tbody</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">table</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">main</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后端通过用户点击员工管理</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">li</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">nav</span><span class="selector-tag">-item</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">a</span> <span class="selector-tag">th</span>:<span class="selector-tag">class</span>=&quot;$&#123;<span class="selector-tag">active</span>==&#x27;<span class="selector-tag">list</span><span class="selector-class">.html</span>&#x27; ? &#x27;<span class="selector-tag">nav</span><span class="selector-tag">-link</span> <span class="selector-tag">active</span>&#x27; :&#x27;<span class="selector-tag">nav</span><span class="selector-tag">-link</span>&#x27;&#125;&quot; <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;/<span class="selector-tag">list</span>&#125;&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">span</span> <span class="selector-tag">data-feather</span>=&quot;<span class="selector-tag">users</span>&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">        员工管理</span><br><span class="line">    &lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>，请求就会跳转至<code>controller</code>匹配相应的请求映射</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> <span class="title class_">EmployeeDao</span> employeeDao;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> <span class="title class_">DepartmentDao</span> departmentDao;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/list&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">list</span>(<span class="params">Model model</span>)&#123;</span><br><span class="line">    <span class="title class_">Collection</span>&lt;<span class="title class_">Employee</span>&gt; list = employeeDao.<span class="title function_">getAllEmployee</span>();</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后端通过Model将数据回显给list页面</p><p>在list页面。通过<code>Thymeleaf</code>语法<code>&lt;tr th:each=&quot;li : $&#123;list&#125;&quot;&gt;</code>将数据显示出来</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getId</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getLastName</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getEmail</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getGender</span>() == <span class="number">0</span> ? &#x27;女&#x27; : &#x27;男&#x27;&#125;&quot; &gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-tag">li</span><span class="selector-class">.getDepartment</span>()<span class="selector-class">.getDepartmentName</span>()&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">td</span> <span class="selector-tag">th</span>:<span class="selector-tag">text</span>=&quot;$&#123;<span class="selector-id">#dates</span><span class="selector-class">.format</span>(li.<span class="built_in">getBirth</span>(),<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)&#125;&quot;&gt;&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">td</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">a</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">btn</span> <span class="selector-tag">btn-sm</span> <span class="selector-tag">btn-primary</span>&quot; <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;&#x27;/<span class="selector-tag">updateEmp</span>/&#x27;+$&#123;<span class="selector-tag">li</span><span class="selector-class">.getId</span>()&#125;&#125;&quot;&gt;修改&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">a</span> <span class="selector-tag">class</span>=&quot;<span class="selector-tag">btn</span> <span class="selector-tag">btn-sm</span> <span class="selector-tag">btn-danger</span>&quot; <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;&#x27;/<span class="selector-tag">deleteEmp</span>/&#x27;+$&#123;<span class="selector-tag">li</span><span class="selector-class">.getId</span>()&#125;&#125;&quot;&gt;删除&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，我们请求就能转发过来，用户就能看到数据</p><p>同时在list页面，我们也会有实现curd的跳转键</p><h3 id="实现delete-和-update功能"><a href="#实现delete-和-update功能" class="headerlink" title="实现delete 和 update功能"></a>实现delete 和 update功能</h3><p>对于delete功能，这里没什么好说的，仅仅通过点击用户后面对应的标签，将要删除的员工的id作为请求参数传到后端即可<code>th:href=&quot;@&#123;&#39;/updateEmp/&#39;+$&#123;li.getId()&#125;&#125;&quot;</code>后端通过匹配请求映射将功能实现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/deleteEmp/&#123;id&#125;&quot;</span>)</span><br><span class="line">public String <span class="built_in">deleteEmp</span>(<span class="variable">@PathVariable</span>(<span class="string">&quot;id&quot;</span>)Integer id)&#123;</span><br><span class="line">    <span class="selector-tag">employeeDao</span><span class="selector-class">.deleteEmp</span>(id);</span><br><span class="line">    <span class="selector-tag">return</span> &quot;<span class="selector-tag">redirect</span>:/<span class="selector-tag">list</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现<strong>update功能</strong>相较于delete功能是比较麻烦的</p><p>同样需要将要修改的员工id作为请求参数传入后端<code>th:href=&quot;@&#123;&#39;/updateEmp/&#39;+$&#123;li.getId()&#125;&#125;&quot;</code>,然后后端通过查询，获取该员工的所有信息，然后通过<code>Model</code>将数据共享至update页面</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/updateEmp/&#123;id&#125;&quot;</span>)</span><br><span class="line">public String <span class="built_in">update</span>(Model model,<span class="variable">@PathVariable</span>(<span class="string">&quot;id&quot;</span>) Integer id)&#123;</span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">&quot;id==&quot;</span> + id);</span><br><span class="line">    <span class="selector-tag">Employee</span> <span class="selector-tag">employee</span> = <span class="selector-tag">employeeDao</span><span class="selector-class">.getEmployeeById</span>(id);</span><br><span class="line">    <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">&quot;emp == &quot;</span> + employee);</span><br><span class="line">    <span class="selector-tag">model</span><span class="selector-class">.addAttribute</span>(<span class="string">&quot;emp&quot;</span>,employee);</span><br><span class="line">    <span class="selector-tag">Collection</span>&lt;<span class="selector-tag">Department</span>&gt; <span class="selector-tag">departments</span> = <span class="selector-tag">departmentDao</span><span class="selector-class">.getDepartments</span>();</span><br><span class="line">    <span class="selector-tag">model</span><span class="selector-class">.addAttribute</span>(<span class="string">&quot;departments&quot;</span>,departments);</span><br><span class="line">    <span class="selector-tag">return</span> &quot;/<span class="selector-tag">updateEmp</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在updateEmp页面，需要将数据回显出来</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单提交--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/updateSucc&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.getLastName()&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.getEmail()&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Email&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.getGender()==1&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.getGender()==0&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;dept.getId()==emp.getDepartment().getId()&#125;&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;departments&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.getId()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birth&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">&quot;请输入生日&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 请记住我</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>通过隐藏域<code>&lt;input type=&quot;hidden&quot; name=&quot;id&quot; th:value=&quot;$&#123;emp.getId()&#125;&quot;&gt;</code>可以将后端传入的信息获取到</p></li><li><p>因为我们共享数据时是通过<code>model.addAttribute(&quot;emp&quot;,employee);</code>，所以在获取，然后在<code>&lt;input th:value=&quot;$&#123;emp.getLastName()&#125;&quot; type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;lastName&quot; name=&quot;lastName&quot; placeholder=&quot;请输入名字&quot;&gt;</code>中通过<code>th:value=&quot;$&#123;emp.getLastName()&#125;&quot;</code>就可以将数据显示到页面</p></li><li><p>对于复杂的比如department</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> class=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;department.id&quot;</span>&gt;</span><br><span class="line">            &lt;option th:selected=<span class="string">&quot;<span class="subst">$&#123;dept.getId()==emp.getDepartment().getId()&#125;</span>&quot;</span> th:<span class="keyword">each</span>=<span class="string">&quot;dept:<span class="subst">$&#123;departments&#125;</span>&quot;</span> th:text=<span class="string">&quot;<span class="subst">$&#123;dept.getDepartmentName()&#125;</span>&quot;</span> th:value=<span class="string">&quot;<span class="subst">$&#123;dept.getId()&#125;</span>&quot;</span>&gt;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/s</span>elect&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以先通过<code>deparment.id</code>获取全部的信息，然后通过匹配<code>emp.getDepartment().getId()</code>获取将表单展示出来。通过<code>th:value=&quot;$&#123;dept.getId()&#125;&quot;</code>将我们需要的数据显示到页面</p></li><li><p>然后通过请求form表单的<code>th:action=&quot;@&#123;/updateSucc&#125;&quot;</code>提交表单至后端.</p></li><li><p>后端通过请求映射匹配到相应的请求方法</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">&quot;/updateSucc&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">updateSuccess</span>(<span class="params">Employee employee</span>)&#123;</span><br><span class="line">    employeeDao.<span class="title function_">save</span>(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后进行修改，最后通过重定向将请求跳转至原来的页面</p><h3 id="add功能实现"><a href="#add功能实现" class="headerlink" title="add功能实现"></a>add功能实现</h3><p>用户通过点击添加员工将请求发送到后端，后端通过请求映射匹配到相应的请求方法，实现添加功能</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-success&quot;</span> th:href=<span class="string">&quot;@&#123;/to/add&#125;&quot;</span>&gt;添加员工&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/to/add&quot;)</span><br><span class="line">public String addEmp(Model model)&#123;</span><br><span class="line">    Collection&lt;Department&gt; <span class="attr">departments</span> = departmentDao.getDepartments()<span class="comment">;</span></span><br><span class="line">    model.addAttribute(&quot;departments&quot;,departments)<span class="comment">;</span></span><br><span class="line">    return &quot;addEmp&quot;<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后台页面与update页面类似</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14c8a813c0f04a00a7d8d2319ab49c91~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0541aa3f2a847568403c52f77450f12~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcd242b6d8444a1a9898f70ee519e14c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e766f35e7904c149a2c60cfbe140228~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8aeef91d255469189fb3a9a50099aaa~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccfedfaa03c74f30895709223ad378e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34faaef477d4415aa6488ee1530d8f35~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="国际化页面"><a href="#国际化页面" class="headerlink" title="国际化页面"></a>国际化页面</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86b16ade856b472684a98e6ea9009b58~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux任务调度与磁盘分区</title>
      <link href="/post/10966b47.html"/>
      <url>/post/10966b47.html</url>
      
        <content type="html"><![CDATA[<h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16bffb9f01764a97a5e1f58d8b9f8ccd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本用法</span></span><br><span class="line">crontab -e  <span class="comment">//编辑cortab的定时任务</span></span><br><span class="line">crontab -l   <span class="comment">// 查询crotab 任务</span></span><br><span class="line">crontab -r  <span class="comment">//删除档期那用户的所有crotab任务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/759af05e93f64413b441812fb748978f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速入门的代码演示</span></span><br><span class="line">rcontab -e</span><br><span class="line"><span class="comment">//输入完成就会进入编辑页，然后输入</span></span><br><span class="line">*<span class="regexp">/1 * * * * ls -l /</span>etc/ &gt;<span class="regexp">/tmp/</span>to.<span class="property">txt</span></span><br><span class="line"><span class="comment">//这句话的意思就是每分钟执行一次 【 ls -l /etc/ &gt; tmp/to.txt 】意思就是重定向到tmp下的to.txt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>特殊符号的说明</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24b5598f55104d3c9e4e19b1de81747d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/179d1d6d9ea84bc5bfc93a3ae8cecdb2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e795841fd2a44f191e6d0f2a9ef4b4a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>先写脚本</strong></li><li><strong>赋权限</strong></li><li><strong>设置调度</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64d60d852864420580cbce1fca73fc3e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关指令</span></span><br><span class="line">crontab -r   <span class="comment">//终止任务调度</span></span><br><span class="line">crontab -l <span class="comment">//列出当前有那些任务调度</span></span><br><span class="line">service crond restart  <span class="comment">//重启任务调度</span></span><br><span class="line"></span><br><span class="line">案例一 ： </span><br><span class="line">*<span class="regexp">/1 * * * *date &gt;&gt; /</span>tmp/mydate</span><br><span class="line"></span><br><span class="line">案例二：</span><br><span class="line">cal &gt;&gt; <span class="regexp">/home/my</span>cal</span><br><span class="line"></span><br><span class="line">打开该文件  ： cat mycal</span><br><span class="line"></span><br><span class="line">案例三：   </span><br><span class="line"></span><br><span class="line">./my.<span class="property">sh</span> <span class="comment">//创建文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbcbc4786092417da5df820bb5b235a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>案例二的三步骤：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2eb5899e70d24898830774e332f901c4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>案例三的步骤：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e21693de800d41299d2c3a19e4831d59~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="at定时调度"><a href="#at定时调度" class="headerlink" title="at定时调度"></a>at定时调度</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4d2e84988254ab3a2b3cb2e966fa17f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">at</span> 的命令格式</span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-attr">[选项]</span> <span class="selector-attr">[时间]</span></span><br><span class="line"><span class="selector-tag">Ctrl</span> + <span class="selector-tag">D</span> <span class="comment">//结束at命令的输入</span></span><br><span class="line"><span class="selector-tag">ps</span> <span class="selector-tag">-ef</span>  <span class="comment">//检查当前正在运行的所有进程</span></span><br><span class="line"><span class="selector-tag">ps</span> <span class="selector-tag">-ef</span>  | <span class="selector-tag">grep</span> <span class="selector-tag">atd</span>   <span class="comment">//过滤进程，查找所有进程中是否有atd进程</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流程-："><a href="#流程-：" class="headerlink" title="流程 ："></a>流程 ：</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/595275a10b3a490bbddae4643d21acf9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>Ctrl + D &#x2F;&#x2F;结束at命令的输入</strong></p><h3 id="at时间定义的方法"><a href="#at时间定义的方法" class="headerlink" title="at时间定义的方法"></a>at时间定义的方法</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4138b04bbd514285ac9c28ad63123875~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="at命令选项"><a href="#at命令选项" class="headerlink" title="at命令选项"></a>at命令选项</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/652720fb83f340e99c75bc08f91b83f3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="命令案例"><a href="#命令案例" class="headerlink" title="命令案例"></a>命令案例</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77e1d81eb11941c0b4edf008eb3912c4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例一 ： </span></span><br><span class="line">at 5pm + <span class="number">2</span> days</span><br><span class="line">at&gt; <span class="regexp">/bin/</span>ls /home&lt;<span class="variable constant_">EOT</span>&gt;<span class="comment">//at&gt;在上面的第二行执行完就可以显示出来</span></span><br><span class="line"><span class="comment">//输出完 /bin/ls /home 后就输入两次Ctrl+D 就会输出&lt;EOT&gt;然后输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例二：</span></span><br><span class="line">atq</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例三：</span></span><br><span class="line">at 5pm tomorrow</span><br><span class="line">at&gt; date &gt; <span class="regexp">/root/</span>date100.<span class="property">log</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//案例四：</span></span><br><span class="line">at now + 2minutes </span><br><span class="line">at&gt; date &gt; <span class="regexp">/root/</span>date200.<span class="property">log</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//案例五：</span></span><br><span class="line"><span class="comment">//输入atq 就可以查看当前的工作任务的编号</span></span><br><span class="line"><span class="comment">//然后输入atrm [编号]</span></span><br><span class="line">atrm <span class="number">2</span><span class="comment">//就可以删除当前工作任务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5dd512c19ff4bdb8c84bbaf7c4d5203~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="Linux磁盘分区、挂载"><a href="#Linux磁盘分区、挂载" class="headerlink" title="Linux磁盘分区、挂载"></a>Linux磁盘分区、挂载</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d3bfe4107494e2aa3a0095417423c89~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>示意图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d68840208214884baab7f6b4b399072~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="分区的规则（硬盘说明）"><a href="#分区的规则（硬盘说明）" class="headerlink" title="分区的规则（硬盘说明）"></a>分区的规则（硬盘说明）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13e68f58292542519079608b0cb6d391~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="显示硬盘"><a href="#显示硬盘" class="headerlink" title="显示硬盘"></a>显示硬盘</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsblk <span class="comment">//显示硬盘信息，设备挂载情况</span></span><br><span class="line">lsblk -f <span class="comment">//信息显示更清楚</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a62fa20bbdc44baba61acff7d2937822~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91dc0d58d2764466ac8e34285253531e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="分区、虚拟机增加硬盘步骤"><a href="#分区、虚拟机增加硬盘步骤" class="headerlink" title="分区、虚拟机增加硬盘步骤"></a>分区、虚拟机增加硬盘步骤</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40d0b53b696143968ab53bc3227283e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c12241fcb75f402983dd082ad6863ab4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03f30dca052b493f9e6f0bb87f50ef91~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bfd63d2f4044973880633bfc1af2057~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/017c0e7a04ba4565ba085426f0c4d242~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>修改文件</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ca88dcc8872418a9a7bd921e48673db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询磁盘容量等等</span></span><br><span class="line">df -h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77a25b65020d41d2a09f5f3f20b3b316~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db12bb1ac825491784f90cc602da55f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>案例： 查询&#x2F;opt目录的磁盘的占用情况 ，深度为1</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c4c75991327454ebea2678d6c90df50~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="磁盘情况-工作实用指令"><a href="#磁盘情况-工作实用指令" class="headerlink" title="磁盘情况-工作实用指令"></a>磁盘情况-工作实用指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/352dbfa4753244a5a35e8119d63fefb1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /opt  //将opt目录下的文件和目录显示出来</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l /opt | grep <span class="string">&quot;^-&quot;</span> //用正则表达式，只将普通文件列出来</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l /opt | grep <span class="string">&quot;^-&quot;</span> | <span class="built_in">wc</span> -l//统计文件的数目（只有文件，没有目录）</span><br><span class="line"></span><br><span class="line">//统计/opt下文件的个数， 包括子文件夹里的</span><br><span class="line"><span class="built_in">ls</span> -lR /opt //R代表递归，递归显示子目录</span><br><span class="line"></span><br><span class="line">//统计/opt下文件的个数， 包括子文件夹里的文件的个数</span><br><span class="line"><span class="built_in">ls</span> -lR /opt | grep <span class="string">&quot;^-&quot;</span> | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line">//统计/opt下目录的个数， 包括子文件夹里的文件的个数</span><br><span class="line"><span class="built_in">ls</span> -lR /opt | grep <span class="string">&quot;^d&quot;</span> | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//以树状显示目录</span><br><span class="line">//先安装tree指令</span><br><span class="line">yum install tree</span><br><span class="line">//然后使用</span><br><span class="line">tree /opt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85952c18e36f4172ada92cfb10aa59ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树题目合集</title>
      <link href="/post/5d5bac0d.html"/>
      <url>/post/5d5bac0d.html</url>
      
        <content type="html"><![CDATA[<h2 id="求二叉树是否相同？"><a href="#求二叉树是否相同？" class="headerlink" title="求二叉树是否相同？"></a>求二叉树是否相同？</h2><p>用递归法 ，传入左右两棵树的根节点 ，然后比较 left.left &#x3D;&#x3D; right.left; 以及 left.right &#x3D;&#x3D;right.right; </p><p>这是递归里面的内容</p><p>递归结束的条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> ; <span class="comment">// 这样的情况下就可以返回true了</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( p != <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( p == <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (p.val != q.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归的内容</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> isSameTree(p.left , q.left);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> isSameTree(p.right ,q.right);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> b1 &amp;&amp; b2;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求二叉树是否对称-？"><a href="#求二叉树是否对称-？" class="headerlink" title="求二叉树是否对称 ？"></a>求二叉树是否对称 ？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//这里我们用队列来实现，思路： </span></span><br><span class="line">        <span class="comment">//将左右子树分开，然后分别以左右为树比较</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isTrue(root.left , root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTrue</span><span class="params">(TreeNode left, TreeNode right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="literal">null</span> || right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left.val != right.val )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isTrue(left.left,right.right) &amp;&amp; isTrue(left.right , right.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求完全二叉树的节点数"><a href="#求完全二叉树的节点数" class="headerlink" title="求完全二叉树的节点数"></a>求完全二叉树的节点数</h2><p><strong>方法一 ：</strong> 最原始的方法， 用迭代法或者递归的方法将二叉树遍历完，得出节点的数量</p><p><strong>方法二 ：</strong> 只针对完全二叉树的解法</p><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若<strong>最底层为第 h 层，则该层包含 1~ 2^(h-1)  个节点</strong>。</p><p>按照这个完全二叉树的特征。我们就可以确定一个终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(leftDepth == rightDepth)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>&lt;&lt;leftDepth - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全二叉树只有两种情况</p><p><strong>情况一：</strong>就是满二叉树，<strong>情况二：</strong>最后一层叶子节点没有满。</p><ol><li>对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。</li><li>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674106862413-7552d938-46d9-44b8-bcbe-c563f721a309.png" alt="img"></p><p>所以说如果整棵树不是满二叉树的话，那么就递归他的左右孩子，直到递归到某棵子树 ，它（子树）是满二叉树， 那么就达到递归截至的条件 ，输出节点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">leftD</span> <span class="operator">=</span> root.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rightD</span> <span class="operator">=</span> root.right;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rD</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lD</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//初始化为0 是为了后面求指数方便</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//求左右子树的深度</span></span><br><span class="line">        <span class="keyword">while</span>(leftD != <span class="literal">null</span>)&#123;</span><br><span class="line">            leftD = leftD.left;</span><br><span class="line">            lD++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(rightD != <span class="literal">null</span>)&#123;</span><br><span class="line">            rightD = rightD.right;</span><br><span class="line">            rD++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//如果判断该树是满二叉树那么直接输出即可</span></span><br><span class="line">        <span class="keyword">if</span>(rD == lD)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; lD) - <span class="number">1</span>; <span class="comment">// 2^n - 1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继续递归，计算完左右子树的节点，然后再加上根节点;</span></span><br><span class="line">        lNum = countNodes(root.left);</span><br><span class="line">        rNum =  countNodes(root.right);</span><br><span class="line">        <span class="keyword">return</span> lNum + rNum + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结  ：对于这个二叉树来说，他没有遍历所有的节点，如果说一个节点的子树他是满二叉树，那么就只需要用2 &lt;&lt; n - 1这个公式就能算出这个子树的所有节点。</p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><strong>一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</strong></p><ul><li>二叉树节点的<strong>深度</strong>：指从根节点到该节点的最长简单路径边的条数。</li><li>二叉树节点的<strong>高度</strong>：指从该节点到叶子节点的最长简单路径边的条数。</li></ul><p><strong>求解高度用后序遍历 ， 求解深度用前序遍历</strong></p><p>【因为后序是根据左右孩子的高度，然后父节点再根据左右孩子节点的情况进行 + 1 &#x3D;&#x3D;&#x3D;》》》层层向上返回 】</p><p>【前序求解的深度 ，顺序是 [中左右]一直向下遍历，不向上返回结果。符合一直向下统计节点的深度 】</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674111658945-59839833-c730-47a2-adbc-b0b6ece0cda0.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> isTree(root);</span><br><span class="line">        <span class="keyword">return</span> res == -<span class="number">1</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先定义一个方法判断平衡二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">isTree</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ll</span> <span class="operator">=</span> isTree(node.left);</span><br><span class="line">        <span class="keyword">if</span>(ll == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rl</span> <span class="operator">=</span> isTree(node.right);</span><br><span class="line">        <span class="keyword">if</span>(rl == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否满足平衡二叉树的条件</span></span><br><span class="line">        <span class="keyword">if</span>(Math.abs(ll-rl) &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回平衡二叉树的高度</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(ll,rl) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求解深度的方法(c++ 实现)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getDepth</span><span class="params">(TreeNode* node, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        result = depth &gt; result ? depth : result; <span class="comment">// 中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left) &#123; <span class="comment">// 左</span></span><br><span class="line">            depth++;    <span class="comment">// 深度+1</span></span><br><span class="line">            getDepth(node-&gt;left, depth);</span><br><span class="line">            depth--;    <span class="comment">// 回溯，深度-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right) &#123; <span class="comment">// 右</span></span><br><span class="line">            depth++;    <span class="comment">// 深度+1</span></span><br><span class="line">            getDepth(node-&gt;right, depth);</span><br><span class="line">            depth--;    <span class="comment">// 回溯，深度-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        getDepth(root, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的所有路径"><a href="#二叉树的所有路径" class="headerlink" title="二叉树的所有路径"></a>二叉树的所有路径</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><p>在这道题目中将第一次涉及到回溯，因为我们要把路径记录下来，需要回溯来回退一个路径再进入另一个路径。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674118508200-6125ffb1-dd29-463f-b7d2-8b3c66bb26e0.png" alt="img"></p><h3 id="求二叉树的所有路径思路（草图）"><a href="#求二叉树的所有路径思路（草图）" class="headerlink" title="求二叉树的所有路径思路（草图）"></a>求二叉树的所有路径思路（草图）</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674208398196-e7fbc750-614c-40a5-8933-eb1d4f227317.png" alt="img"></p><ol><li>创建路径集合path  以及 结果集合list。用于存储路径与最后的结果</li><li>前序遍历 ，先将父节点加入到路径集合path中</li><li>递归结束的条件 –&gt; 到叶子节点 （如图的 4 号节点）</li><li>递归结束，回溯之前。将该路径保存到结果路径中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//用递归 ，前序遍历</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">        prefix(root,path,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">(TreeNode node , List&lt;Integer&gt; path, List&lt;String&gt; list)</span>&#123;</span><br><span class="line">    <span class="comment">//先将该节点保存到路径</span></span><br><span class="line">        path.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果到叶子节点就结束本次递归</span></span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//StringBuffer用于拼接路径</span></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="comment">//循环拼接路径</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ;i&lt;path.size() - <span class="number">1</span> ;i++)&#123;</span><br><span class="line">                <span class="comment">//因为当前的节点都已经保存到了path中，所以这里只需要循环按要求拼接即可</span></span><br><span class="line">                sb.append(path.get(i)).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">        因为最后循环结束时如果我们将最后一个节点也拼接进入 ，那么势必会多出来一个‘-&gt;’这就与题目要求的不符合</span></span><br><span class="line"><span class="comment">    所以我们将最后一个节点放到循环外面拼接</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            sb.append(path.get(path.size()-<span class="number">1</span>)); </span><br><span class="line">            <span class="comment">//将拼接好的路径保存起来</span></span><br><span class="line">            list.add(sb.toString());</span><br><span class="line">           <span class="comment">// 结束本次递归</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            prefix(node.left , path ,list);</span><br><span class="line">            <span class="comment">//递归结束 ，回溯时删除最后一个节点，【1-&gt; 2 -&gt; 5】路径就会变成【1 -&gt; 2 -&gt; 】</span></span><br><span class="line">        <span class="comment">//这样下次递归就会从【2】节点开始 </span></span><br><span class="line">            path.remove(path.size() - <span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            prefix(node.right , path , list);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取树最左下角的节点的值"><a href="#获取树最左下角的节点的值" class="headerlink" title="获取树最左下角的节点的值"></a>获取树最左下角的节点的值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一 ； 递归法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span>  - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GetLeft(root,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">GetLeft</span><span class="params">(TreeNode root , <span class="type">int</span> deep)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(deep &gt; depth)&#123;</span><br><span class="line">                depth = deep;</span><br><span class="line">                res = root.val;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            GetLeft(root.left , deep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            GetLeft(root.right, deep + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二 ： 迭代法</span></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            List&lt;Integer&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span> ;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                nodeList.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(nodeList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(list.size()- <span class="number">1</span>).get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代法二 ： </span></span><br><span class="line"><span class="comment">//迭代法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = poll.val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路径总和二"><a href="#路径总和二" class="headerlink" title="路径总和二"></a>路径总和二</h2><p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p><p>叶子节点 是指没有子节点的节点。</p><p>示例 1：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674287089687-a895f829-cc88-486c-9011-84393d0d4d09.png" alt="img"></p><p>输入：root &#x3D; [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum &#x3D; 22</p><p>输出：[[5,4,11,2],[5,8,4,5]]</p><p>示例 2：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674287100407-d9473504-f577-467b-9864-e5d90871863b.png" alt="img"></p><p>输入：root &#x3D; [1,2,3], targetSum &#x3D; 5</p><p>输出：[]</p><p>示例 3：</p><p>输入：root &#x3D; [1,2], targetSum &#x3D; 0</p><p>输出：[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root== <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">         prefix(root,path,targetSum);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">(TreeNode root, List&lt;Integer&gt; path,<span class="type">int</span> targetSum)</span>&#123;</span><br><span class="line">        path.add(root.val);</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            List&lt;Integer&gt; alist= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;path.size();i++)&#123;</span><br><span class="line">                alist.add(path.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> alist.size();</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;j&lt;size;j++)&#123;</span><br><span class="line">                sum += alist.get(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == targetSum)&#123;</span><br><span class="line">                list.add(alist);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            prefix(root.left , path, targetSum);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            prefix(root.right , path, targetSum);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="从中序与后序构建二叉树"><a href="#从中序与后序构建二叉树" class="headerlink" title="从中序与后序构建二叉树"></a>从中序与后序构建二叉树</h2><p>给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。</p><p>示例 1:</p><p>输入：inorder &#x3D; [9,3,15,20,7], postorder &#x3D; [9,15,7,20,3]输出：[3,9,20,null,null,15,7]示例 2:</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29629815/1674378156783-fb6e2906-2fef-4335-97c3-1faa82473017.png" alt="img"></p><p>输入：inorder &#x3D; [-1], postorder &#x3D; [-1]输出：[-1]</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>判断数组是否为空 ！ </li><li>不为空则向下继续，为空返回null</li><li>去后序数组中的最后一个元素为树的头节点的val值，（原因由后序遍历可知）</li><li>切割中序数组 ，以头节点的val值为区分（作为切割点） ，切割成中序左数组 和 中序右数组</li><li>切割后序数组， 切成后序左数组 和后序右数组</li><li>递归处理左右区间</li></ol><h3 id="思维图"><a href="#思维图" class="headerlink" title="思维图"></a>思维图</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/webp/29629815/1674378156416-012e64cb-d72b-4152-86a8-7c07cc09f14d.webp" alt="img"></p><h3 id="代码实现（复杂易懂）"><a href="#代码实现（复杂易懂）" class="headerlink" title="代码实现（复杂易懂）"></a>代码实现（复杂易懂）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode buildTree(int[] inorder, int[] postorder) &#123;</span><br><span class="line">        if(inorder.length == 0 || postorder.length == 0)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int rootVal = postorder[postorder.length - 1];</span><br><span class="line">        TreeNode node = new TreeNode(rootVal);</span><br><span class="line">        </span><br><span class="line">        int inSize = inorder.length;</span><br><span class="line">        int postSize = postorder.length;</span><br><span class="line">        </span><br><span class="line">        int mid; </span><br><span class="line">        for(mid = 0; mid &lt; inSize;mid++)&#123;</span><br><span class="line">            if(inorder[mid] == rootVal)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //切割中序</span><br><span class="line">        int inBegin =  0;</span><br><span class="line">        int inEnd = mid;</span><br><span class="line">        int[] newIn = Arrays.copyOfRange(inorder,inBegin,inEnd);</span><br><span class="line">        int[] newPost = Arrays.copyOfRange(postorder,inBegin,inEnd);</span><br><span class="line">        node.left = buildTree(newIn,newPost);</span><br><span class="line"></span><br><span class="line">        int postBegin = mid + 1 ;</span><br><span class="line">        int postEnd = postorder.length - 1;</span><br><span class="line">        int[] newIn2 = Arrays.copyOfRange(inorder , postBegin , inSize);</span><br><span class="line">        int[] newPost2 = Arrays.copyOfRange(postorder,mid, postEnd);</span><br><span class="line">        node.right = buildTree(newIn2,newPost2);</span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现（简易map版）"><a href="#代码实现（简易map版）" class="headerlink" title="代码实现（简易map版）"></a>代码实现（简易map版）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map;  // 方便根据数值查找位置</span><br><span class="line">    public TreeNode buildTree(int[] inorder, int[] postorder) &#123;</span><br><span class="line">        map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; inorder.length; i++) &#123; // 用map保存中序序列的数值对应位置</span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return findNode(inorder,  0, inorder.length, postorder,0, postorder.length);  // 前闭后开</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] postorder, int postBegin, int postEnd) &#123;</span><br><span class="line">        // 参数里的范围都是前闭后开</span><br><span class="line">        if (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  // 不满足左闭右开，说明没有元素，返回空树</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int rootIndex = map.get(postorder[postEnd - 1]);  // 找到后序遍历的最后一个元素在中序遍历中的位置</span><br><span class="line">        TreeNode root = new TreeNode(inorder[rootIndex]);  // 构造结点</span><br><span class="line">        int lenOfLeft = rootIndex - inBegin;  // 保存中序左子树个数，用来确定后序数列的个数</span><br><span class="line">        root.left = findNode(inorder, inBegin, rootIndex,</span><br><span class="line">                            postorder, postBegin, postBegin + lenOfLeft);</span><br><span class="line">        root.right = findNode(inorder, rootIndex + 1, inEnd,</span><br><span class="line">                            postorder, postBegin + lenOfLeft, postEnd - 1);</span><br><span class="line"></span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从前序与中序构建二叉树"><a href="#从前序与中序构建二叉树" class="headerlink" title="从前序与中序构建二叉树"></a>从前序与中序构建二叉树</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>与从中序和后序构建二叉树相同</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map;  // 方便根据数值查找位置</span><br><span class="line">    public TreeNode buildTree(int[] inorder, int[] postorder) &#123;</span><br><span class="line">        map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; inorder.length; i++) &#123; // 用map保存中序序列的数值对应位置</span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return findNode(inorder,  0, inorder.length, postorder,0, postorder.length);  // 前闭后开</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] postorder, int postBegin, int postEnd) &#123;</span><br><span class="line">        // 参数里的范围都是前闭后开</span><br><span class="line">        if (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  // 不满足左闭右开，说明没有元素，返回空树</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int rootIndex = map.get(postorder[postEnd - 1]);  // 找到后序遍历的最后一个元素在中序遍历中的位置</span><br><span class="line">        TreeNode root = new TreeNode(inorder[rootIndex]);  // 构造结点</span><br><span class="line">        int lenOfLeft = rootIndex - inBegin;  // 保存中序左子树个数，用来确定后序数列的个数</span><br><span class="line">        root.left = findNode(inorder, inBegin, rootIndex,</span><br><span class="line">                            postorder, postBegin, postBegin + lenOfLeft);</span><br><span class="line">        root.right = findNode(inorder, rootIndex + 1, inEnd,</span><br><span class="line">                            postorder, postBegin + lenOfLeft, postEnd - 1);</span><br><span class="line"></span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考说明（感谢！）："><a href="#参考说明（感谢！）：" class="headerlink" title="参考说明（感谢！）："></a>参考说明（感谢！）：</h2><p>力扣！</p><p>代码随想录！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建二叉树</title>
      <link href="/post/8c0540e9.html"/>
      <url>/post/8c0540e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="从中序与后序构建二叉树"><a href="#从中序与后序构建二叉树" class="headerlink" title="从中序与后序构建二叉树"></a>从中序与后序构建二叉树</h1><p>给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。</p><p>示例 1:</p><p>输入：inorder &#x3D; [9,3,15,20,7], postorder &#x3D; [9,15,7,20,3]<br>输出：[3,9,20,null,null,15,7]<br>示例 2:</p><p><img src="/images/tree.jpg" alt="img"></p><p>输入：inorder &#x3D; [-1], postorder &#x3D; [-1]<br>输出：[-1]</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>判断数组是否为空 ！ </li><li>不为空则向下继续，为空返回null</li><li>去后序数组中的最后一个元素为树的头节点的val值，（原因由后序遍历可知）</li><li>切割中序数组 ，以头节点的val值为区分（作为切割点） ，切割成中序左数组 和 中序右数组</li><li>切割后序数组， 切成后序左数组 和后序右数组</li><li>递归处理左右区间</li></ol><h3 id="思维图"><a href="#思维图" class="headerlink" title="思维图"></a>思维图</h3><p><img src="/images/b163a1a61f1743a68e7ba95a68276554tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp" alt="image.png"></p><h3 id="代码实现（复杂易懂）"><a href="#代码实现（复杂易懂）" class="headerlink" title="代码实现（复杂易懂）"></a>代码实现（复杂易懂）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder.length == <span class="number">0</span> || postorder.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> postorder[postorder.length - <span class="number">1</span>];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">inSize</span> <span class="operator">=</span> inorder.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">postSize</span> <span class="operator">=</span> postorder.length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> mid; </span><br><span class="line">        <span class="keyword">for</span>(mid = <span class="number">0</span>; mid &lt; inSize;mid++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[mid] == rootVal)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//切割中序</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">inBegin</span> <span class="operator">=</span>  <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inEnd</span> <span class="operator">=</span> mid;</span><br><span class="line">        <span class="type">int</span>[] newIn = Arrays.copyOfRange(inorder,inBegin,inEnd);</span><br><span class="line">        <span class="type">int</span>[] newPost = Arrays.copyOfRange(postorder,inBegin,inEnd);</span><br><span class="line">        node.left = buildTree(newIn,newPost);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">postBegin</span> <span class="operator">=</span> mid + <span class="number">1</span> ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">postEnd</span> <span class="operator">=</span> postorder.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] newIn2 = Arrays.copyOfRange(inorder , postBegin , inSize);</span><br><span class="line">        <span class="type">int</span>[] newPost2 = Arrays.copyOfRange(postorder,mid, postEnd);</span><br><span class="line">        node.right = buildTree(newIn2,newPost2);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现（简易map版）"><a href="#代码实现（简易map版）" class="headerlink" title="代码实现（简易map版）"></a>代码实现（简易map版）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map;  <span class="comment">// 方便根据数值查找位置</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123; <span class="comment">// 用map保存中序序列的数值对应位置</span></span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> findNode(inorder,  <span class="number">0</span>, inorder.length, postorder,<span class="number">0</span>, postorder.length);  <span class="comment">// 前闭后开</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findNode</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd, <span class="type">int</span>[] postorder, <span class="type">int</span> postBegin, <span class="type">int</span> postEnd)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数里的范围都是前闭后开</span></span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  <span class="comment">// 不满足左闭右开，说明没有元素，返回空树</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootIndex</span> <span class="operator">=</span> map.get(postorder[postEnd - <span class="number">1</span>]);  <span class="comment">// 找到后序遍历的最后一个元素在中序遍历中的位置</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(inorder[rootIndex]);  <span class="comment">// 构造结点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lenOfLeft</span> <span class="operator">=</span> rootIndex - inBegin;  <span class="comment">// 保存中序左子树个数，用来确定后序数列的个数</span></span><br><span class="line">        root.left = findNode(inorder, inBegin, rootIndex,</span><br><span class="line">                            postorder, postBegin, postBegin + lenOfLeft);</span><br><span class="line">        root.right = findNode(inorder, rootIndex + <span class="number">1</span>, inEnd,</span><br><span class="line">                            postorder, postBegin + lenOfLeft, postEnd - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从前序与中序构建二叉树"><a href="#从前序与中序构建二叉树" class="headerlink" title="从前序与中序构建二叉树"></a>从前序与中序构建二叉树</h1><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>与从中序和后序构建二叉树相同</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map;  <span class="comment">// 方便根据数值查找位置</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123; <span class="comment">// 用map保存中序序列的数值对应位置</span></span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> findNode(inorder,  <span class="number">0</span>, inorder.length, postorder,<span class="number">0</span>, postorder.length);  <span class="comment">// 前闭后开</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findNode</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd, <span class="type">int</span>[] postorder, <span class="type">int</span> postBegin, <span class="type">int</span> postEnd)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数里的范围都是前闭后开</span></span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  <span class="comment">// 不满足左闭右开，说明没有元素，返回空树</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootIndex</span> <span class="operator">=</span> map.get(postorder[postEnd - <span class="number">1</span>]);  <span class="comment">// 找到后序遍历的最后一个元素在中序遍历中的位置</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(inorder[rootIndex]);  <span class="comment">// 构造结点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lenOfLeft</span> <span class="operator">=</span> rootIndex - inBegin;  <span class="comment">// 保存中序左子树个数，用来确定后序数列的个数</span></span><br><span class="line">        root.left = findNode(inorder, inBegin, rootIndex,</span><br><span class="line">                            postorder, postBegin, postBegin + lenOfLeft);</span><br><span class="line">        root.right = findNode(inorder, rootIndex + <span class="number">1</span>, inEnd,</span><br><span class="line">                            postorder, postBegin + lenOfLeft, postEnd - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c-版本实现"><a href="#c-版本实现" class="headerlink" title="c++版本实现"></a>c++版本实现</h1><h2 id="从中序与后序构建二叉树-1"><a href="#从中序与后序构建二叉树-1" class="headerlink" title="从中序与后序构建二叉树"></a>从中序与后序构建二叉树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过中序数组 and 后序数组 构建一颗二叉树</span></span><br><span class="line"><span class="comment"> * @param inorder 中序数组</span></span><br><span class="line"><span class="comment"> * @param postorder 后序数组</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;inorder , vector&lt;<span class="type">int</span>&gt; &amp;postorder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//1. 先找到root节点</span></span><br><span class="line">     <span class="type">int</span> val = postorder[postorder.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">     Node *root = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//2.找到中序数组的切割点</span></span><br><span class="line"></span><br><span class="line">     <span class="type">int</span> index ;    <span class="comment">// 中序切割点</span></span><br><span class="line">     <span class="keyword">for</span>(index=  <span class="number">0</span>; index &lt; inorder.<span class="built_in">size</span>();index++)&#123;</span><br><span class="line">         <span class="keyword">if</span> (inorder[index] == val)&#123;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//3. 切割中序数组</span></span><br><span class="line">     <span class="comment">//[inorder.begin() - index)</span></span><br><span class="line">     <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftIn</span><span class="params">(inorder.begin(),inorder.begin() + index)</span></span>;</span><br><span class="line">     <span class="comment">//(index, inorder.end()]</span></span><br><span class="line">     <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightIn</span><span class="params">(inorder.begin() + index + <span class="number">1</span>,inorder.end())</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//4. 重新定义后序的长度，删除root节点占的位置</span></span><br><span class="line">     postorder.<span class="built_in">resize</span>(postorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//5. 切割后序数组</span></span><br><span class="line">     <span class="comment">// [postorder.begin() , leftIn.size() + postorder.begin() )</span></span><br><span class="line">     <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftPost</span><span class="params">(postorder.begin(), postorder.begin() + leftIn.size())</span></span>;</span><br><span class="line">    <span class="comment">// (leftIn.size() + postorder.begin() , postorder.end() ]</span></span><br><span class="line">     <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightPost</span><span class="params">(postorder.begin() + leftIn.size() , postorder.end())</span></span>;</span><br><span class="line"></span><br><span class="line">    root-&gt;left = <span class="built_in">buildTree</span>(leftIn, leftPost);</span><br><span class="line">    root-&gt;right = <span class="built_in">buildTree</span>(rightIn , rightPost);</span><br><span class="line">    <span class="keyword">return</span>  root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从前序与中序构建二叉树-1"><a href="#从前序与中序构建二叉树-1" class="headerlink" title="从前序与中序构建二叉树"></a>从前序与中序构建二叉树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">Build</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;preorder ,vector&lt;<span class="type">int</span>&gt; &amp;inorder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inorder.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> val = preorder[<span class="number">0</span>];</span><br><span class="line">    Node * root = <span class="keyword">new</span> <span class="built_in">Node</span>(val);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>;index &lt; inorder.<span class="built_in">size</span>();index++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == inorder[index])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新定义前序数组的大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; preorder.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        preorder[i - <span class="number">1</span>] = preorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    preorder.<span class="built_in">resize</span>(preorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切割中序数组</span></span><br><span class="line">    <span class="comment">//[ inorder.begin(), inorder.begin() + index )</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftIn</span><span class="params">(inorder.begin(), inorder.begin() + index)</span></span>;</span><br><span class="line">    <span class="comment">//( inorder.begin() + index + 1,inorder.end() ]</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightIn</span><span class="params">(inorder.begin() + index + <span class="number">1</span>,inorder.end())</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//切割后序数组</span></span><br><span class="line">    <span class="comment">//[ preorder.begin() , preorder.begin() + leftIn.size() )</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftPre</span><span class="params">(preorder.begin() , preorder.begin() + leftIn.size())</span></span>;</span><br><span class="line">    <span class="comment">// ( preorder.begin() + leftIn.size() , preorder.end() ]</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightPre</span><span class="params">(preorder.begin() + leftIn.size() , preorder.end())</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归链接</span></span><br><span class="line">    root-&gt;left = <span class="built_in">Build</span>(leftPre,leftIn);</span><br><span class="line">    root-&gt;right = <span class="built_in">Build</span>(rightPre, rightIn);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]); <span class="comment">// 计算数组的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组转换为 vector</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(arr, arr + size)</span></span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preorder =  &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; inOrder =  &#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; postOrder =  &#123;<span class="number">9</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    Node* root = <span class="built_in">buildTree</span>(inOrder,postOrder);</span><br><span class="line"></span><br><span class="line">    Node* root1 = <span class="built_in">Build</span>(preorder,inOrder);</span><br><span class="line">    <span class="built_in">preOrder</span>(root1);</span><br><span class="line">    <span class="built_in">preOrder</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20230526140405753.png" alt="image-20230526140405753"></p><h2 id="参考说明（感谢！）："><a href="#参考说明（感谢！）：" class="headerlink" title="参考说明（感谢！）："></a>参考说明（感谢！）：</h2><p>力扣！</p><p>代码随想录！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot静态资源配置及其原理</title>
      <link href="/post/8cda0fae.html"/>
      <url>/post/8cda0fae.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC自动配置"><a href="#SpringMVC自动配置" class="headerlink" title="SpringMVC自动配置"></a>SpringMVC自动配置</h2><p>官网给出 ：<strong>大多场景我们都无需自定义配置</strong></p><p>给出了很多的默认的Spring资源 ： Beans 、 静态资源 、 自动注册等等</p><p>如果我们想要自己配置来添加更多的：</p><p><strong>不用@EnableWebMvc注解。使用</strong> <code>@Configuration</code> <strong>+</strong> <code>WebMvcConfigurer</code> <strong>自定义规则</strong></p><h2 id="简单功能分析"><a href="#简单功能分析" class="headerlink" title="简单功能分析"></a>简单功能分析</h2><ol><li><strong>静态资源默认在：</strong> ****<strong>called</strong> <code>/static</code> <strong>(or</strong> <code>/public</code> <strong>or</strong> <code>/resources</code> <strong>or</strong> <code>/META-INF/resources</code></li></ol><p>访问 ： 当前项目根路径&#x2F; + 静态资源名 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/960e3842338f48ec8b161f9af83bceb1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol start="2"><li>原理：静态映射 &#x2F;**</li></ol><p><strong>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</strong></p><ol start="3"><li>静态资源添加前缀</li></ol><p>在配置文件application.yaml添加前缀</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span>   </span><br><span class="line"><span class="comment"># 上面的作用就是 res下面的所有请求都是静态请求</span></span><br><span class="line"> <span class="comment"># 然后，我们当前项目访问静态资源就是 ： 当前项目名 + 静态项目前缀 + 静态资源名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">static-location:</span> [<span class="string">classpath:/XXX/</span>]  </span><br><span class="line"><span class="comment"># 将所有的静态资源都放在resources下的XXX文件夹下</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="欢迎页index"><a href="#欢迎页index" class="headerlink" title="欢迎页index"></a>欢迎页index</h3><p>也就是默认根路径</p><ul><li><strong>可以配置静态资源路径(static&#x2F;index.html)</strong></li><li>但是<strong>不可以配置静态资源的访问前缀</strong>。否则导致 index.html不能被默认访问</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2ffede1539248a38f2c3a2be80e77ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>因为底层这个是被写死的，没办法修改</strong></p><hr><h3 id="自定义网站访问的图标"><a href="#自定义网站访问的图标" class="headerlink" title="自定义网站访问的图标"></a>自定义网站访问的图标</h3><p>类似这样：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d87a753416f24ba38442abe7730e618e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>名字为： favicon.ico 的 放在静态资源目录下即可。</strong></p><h3 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h3><ol><li>SpringBoot启动 默认加载 XXXAutoConfiguration类 ，也就是默认配置类</li><li><strong>而SpringMVC的默认自动配置类为</strong> ： <strong>WebMvcAutoConfiguration 配置类</strong></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">自动配置生效</span><br><span class="line"><span class="variable">@Configuration</span>(proxyBeanMethods = false)</span><br><span class="line"><span class="variable">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="variable">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="line"><span class="variable">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class) </span><br><span class="line"><span class="comment">//如果实现了定制化的配置， 那么这个配置类中的所有方法都不会生效</span></span><br><span class="line">                     </span><br><span class="line"><span class="variable">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="number">10</span>)</span><br><span class="line"><span class="variable">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="line">ValidationAutoConfiguration.class &#125;)</span><br><span class="line">public class WebMvcAutoConfiguration &#123;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它给容器中配置了什么</p><p><strong>3. 在WebMvcAutoConfiguration中有一个静态内部类 就是下面的这个</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span>(proxyBeanMethods = false)</span><br><span class="line"><span class="variable">@Import</span>(EnableWebMvcConfiguration.class)</span><br><span class="line"><span class="variable">@EnableConfigurationProperties</span>(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="line"><span class="variable">@Order</span>(<span class="number">0</span>)</span><br><span class="line">public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })</p><p>这个注解 ，我们可以知道 ，<strong>其中的相关属性就会和 XXX (配置文件) 进行绑定</strong></p><hr><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ff4e774041746f3850f478b5f611f07~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>WebMvcProperties 和前缀为spring.mvc相关的进行绑定</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e10daf736c1049ba94509cc7b049f96e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>ResourceProperties 和前缀为spring.resources相关的进行绑定</p><p><strong>拓展 ：</strong> （配置类只有一个有参构造器 ，所有参数的值都会从容器中进行确定）</p><p><strong>通过配置 add-mapping: false 就可以将所有的静态资源禁止访问</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d37ad95674640dbb9f4036244c12102~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful请求映射及其原理</title>
      <link href="/post/104c2aa7.html"/>
      <url>/post/104c2aa7.html</url>
      
        <content type="html"><![CDATA[<h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><h4 id="rest的使用与原理"><a href="#rest的使用与原理" class="headerlink" title="rest的使用与原理"></a>rest的使用与原理</h4><ul><li><p>@xxxMapping；</p></li><li><p>Rest风格支持（<em>使用</em> <em>HTTP</em> <em>请求方式动词来表示对资源的操作</em>）</p></li><li><ul><li><em>以前：</em> <em>&#x2F;getUser</em> <em>获取用户</em> <em>&#x2F;deleteUser</em> <em>删除用户</em> <em>&#x2F;editUser</em> <em>修改用户</em> <em>&#x2F;saveUser</em> <em>保存用户</em></li><li><em>现在：</em> <em><strong>&#x2F;user GET-获取用户 DELETE-删除用户 PUT-修改用户 POST-保存用户</strong></em></li><li><strong>核心Filter；HiddenHttpMethodFilter</strong></li></ul></li><li><ul><li><ul><li><strong>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</strong></li><li><strong>SpringBoot中手动开启</strong></li></ul></li></ul></li><li><ul><li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ce4d95864c498e84075a4c874aab29~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h4 id="基于表单提交的RESTful原理"><a href="#基于表单提交的RESTful原理" class="headerlink" title="基于表单提交的RESTful原理"></a>基于表单提交的RESTful原理</h4><ol><li>表单提交会带上[_method &#x3D; put]</li><li>请求过来会被HiddenHttpMethodFilter拦截</li><li>处理请求（如果请求正常，才会放行）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86b17a82db3f42dcbef52c0cefaf7e54~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol start="4"><li>然后内部进行处理，判断是否有请求。然后将请求转换为大写</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/170a4300486143e8b080cf2b9c17d89a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol start="5"><li>（<strong>包装原生request</strong>）将原生的request转换成为HttpMethodRequestWrapper请求，然后HttpMethodRequestWrapper会重写HttpRequest的个体、Method 方法</li></ol><h4 id="在控制层请求发起的流程"><a href="#在控制层请求发起的流程" class="headerlink" title="在控制层请求发起的流程"></a>在控制层请求发起的流程</h4><p><strong>在请求处理之前，需要先执行Filter。然后HiddenHttpMethodFilter将原生请求的getMethod重写了变成delete。 然后此时当进行请求的时候。getMethod已经变成了delete&#x2F;put&#x2F;,,,就与请求匹配了。</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2663d2c443945058c51c626562df36c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h4 id="DispatcherServlet请求原理"><a href="#DispatcherServlet请求原理" class="headerlink" title="DispatcherServlet请求原理"></a>DispatcherServlet请求原理</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24ff069825954e519fd44acafbcc512f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>他是处理所有请求的开始</strong></li><li><strong>他没有重写了doGet和doPost，在FrameworkServelt中调用了doGet和doPost。然后又调用了processRequest（）。</strong></li><li><strong>processRequest又调用类中的doService方法 。最终在DispacherSerlvet中做了doService的实现</strong></li><li><strong>在DispacherServlet中有一个doDisptch（）就是请求转发。然后再doDisptch中才是一些真正有功能的我们需要的方法</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7112e825f9c944cdbb911773544ef2b2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol start="5"><li><strong>所以说doDispach（）才是每个请求都会调用的方法</strong></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">HttpServletRequest <span class="attr">processedRequest</span> = request<span class="comment">;</span></span><br><span class="line">HandlerExecutionChain <span class="attr">mappedHandler</span> = null<span class="comment">;</span></span><br><span class="line">boolean <span class="attr">multipartRequestParsed</span> = <span class="literal">false</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">WebAsyncManager <span class="attr">asyncManager</span> = WebAsyncUtils.getAsyncManager(request)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">ModelAndView <span class="attr">mv</span> = null<span class="comment">;</span></span><br><span class="line">Exception <span class="attr">dispatchException</span> = null<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"><span class="attr">processedRequest</span> = checkMultipart(request)<span class="comment">;</span></span><br><span class="line"><span class="attr">multipartRequestParsed</span> = (processedRequest != request)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 找到当前请求使用哪个Handler（Controller的方法）处理</span><br><span class="line"><span class="attr">mappedHandler</span> = getHandler(processedRequest)<span class="comment">;</span></span><br><span class="line">                </span><br><span class="line">                //HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><p><strong>在doDispach（）中有getHandler方法，他会找到我们此时调用需要找到的请求</strong></p></li><li><p><strong>在getHandler()方法中可以看到有个handerMappings 它会加载所有的请求（在应用启动的时候就会加载保存）</strong></p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e431818f83247f7b2151b28a2873c1f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol start="8"><li><strong>在HandlerMapping中保存的我们写的所有请求</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdf3d7501c6c489a895800a9d0257c07~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol start="9"><li><strong>在AbstractHandlerMethodMapping中有lookupHandlerMethod方法，在这个方法中我们才能匹配到所要找的请求</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9523aeecaf34864bab38e89df066858~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的最大深度</title>
      <link href="/post/9f86f042.html"/>
      <url>/post/9f86f042.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个二叉树，找出其最大深度</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数</p><p><img src="https://img-blog.csdnimg.cn/20210203153031914.png" alt="104. 二叉树的最大深度"></p><p>使用前序（中左右），也可以使用后序遍历（左右中），<strong>使用前序求的就是深度，使用后序求的是高度。</strong></p><h1 id="对于二叉树最大深度和最大高度的理解"><a href="#对于二叉树最大深度和最大高度的理解" class="headerlink" title="对于二叉树最大深度和最大高度的理解"></a>对于二叉树最大深度和最大高度的理解</h1><ul><li>二叉树节点的<strong>深度</strong>：指<strong>从根节点到该节点的最长简单路径边的条数或者节点数</strong>（取决于深度从0开始还是从1开始）</li><li>二叉树节点的<strong>高度</strong>：指<strong>从该节点到叶子节点的最长简单路径边的条数或者节点数</strong>（取决于高度从0开始还是从1开始）</li></ul><p><strong>而根节点的高度就是二叉树的最大深度</strong>，所以本题中我们通过后序求的根节点高度来求的二叉树最大深度。</p><h2 id="递归法：-（三部曲）"><a href="#递归法：-（三部曲）" class="headerlink" title="递归法： （三部曲）"></a>递归法： （三部曲）</h2><ol><li><strong>递归法传参是重点</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//传入的是根节点 ，得到的结果为树的最大深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getDepth</span><span class="params">(Node root)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>递归的终止条件就是判断是否为叶子节点（也就是说如果下一个节点为空的话就返回 0 ）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>确定单层递归的逻辑</strong></li></ol><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>确定单层递归的逻辑：<strong>先求它的左子树的深度，再求右子树的深度，最后取左右深度最大的数值 再+1</strong> （加1是因为算上当前中间节点）<strong>就是目前节点为根节点的树的深度</strong>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> getDepth(root.left);</span><br><span class="line"><span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> getDepth(root.right);</span><br><span class="line"><span class="keyword">return</span> Math.max(leftDepth,rightDepth) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>对于递归的题。个人感觉最好将其从题目中提取出来，因为返回值的考虑会让我们分心去思考这样递归是否会超出范围等等，所以将有返回值的递归题 提取成为一个方法是最好的做法！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getDepth(root,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDepth</span><span class="params">(TreeNode root , <span class="type">int</span> deep)</span>&#123;</span><br><span class="line">        <span class="comment">//比较，永远将最大值传给result</span></span><br><span class="line">        result = deep &gt; result ? deep:result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            getDepth(root.left,deep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            getDepth(root.right,deep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>对于这种求解深度的问题来说，使用迭代法相较来说是比较麻烦的，因为我们需要一层一层的遍历，最后得到的层数就是最大的深度。</p><p><img src="https://img-blog.csdnimg.cn/20200810193056585.png" alt="层序遍历"></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>层序遍历每一次计算队列的长度时（也就是当前层的元素全部在队列中的时候）。此时将层数加1，然后将整棵树遍历完后，得到的二叉树的层数就是我们需要的最大深度</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历的模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dept</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    que.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同类型的对于N叉树的最大深度"><a href="#同类型的对于N叉树的最大深度" class="headerlink" title="同类型的对于N叉树的最大深度"></a>同类型的对于N叉树的最大深度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getDepth(root,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDepth</span><span class="params">(Node root, <span class="type">int</span> deep)</span>&#123;</span><br><span class="line">         result = Math.max(deep,result);</span><br><span class="line">        <span class="comment">//递归进行遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt; root.children.size();i++)&#123;</span><br><span class="line">            getDepth(root.children.get(i),deep+<span class="number">1</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代法，使用层序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Node&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            depth ++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">            <span class="keyword">while</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; node.children.size(); i++)</span><br><span class="line">                    <span class="keyword">if</span> (node.children.get(i) != <span class="literal">null</span>) </span><br><span class="line">                        que.offer(node.children.get(i));</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h1><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是<strong>从根节点到最近叶子节点</strong>的最短路径上的节点数量。</p><p><em><strong>说明</strong>:</em> <em><strong>从根节点开始 ，那么就是说如果根节点的左右子节点如果有一个为空的话那么就不能算</strong></em></p><p>示例:</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><p><img src="https://img-blog.csdnimg.cn/2021020315582586.png" alt="111.二叉树的最小深度1"></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>和求最大深度有些类似，但是<strong>也有很多不同</strong></p><p>思路就是 ： 如果左子树为空，右子树不为空，说明最小深度是 1 + 右子树的深度。</p><p>反之，右子树为空，左子树不为空，最小深度是 1 + 左子树的深度。 最后如果左右子树都不为空，返回左右子树深度最小值 + 1 。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> minDepth(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightDepth</span> <span class="operator">=</span> minDepth(root.right);</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightDepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leftDepth + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左右结点都不为null</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代法，层序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> deque.poll();</span><br><span class="line">                <span class="keyword">if</span> (poll.left == <span class="literal">null</span> &amp;&amp; poll.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 是叶子结点，直接返回depth，因为从上往下遍历，所以该值就是最小值</span></span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    deque.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求最小深度推荐用迭代法实现"><a href="#求最小深度推荐用迭代法实现" class="headerlink" title="求最小深度推荐用迭代法实现"></a>求最小深度推荐用迭代法实现</h3><blockquote><table><thead><tr><th align="left">提交结果</th><th align="left">执行用时</th><th align="left">内存消耗</th><th align="left">语言</th><th align="left">提交时间</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><a href="https://leetcode.cn/submissions/detail/396076578/">通过</a></td><td align="left">1 ms</td><td align="left">60.2 MB</td><td align="left">Java</td><td align="left">2023&#x2F;01&#x2F;18 15:04</td><td align="left">迭代</td></tr><tr><td align="left"><a href="https://leetcode.cn/submissions/detail/396076529/">通过</a></td><td align="left">9 ms</td><td align="left">61.5 MB</td><td align="left">Java</td><td align="left">2023&#x2F;01&#x2F;18 15:03</td><td align="left">递归</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中表的映射关系</title>
      <link href="/post/3d5bac2d.html"/>
      <url>/post/3d5bac2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-中表的映射关系"><a href="#MyBatis-中表的映射关系" class="headerlink" title="MyBatis 中表的映射关系"></a>MyBatis 中表的映射关系</h1><blockquote><p>多对多 和 一对一方法相同 ,这里不展开讲 ,主要讲解 一对多 和 多对一</p></blockquote><h3 id="resultMap的作用-处理属性和字段之间的映射关系-设置自定义映射"><a href="#resultMap的作用-处理属性和字段之间的映射关系-设置自定义映射" class="headerlink" title="resultMap的作用 : 处理属性和字段之间的映射关系 (设置自定义映射)"></a>resultMap的作用 : 处理属性和字段之间的映射关系 (设置自定义映射)</h3><p><strong>属性:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>：表示自定义映射的唯一标识 与select标签中的resultMap内容一致</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>：查询的数据要映射的实体类的类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>子标签:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>：设置主键的映射关系</span><br><span class="line">result：设置普通字段的映射关系</span><br><span class="line">association：设置多对一的映射关系</span><br><span class="line">collection：设置一对多的映射关系</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">property</span>：设置映射关系中实体类中的属性名</span><br><span class="line"></span><br><span class="line">column：设置映射关系中表中的字段名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="First-多对一的映射关系"><a href="#First-多对一的映射关系" class="headerlink" title="First : 多对一的映射关系"></a>First : 多对一的映射关系</h2><blockquote><p>查询员工以及员工所对应的部门信息 或者查询学生以及学生所对应的班级信息</p></blockquote><blockquote><p>本文讲解主要以员工类Emp以及部门类Dept为主,对应的数据库表名[ Emp—&gt;t_emp ] [ Dept—&gt; t_dept]</p></blockquote><h3 id="方法一-使用级联的方式处理映射关系"><a href="#方法一-使用级联的方式处理映射关系" class="headerlink" title="方法一 : 使用级联的方式处理映射关系"></a>方法一 : 使用级联的方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      这里是处理当前表emp的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这里是处理Dept中的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  接口 :  Emp getEmpAndDeptById(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getEmpAndDept&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">        t_emp.* ,t_dept.*</span><br><span class="line">    from t_emp left join t_dept</span><br><span class="line">             on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">    where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意点</strong>: 这里的查询用到了左外连接, 多表查询的一种。</p><h3 id="方法二-使用association标签-处理映射关系"><a href="#方法二-使用association标签-处理映射关系" class="headerlink" title="方法二 : 使用association标签: 处理映射关系"></a>方法二 : 使用association标签: 处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      这里是处理表t_emp--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property 中处理的一定是实体类中的属性 所以Emp中的属性名有一个Dept 类型的dept</span></span><br><span class="line"><span class="comment">            javaType===&gt;是该属性的来源</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      这里是处理t_dept表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    Emp getEmpAndDeptById(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getEmpAndDeptOne&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            t_emp.* ,t_dept.*</span><br><span class="line">        from t_emp left join t_dept</span><br><span class="line">                 on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">        where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法三-最常用的-分布查询"><a href="#方法三-最常用的-分布查询" class="headerlink" title="方法三 :  最常用的 分布查询"></a>方法三 :  最常用的 分布查询</h3><p><strong>步骤:</strong></p><ol><li>首先查询相关的员工信息</li><li>根据员工信息中的部门id 从而查询出对应的部门信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getEmpOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--      这里是处理当前表emp的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这里的dept从哪里来,就是stepTwo(DeptMapper中的)中的查询出来的dept</span></span><br><span class="line"><span class="comment">        property :  设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">        select : 设置分布查询的 sql语句的唯一表示 通过namespace.id  :  获取sql语句的唯一标识</span></span><br><span class="line"><span class="comment">        格式: 模块名.包名.接口名.方法名</span></span><br><span class="line"><span class="comment">        column : 设置分布查询的sql的条件</span></span><br><span class="line"><span class="comment">           也就是作为下一步StepTwo 的sql的条件where XXX = ? 的字段</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com_Ray.mapper.DeptMapper.getEmpStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分布查询的第一步   Emp getEmpByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getEmpOne&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时已经根据员工的id 查询出了相关的员工信息 , 接下来就是根据员工信息中的dept_id字段来查询出对应的部门的信息</p><p><strong>再次解释assciation标签中的select属性:</strong> 设置分布查询的 sql语句的唯一表示 通过namespace.id获取</p><p>namespace 就是mapper标签中的属性 , 而对应的id 就是我们所要执行的接口中的方法名(因为方法名与id的内容要一致) <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40722cedb9be4b1a9b1e4a08a8b28f66~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39e1261fc4214da2a1adcbdc2be4fa85~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>接下来进行第二步:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com_Ray.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分布查询的第二步   Dept getEmpStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分布查询的优点"><a href="#分布查询的优点" class="headerlink" title="分布查询的优点"></a>分布查询的优点</h5><p>可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</span><br><span class="line"></span><br><span class="line">aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 </span><br><span class="line">否则，每个属性会按需加载 ,此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。</span><br><span class="line">此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，</span><br><span class="line">fetchType=&quot;<span class="built_in">lazy</span>(延迟加载)|<span class="built_in">eager</span>(立即加载)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Second-一对多的映射关系"><a href="#Second-一对多的映射关系" class="headerlink" title="Second : 一对多的映射关系"></a>Second : 一对多的映射关系</h2><blockquote><p>查询部门中所有的员工信息  或者查询班级中所有的学生信息</p></blockquote><p><strong>步骤:</strong></p><ol><li>首先在Dept部门类中创建Emp集合</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/799f47ec2ea549c49501818277edbb3e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><ol><li>然后再进行查询需要查询的部门id ,再通过部门id查询出部门中所有的员工信息</li></ol><h3 id="方法一-collection"><a href="#方法一-collection" class="headerlink" title="方法一 : collection"></a>方法一 : collection</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection : 处理多对一的属性</span></span><br><span class="line"><span class="comment">    property : 需要处理的多对一的属性的属性名</span></span><br><span class="line"><span class="comment">    ofType :  需要处理的属性的类型</span></span><br><span class="line"><span class="comment">注意点  :里面的emps是Emp的集合类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方法名:    Dept getDeptById(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            t_dept.* , t_emp.*</span><br><span class="line">        from t_emp right join t_dept</span><br><span class="line">                             on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">        where t_dept.dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法二-分布查询"><a href="#方法二-分布查询" class="headerlink" title="方法二 : 分布查询"></a>方法二 : 分布查询</h3><p>第一步:查询出需要查询的部门信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptStepOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        property :  设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">        select : 设置分布查询的 sql语句的唯一表示</span></span><br><span class="line"><span class="comment">        通过namespace.id  :  获取sql语句的唯一标识</span></span><br><span class="line"><span class="comment">        column : 设置分布查询的sql的条件 作为下一步StepTwo 的sql的条件where XXX = ? 的字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com_Ray.mapper.EmpMapper.getDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    分布查询的第一步 : Emp getDeptByStepOne(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptStepOne&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步:  根据部门id 查询员工信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多对一 分布查询的二步</span></span><br><span class="line"><span class="comment">    List&lt;Emp&gt; getDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点!!!"></a><strong>注意点!!!</strong></h5><p><strong>虽然这里我们用到的表中的字段名和所对应的实体类中的属性名不一致 ,但是表设置的字段名使用’_’符合数据库的规则, 而实体类中的属性也同样满足java驼峰命名规范,所以这里可以在核心控制文件中加上下面这段代码 ,这样就可以不用设置resultMap</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  mapUnderscoreToCamelCase: 将下划线映射为驼峰 例如: user_name==&gt;userName --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配</title>
      <link href="/post/d4e5e1b1.html"/>
      <url>/post/d4e5e1b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="依赖的管理"><a href="#依赖的管理" class="headerlink" title="依赖的管理"></a>依赖的管理</h2><p>对于所有的依赖我们需要在<strong>父项目中设置版本号等都设置</strong>好了，在子项目中就不需要再配置版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">他的父项目</span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br></pre></td></tr></table></figure><p>但是如果想要使用非SpringBoot官方引入的jar的话就需要写版本号</p><h3 id="starter场景启动器"><a href="#starter场景启动器" class="headerlink" title="starter场景启动器"></a>starter场景启动器</h3><ol><li><strong>很多spring-boot-starter ：  就某种场景</strong></li><li><strong>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</strong></li><li><strong>SpringBoot所有支持的场景</strong></li><li><strong>-spring-boot-starter：</strong> 第三方为我们提供的简化开发的场景启动器</li></ol><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>自动配置好Tomcat ，SpringMVC ， SpringMVC中的常见组件 ，配置好了web的常见功能 。</p><p><code>@SpringBootApplication</code> 注解的拆分 : </p><p>是由下面几个注解合成</p><ul><li><p><code>@SpringBootConfiguration</code>：·标识该类是 Spring Boot 的配置类，用于定义配置信息。</p></li><li><p><code>@EnableAutoConfiguration</code>：开启自动配置功能，Spring Boot 会自动根据项目中的依赖和配置信息，来对 Spring 进行自动配置；</p></li><li><p><code>@ComponentScan</code>：扫描指定包及其子包下的所有组件，包括 @Component、@Controller、@Service 等。</p></li></ul><p><strong>使用</strong> <strong>@ComponentScan(“包名”)</strong> <strong>可以改变扫描路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">在之前我们使用的<span class="meta">@SpringBootApplication</span> ，他只能扫描自己所在包里面的所有的组件</span><br><span class="line">使用<span class="meta">@ComponentScan(&quot;包名&quot;)</span> 和下面的另外两个就可以代替<span class="meta">@SpringBootAplication</span></span><br><span class="line">    <span class="comment">// @SpringBootConfiguration&#125;</span></span><br><span class="line">    <span class="comment">// @EnableAutoConfiguration &#125; == 》 @SpringBootApplication</span></span><br><span class="line"><span class="comment">// @ComponentScan(&quot;com.atguigu.boot&quot;)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"><span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">tom01</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="各种配置拥有默认值"><a href="#各种配置拥有默认值" class="headerlink" title="各种配置拥有默认值"></a>各种配置拥有默认值</h4><ul><li><strong>默认配置最终都是映射到某个类上</strong>，如：MultipartProperties</li><li><strong>配置文件的值最终会绑定每个类上</strong>，这个类会在<strong>容器中创建对象</strong></li></ul><h4 id="按需加载所有自动配置项"><a href="#按需加载所有自动配置项" class="headerlink" title="按需加载所有自动配置项"></a><code>按需加载所有自动配置项</code></h4><ul><li><ul><li>非常多的starter</li><li><strong>引入了哪些场景这个场景的自动配置才会开启</strong></li><li><strong>SpringBoot所有的自动配置功能</strong>都在 <strong>spring-boot-autoconfigure</strong> 包里面</li></ul></li></ul><p>![a]&#x2F;images&#x2F;67f5837cc4c54699a7401fa9a6fa89dftplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp)</p><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="原生的spring添加组件的方法："><a href="#原生的spring添加组件的方法：" class="headerlink" title="原生的spring添加组件的方法："></a>原生的spring添加组件的方法：</h3><p>创建一个spring.xml的类，然后配置组件的信息，注册组件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7d33290b2324fbf9df0a87fa9e285ab~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="SpringBoot中添加组件的方法："><a href="#SpringBoot中添加组件的方法：" class="headerlink" title="SpringBoot中添加组件的方法："></a>SpringBoot中添加组件的方法：</h3><ol><li>创建一个类，将这个类设置为配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//用来告诉SpringBoot 这是一个配置文件类</span></span><br><span class="line"><span class="comment">//@Configuration(proxyBeanMethods = false) //设置多实例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*给容器中添加组件，一方法名作为组件的id ， 返回类型就是组件类型 ， 值就是组件中的内容实例*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhansan&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等同于下面的</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;user1&quot; class=&quot;com.ray.bean.User&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;da&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;age&quot; value=&quot;11&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    */</span>   </span><br><span class="line"><span class="meta">@Bean(&quot;tom&quot;)</span>  <span class="comment">// 也可以直接在bean中设置自定义的组件名 == 组件的id</span></span><br><span class="line"><span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">tomcat</span>(<span class="string">&quot;tom&quot;</span> , <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>给方法名设置@Bean注解，将方法名当做组件的id ，返回类型就是组件类型 ，返回值就是组件在容器中的实例（对象）</p></li><li><p><strong>@Configuration(proxyBeanMethods &#x3D; false) &#x2F;&#x2F; 中默认的是true  。</strong></p><ul><li><p><strong>值为true 那</strong>么无论我们调用多少次组件，他<strong>返回的都是单例的</strong>。【每次调用都是获取容器中唯一的】</p></li><li><p><strong>值为false ：</strong>【 那么我们每个@Bean方法被<strong>调用多少次返回多少个新的组件</strong>】</p></li></ul></li><li><p>同时我们<strong>定义的Config配置类</strong>，他也是容器中的一个组件</p></li></ol><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><p><strong>@Bean、@Component、@Controller、@Service、@Repository(数据库组件)</strong></p><p><strong>@ComponentScan(指定包扫描的)、@Import(放在任何一个组件上面都行)</strong></p><h4 id="Import注解"><a href="#Import注解" class="headerlink" title="@Import注解"></a>@Import注解</h4><p>@Import（{ XXX.class, AAA.class ….} ） 组件</p><p>作用：<strong>给容器导入组件</strong>，他是一个数组类型的</p><p>可以自动的给容器中创建调用这其中组件的无参构造器 ，从而创建出指定类型的对象[默认组件的名字就是全类名]</p><h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h4><p><strong>条件装配组件（如果条件满足或者说如果条件不满足才执行XXX组件）</strong></p><p>条件组件，就是当我们的类中有名为XXX的时候，我们类中的XXX组件才会被执行，才会生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">    zhangsan.setPet(tomcatPet());</span><br><span class="line">    <span class="keyword">return</span> zhangsan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Pet <span class="title function_">tomcatPet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的得到的结果是</p><p>![image-20230406195125886]&#x2F;images&#x2F;image-20230406195125886.png)</p><p>如果将条件组件标记在类上，那么就是除非类中有tom组件，配置配种的其他组件才会被执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//用来告诉SpringBoot 这是一个配置文件类</span></span><br><span class="line"><span class="comment">//@Configuration(proxyBeanMethods = false) //设置多实例对象</span></span><br><span class="line"><span class="meta">@Conditional(name = &quot;tom&quot;)</span> <span class="comment">//就是说当容器中由tom名的组件的时候 ，下面的配置内容才生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean(&quot;tom22&quot;)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tom</span>(XXX);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>得到的结果是</p><p>![image-20230406195439690]&#x2F;images&#x2F;image-20230406195439690.png)</p><h4 id="其他条件装配注解"><a href="#其他条件装配注解" class="headerlink" title="其他条件装配注解"></a>其他条件装配注解</h4><p>![img]&#x2F;images&#x2F;1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png)</p><h4 id="将xml文件中的内容注入到容器"><a href="#将xml文件中的内容注入到容器" class="headerlink" title="将xml文件中的内容注入到容器"></a>将xml文件中的内容注入到容器</h4><p>要么一点一点自己转换， 要么像下面那样直接进行解析</p><p><strong>利用注解 ：<code>@ImportResource</code></strong></p><p>![image-20230406195824922]&#x2F;images&#x2F;image-20230406195824922.png)</p><h3 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h3><p>以前 ，我们习惯使用配置文件进行配置内容， 但是随着项目的更迭 ，就需要使用SpringBoot进行维护开发…所以就需要将原来的配置文件直接导入到现有的项目中。</p><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getProperties</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">         <span class="type">Properties</span> <span class="variable">pps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">         pps.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         <span class="type">Enumeration</span> <span class="variable">enum1</span> <span class="operator">=</span> pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">strKey</span> <span class="operator">=</span> (String) enum1.nextElement();</span><br><span class="line">             <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li><strong>@ConfigurationProperties</strong><br>@Component只有在容器中的组件，才会拥有SpringBoot提供的强大功能<br>@ConfigurationProperties(prefix &#x3D; “mycar”) &#x2F;&#x2F;将类放入容器中(@Compnent)，然后与javaBean （mycar）与配置绑定</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4895f2dc3c0451385d99076832bc7ec~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fdccf2bb9914c4d91f886f700d13fac~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br></pre></td></tr></table></figure><ol><li><strong>开启属性配置功能</strong></li></ol><p>@EnableConfigurationProperties (在配置类中) + @ConfigurationProperties（在javaBean类中） &#x3D; 就是开启属性配置，然后将配置与javaBean绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Car类中就不需要使用@Component注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br></pre></td></tr></table></figure><h2 id="自动装配源码解析"><a href="#自动装配源码解析" class="headerlink" title="自动装配源码解析"></a>自动装配源码解析</h2><ol><li><strong>引导加载自动配置类</strong></li></ol><p>**@**SpringBiootApplication注解 </p><ul><li><p><strong>@SpringBootConfiguration</strong></p></li><li><p><strong>@ComponentScan : 作用是指定扫描哪些注解</strong></p></li><li><p><strong><code>@EmableAutoConfiguration</code>最重要的注解</strong></p></li></ul><p>![img]&#x2F;images&#x2F;1673743958288-5337536e-34d8-4e87-bfb1-7fc411ee159f.png)</p><p><strong><code>@EmableAutoConfiguration</code>由下面两个个注解的合成。</strong></p><ul><li><strong>AutoConfiguationPackage ： 自动配置包</strong></li></ul><p>![img]&#x2F;images&#x2F;1673744265542-ac9ecc87-e65e-43b5-8311-d095360bb1ba.png)</p><ul><li><strong>@Import(AutoConfigurationImportSelector.class):</strong>  作用：给容器导入一个组件Registrar</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span>；得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories </span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>spring.factorites 中有127个场景配置，也就是说springBoot一启动就会加载所有的配置类</strong></p></li><li><p><strong>但是按照条件装配规则（@Conditional），最终会按需加载</strong></p></li></ol><p><strong>按需开启自动配置项</strong></p><p><strong>只有（@Conditional）生效之后，所在的配置类才会被加载进容器，然后生效</strong></p><ul><li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。所有的值都是从xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p><strong>定制化配置</strong></p></li><li><ul><li><em>用户直接自己@Bean替换底层的组件</em></li><li><em>用户去看这个组件是获取的配置文件什么值就去修改。</em></li></ul></li></ul><p><strong>xxxxxAutoConfiguration(导入进去) —&gt; 容器中就会有这些组件  —&gt; 组件又从xxxxProperties里面拿值（然后它从后面的那个里面拿值）  —-&gt; application.properties</strong></p><blockquote><p>参考说明: 尚硅谷雷神SpringBoot</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML知识点总结</title>
      <link href="/post/a9e4f4b5.html"/>
      <url>/post/a9e4f4b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="html编辑文档"><a href="#html编辑文档" class="headerlink" title="html编辑文档"></a>html编辑文档</h1><ol><li><strong><!DOCTYPE html> :</strong> <strong>这是html5的新规定 ，相比于之前的html4的三种声明减少了麻烦</strong></li><li><strong><body> 标签定义文档的主体。</body></strong></li></ol><p>包含文档的所有内容（比如文本、超链接、图像、表格和列表等等）。</p><ol start="3"><li><strong><style> 标签定义 HTML 文档的样式信息。</strong></li></ol><p>在 <style> 元素中，您可以规定在浏览器中如何呈现 HTML 文档。</p><p>每个 HTML 文档能包含多个 <style> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> //红</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //蓝</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong><div> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</strong></li></ol><blockquote><div>标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。<p> <strong>提示：</strong><div> 元素经常与 CSS 一起使用，用来布局网页。</p><p><strong>注释：</strong>默认情况下，浏览器通常会在 <div> 元素前后放置一个换行符。然而，您可以通过使用 CSS 改变这种情况</p></blockquote><ol start="5"><li><p><strong><span> 定义文档的节，</strong> <strong>用于对文档中的行内元素进行组合。</strong></p></li><li><p><strong><article> 标签定义独立的内容定义一个文章区域。其中可以有h1 , p 等</strong></p></li></ol><blockquote><p>标签定义的内容本身必须是有意义的且必须是独立于文档的其余部分。</p><p>比如： </p><ul><li>论坛帖子</li><li>博客文章</li><li>新闻故事</li><li>评论</li></ul></blockquote><ol start="7"><li><strong><aside></strong> <strong>定义页面的侧边栏内容 ,和<title>中的差不多</strong></li></ol><blockquote><p> aside 的内容应该与附近的内容相关</p></blockquote><h1 id="html其他标签列表"><a href="#html其他标签列表" class="headerlink" title="html其他标签列表"></a>html其他标签列表</h1><ol><li>&lt;a **href**&#x3D;<a href="https://www.runoob.com>点击访问相关网站!/">https://www.runoob.com&gt;点击访问相关网站！</a></a>：</li></ol><p>a标签的相关属性：<strong>最重要的属性是 href 属性，</strong> <strong>如果没有href属性，剩余的属性就都无法使用</strong></p><p>download： </p><p>​描述 ： 指定的下载链接</p><p>href： </p><p>​描述 ： 标定链接目标的url</p><p>type： </p><p>​描述：规定目标 URL 的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions。</p><ol start="2"><li><strong>address：</strong> <strong>定义文档作者&#x2F;所有者的联系信息。</strong></li></ol><ul><li>如果 <address> 元素位于 <body> 元素内部，则它表示该文档作者&#x2F;所有者的联系信息。</li><li>如果 <address> 元素位于 <article> 元素内部，则它表示该文章作者&#x2F;所有者的联系信息</li></ul><ol start="3"><li><strong><area> :</strong>  <strong>标签定义图像映射内部的区域（图像映射指的是带有可点击区域的图像）。</strong></li></ol><blockquote><p>&lt;<strong>area&gt; 元素始终嵌套在 <map> 标签内部。</strong></p><p><img> 标签中的 usemap 属性与 <map> 元素中的 name 相关联，以创建图像与映射之间的关系。</p></blockquote><p><strong>属性：</strong></p><p>alt  : 值为text ， 规定区域的代替文本，如果使用href属性 ， 那么该属性就是必须的</p><p>coords ： 规定了区域的坐标【0，0，82，126或者90,58,3】 </p><p>href ： 规定了区域的url地址</p><p>rel ： 规定当前文档与 目标url之前的关系</p><p>shape ： 【值 ： default    rect      circle  poly 】 规定区域的形状</p><p>target ：  【_blank_parent_self _top】 规定了在何处打开url资源</p><p>type :  规定目标 URL 的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击太阳或其他行星，注意变化：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;planets.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;145&quot;</span> <span class="attr">height</span>=<span class="string">&quot;126&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Planets&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#planetmap&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;planetmap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;0,0,82,126&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Sun&quot;</span> <span class="attr">href</span>=<span class="string">&quot;sun.htm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;90,58,3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Mercury&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mercur.htm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;124,58,8&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Venus&quot;</span> <span class="attr">href</span>=<span class="string">&quot;venus.htm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/gif/29629815/1673607565884-895db870-4318-4c06-9472-640851a9cb8e.gif" alt="img"></p><ol start="4"><li><strong><audio> 标签 ： 标签定义声音，比如音乐或其他音频流。</strong></li></ol><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示音频控件（比如播放&#x2F;暂停按钮）。</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td>muted</td><td>muted</td><td>如果出现该属性，则音频输出为静音。</td></tr><tr><td>preload</td><td>auto metadata none</td><td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td></tr><tr><td>src</td><td><em>URL</em></td><td>规定音频文件的 URL。</td></tr></tbody></table><ol start="5"><li><p><strong><b> 标签</strong>  <strong>标签定义粗体的文本。</strong></p></li><li><p><strong>标题标签</strong></p></li></ol><p><strong>h1 —- h6  ：</strong> 总共就是六个标题标签。大小以及重要性依次减小</p><ol start="7"><li><strong><base> 标签 ： 作用是规定了页面上所有链接的默认url 及其目标</strong></li></ol><p><strong><base> 标签必须位于 <head> 元素内部</strong></p><p><strong>属性： href  、target</strong></p><p>target ： 【_blank _parent_self_top 】</p><p>target 描述：</p><p>规定了页面中的所有链接和表单在何处打开。该属性会被每个链接中的 target 属性覆盖。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.runoob.com/images/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="8"><li><strong><button> 标签定义一个按钮。</strong></li></ol><blockquote><p><button type="" >点我!</button></p></blockquote><blockquote><p><button> 标签定义一个按钮。</p><p>在 <button> 元素内部，您可以放置内容，比如文本或图像。这是该元素与使用 <input> 元素创建的按钮之间的不同之处。</p><p><strong>提示：</strong>请始终为 <button> 元素规定 type 属性。不同的浏览器对 <button> 元素的 type 属性使用不同的默认值。</p></blockquote><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autofocus<strong>New</strong></td><td>autofocus</td><td>规定当页面加载时按钮应当自动地获得焦点。</td></tr><tr><td>disabled</td><td>disabled</td><td>规定应该禁用该按钮。</td></tr><tr><td>form<strong>New</strong></td><td><em>form_id</em></td><td>规定按钮属于一个或多个表单。</td></tr><tr><td>formaction<strong>New</strong></td><td><em>URL</em></td><td>规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formenctype<strong>New</strong></td><td>application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formmethod<strong>New</strong></td><td>get post</td><td>规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formnovalidate<strong>New</strong></td><td>formnovalidate</td><td>如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formtarget<strong>New</strong></td><td>_blank _self _parent _top <em>framename</em></td><td>规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>name</td><td><em>name</em></td><td>规定按钮的名称。</td></tr><tr><td>type</td><td>button reset submit</td><td>规定按钮的类型。</td></tr><tr><td>value</td><td><em>text</em></td><td>规定按钮的初始值。可由脚本进行修改。</td></tr></tbody></table><ol start="9"><li><strong><canvas> 标签</strong>通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。</li></ol><p><strong><canvas> 标签只是图形容器</strong>，您必须使用脚本来绘制图形。</p><p>属性： </p><p> height ： 规定了画布的高度</p><p> width ： 规定了画布的宽度 </p><h1 id="列表以及表格相关"><a href="#列表以及表格相关" class="headerlink" title="列表以及表格相关"></a>列表以及表格相关</h1><ol><li><strong><caption> 标签定义表格的标题。</strong></li></ol><p>您只能对每个表格定义一个标题。</p><p><strong>提示：</strong>通常这个标题会被居中于表格之上。然而，CSS 属性 “text-align” 和 “caption-side” 能用来设置标题的对齐方式和显示位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Monthly savings<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>February<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>$50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong><cite> 标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题。</strong></p></li><li><p><strong><tr> 标签定义 HTML 表格中的行。</strong></p></li></ol><p>一个 <tr> 元素包含一个或多个 <th> 或 <td> 元素</p><ol start="4"><li><p><strong><th> : 标签定义表头单元格的内容</strong></p></li><li><p>**<td> : 标签定义单元格<br>** </p></li><li><p><strong><dd> 标签被用来对一个描述列表中的项目&#x2F;名字进行描述。</strong></p></li></ol><blockquote><dd> 标签与 <dl> （定义一个描述列表）和 <dt> （定义项目/名字）一起使用。<p>在 <dd> 标签内，您能放置段落、换行、图片、链接、列表等等。</p><p>dt之后的dd就能实现换行的功能</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">如下：</span><br><span class="line"></span><br><span class="line">Coffee</span><br><span class="line">Black hot drink</span><br><span class="line">Milk</span><br><span class="line">White cold drink</span><br></pre></td></tr></table></figure><ol start="7"><li><strong><del> 标签定义文档中已删除的文本。</strong></li></ol><blockquote><p><strong>提示：</strong>您也可以看看 <ins> 标签如何标记先插入的文本。</p><p><strong>提示：</strong><del> 和 <ins> 一起使用，描述文档中的更新和修正。浏览器通常会在已删除文本上添加一条删除线，在新插入文本下添加一条下划线。</p></blockquote><ol start="8"><li><strong><section> 标签定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WWF<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The World Wide Fund for Nature (WWF) is an international organization working on issues regarding the conservation, research and restoration of the environment, formerly named the World Wildlife Fund. WWF was founded in 1961.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WWF&#x27;s Panda symbol<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The Panda has become the symbol of WWF. The well-known panda logo of WWF originated from a panda named Chi Chi that was transferred from the Beijing Zoo to the London Zoo in the same year of the establishment of WWF.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><strong><time> 标签是 HTML5 中的新标签。定义公历的时间</strong></li></ol><blockquote><p><time> 标签定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。</p><p>该元素能够以机器可读的方式对日期和时间进行编码，这样，举例说，用户代理能够把生日提醒或排定的事件添加到用户日程表中，搜索引擎也能够生成更智能的搜索结果。</p></blockquote><p>属性 ： </p><p>datatime： 规定时间的方式</p><p>pubdate ： 发布日期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我们在每天早上 <span class="tag">&lt;<span class="name">time</span>&gt;</span>9:00<span class="tag">&lt;/<span class="name">time</span>&gt;</span> 开始营业。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我在 <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-02-14&quot;</span>&gt;</span>情人节<span class="tag">&lt;/<span class="name">time</span>&gt;</span> 有个约会。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><ol><li><strong><form> 标签用于创建供用户输入的 HTML 表单。</strong></li></ol><p>属性： </p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td><em>character_set</em></td><td>规定服务器可处理的表单数据字符集。</td></tr><tr><td>action</td><td><em>URL</em></td><td>规定当提交表单时向何处发送表单数据。</td></tr><tr><td>autocomplete<strong>New</strong></td><td>on off</td><td>规定是否启用表单的自动完成功能。</td></tr><tr><td>enctype</td><td>application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method&#x3D;”post” 的情况）</td></tr><tr><td>method</td><td>get post</td><td>规定用于发送表单数据的 HTTP 方法。</td></tr><tr><td>name</td><td><em>text</em></td><td>规定表单的名称。</td></tr><tr><td>novalidate<strong>New</strong></td><td>novalidate</td><td>如果使用该属性，则提交表单时不进行验证。</td></tr><tr><td>target</td><td>_blank _self _parent _top</td><td>规定在何处打开 action URL。</td></tr></tbody></table><ol start="2"><li><strong><input> 标签规定了用户可以在其中输入数据的输入字段。</strong></li></ol><blockquote><p><input> 元素在 <form> 元素中使用，用来声明允许用户输入数据的 input 控件。输入字段可通过多种方式改变，取决于 type 属性</p></blockquote><p><strong>属性</strong>：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>accept</td><td>audio&#x2F;* video&#x2F;* image&#x2F;* <em>MIME_type</em></td><td>规定通过文件上传来提交的文件的类型。 (只针对type&#x3D;”file”)</td></tr><tr><td>alt</td><td><em>text</em></td><td>定义图像输入的替代文本。 (只针对type&#x3D;”image”)</td></tr><tr><td>autocomplete</td><td>on off</td><td>autocomplete 属性规定 <input> 元素输入字段是否应该启用自动完成功能。</td></tr><tr><td>autofocus<strong>New</strong></td><td>autofocus</td><td>属性规定当页面加载时 <input> 元素应该自动获得焦点。</td></tr><tr><td>checked</td><td>checked</td><td>checked 属性规定在页面加载时应该被预先选定的 <input> 元素。 (只针对 type&#x3D;”checkbox” 或者 type&#x3D;”radio”)</td></tr><tr><td>disabled</td><td>disabled</td><td>disabled 属性规定应该禁用的 <input> 元素。</td></tr><tr><td>form<strong>New</strong></td><td><em>form_id</em></td><td>form 属性规定 <input> 元素所属的一个或多个表单。</td></tr><tr><td>formaction<strong>New</strong></td><td><em>URL</em></td><td>属性规定当表单提交时处理输入控件的文件的 URL。(只针对 type&#x3D;”submit” 和 type&#x3D;”image”)</td></tr><tr><td>formenctype<strong>New</strong></td><td>application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td>属性规定当表单数据提交到服务器时如何编码(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)。</td></tr><tr><td>formmethod<strong>New</strong></td><td>get post</td><td>定义发送表单数据到 action URL 的 HTTP 方法。 (只适合 type&#x3D;”submit” 和 type&#x3D;”image”)</td></tr><tr><td>formnovalidate<strong>New</strong></td><td>formnovalidate</td><td>formnovalidate 属性覆盖 <form> 元素的 novalidate 属性。</td></tr><tr><td>formtarget<strong>New</strong></td><td>_blank _self _parent _top <em>framename</em></td><td>规定表示提交表单后在哪里显示接收到响应的名称或关键词。(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)</td></tr><tr><td>height<strong>New</strong></td><td><em>pixels</em></td><td>规定 <input>元素的高度。(只针对type&#x3D;”image”)</td></tr><tr><td>list<strong>New</strong></td><td><em>datalist_id</em></td><td>属性引用 <datalist> 元素，其中包含 <input> 元素的预定义选项。</td></tr><tr><td>max<strong>New</strong></td><td><em>number date</em></td><td>属性规定 <input> 元素的最大值。</td></tr><tr><td>maxlength</td><td><em>number</em></td><td>属性规定 <input> 元素中允许的最大字符数。</td></tr><tr><td>min<strong>New</strong></td><td><em>number date</em></td><td>属性规定 <input>元素的最小值。</td></tr><tr><td>multiple<strong>New</strong></td><td>multiple</td><td>属性规定允许用户输入到 <input> 元素的多个值。</td></tr><tr><td>name</td><td><em>text</em></td><td>name 属性规定 <input> 元素的名称。</td></tr><tr><td>pattern<strong>New</strong></td><td><em>regexp</em></td><td>pattern 属性规定用于验证 <input> 元素的值的正则表达式。</td></tr><tr><td>placeholder<strong>New</strong></td><td><em>text</em></td><td>placeholder 属性规定可描述输入 <input> 字段预期值的简短的提示信息 。</td></tr><tr><td>readonly</td><td>readonly</td><td>readonly 属性规定输入字段是只读的。</td></tr><tr><td>required<strong>New</strong></td><td>required</td><td>属性规定必需在提交表单之前填写输入字段。</td></tr><tr><td>size</td><td><em>number</em></td><td>size 属性规定以字符数计的 <input> 元素的可见宽度。</td></tr><tr><td>src</td><td><em>URL</em></td><td>src 属性规定显示为提交按钮的图像的 URL。 (只针对 type&#x3D;”image”)</td></tr><tr><td>step<strong>New</strong></td><td><em>number</em></td><td>step 属性规定 <input> 元素的合法数字间隔。</td></tr><tr><td>type</td><td>button checkbox color date datetime datetime-local email file hidden image month number password radio range reset search submit tel text time url week</td><td>type 属性规定要显示的 <input> 元素的类型。</td></tr><tr><td>value</td><td><em>text</em></td><td>指定 <input> 元素 value 的值。</td></tr><tr><td>width</td><td><em>pixels</em></td><td>width 属性规定 <input> 元素的宽度。 (只针对type&#x3D;”image”)</td></tr></tbody></table><ol start="3"><li><strong><textarea> 标签定义一个多行的文本输入控件。</strong></li></ol><blockquote><p>文本区域中可容纳无限数量的文本，其中的文本的默认字体是等宽字体（通常是 Courier）。</p><p>可以通过 cols 和 rows 属性来规定 textarea 的尺寸大小，不过更好的办法是使用 CSS 的 height 和 </p><p>width 属性</p><p>本身自己就是可扩展的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">我是一个文本框。</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>4.</strong>  <strong><select> 元素用来创建下拉列表。</strong></p><p><select> 元素中的 <option> 标签定义了列表中的可用选项。</p><p><strong>属性：</strong> </p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autofocus</td><td>autofocus</td><td>规定在页面加载时下拉列表自动获得焦点。</td></tr><tr><td>disabled</td><td>disabled</td><td>当该属性为 true 时，会禁用下拉列表。</td></tr><tr><td>form</td><td><em>form_id</em></td><td>定义 select 字段所属的一个或多个表单。</td></tr><tr><td>multiple</td><td>multiple</td><td>当该属性为 true 时，可选择多个选项。</td></tr><tr><td>name</td><td><em>text</em></td><td>定义下拉列表的名称。</td></tr><tr><td>required</td><td>required</td><td>规定用户在提交表单前必须选择一个下拉列表中的选项。</td></tr><tr><td>size</td><td><em>number</em></td><td>规定下拉列表中可见选项的数目。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;mercedes&quot;</span>&gt;</span>Mercedes<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>参考文档：</strong> <a href="https://www.runoob.com/tags/ref-byfunc.html"><strong>https://www.runoob.com/tags/ref-byfunc.html</strong></a></p></style></strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历(递归And迭代)</title>
      <link href="/post/a93b3d34.html"/>
      <url>/post/a93b3d34.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p>以  1二叉树为例讲解：</p><p>​2   3</p><p>4  5    67</p><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>按照递归调用的机制，我们按照只要遍历到就打印的方式得到的数据为： </p><p>​<strong>【1，2，4，4，4，2，5，5，5，2，1，3，6，6，6，3，7，7，7，3，1】</strong></p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>​ 我们将前序遍历所得到的数据都是在调用递归机制的元素<strong>首次</strong>出现的位置，那么按照前序遍历：【中 - 左 - 右】的顺序即可完成</p><p>所以我们得到的就是【1，2，4，5，3，6，7，1】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.left.prefix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.right.prefix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>​中序遍历所得到的数据都是在调用递归机制的元素<strong>第二次</strong>出现的位置，那么按照前序遍历：【左 - 中 - 右】的顺序即可完成</p><p>所以我们得到的就是【4，2，5，1，6，3，7】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.left.infix();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.right.infix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>​后序遍历所得到的数据都是在调用递归机制的元素<strong>最后一次</strong>出现的位置，那么按照前序遍历：【左 - 右 - 中】的顺序即可完成</p><p>所以我们得到的就是【4，5，2，6，7，3，1】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffix</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.left.suffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.right.suffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>​首先我们来了解一下递归的实现： 每一次递归调用都会把函数的局部变量、参数和返回值等都压入调用栈，然后在结束本层递归操作的时候，从栈顶弹出上一次递归的各项参数，这也是为什么递归可以返回上一层位置的原因。</p><p>​那么由此我们也可以不用递归，知道了递归调用的本质实现方法，我们就可以自己用栈实现。</p><h4 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>​**思路 ： **</p><p>​前序遍历是 【中 -&gt; 左 -&gt; 右】那么我们就可以从根节点加入栈，然后将右孩子 加入栈 最后再将左孩子 压入栈 ，这样我们得到的出栈顺序就是 【中 -&gt; 左 -&gt; 右】</p><ol><li><strong>将root根节点压入栈</strong></li><li><strong>进入循环，出栈</strong></li><li><strong>打印出栈节点的val</strong></li><li><strong>判断右孩子是否为null ，如果不是，将右孩子压入栈</strong></li><li><strong>判断左孩子是否为null， 如果不是，将左孩子压入栈</strong></li><li>循环【3-&gt;5】当栈为空时 退出循环，得到结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>**思路： **</p><p>​中序遍历和前序遍历有所不同，中序遍历的顺序是【中- &gt; 左 - &gt; 右 】。</p><ol><li><strong>先将所有左边的节点全部入栈，直到left&#x3D;&#x3D; null为止，否则一直顺序的进栈</strong></li><li><strong>当left为null时，出栈 ，然后将出栈的出栈的节点的val打印</strong></li><li><strong>将节点右移</strong></li><li>当【temp(临时节点) 为空， 并且栈也为空时】退出循环， 否则继续【1- &gt; 3】步骤。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span> || !s.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">                s.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node = s.pop();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>后序遍历的顺序是【左 -&gt; 右 -&gt; 中】，与前两者不同，我们需要两个栈 ，栈s1  和 s2 </p><p>其实经过第一轮的入栈出栈之后，得到的结果就是后序遍历结果的反转数，所以再次入栈出栈后我们就可以得到后序遍历的完整结果</p><ol><li><strong>先将根节点压入栈，然后进入循环</strong></li><li><strong>进入循环后先将栈s1 中的元素出栈，并入s2栈</strong></li><li><strong>判断左孩子是否为null ，如果不是，将左孩子压入栈s1</strong></li><li><strong>判断右孩子是否为null， 如果不是，将右孩子压入栈s1</strong></li><li><strong>【当栈s1为空时】退出循环，否则继续【2- &gt; 4】</strong></li><li><strong>将栈s2顺序出栈，并打印</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; s2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        s1.push(node);</span><br><span class="line">        <span class="keyword">while</span>(!s1.isEmpty())&#123;</span><br><span class="line">            node = s1.pop();</span><br><span class="line">            s2.push(node);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                s1.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                s1.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s2.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> s2.pop();</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树(AVL树)</title>
      <link href="/post/33c84c32.html"/>
      <url>/post/33c84c32.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>​平衡二叉树 ：（Balanced Binary Tree）又被称为AVL树（有别于AVL算法），且具有以下性质：</p><p>​它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。这个方案很好的解决了二叉查找树退化成链表的问题，把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。</p><p><em><strong>在讲解平衡二叉树之前我们先了解以下树的高度以及层的概念</strong></em></p><p> <img src="https://img-blog.csdnimg.cn/71fd1f1c39b14271a8ebf877b33eede1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpY2hhMzcwNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="树结构"></p><p>​<u>（图片引用于网络）</u></p><h2 id="查询树的高度"><a href="#查询树的高度" class="headerlink" title="查询树的高度"></a>查询树的高度</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>通过递归实现查询当前节点的左右子树的最大高度，然后再 + 1（加上节点本身），此时就是树的最大高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span>:left.height(),right == <span class="literal">null</span> ? <span class="number">0</span>:right.height()) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询左右子树的高度"><a href="#查询左右子树的高度" class="headerlink" title="查询左右子树的高度"></a>查询左右子树的高度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询左子树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left.height();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询右子树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right.height();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树实现"><a href="#平衡二叉树实现" class="headerlink" title="平衡二叉树实现"></a>平衡二叉树实现</h2><h3 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h3><p>节点的左子树的高度即h(左)  和 右子树即h(右)的差值大于1 。</p><p>具体来说就是 <strong>h(右) - h(左)  &gt;  1</strong></p><p>当满足这个情况时我们就需要进行左旋转</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>new 一个新的节点newNode ，value 为当前节点的value</li><li>设置newNode的left节点  为当前节点的left</li><li>设置newNode 的right节点  为当前节点的right的left节点</li><li>将当前节点的value设置为  当前节点的right的value</li><li>把当前节点的right 设置为 当前节点的right 的right</li><li>把当前节点的left设置为 newNode</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左旋转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//new 一个新的节点，值为当前节点的val</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">    <span class="comment">//将当前节点的left节点 设置为newNode的left</span></span><br><span class="line">    newNode.left = <span class="built_in">this</span>.left;</span><br><span class="line">    <span class="comment">//把当前节点this的right的left节点 设置为newNode的right</span></span><br><span class="line">    newNode.right = <span class="built_in">this</span>.right.left;</span><br><span class="line">    <span class="comment">//把当前节点的val修改成 当前节点的right的val</span></span><br><span class="line">    <span class="built_in">this</span>.val = <span class="built_in">this</span>.right.val;</span><br><span class="line">    <span class="comment">//把当前节点的left设置为 newNode</span></span><br><span class="line">    <span class="built_in">this</span>.left = newNode;</span><br><span class="line">    <span class="comment">//把当前节点的right设置为 当前节点的right的right</span></span><br><span class="line">    <span class="built_in">this</span>.right = <span class="built_in">this</span>.right.right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右旋转"><a href="#右旋转" class="headerlink" title="右旋转"></a>右旋转</h3><p>当前节点的左子树的高度，即h(左)  和 右子树即h(右)的差值大于1 。</p><p>具体来说就是 <strong>h(左) - h(右)  &gt;  1</strong></p><p>当满足这个情况时我们就需要进行右旋转</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ol><li>new 一个新的节点newNode ，value 为当前节点的value</li><li>设置newNode的right节点  为当前节点的right</li><li>设置newNode 的left节点  为当前节点的left的right节点</li><li>将当前节点的value设置为  当前节点的left的value</li><li>把当前节点的left设置为 当前节点的left 的left</li><li>把当前节点的right设置为 newNode</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//new新的节点 ，值为this.val</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">    <span class="comment">//newNode 的right节点为当前节点的right节点</span></span><br><span class="line">    newNode.right = <span class="built_in">this</span>.right;</span><br><span class="line">    <span class="comment">//newNode 的left节点 为当前节点的left的right节点</span></span><br><span class="line">    newNode.left = <span class="built_in">this</span>.left.right;</span><br><span class="line">    <span class="comment">//修改当前节点的val为 当前节点的left 的val</span></span><br><span class="line">    <span class="built_in">this</span>.val = <span class="built_in">this</span>.left.val;</span><br><span class="line">    <span class="comment">//修改当前节点的left 为 当前节点的left 的 left</span></span><br><span class="line">    <span class="built_in">this</span>.left = <span class="built_in">this</span>.left.left;</span><br><span class="line">    <span class="comment">//修改当前节点的right 为newNode</span></span><br><span class="line">    <span class="built_in">this</span>.right = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h3><h4 id="双旋转出现的原因"><a href="#双旋转出现的原因" class="headerlink" title="双旋转出现的原因"></a>双旋转出现的原因</h4><p>以数组【10，11，7，6，8，9】为例</p><p>如下图可以看到，以<strong>节点8为根节点的right树高度 - left树的高度 &gt; 1</strong> </p><p>这样如果我们还是按照之前的做法势必无法得到平衡二叉树。所以我们就需要<strong>先将以节点8 为根节点的二叉树进行左旋转使它成为平衡二叉树之后，再对整棵树进行右旋转</strong>， 这样我们才能使整棵树都是平衡二叉树 </p><p><img src="https://img-blog.csdnimg.cn/5af8a359c3bc4a9e92bb92fa3d6bbfaa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bif6KaB57-x57-U,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>​(<u>图片引用于csdn博主菜鸟要翱翔</u>)</p><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>​如果当前树需要进行左旋转（即(rightHeight() - leftHeight() &gt; 1)） </p><p>那么就需要<strong>判断右节点的rightHeight 是否 &lt;  rightHeight</strong> </p><p>如果满足， 那么就<strong>先将以right节点为根节点的树进行右旋转 ，然后再将整个树进行左旋转</strong></p><p>​<strong>同理</strong></p><p>​当前树需要进行右旋转（即(leftHeight()  - rightHeight() &gt; 1)） </p><p>那么就需要<strong>判断左节点的rightHeight 是否 &gt;  leftHeight</strong> </p><p>如果满足， 那么就<strong>先将以left节点为根节点的树进行左旋转 ，然后再将整个树进行右旋转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//当前节点的右子树的右子树高度 &lt; 当前节点的右子树的左子树高度</span></span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.rightHeight() &lt; right.leftHeight())&#123;</span><br><span class="line">            <span class="comment">//先将右子树进行右旋转 ，然后再将所有的树进行左旋转</span></span><br><span class="line">            right.rightRotate();</span><br><span class="line">            leftRotate();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            leftRotate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//当前节点的左子树的右子树高度 &gt; 当前节点的左子树的左子树高度</span></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.leftHeight() &lt; left.rightHeight())&#123;</span><br><span class="line">            <span class="comment">//先将左子树进行左旋转 ，然后再将整棵树进行右旋转</span></span><br><span class="line">            left.leftRotate();</span><br><span class="line">            rightRotate();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            rightRotate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左旋转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//new 一个新的节点，值为当前节点的val</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">        <span class="comment">//将当前节点的left节点 设置为newNode的left</span></span><br><span class="line">        newNode.left = <span class="built_in">this</span>.left;</span><br><span class="line">        <span class="comment">//把当前节点this的right的left节点 设置为newNode的right</span></span><br><span class="line">        newNode.right = <span class="built_in">this</span>.right.left;</span><br><span class="line">        <span class="comment">//把当前节点的val修改成 当前节点的right的val</span></span><br><span class="line">        <span class="built_in">this</span>.val = <span class="built_in">this</span>.right.val;</span><br><span class="line">        <span class="comment">//把当前节点的left设置为 newNode</span></span><br><span class="line">        <span class="built_in">this</span>.left = newNode;</span><br><span class="line">        <span class="comment">//把当前节点的right设置为 当前节点的right的right</span></span><br><span class="line">        <span class="built_in">this</span>.right = <span class="built_in">this</span>.right.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//new新的节点 ，值为this.val</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.val);</span><br><span class="line">        <span class="comment">//newNode 的right节点为当前节点的right节点</span></span><br><span class="line">        newNode.right = <span class="built_in">this</span>.right;</span><br><span class="line">        <span class="comment">//newNode 的left节点 为当前节点的left的right节点</span></span><br><span class="line">        newNode.left = <span class="built_in">this</span>.left.right;</span><br><span class="line">        <span class="comment">//修改当前节点的val为 当前节点的left 的val</span></span><br><span class="line">        <span class="built_in">this</span>.val = <span class="built_in">this</span>.left.val;</span><br><span class="line">        <span class="comment">//修改当前节点的left 为 当前节点的left 的 left</span></span><br><span class="line">        <span class="built_in">this</span>.left = <span class="built_in">this</span>.left.left;</span><br><span class="line">        <span class="comment">//修改当前节点的right 为newNode</span></span><br><span class="line">        <span class="built_in">this</span>.right = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//当前节点的右子树的右子树高度 &lt; 当前节点的右子树的左子树高度</span></span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.rightHeight() &lt; right.leftHeight())&#123;</span><br><span class="line">                <span class="comment">//先将右子树进行右旋转 ，然后再将所有的树进行左旋转</span></span><br><span class="line">                right.rightRotate();</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//当前节点的左子树的右子树高度 &gt; 当前节点的左子树的左子树高度</span></span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.leftHeight() &lt; left.rightHeight())&#123;</span><br><span class="line">                <span class="comment">//先将左子树进行左旋转 ，然后再将整棵树进行右旋转</span></span><br><span class="line">                left.leftRotate();</span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询左子树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.height();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询右子树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right.height();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span>:left.height(),right == <span class="literal">null</span> ? <span class="number">0</span>:right.height()) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//中序遍历二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int[] arr = &#123;4,3,6,5,7,8&#125;;</span></span><br><span class="line">       <span class="comment">// int[] arr = &#123;10,12,8,9,7,6&#125;;</span></span><br><span class="line">         <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">23</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        <span class="type">AVLTree</span> <span class="variable">avl</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AVLTree</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">                avl.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        avl.root.infix();</span><br><span class="line">        System.out.println(<span class="string">&quot;树的高度 :&quot;</span> + avl.root.height());</span><br><span class="line">        System.out.println(<span class="string">&quot;树的左子树高度 :&quot;</span> + avl.root.leftHeight());</span><br><span class="line">        System.out.println(<span class="string">&quot;树的右子树高度 :&quot;</span> + avl.root.rightHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            root = node;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;3]<br>Node[val&#x3D;6]<br>Node[val&#x3D;7]<br>Node[val&#x3D;8]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;11]<br>Node[val&#x3D;12]<br>Node[val&#x3D;14]<br>Node[val&#x3D;22]<br>Node[val&#x3D;23]<br>Node[val&#x3D;33]<br>Node[val&#x3D;33]<br>Node[val&#x3D;34]<br>Node[val&#x3D;44]<br>Node[val&#x3D;54]<br>Node[val&#x3D;55]<br>树的高度 :5<br>树的左子树高度 :3<br>树的右子树高度 :4</p><p>进程已结束,退出代码0</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的了解SpringMVC吗？</title>
      <link href="/post/b50e0645.html"/>
      <url>/post/b50e0645.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae4a3a96038c421a87307d7b53906f58~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="你真的了解SpringMVC吗 ?"></p><h1 id="介绍MVC"><a href="#介绍MVC" class="headerlink" title="介绍MVC"></a>介绍MVC</h1><blockquote><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p></blockquote><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><blockquote><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p></blockquote><h3 id="MVC的工作流程："><a href="#MVC的工作流程：" class="headerlink" title="MVC的工作流程："></a>MVC的工作流程：</h3><p><strong>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果 找到相应的View视图，渲染数据后最终响应给浏览器</strong></p><h3 id="三层架构分为"><a href="#三层架构分为" class="headerlink" title="三层架构分为:"></a>三层架构分为:</h3><p><strong>表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</strong></p><h3 id="SpringMVC的特点"><a href="#SpringMVC的特点" class="headerlink" title="SpringMVC的特点"></a>SpringMVC的特点</h3><ul><li>Spring 家族原生产品，与 IOC 容器等基础设施无缝对接</li><li>基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理</li><li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li><li>代码清新简洁，大幅度提升开发效率 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li><li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="SpringMVC处理请求案例"><a href="#SpringMVC处理请求案例" class="headerlink" title="SpringMVC处理请求案例"></a>SpringMVC处理请求案例</h1><ol><li>首先创建web工程，可以直接选择webapp进行创建，也可以自己手动创建</li><li>配置web.xml文件 （注意这里的servlet-name必须要与WE-INF下的XXX-servlet.xml文件中的XXX名称相同）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d6748fb74994e1d9ddd27e9cf5700b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>配置SpringMVC-servlet.xml文件 （注意文件中的视图前缀下的文件名&#x2F;WEB-INF&#x2F;templates&#x2F;就是在templates下创建的文件）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    扫描控制层组件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com_Ray.springMVC.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器</span></span><br><span class="line"><span class="comment">        作用：解析视图 ，使用之后就可以使用springmvc为我们提供的方式来进行视图渲染，并实现页面跳转</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                逻辑视图：/WEB-INF/templates/(前缀)  index - .html(后缀)</span></span><br><span class="line"><span class="comment">                            == 物理视图(全地址) - 视图前缀 - 视图后缀</span></span><br><span class="line"><span class="comment">                    物理视图（需要访问的网页）--&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建Controller控制层的相关代码，用于接受请求和进行<strong>请求转发</strong>和跳转</li><li>模块名+Controller 类其中方法名加 <strong>@RequestMapping（“&#x2F;”）标签就是作为请求映射的标签，其中（“&#x2F;”）:</strong> 表示的是绝对路径为<a href="https://link.juejin.cn/?target=http://localhost:8080/SpringMVC/">http://localhost:8080/SpringMVC/</a> 上下文的这个请求 <strong>返回值return作用就是跳转至需要跳转的页面，内容：“逻辑视图名称”</strong></li><li>pom.xml中的配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java_workSpace_SSM<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">webAppSourceDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/$&#123;pom.artifactId&#125;-$&#123;pom.version&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">webAppSourceDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>如果想要将配置文件放在类路径下的resources下，那么就可以这样设置</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e8ca26169cb4553b2f8378b28cb5596~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--a</span></span><br><span class="line"><span class="comment">    - SpringMVC 的前端控制器DispatcherServlet</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    - Servlet that dispatches requests to the Spring managed block servlets</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这里的servlet-name一定要与WEB_INF下的配置文件XXX-servlet.xml中的XXX名字相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--初始化的作用：将我们的配置文件放到resources路径下--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ContextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- URL space mappings ============================================= --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--表示所有的请求都需要进行过滤 （被前端控制器处理）  *.do :表示后缀处理--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结简单的运行原理及过程"><a href="#总结简单的运行原理及过程" class="headerlink" title="总结简单的运行原理及过程"></a>总结简单的运行原理及过程</h3><ol><li><strong>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被</strong> <strong>前端控制器 DispatcherServlet</strong> <strong>处理。</strong></li><li><strong>前端控制器会</strong> <strong>读取SpringMVC的核心配置文件</strong> <strong>，通过</strong> <strong>扫描组件</strong> <strong>找到控制器， 将请求地址和控制器中@RequestMapping注解的</strong> <strong>value属性值进行匹配</strong></li><li><strong>若匹配成功，该注解所标识的控制器方法就是处理请求的方法。</strong></li><li><strong>处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会 被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视 图所对应页面</strong></li></ol><h3 id="具体如何处理一个请求★★★★★："><a href="#具体如何处理一个请求★★★★★：" class="headerlink" title="具体如何处理一个请求★★★★★："></a>具体如何处理一个请求★★★★★：</h3><ol><li><strong>@RequestMapping注解功能：</strong> <em>从注解名称上我们可以看到，@RequestMapping注解的作用就是</em> <em>将请求和处理请求的控制器方法关联 起来，建立映射关系。</em> <em>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</em></li><li><strong>@RequestMapping注解位置</strong>★★★(类与方法) <strong>：</strong></li></ol><p><em>@RequestMapping</em> <em><strong>标识一个类</strong></em> <em>：设置映射请求的请求路径的</em> <em><strong>初始信息</strong></em>**</p><p><em>@RequestMapping</em> <em><strong>标识一个方法</strong></em> <em>：设置映射请求请求路径的</em> <em><strong>具体信息</strong></em>**</p><p><strong>如果说两个都设置了RequestMApping , 那么就是在</strong> <strong>访问方法上的请求时需要加上类上的RequestMapping的地址</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e26ecbed871a4b92904785d83fc7f71f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Controller</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">&quot;/test/&quot;</span>)</span><br><span class="line">public class EmployeeController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private EmployeeDao employeeDao;</span><br><span class="line">    <span class="comment">//查询所有的员工信息</span></span><br><span class="line"><span class="comment">//请求地址问 ： /test/employee</span></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">&quot;/employee&quot;</span>)</span><br><span class="line">    public String <span class="built_in">selectAll</span>(Model model)&#123;</span><br><span class="line">        <span class="selector-tag">Collection</span>&lt;<span class="selector-tag">Employee</span>&gt; <span class="selector-tag">employeeAll</span> = <span class="selector-tag">employeeDao</span><span class="selector-class">.getAll</span>();</span><br><span class="line">        <span class="selector-tag">model</span><span class="selector-class">.addAttribute</span>(<span class="string">&quot;employeeAll&quot;</span>,employeeAll);</span><br><span class="line">        <span class="selector-tag">return</span> &quot;<span class="selector-tag">emp_list</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>@RequestMapping注解的value属性：（可以设置多个）</strong> <strong>:</strong> 为数组属性，即为浏览器所发送请求的请求路径匹配的value属性中的任何一个值(只要一个满足就可以)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的员工信息</span></span><br><span class="line"><span class="meta">@GetMapping</span>(&#123;<span class="string">&quot;/test/employee&quot;</span>,<span class="string">&quot;test/hello&quot;</span>,<span class="string">&quot;...&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">selectAll</span>(<span class="params">Model model</span>)&#123;</span><br><span class="line">    <span class="title class_">Collection</span>&lt;<span class="title class_">Employee</span>&gt; employeeAll = employeeDao.<span class="title function_">getAll</span>();</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;employeeAll&quot;</span>,employeeAll);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emp_list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>@RequestMapping注解的method属性（</strong> <strong>也是数组</strong> <strong>）：</strong> <strong>表示请求方式(</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bdbd74fe29a404b89d4d84de69de79d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"> <strong>) mathod&#x3D;{RequestMethod.POST ，RequestMethod.GET } 作用： 通过请求方式匹配请求</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9a2e534cf3f4d28b5e40a049efe4d43~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>注： 1、对于<strong>处理指定请求方式</strong>的控制器方法，SpringMVC中提供了</p><p>@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有<strong>get，post，put，delete</strong> 但是<strong>目前浏览器只支持get和post</strong>，若在form表单提交时，为method设置了其他请求方式的字符 串（put或delete），则按照默认的请求方式get处理 若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter</p><ol><li><strong>@RequestMapping注解的param属性作用 :</strong></li></ol><p><strong>通过请求参数匹配请求，即浏览器发送的请求的请求参数必须满足params属性到的设置</strong></p><p>注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数 和请求映射的匹配关系</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d08608e235b49b8bb294c5a3965f02a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>对于params属性的设置： <strong>如果params属性设置了值</strong>，那么请求参数就必须加上对应的值 (否则报400错误) 下面是<strong>两种方式 :</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52c6793694bf4ded948d0b16e534bb15~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>一定不能携带password</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6891a97a388547728bcdeb27c5e95bb0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>@RequestMapping注解的header属性（用法和param用法一模一样）:</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8266874e0c2c495d912ec5a7b896648e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="SpringMVC支持ant风格的路径"><a href="#SpringMVC支持ant风格的路径" class="headerlink" title="SpringMVC支持ant风格的路径"></a>SpringMVC支持ant风格的路径</h3><p><strong>？：表示任意的单个字符</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d639aece2464130be4b297424028994~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>? 就会被解析成和前后字符相同的字符 ，但是不能匹配特殊字符（比如 ？ ）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12a5cab029bb4a8e803ebcf2cda4b2e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>*<strong>：表示任意的0个或多个字符</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dbea62f919445a8a9254088c681248e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>以下两种都可以 （但是不能为 &#x2F; ）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c6c6ad345de4b7996e8cf4b3c6ae4f3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4de7b25162e8483c96a117f4e27fa244~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>******* <em><strong>：表示任意层数的任意目录 注意：在使用</strong>时，</em>* <strong>只能使用&#x2F;</strong>&#x2F;xxx的方式** <strong>（</strong> <strong>&#x2F;</strong>&#x2F;中间不能出现其他字符** <strong>）</strong></p><h3 id="SpringMVC中支持路径中的占位符"><a href="#SpringMVC中支持路径中的占位符" class="headerlink" title="SpringMVC中支持路径中的占位符"></a>SpringMVC中支持路径中的占位符</h3><p>原始方式： &#x2F;deleteUser?id&#x3D;1</p><p><strong>rest方式：</strong> <strong>&#x2F;user&#x2F;delete&#x2F;1</strong>****</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0b2b66a99e14a1b8dd80bbfa8d96305~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>其中的admin&#x2F;1 都是参数 ： 需要进行赋值</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66cf2efccbc540be8249fdf0782d64e5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h1><h3 id="通过servletAPI获取（HttpServletRequest的方式）"><a href="#通过servletAPI获取（HttpServletRequest的方式）" class="headerlink" title="通过servletAPI获取（HttpServletRequest的方式）"></a>通过servletAPI获取（HttpServletRequest的方式）</h3><h3 id><a href="#" class="headerlink" title></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/013f3ea372e2493ebd53bcf5de1f72d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></h3><h3 id="通过控制器方法的形参获取请求参数"><a href="#通过控制器方法的形参获取请求参数" class="headerlink" title="通过控制器方法的形参获取请求参数"></a>通过控制器方法的形参获取请求参数</h3><p><em>*<em>*</em>*在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet中就会将请求参数赋值给相应的形参****</em>*</p><p>如果参数名与形参不一致，那么就可以通过参数注解@RequestParam （“参数”）对应形参的方法</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae85033355aa408fa7d90a419929f2c0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="RequestParam注解的三个属性"><a href="#RequestParam注解的三个属性" class="headerlink" title="@RequestParam注解的三个属性"></a>@RequestParam注解的三个属性</h3><p>@RequestParam是<strong>将请求参数和控制器方法的形参创建映射关系</strong></p><p>@RequestParam注解一共有三个属性：</p><ul><li>value：指定为形参赋值的请求参数的参数名</li><li>required：设置是否必须传输此请求参数，默认值为true</li><li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值 为””时，则使用默认值为形参赋值</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/451d5603a9de4fe7a68852c317c6bb65~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>@RequestHeader ：</strong> <strong>将请求头信息和控制器方法的形参绑定</strong></p><p>注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><p><strong>逻辑简写</strong></p><p>@RequestMapping(“ &#x2F;XXX” )</p><p>pubic String getHeader( @RequestParam（value&#x3D; “name”…）String name @RequestHeader(value &#x3D; “referer” ) String referer ){</p><p>sout(“name &#x3D; “ + name);</p><p>sout(“referer &#x3D; “+ referer);</p><p>return “XXX”; &#x2F;&#x2F;请求跳转的逻辑页面</p><p>}</p><p><strong>@Cookievalue :</strong> <strong>将cookie数据和控制请求的形参绑定</strong></p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><hr><h3 id="经常用的方法–通过实体类中的属性名与请求参数的名一致-来获取请求参数"><a href="#经常用的方法–通过实体类中的属性名与请求参数的名一致-来获取请求参数" class="headerlink" title="经常用的方法–通过实体类中的属性名与请求参数的名一致 来获取请求参数"></a>经常用的方法–通过实体类中的属性名与请求参数的名一致 来获取请求参数</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab9f4594d1914c998bf868f2107739e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保证User类中的属性名与请求参数中的参数保持一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="string">&quot;/param/pojo&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> String pojoRequest(User user)&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决请求参数获取乱码的问题"><a href="#解决请求参数获取乱码的问题" class="headerlink" title="解决请求参数获取乱码的问题 :"></a>解决请求参数获取乱码的问题 :</h2><h2 id="此时不能通过request-setCharacterEnCoding-”UTF-8“"><a href="#此时不能通过request-setCharacterEnCoding-”UTF-8“" class="headerlink" title="此时不能通过request.setCharacterEnCoding(”UTF-8“)"></a>此时不能通过request.setCharacterEnCoding(”UTF-8“)</h2><ol><li><strong>可以将请求设置为get，因为get会自动设置成UTF-8模式</strong></li><li><strong>或者在web.xml中设置处理编码的过滤器【一定要匹配在其他配置之前】（四个）</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acee6d9efbd84df1b3d8ea4f5e08163d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="往request域对象中共享数据"><a href="#往request域对象中共享数据" class="headerlink" title="往request域对象中共享数据"></a>往request域对象中共享数据</h2><h3 id="使用serletAPI向request域对象共享数据"><a href="#使用serletAPI向request域对象共享数据" class="headerlink" title="使用serletAPI向request域对象共享数据"></a>使用serletAPI向request域对象共享数据</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/305cb854a18c4700832f2f44de6434cd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="使用ModelAndView向request域对象中共享数据★★★★"><a href="#使用ModelAndView向request域对象中共享数据★★★★" class="headerlink" title="使用ModelAndView向request域对象中共享数据★★★★"></a>使用ModelAndView向request域对象中共享数据★★★★</h3><p>使用这个就必须将请求方法的返回值 设置为modelAndiew</p><p>其实不管是使用String也好，还是servletAPI也好，还是其他的 model也好，最后在底层都会被封装成ModelAndView 对象★★★★</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/781774357a25429d889ce2019e9f6d98~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="string">&quot;/test/mav&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span>()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置逻辑视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d907e2ba4e94b63abc2c8d61e296506~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="使用model向request域对象中共享数据"><a href="#使用model向request域对象中共享数据" class="headerlink" title="使用model向request域对象中共享数据"></a>使用model向request域对象中共享数据</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11066282f9354fdea59f58235efea599~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/test/model&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">testModel</span>(<span class="params">Model model</span>)&#123;</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;testModel&quot;</span>,<span class="string">&quot;hello,model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44b0f0a988a44087a25ed64807f8f845~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="使用map向request域对象中共享数据"><a href="#使用map向request域对象中共享数据" class="headerlink" title="使用map向request域对象中共享数据"></a>使用map向request域对象中共享数据</h3><h3 id="使用modelmap向request域对象中共享数据"><a href="#使用modelmap向request域对象中共享数据" class="headerlink" title="使用modelmap向request域对象中共享数据"></a>使用modelmap向request域对象中共享数据</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/010c21c9d7424ad096d4f976ecf018c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="往session-x2F-application域对象中共享数据"><a href="#往session-x2F-application域对象中共享数据" class="headerlink" title="往session&#x2F;application域对象中共享数据"></a>往session&#x2F;application域对象中共享数据</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eabd92347f3949b0b585bc54d2be033e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试   向session域中共享数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">session</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/test/session&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">testSession</span>(<span class="params">HttpSession session</span>)&#123;</span><br><span class="line">    session.<span class="title function_">setAttribute</span>(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/test/application&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">testApplication</span>(<span class="params">HttpSession session</span>)&#123;</span><br><span class="line">    <span class="title class_">ServletContext</span> servletContext = session.<span class="title function_">getServletContext</span>();</span><br><span class="line">    servletContext.<span class="title function_">setAttribute</span>(<span class="string">&quot;testApplication&quot;</span>,<span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37c8f6daeb04c05a7d54497844e8c5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>注意其中的text&#x3D; ”${session.testSessionScope}”</strong></p><p><strong>和text&#x3D; ”${session.testApplication}”</strong></p><hr><h1 id="Spring-MVC中的视图"><a href="#Spring-MVC中的视图" class="headerlink" title="Spring MVC中的视图"></a>Spring MVC中的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图 当工程引入jstl的依赖，转发视图会自动转换为JstlView 若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视 图解析器解析之后所得到的是ThymeleafView</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a117c059906645ffa746aa0025bb6c6d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>从图中我们可以看出，所有的我们需要的控制器中的方法都是通过前端显示器DispacherServlet中的反射调用，然后被封装到madelandView对象中</p><p><em><strong>当我们的视图名称中没有任何前缀的话就默认创建的为 themleafView ， 如果以forword作为视图前缀的默认就是InternalResourceView （转发视图），如果是以redirect作为视图前缀就默认创建的重定向视图</strong></em></p><p><strong>三种视图：</strong></p><h3 id="ThymeleafView-："><a href="#ThymeleafView-：" class="headerlink" title="ThymeleafView ："></a>ThymeleafView ：</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置 的视图解析器解析，视图名称拼接视图前缀和视图</p><p>后缀所得到的最终路径，会通过转发的方式实现跳转</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/537a8b548e354541b5ee3ef9a12d6d35~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="InternalResourceView-：转发视图"><a href="#InternalResourceView-：转发视图" class="headerlink" title="InternalResourceView ：转发视图"></a>InternalResourceView ：转发视图</h3><p>SpringMVC中<strong>默认的转发视图是InternalResourceView</strong></p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视 图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部 分作为最终路径通过转发的方式实现跳转</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ac798b4ce6548b7a8b24611702b9bef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="RedirectView-：-默认的重定向视图"><a href="#RedirectView-：-默认的重定向视图" class="headerlink" title="RedirectView ： 默认的重定向视图"></a>RedirectView ： 默认的重定向视图</h3><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不 会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最 终路径通过重定向的方式实现跳转</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736e62b2bb8f4c86916faa5c580c37a5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="视图控制器-view-controller"><a href="#视图控制器-view-controller" class="headerlink" title="视图控制器 view-controller"></a>视图控制器 view-controller</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d46f2bb74ba044c097ce7d0eb805d251~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>作用是：为当前的请求直接设置视图名称，实现页面跳转</strong></p><hr><h1 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h1><p>REST：Representational State Transfer，<strong>表现层资源状态转移</strong></p><p><strong>资源</strong></p><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。</p><p>每个资源是服务器上一个 可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、 数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端 应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个 资源可以由一个或多个URI来标识。</p><p>URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴 趣的客户端应用，可以通过资源的URI与其进行交互</p><p><strong>资源的表述</strong></p><p>是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交 换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格 式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><p><strong>状态转移</strong></p><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资 源的表述，来间接实现操作资源的目的。</p><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：<strong>GET、POST、PUT、DELETE。</strong></p><p>它们分别对应四种基本操作：<strong>GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</strong></p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个<strong>单词使用斜杠分开</strong>，<strong>不使用问号键值对方式携带请求参数</strong>，而是将要发送给服务器的<strong>数据作为 URL 地址的一部分，以保证整体风格的一致性。</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dba8008bd87c4b99aa2a7d4c263f9572~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>由于目前的浏览器只支持get 和post方式的请求，如何发送put和delete请求呢 ？</strong></p><h3 id="HiddenHttpMethodFilter-（处理delete和put请求）"><a href="#HiddenHttpMethodFilter-（处理delete和put请求）" class="headerlink" title="HiddenHttpMethodFilter （处理delete和put请求）"></a>HiddenHttpMethodFilter （处理delete和put请求）</h3><p>HiddenHttpMethodFilter 处理put和delete请求的条件：</p><p><strong>a&gt; 当前请求的请求方式必须为post</strong></p><p><strong>b&gt; 当前请求必须传输请求参数_method，并且value值必须为要处理的put &#x2F; delete</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da0ec1a8875844ba9e3cd4a1eca64a18~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>满足以上条件，HiddenHttpMethodFilter 过滤器就会将当前请求的请求方式转换为请求参数 _method的值，因此请求参数_method的值才是最终的请求方式</p><h3 id="在web-xml中设置HiddenHttpMethodFilter"><a href="#在web-xml中设置HiddenHttpMethodFilter" class="headerlink" title="在web.xml中设置HiddenHttpMethodFilter"></a>在web.xml中设置HiddenHttpMethodFilter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置请求处理的过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c4080396c7c4e368e2e67a42746ba5e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>在themleaf中，删除操作不能直接将请求参数传进去，必须将请求参数和路径地址进行一下的修改才行</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fcf3d8fe3874c63868088efd8c63b1b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>进行修改操作时的数据回显，首先要设置input隐藏域，将真正的请求方式写入 and 将id写入，然后对于其他的个个属性进行数据回显</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0334f1ada177434e8e6d47cc428a45c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>对于单选框（性别等）的数据回显用</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c59f484b7194ebe87744aea6de1a3dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>在controller层的操作，</strong> <strong>先查寻，再进行修改</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec823625c2d24c1884c4f5e2e0a3d6ef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6a9b5637f704477ae558ed67e24ba1e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>进行删除操作时</strong></li></ol><p>要进行确认是否修改</p><h1 id="Spring中实现文件上传和下载"><a href="#Spring中实现文件上传和下载" class="headerlink" title="Spring中实现文件上传和下载"></a>Spring中实现文件上传和下载</h1><h3 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h3><p>ReponseEntity用于控制器方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以作为一个模板，以后只需要改一些内容即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test/down&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span></span><br><span class="line">            IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;WEB-INF/img&quot;</span>);</span><br><span class="line">        realPath = realPath + File.separator +<span class="string">&quot;5.png&quot;</span>;</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//创建输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">        <span class="comment">//创建字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        <span class="comment">//将流读到字节数组中</span></span><br><span class="line">        is.read(bytes);</span><br><span class="line">        <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        <span class="comment">//设置要下载方式以及下载文件的名字 key为固定的</span></span><br><span class="line">        headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=5.png&quot;</span>);</span><br><span class="line">        <span class="comment">//设置响应状态码</span></span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">        <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">        <span class="comment">//关闭输入流</span></span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h3><p><strong>要求：</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3d1661101bf41f3a8589c97c51773a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>操作：</p><ol><li>创建表单</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6189c78ac9ac43e1aa42d7529820c7d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>配置需要的xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>开启图片解析器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    图片解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>上传文件</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;test/up&quot;)</span><br><span class="line">  public String upPhotos(MultipartFile photo,HttpSession session) throws IOException &#123;</span><br><span class="line">      String <span class="attr">filename</span> = photo.getOriginalFilename()<span class="comment">;</span></span><br><span class="line">      System.out.println(filename)<span class="comment">;</span></span><br><span class="line">     //如果出现重名的情况就做如下操作</span><br><span class="line">      String <span class="attr">substring</span> = filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>))<span class="comment">;</span></span><br><span class="line">      String <span class="attr">uuid</span> = UUID.randomUUID().toString()<span class="comment">;</span></span><br><span class="line">      <span class="attr">filename</span> = uuid + substring<span class="comment">;</span></span><br><span class="line">      //这样设置的名字就与其有所差别，不会让文件内容被覆盖</span><br><span class="line">      </span><br><span class="line">      //获取servletContext对象</span><br><span class="line">      ServletContext <span class="attr">servletContext</span> = session.getServletContext()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      //获取当前工程的真实路径</span><br><span class="line">      String <span class="attr">photoPath</span> = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>)<span class="comment">;</span></span><br><span class="line">      //创建photoPath对应的file对象</span><br><span class="line">      File <span class="attr">file</span> = new File(photoPath)<span class="comment">;</span></span><br><span class="line">      if (!file.exists())&#123;</span><br><span class="line">          //如果没有直接创建</span><br><span class="line">          file.mkdir()<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      String <span class="attr">finalPath</span> = photoPath + File.separator + filename<span class="comment">;</span></span><br><span class="line">      //上传文件(转移文件到指定的位置)</span><br><span class="line">      photo.transferTo(new File(finalPath))<span class="comment">;</span></span><br><span class="line">      return &quot;success&quot;<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>结果(生成图片)</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/146cd63b3dd44aa89c0efe6bce5d9cfd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><ol><li>拦截器(interceptor)是springmvc中的一个组件，是运行在DispatcherServlet之后，运行在Controller之前的</li><li>拦截器可以决定对某些符合条件的进行拦截或者放行，所以，通常用于对一些具有相同运行条件的功能进行约束</li></ol><p>Spring 中的拦截器用于拦截控制器方法的执行1</p><p>拦截器需要实现HandlerInterceptor</p><p>拦截器必须在SpringMVC的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    图片解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过</span></span><br><span class="line"><span class="comment">    mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><ol><li><strong>preHandle</strong>：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，中断处理流程，即不调用控制器方法，不执行后序的内容</li><li><strong>postHandle</strong>：控制器方法执行之后执行postHandle()</li><li><strong>afterCompletion</strong>：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</li></ol><h3 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h3><p>①若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会<strong>按照配置的顺序</strong>执行，而postHandle()和afterCompletion()会按照配置的反序执行</p><p>②<strong>若某个拦截器的preHandle()返回了false</strong></p><p>preHandle()返回false<strong>和它之前的拦截器的preHandle()</strong> 都会执行，<em>postHandle()都不执行</em>，<strong>返回false 的拦截器之前的拦截器的afterCompletion()会执行</strong></p><h3 id="演示实例—登录检查"><a href="#演示实例—登录检查" class="headerlink" title="演示实例—登录检查"></a>演示实例—登录检查</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a88d2080cfd4cc6a9596d098097c5d8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在处理器执行之前调用(non-Javadoc)</span></span><br><span class="line"><span class="comment"> * 1. 获取session</span></span><br><span class="line"><span class="comment"> * 2. 读取session中的uid的值</span></span><br><span class="line"><span class="comment"> * 如果为null，表示没有登录，那么直接重定向到登录界面，同时返回false，不需要执行后面的流程了</span></span><br><span class="line"><span class="comment"> * 如果不为null，表示已经登录了，那么直接返回true，继续执行后面的拦截器或者处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">HttpSession session=request.getSession();   <span class="comment">//获取session</span></span><br><span class="line">Object uid=session.getAttribute(<span class="string">&quot;uid&quot;</span>);  <span class="comment">//读取session中的对象</span></span><br><span class="line"><span class="comment">//如果uid存在，那么即可登录完成</span></span><br><span class="line"><span class="keyword">if</span> (uid!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//返回true，登录成功就需要执行后续的流程</span></span><br><span class="line">&#125;</span><br><span class="line">response.sendRedirect(request.getContextPath()+<span class="string">&quot;/user/login.do&quot;</span>);  <span class="comment">//重定向到登录界面</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//返回false，后面的流程也不用执行了，直接中断</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/029eb7a6da6f4af688a6ed756bad5a37~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="拦截器和过滤器的区别-主要的区别"><a href="#拦截器和过滤器的区别-主要的区别" class="headerlink" title="拦截器和过滤器的区别(主要的区别)"></a>拦截器和过滤器的区别(主要的区别)</h2><ol><li>拦截器是springmvc中，仅仅当使用springmvc才可以使用拦截器，过滤器是Java EE体系中的，无论使用哪种框架都可以使用过滤器</li><li>拦截器在DispatcherServlet之后，在处理器之前执行，过滤器在DispatcherServlet之前执行</li><li>过滤器会在所有的servlet之前执行(所有的请求都会执行)，而拦截器会在springmvc中DispatcherServlet之后执行，所以过滤器在项目中可以过滤任何请求（只要是配置了对应的路径），而拦截器只会在DispatcherServlet处理的请求的基础之上进行拦截</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当多种请求都需要做相同或者极为相似的任务时，可以使用拦截器</li><li>开发好拦截器，那么需要在springmvc的配置文件中配置</li><li>在<a href="https://link.juejin.cn/?target=">mvc:interceptors</a>可以有如果若干个<a href="https://link.juejin.cn/?target=">mvc:interceptor</a>,即是配置若干个拦截器，配置的多个拦截器将会形成<strong>拦截器链</strong>，如果配置多个拦截器对同一个路径都会拦截，那么会按照配置的节点顺序执行。</li></ul><h3 id="异常处理的组件"><a href="#异常处理的组件" class="headerlink" title="异常处理的组件"></a>异常处理的组件</h3><p>如果报错就会直接跳转至该异常处理的组件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14aad479531f411493022eb19cbf8dab~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="SpringMVC的各个组件及其执行流程"><a href="#SpringMVC的各个组件及其执行流程" class="headerlink" title="SpringMVC的各个组件及其执行流程"></a>SpringMVC的各个组件及其执行流程</h1><h2 id="SpringMVC的常用组件"><a href="#SpringMVC的常用组件" class="headerlink" title="SpringMVC的常用组件"></a>SpringMVC的常用组件</h2><ol><li>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供 作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</li><li>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供 作用：根据请求的url、method等信息查找Handler，即控制器方法</li><li>Handler：处理器，需要工程师开发 作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</li><li>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供 作用：通过HandlerAdapter对处理器（控制器方法）进行执行</li><li>ViewResolver：视图解析器，不需要工程师开发，由框架提供 作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView</li><li>View：视图 作用：将模型数据通过页面展示给用户</li></ol><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><p>2.1. 不存在</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再判断是否配置了mvc:<span class="keyword">default</span>-servlet-handler</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果没配置，则控制台报映射查找不到，客户端展示404错误</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,<span class="selector-tag">HTML</span>），找不到客户端也会展示<span class="number">404</span>错误</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>2.2. 存在则执行以下流程</p><p>根据该URI，调用HandlerMappingrequestmapping进行匹配 获得该Handler配置的所有相关的对象（包括Handler对象以及 Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet 根据获得的<span class="built_in">Handler</span>(控制器方法)，选择一个合适的HandlerAdapter。</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果成功获得HandlerAdapter，此时将开始执行拦截器的<span class="built_in">preHandler</span>(…)方法【正向】</span><br></pre></td></tr></table></figure><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提取<span class="built_in">Request</span>中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e70a1037f9d84d2e90382c37cc3a7f4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此时将开始执行拦截器的postHandle(...)方法【逆向】。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行 HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model 和View，来渲染视图。</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">渲染视图完毕执行拦截器的<span class="built_in">afterCompletion</span>(…)方法【逆向】。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将渲染结果返回给客户端。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合实现CRUD</title>
      <link href="/post/5f70b419.html"/>
      <url>/post/5f70b419.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  关于SSM的整合及其实现CRUD功能和分页功能</p></blockquote><h1 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h1><p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1160530d03a4e05a117774a5ebec396~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p> 各个依赖的配置 ，直接复制即可</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --</span></span><br><span class="line"><span class="comment">    &lt;build</span></span><br><span class="line"><span class="comment">        &lt;!-- 构建过程中用到的插件 --</span></span><br><span class="line"><span class="comment">        &lt;plugins</span></span><br><span class="line"><span class="comment">            &lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --</span></span><br><span class="line"><span class="comment">            &lt;plugin</span></span><br><span class="line"><span class="comment">                &lt;groupIdorg.mybatis.generator&lt;/groupId</span></span><br><span class="line"><span class="comment">                &lt;artifactIdmybatis-generator-maven-plugin&lt;/artifactId</span></span><br><span class="line"><span class="comment">                &lt;version1.3.0&lt;/version</span></span><br><span class="line"><span class="comment">                &lt;!-- 插件的依赖 --</span></span><br><span class="line"><span class="comment">                &lt;dependencies</span></span><br><span class="line"><span class="comment">                    &lt;!-- 逆向工程的核心依赖 --</span></span><br><span class="line"><span class="comment">                    &lt;dependency</span></span><br><span class="line"><span class="comment">                        &lt;groupIdorg.mybatis.generator&lt;/groupId</span></span><br><span class="line"><span class="comment">                        &lt;artifactIdmybatis-generator-core&lt;/artifactId</span></span><br><span class="line"><span class="comment">                        &lt;version1.3.2&lt;/version</span></span><br><span class="line"><span class="comment">                    &lt;/dependency</span></span><br><span class="line"><span class="comment">                    &lt;!-- 数据库连接池 --</span></span><br><span class="line"><span class="comment">                    &lt;dependency</span></span><br><span class="line"><span class="comment">                        &lt;groupIdcom.mchange&lt;/groupId</span></span><br><span class="line"><span class="comment">                        &lt;artifactIdc3p0&lt;/artifactId</span></span><br><span class="line"><span class="comment">                        &lt;version0.9.2&lt;/version</span></span><br><span class="line"><span class="comment">                    &lt;/dependency</span></span><br><span class="line"><span class="comment">                    &lt;!-- MySQL驱动 --</span></span><br><span class="line"><span class="comment">                    &lt;dependency</span></span><br><span class="line"><span class="comment">                        &lt;groupIdmysql&lt;/groupId</span></span><br><span class="line"><span class="comment">                        &lt;artifactIdmysql-connector-java&lt;/artifactId</span></span><br><span class="line"><span class="comment">                        &lt;version8.0.26&lt;/version</span></span><br><span class="line"><span class="comment">                    &lt;/dependency</span></span><br><span class="line"><span class="comment">                &lt;/dependencies</span></span><br><span class="line"><span class="comment">            &lt;/plugin</span></span><br><span class="line"><span class="comment">        &lt;/plugins</span></span><br><span class="line"><span class="comment">    &lt;/build</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!--    Spring的版本，不需要一个个管理，直接配置好，然后用$&#123;&#125;来引用--</span></span><br><span class="line"><span class="comment">    &lt;properties</span></span><br><span class="line"><span class="comment">        &lt;spring.version5.3.1&lt;/spring.version</span></span><br><span class="line"><span class="comment">    &lt;/properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;dependencies</span></span><br><span class="line"><span class="comment">        &lt;!--上下文依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-context&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--管理bean的依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-beans&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--springmvc--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-web&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-webmvc&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--事务解析器(事务管理器)的那个类，就在jdbc中，所以需要引用这个依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-jdbc&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--管理切面的依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-aspects&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--Spring整和Junit测试的--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.springframework&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdspring-test&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version$&#123;spring.version&#125;&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- Mybatis核心 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.mybatis&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdmybatis&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version3.5.7&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--mybatis和spring的整合包，会提供一些特殊的类--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.mybatis&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdmybatis-spring&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version2.0.6&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- 连接池 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcom.alibaba&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIddruid&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.0.9&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- junit测试 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdjunit&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdjunit&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version4.12&lt;/version</span></span><br><span class="line"><span class="comment">            &lt;scopetest&lt;/scope</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- MySQL驱动 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdmysql&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdmysql-connector-java&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version8.0.16&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- log4j日志 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdlog4j&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdlog4j&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.2.17&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --</span></span><br><span class="line"><span class="comment">        &lt;!--分页插件--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcom.github.pagehelper&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdpagehelper&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version5.2.0&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- 日志 slf4g --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdch.qos.logback&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdlogback-classic&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.2.3&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- ServletAPI 前端控制器就是间接继承里面的httpServlet --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdjavax.servlet&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdjavax.servlet-api&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version3.1.0&lt;/version</span></span><br><span class="line"><span class="comment">            &lt;scopeprovided&lt;/scope</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--处理json数据的依赖--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcom.fasterxml.jackson.core&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdjackson-databind&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version2.12.1&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!--实现文件上传的依赖，下载不需要--</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdcommons-fileupload&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdcommons-fileupload&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version1.3.1&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment">        &lt;!-- Spring5和Thymeleaf整合包 --</span></span><br><span class="line"><span class="comment">        &lt;dependency</span></span><br><span class="line"><span class="comment">            &lt;groupIdorg.thymeleaf&lt;/groupId</span></span><br><span class="line"><span class="comment">            &lt;artifactIdthymeleaf-spring5&lt;/artifactId</span></span><br><span class="line"><span class="comment">            &lt;version3.0.12.RELEASE&lt;/version</span></span><br><span class="line"><span class="comment">        &lt;/dependency</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/dependencies</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p> web项目启动的时候,首先对web.xml文件进行一个加载,只有此文件没有异常的时候,我们加载的web项目才算是真正的跑起来,而web.xml文件的内容加载也是由一定的顺序的.</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;web-app version=<span class="string">&quot;2.4&quot;</span></span></span><br><span class="line"><span class="meta">         xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="meta">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="meta">         xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 配置Spring的编码过滤器 --</span></span><br><span class="line"><span class="meta">    &lt;filter</span></span><br><span class="line"><span class="meta">        &lt;filter-nameCharacterEncodingFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;filter-classorg.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class</span></span><br><span class="line"><span class="meta">        &lt;init-param</span></span><br><span class="line"><span class="meta">            &lt;param-nameencoding&lt;/param-name</span></span><br><span class="line"><span class="meta">            &lt;param-valueUTF-8&lt;/param-value</span></span><br><span class="line"><span class="meta">        &lt;/init-param</span></span><br><span class="line"><span class="meta">        &lt;init-param</span></span><br><span class="line"><span class="meta">            &lt;param-nameforceEncoding&lt;/param-name</span></span><br><span class="line"><span class="meta">            &lt;param-valuetrue&lt;/param-value</span></span><br><span class="line"><span class="meta">        &lt;/init-param</span></span><br><span class="line"><span class="meta">    &lt;/filter</span></span><br><span class="line"><span class="meta">    &lt;filter-mapping</span></span><br><span class="line"><span class="meta">        &lt;filter-nameCharacterEncodingFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;url-pattern/*&lt;/url-pattern</span></span><br><span class="line"><span class="meta">    &lt;/filter-mapping</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 配置处理请求方式PUT和DELETE的过滤器 --</span></span><br><span class="line"><span class="meta">    &lt;filter</span></span><br><span class="line"><span class="meta">        &lt;filter-nameHiddenHttpMethodFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;filter-classorg.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class</span></span><br><span class="line"><span class="meta">    &lt;/filter</span></span><br><span class="line"><span class="meta">    &lt;filter-mapping</span></span><br><span class="line"><span class="meta">        &lt;filter-nameHiddenHttpMethodFilter&lt;/filter-name</span></span><br><span class="line"><span class="meta">        &lt;url-pattern/*&lt;/url-pattern</span></span><br><span class="line"><span class="meta">    &lt;/filter-mapping</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 配置SpringMVC的前端控制器 --</span></span><br><span class="line"><span class="meta">    &lt;servlet</span></span><br><span class="line"><span class="meta">        &lt;servlet-nameSpringMVC&lt;/servlet-name</span></span><br><span class="line"><span class="meta">        &lt;servlet-classorg.springframework.web.servlet.DispatcherServlet&lt;/servlet-class</span></span><br><span class="line"><span class="meta">        &lt;!-- 设置SpringMVC的配置文件的位置和名称 --</span></span><br><span class="line"><span class="meta">        &lt;init-param</span></span><br><span class="line"><span class="meta">            &lt;param-namecontextConfigLocation&lt;/param-name</span></span><br><span class="line"><span class="meta">            &lt;param-valueclasspath:SpringMVC.xml&lt;/param-value</span></span><br><span class="line"><span class="meta">        &lt;/init-param</span></span><br><span class="line"><span class="meta">        &lt;!--将DispatcherServlet的初始化时间提前到服务器启动时--</span></span><br><span class="line"><span class="meta">        &lt;load-on-startup1&lt;/load-on-startup</span></span><br><span class="line"><span class="meta">    &lt;/servlet</span></span><br><span class="line"><span class="meta">    &lt;servlet-mapping</span></span><br><span class="line"><span class="meta">        &lt;servlet-nameSpringMVC&lt;/servlet-name</span></span><br><span class="line"><span class="meta">        &lt;url-pattern/&lt;/url-pattern</span></span><br><span class="line"><span class="meta">    &lt;/servlet-mapping</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!-- 设置Spring的配置文件的位置和名称 --</span></span><br><span class="line"><span class="meta">    &lt;context-param</span></span><br><span class="line"><span class="meta">        &lt;param-namecontextConfigLocation&lt;/param-name</span></span><br><span class="line"><span class="meta">        &lt;param-valueclasspath:Spring.xml&lt;/param-value</span></span><br><span class="line"><span class="meta">    &lt;/context-param</span></span><br><span class="line"><span class="meta">    &lt;!-- 配置Spring的监听器 ：作用再Spring服务启动时加载Spring的配置文件来获取ioc容器--</span></span><br><span class="line"><span class="meta">    &lt;listener</span></span><br><span class="line"><span class="meta">        &lt;listener-classorg.springframework.web.context.ContextLoaderListener&lt;/listener-class</span></span><br><span class="line"><span class="meta">    &lt;/listener</span></span><br><span class="line"><span class="meta">&lt;/web-app</span></span><br><span class="line"><span class="meta">        </span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC-xml"><a href="#SpringMVC-xml" class="headerlink" title="SpringMVC.xml"></a>SpringMVC.xml</h2><h3 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h3><ol><li><strong>用户发送请求，被 SpringMVC 的前端控制器 DispatcherServlet 拦截，配置拦截器</strong></li><li><strong>由 DispatcherServlet 查询HanderMapping，找到处理请求的Controller</strong></li><li><strong>Controller调用业务逻辑进行处理后，返回ModelAndView，进行试图控制</strong></li><li><strong>DispatcherServlet 查询视图解析器，找到ModelAndView指定的视图</strong></li><li><strong>视图负责将结果显示到客户端</strong></li></ol><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:mvc=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="meta">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">   &lt;!--扫描组件- SpringMVC只需要扫描控制层组件--</span></span><br><span class="line"><span class="meta">    &lt;context:component-scan base-package=<span class="string">&quot;SSM.controller&quot;</span>&lt;/context:component-scan</span></span><br><span class="line"><span class="meta">    &lt;!--配置视图解析器--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="meta">          class=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;order&quot;</span> value=<span class="string">&quot;1&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;characterEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;templateEngine&quot;</span></span></span><br><span class="line"><span class="meta">            &lt;bean class=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span></span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;templateResolver&quot;</span></span></span><br><span class="line"><span class="meta">                    &lt;bean class=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;!-- 视图前缀 --</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/</span></span><br><span class="line"><span class="meta">                        &lt;!-- 视图后缀 --</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.html&quot;</span>/</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;templateMode&quot;</span> value=<span class="string">&quot;HTML5&quot;</span>/</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;characterEncoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span> /</span></span><br><span class="line"><span class="meta">                    &lt;/bean</span></span><br><span class="line"><span class="meta">                &lt;/property</span></span><br><span class="line"><span class="meta">            &lt;/bean</span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--配置文件（图片）上传的解析器--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;multipartResolver&quot;</span> class=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;mvc:interceptors--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;mvc:interceptor--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;        对于path的路径中， /* 只能拦截根目录下的一层路径， /**可以拦截目录下所有的路径&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;mvc:mapping path=<span class="string">&quot;/**&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;            exclude除了XXX之外，需要拦截的请求路径&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;mvc:exclude-mapping path=<span class="string">&quot;/abc&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;配置拦截器的实现类，实现HandlerInterceptor(处理程序拦截器)接口&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;bean class=<span class="string">&quot;SSM.interceptor.FirstInterceptor&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--            &amp;lt;!&amp;ndash;            &lt;ref bean=<span class="string">&quot;firstInterceptor&quot;</span>/&amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;/mvc:interceptor--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;/mvc:interceptors--</span></span><br><span class="line"><span class="meta">    &lt;!-- 配置默认的servlet处理静态资源 --</span></span><br><span class="line"><span class="meta">    &lt;mvc:default-servlet-handler /</span></span><br><span class="line"><span class="meta">    &lt;!-- 开启MVC的注解驱动 --</span></span><br><span class="line"><span class="meta">    &lt;mvc:annotation-driven /</span></span><br><span class="line"><span class="meta">&lt;!--    &amp;lt;!&amp;ndash; 配置访问首页的视图控制 &amp;ndash;&amp;gt;--</span></span><br><span class="line"><span class="meta">    &lt;mvc:view-controller path=<span class="string">&quot;/&quot;</span> view-name=<span class="string">&quot;index&quot;</span>&lt;/mvc:view-controller</span></span><br><span class="line"><span class="meta">    &lt;mvc:view-controller path=<span class="string">&quot;/to/add&quot;</span> view-name=<span class="string">&quot;add&quot;</span>&lt;/mvc:view-controller</span></span><br><span class="line"><span class="meta">    &lt;mvc:view-controller path=<span class="string">&quot;/update&quot;</span> view-name=<span class="string">&quot;update&quot;</span>&lt;/mvc:view-controller</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;mvc:view-controller path=<span class="string">&quot;/update2&quot;</span> view-name=<span class="string">&quot;update&quot;</span>&lt;/mvc:view-controller--</span></span><br><span class="line"><span class="meta">&lt;/beans</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="Spring-xml"><a href="#Spring-xml" class="headerlink" title="Spring.xml"></a>Spring.xml</h2><h3 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>IOC容器、aop、装载bean、spring事务。</p></li><li><p>配置Mapper接口扫描，通过SqlSession创建 代理实现类对象，并将这些对象交给IOC容器来管理.省去dao层。</p></li><li><p>实现对MyBatis相关组件修改，可代替mybatis的配置文件</p></li></ol><h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="meta">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="meta">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--    扫描处理controller层之外的其他层--</span></span><br><span class="line"><span class="meta">    &lt;context:component-scan base-package=<span class="string">&quot;SSM&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;!--排除对控制层组件的扫描--</span></span><br><span class="line"><span class="meta">        &lt;context:exclude-filter type=<span class="string">&quot;annotation&quot;</span> expression=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/context:component-scan</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--配置事务管理器--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &lt;!--开启事务的管理驱动 ,将使用@Annotation标识的方法或类中所有的方法进行事务管理--</span></span><br><span class="line"><span class="meta">    &lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;!--    配置数据源的扫描--</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta">    &lt;!--配置SqlSessionFactory工厂</span></span><br><span class="line"><span class="meta">   配置sqlSessionBean ：可以帮助我们直接在Spring的ioc中获取sqlSessionFactory对象</span></span><br><span class="line"><span class="meta">   --</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;bean class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>--</span></span><br><span class="line"><span class="meta">&lt;!--        设置mybatis核心配置文件的bean--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;typeAliasesPackage&quot;</span> value=<span class="string">&quot;SSM.pojo.Employee&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">        &lt;!--将下划线映射为小驼峰--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;configurationProperties&quot;</span> value=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">        &lt;!--  这个标签设置原因是因为，映射文件所在的包，和mapper所在的包不一致时才设置</span></span><br><span class="line"><span class="meta">    &lt;property name=<span class="string">&quot;mapperLocations&quot;</span> value=<span class="string">&quot;classpath:mappers/*.xml&quot;</span>&lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;property name=<span class="string">&quot;plugins&quot;</span>--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;array--</span></span><br><span class="line"><span class="meta">&lt;!--                &lt;bean class=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>--</span></span><br><span class="line"><span class="meta">&lt;!--                &lt;/bean--</span></span><br><span class="line"><span class="meta">&lt;!--            &lt;/array--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;/property--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;/bean--</span></span><br><span class="line"><span class="meta">    &lt;!--配置SqlSessionFactory工厂</span></span><br><span class="line"><span class="meta">    配置sqlSessionBean ：可以帮助我们直接在Spring的ioc中获取sqlSessionFactory对象</span></span><br><span class="line"><span class="meta">    --</span></span><br><span class="line"><span class="meta">    &lt;bean id=<span class="string">&quot;sqlSessionFactory&quot;</span> class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;configurationProperties&quot;</span> value=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">     &lt;/bean</span></span><br><span class="line"><span class="meta">    &lt;!--配置mapper接口的扫描，可以将指定包下的所有mapper接口，通过SqlSession创建</span></span><br><span class="line"><span class="meta">    代理实现类对象，并将这些对象交给IOC容器来管理--</span></span><br><span class="line"><span class="meta">    &lt;bean class=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;property name=<span class="string">&quot;basePackage&quot;</span> value=<span class="string">&quot;SSM.mapper&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/property</span></span><br><span class="line"><span class="meta">    &lt;/bean</span></span><br><span class="line"><span class="meta">&lt;/beans</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-config-xml"><a href="#MyBatis-config-xml" class="headerlink" title="MyBatis-config.xml"></a>MyBatis-config.xml</h2><h3 id="作用：-3"><a href="#作用：-3" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>mybatis是对jdbc的封装，它让数据库底层操作变的透明。</p></li><li><p>mybatis的操作都是围绕一个sqlSessionFactory实例展开的。</p></li><li><p>mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库进行的sql语句映射。</p></li><li><p>在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession对象，再执行sql命令。</p></li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;!--MyBatis的核心配置文件--</span></span><br><span class="line"><span class="meta">&lt;configuration</span></span><br><span class="line"><span class="meta">    &lt;settings</span></span><br><span class="line"><span class="meta">        &lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从数据库列名 A_COLUMN 到属性名 aColumn 的类似映射 --</span></span><br><span class="line"><span class="meta">        &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;true&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/settings</span></span><br><span class="line"><span class="meta">    &lt;!--    引入properties文件  , 这样的话,以后就可以直接在当前文件中时使用 的方式来访问驱动类--</span></span><br><span class="line"><span class="meta">    &lt;typeAliases</span></span><br><span class="line"><span class="meta">        &lt;!--::用下面这个标签 他的别名就是pojo中的类名 ,且不区分大小写--</span></span><br><span class="line"><span class="meta">        &lt;package name=<span class="string">&quot;SSM.pojo&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/typeAliases</span></span><br><span class="line"><span class="meta">&lt;!--    将下划线映射为驼峰--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;settings--</span></span><br><span class="line"><span class="meta">&lt;!--        &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;true&quot;</span>/--</span></span><br><span class="line"><span class="meta">&lt;!--    &lt;/settings--</span></span><br><span class="line"><span class="meta">    &lt;!--配置分页插件--</span></span><br><span class="line"><span class="meta">    &lt;plugins</span></span><br><span class="line"><span class="meta">        &lt;!--设置分页插件--</span></span><br><span class="line"><span class="meta">        &lt;plugin interceptor=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;/plugin</span></span><br><span class="line"><span class="meta">    &lt;/plugins</span></span><br><span class="line"><span class="meta">    &lt;!--设置连接数据库的环境--</span></span><br><span class="line"><span class="meta">    &lt;environments default=<span class="string">&quot;development&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;!--          id  与default的内容是一样的--</span></span><br><span class="line"><span class="meta">        &lt;environment id=<span class="string">&quot;development&quot;</span></span></span><br><span class="line"><span class="meta">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/</span></span><br><span class="line"><span class="meta">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span></span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/</span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/</span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>/</span></span><br><span class="line"><span class="meta">            &lt;/dataSource</span></span><br><span class="line"><span class="meta">        &lt;/environment</span></span><br><span class="line"><span class="meta">    &lt;/environments</span></span><br><span class="line"><span class="meta">    &lt;!--mybatis映射文件--</span></span><br><span class="line"><span class="meta">    &lt;mappers</span></span><br><span class="line"><span class="meta">        &lt;!--</span></span><br><span class="line"><span class="meta">    这个的要求是:1. 映射文件所在的包 和mapper接口所在的包一样</span></span><br><span class="line"><span class="meta">               2. 映射文件的名字和mapper接口的名字保持一致</span></span><br><span class="line"><span class="meta">--</span></span><br><span class="line"><span class="meta">        &lt;package name=<span class="string">&quot;SSM.mapper&quot;</span>/</span></span><br><span class="line"><span class="meta">    &lt;/mappers</span></span><br><span class="line"><span class="meta">&lt;/configuration</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="log4j-xml"><a href="#log4j-xml" class="headerlink" title="log4j.xml"></a>log4j.xml</h2><h3 id="作用：-暂时不明"><a href="#作用：-暂时不明" class="headerlink" title="作用：(暂时不明)"></a>作用：(暂时不明)</h3><ol><li><p>ConsoleAppender: 日志输出到控制台；</p></li><li><p>FileAppender：输出到文件；</p></li><li><p>RollingFileAppender：输出到文件，文件达到一定阈值时，自动备份日志文件;</p></li><li><p>DailyRollingFileAppender：可定期备份日志文件，默认一天一个文件，也可设置为每分钟一个、每小时一个；</p></li><li><p>WriterAppender：可自定义日志输出位置</p></li></ol><h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE log4j:configuration SYSTEM <span class="string">&quot;log4j.dtd&quot;</span></span></span><br><span class="line"><span class="meta">&lt;log4j:configuration xmlns:log4j=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span></span></span><br><span class="line"><span class="meta">    &lt;appender name=<span class="string">&quot;STDOUT&quot;</span> class=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;param name=<span class="string">&quot;Encoding&quot;</span> value=<span class="string">&quot;UTF-8&quot;</span> /</span></span><br><span class="line"><span class="meta">        &lt;layout class=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span></span></span><br><span class="line"><span class="meta">            &lt;param name=<span class="string">&quot;ConversionPattern&quot;</span> value=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">%m (%F:%L) \n&quot;</span> /</span></span><br><span class="line"><span class="meta">        &lt;/layout</span></span><br><span class="line"><span class="meta">    &lt;/appender</span></span><br><span class="line"><span class="meta">    &lt;logger name=<span class="string">&quot;java.sql&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;level value=<span class="string">&quot;debug&quot;</span> /</span></span><br><span class="line"><span class="meta">    &lt;/logger</span></span><br><span class="line"><span class="meta">    &lt;logger name=<span class="string">&quot;org.apache.ibatis&quot;</span></span></span><br><span class="line"><span class="meta">        &lt;level value=<span class="string">&quot;info&quot;</span> /</span></span><br><span class="line"><span class="meta">    &lt;/logger</span></span><br><span class="line"><span class="meta">    &lt;root</span></span><br><span class="line"><span class="meta">        &lt;level value=<span class="string">&quot;debug&quot;</span> /</span></span><br><span class="line"><span class="meta">        &lt;appender-ref ref=<span class="string">&quot;STDOUT&quot;</span> /</span></span><br><span class="line"><span class="meta">    &lt;/root</span></span><br><span class="line"><span class="meta">&lt;/log4j:configuration</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h2 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h2><h3 id="作用：-4"><a href="#作用：-4" class="headerlink" title="作用："></a>作用：</h3><p> 实现MyBatis逆向工程的配置文件，具体操作详见 <strong>本人前面的文章</strong></p><h3 id="代码展示-3"><a href="#代码展示-3" class="headerlink" title="代码展示"></a>代码展示</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span></span></span><br><span class="line"><span class="meta">&lt;generatorConfiguration</span></span><br><span class="line"><span class="meta">        &lt;!--</span></span><br><span class="line"><span class="meta">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="meta">        MyBatis3Simple: 生成基本的CRUD（简洁版）</span></span><br><span class="line"><span class="meta">        MyBatis3: 生成带条件的CRUD（终极版）</span></span><br><span class="line"><span class="meta">--</span></span><br><span class="line"><span class="meta">        &lt;context id=<span class="string">&quot;DB2Tables&quot;</span> targetRuntime=<span class="string">&quot;MyBatis3&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 1. 数据库的连接信息 --</span></span><br><span class="line"><span class="meta">                &lt;jdbcConnection driverClass=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="meta">                    connectionURL=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="meta">                    userId=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="meta">                    password=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="meta">                &lt;/jdbcConnection</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 2. javaBean 数据库表对应的实体类--</span></span><br><span class="line"><span class="meta">                &lt;javaModelGenerator targetPackage=<span class="string">&quot;SSM.pojo&quot;</span> targetProject=<span class="string">&quot;.\src\main\java&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span> /</span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;trimStrings&quot;</span> value=<span class="string">&quot;true&quot;</span> /</span></span><br><span class="line"><span class="meta">                &lt;/javaModelGenerator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 3. SQL映射文件的生成策略 --</span></span><br><span class="line"><span class="meta">                &lt;sqlMapGenerator targetPackage=<span class="string">&quot;SSM.mapper&quot;</span> targetProject=<span class="string">&quot;.\src\main\resources&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span> /&lt;!--作用: 是否启动子包--</span></span><br><span class="line"><span class="meta">                &lt;/sqlMapGenerator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        &lt;!--        4. java客户端生成器--</span></span><br><span class="line"><span class="meta">                &lt;!-- 4. Mapper接口的生成策略 --</span></span><br><span class="line"><span class="meta">                &lt;javaClientGenerator type=<span class="string">&quot;XMLMAPPER&quot;</span> targetPackage=<span class="string">&quot;SSM.mapper&quot;</span> targetProject=<span class="string">&quot;.\src\main\java&quot;</span></span></span><br><span class="line"><span class="meta">                        &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span> /</span></span><br><span class="line"><span class="meta">                &lt;/javaClientGenerator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &lt;!-- 5. 逆向分析的表 --</span></span><br><span class="line"><span class="meta">                &lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --</span></span><br><span class="line"><span class="meta">                &lt;!-- domainObjectName属性指定生成出来的实体类的类名 --</span></span><br><span class="line"><span class="meta">                &lt;table tableName=<span class="string">&quot;t_emp&quot;</span> domainObjectName=<span class="string">&quot;Employee&quot;</span>/</span></span><br><span class="line"><span class="meta">        &lt;/context</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&lt;/generatorConfiguration</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>  以Employee实例为例</p><p>  具体的字段： emp_id , emp_name , age , gender , email</p><p>  对应属性： empId , empName , age , gender , email</p><h2 id="列表功能"><a href="#列表功能" class="headerlink" title="列表功能"></a>列表功能</h2><h3 id="实现详解："><a href="#实现详解：" class="headerlink" title="实现详解："></a>实现详解：</h3><ol><li><p>当服务器启动时，首先加载出index.html页面，我们进行点击进入列表页面时。此时前端就会发送一个请求到我们的controller层。</p></li><li><p>此时controller层组件就会匹配相对应的控制器方法，我们的请求为“&#x2F;employee” ， 匹配到后控制层就进行操作</p></li><li><p>因为控制层实现了service的自动装箱，所以通过就可以直接调用service层的方法处理需求</p></li><li><p>同时因为我们再Spring.xml中实现了对mapper接口的扫描，我们就不需要再进行调用DAO层，直接就可以操作数据库(已经通过SqlSession创建代理实现类对象)</p></li><li><p>同样的service层实现了对mapper的自动装箱，此时就可以直接调用mapper接口中的方法，对数据库进行操作，实现查询所有用户的功能返回给Controller层的方法中</p></li><li><p>在控制层我们就可以调用Model来实现数据向request域对象中共享数据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">addAttribute</span>(<span class="string">&quot;list&quot;</span>,list);</span><br></pre></td></tr></table></figure></li><li><p>最后将数据返回到前端</p></li></ol><h4 id="前端代码："><a href="#前端代码：" class="headerlink" title="前端代码："></a>前端代码：</h4> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">table</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span><span class="attr">员工列表</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th编号</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th姓名</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th年龄</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th性别</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th邮箱</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th操作</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span>&lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/to/add&#125;&quot;</span><span class="attr">添加员工</span>&lt;/<span class="attr">a</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;list&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empId&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empName&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.age&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/delete/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">删除</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/update/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">修改</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">table</span></span></span><br><span class="line"><span class="tag"></span></span><br></pre></td></tr></table></figure><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line">@RequestMapping(<span class="keyword">value</span> = <span class="string">&quot;/employee&quot;</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAllEmployee</span>(<span class="params">Model model</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee list = employeeService.getAllEmployee();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line">@Autowired</span><br><span class="line"><span class="keyword">private</span> EmployeeMapper mapper;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="function">Employee <span class="title">getAllEmployee</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.getAllEmployee();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line">List&lt;<span class="function">Employee <span class="title">getAllEmployee</span>()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;getAllEmployee&quot;</span> resultType=<span class="string">&quot;Employee&quot;</span></span><br><span class="line">        <span class="keyword">select</span> emp_id, emp_name,age,gender,email <span class="keyword">from</span> t_emp</span><br><span class="line">&lt;/<span class="keyword">select</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><h3 id="实现详解：-1"><a href="#实现详解：-1" class="headerlink" title="实现详解："></a>实现详解：</h3><ol><li>前面的步骤基本一样，前端发送请求到控制器层，Controller匹配相应的控制器方法进行实现</li><li>在前端传回的pageNum时，我们需要将Num交给service层，在service层开启分页功能，然后继续再service层查询到所有员工信息，再将数据交给PageInfo，通过他来获取分页相关的数据，最后返回pageInfo对象</li><li>最后将数据通过Model共享到Request域中，实现数据分页的显示</li></ol><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">table</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span><span class="attr">员工列表</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th编号</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th姓名</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th年龄</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th性别</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th邮箱</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">th操作</span>&lt;/<span class="attr">th</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span>&lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/to/add&#125;&quot;</span><span class="attr">添加员工</span>&lt;/<span class="attr">a</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;page.list&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empId&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empName&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.age&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">td</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/delete/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">删除</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">                &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/update/&#x27;+$&#123;employee.empId&#125;&#125;&quot;</span><span class="attr">修改</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;/<span class="attr">td</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">tr</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">table</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span></span></span><br><span class="line"><span class="tag">&lt;!<span class="attr">--</span>        &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee/page/1&#125;&quot;</span><span class="attr">首页</span>&lt;/<span class="attr">a--</span></span></span><br><span class="line"><span class="tag">&lt;!<span class="attr">--</span>        &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27; + $&#123;page.prePage&#125;&#125;&quot;</span><span class="attr">上一页</span>&lt;/<span class="attr">a--</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span>&lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee/page/1&#125;&quot;</span><span class="attr">首页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.prePage&#125;&#125;&quot;</span><span class="attr">上一页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">span</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">span</span> <span class="attr">th:each</span>=<span class="string">&quot;num : $&#123;page.navigatepageNums&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum==num&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;[&#x27;+$&#123;num&#125;+&#x27;]&#x27;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#d51313;&quot;</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum!=num&#125;&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;num&#125; &quot;</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">span</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasNextPage&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.nextPage&#125;&#125;&quot;</span><span class="attr">下一页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">            &lt;<span class="attr">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.pages&#125;&#125;&quot;</span><span class="attr">末页</span>&lt;/<span class="attr">a</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">span</span></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">div</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">body</span></span></span><br><span class="line"><span class="tag"></span></span><br></pre></td></tr></table></figure><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">&quot;/employee/page/&#123;pageNum&#125;&quot;</span>,method = <span class="title class_">RequestMethod</span>.<span class="property">GET</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getAllEmployeeByDev</span>(<span class="params"><span class="meta">@PathVariable</span>(<span class="string">&quot;pageNum&quot;</span>) Integer pageNum, Model model</span>)&#123;</span><br><span class="line">        <span class="title class_">PageInfo</span>&lt;<span class="title class_">Employee</span> page =employeeService.<span class="title function_">getAllEmployeeByDev</span>(pageNum);</span><br><span class="line">        model.<span class="title function_">addAttribute</span>(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">PageInfo</span>&lt;<span class="title class_">Employee</span> <span class="title function_">getAllEmployeeByDev</span>(<span class="params">Integer pageNum</span>) &#123;</span><br><span class="line">    <span class="comment">//开启分页公能</span></span><br><span class="line">    <span class="title class_">PageHelper</span>.<span class="title function_">startPage</span>(pageNum,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//查询所有的员工信息</span></span><br><span class="line">    <span class="title class_">List</span>&lt;<span class="title class_">Employee</span> list = mapper.<span class="title function_">getAllEmployee</span>();</span><br><span class="line">    <span class="comment">//获取分页相关的数据</span></span><br><span class="line">    <span class="title class_">PageInfo</span>&lt;<span class="title class_">Employee</span> pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;(list,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="title class_">List</span>&lt;<span class="title class_">Employee</span> <span class="title function_">getAllEmployee</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">select</span> <span class="attr">emp_id</span>, <span class="attr">emp_name</span>,<span class="attr">age</span>,<span class="attr">gender</span>,<span class="attr">email</span> <span class="attr">from</span> <span class="attr">t_emp</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&lt;/<span class="attr">select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"></span></span></span><br></pre></td></tr></table></figure><h2 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h2><h3 id="实现详解"><a href="#实现详解" class="headerlink" title="实现详解"></a>实现详解</h3><ol><li>前端通过点击添加功能的标签，将页面跳转到添加页面，添加页面通过form表单将数据input完成后回响给控制层，控制层通过匹配action的值匹配到相应的控制器方法</li><li>控制器方法将得到的数据封装到Employee类中，然后再通过service将数据保存到数据库</li><li>最后通过重定向将页面跳转到列表页面</li></ol><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">td</span>&lt;<span class="selector-tag">a</span> <span class="selector-tag">th</span>:<span class="selector-tag">href</span>=&quot;@&#123;/<span class="selector-tag">to</span>/<span class="selector-tag">add</span>&#125;&quot;添加员工&lt;/<span class="selector-tag">a</span>&lt;/<span class="selector-tag">td</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span></span><br><span class="line">    &lt;<span class="selector-tag">form</span> <span class="selector-tag">th</span>:<span class="selector-tag">action</span>=&quot;@&#123;/<span class="selector-tag">addEmp</span>&#125;&quot; <span class="selector-tag">method</span>=&quot;<span class="selector-tag">post</span>&quot;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>  修改添加上去  &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">hidden</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">_method</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">put</span>&quot;<span class="selector-tag">--</span></span><br><span class="line">        姓名: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">text</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">empName</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">AA</span>&quot;&lt;<span class="selector-tag">br</span></span><br><span class="line">        年龄: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">text</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">age</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="number">11</span>&quot;</span><br><span class="line">        &lt;<span class="selector-tag">br</span></span><br><span class="line">        性别: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">radio</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">gender</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">M</span>&quot;<span class="selector-tag">M</span></span><br><span class="line">        &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">radio</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">gender</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">F</span>&quot;<span class="selector-tag">F</span></span><br><span class="line">        &lt;<span class="selector-tag">br</span></span><br><span class="line">        <span class="selector-tag">email</span>: &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">text</span>&quot; <span class="selector-tag">name</span>=&quot;<span class="selector-tag">email</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">XXX</span>@<span class="selector-tag">qq</span><span class="selector-class">.com</span>&quot;</span><br><span class="line">        &lt;<span class="selector-tag">br</span></span><br><span class="line">        &lt;<span class="selector-tag">input</span> <span class="selector-tag">type</span>=&quot;<span class="selector-tag">submit</span>&quot; <span class="selector-tag">value</span>=&quot;<span class="selector-tag">addEmp</span>&quot;</span><br><span class="line">    &lt;/<span class="selector-tag">form</span></span><br><span class="line">&lt;/<span class="selector-tag">body</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span> (value = <span class="string">&quot;/addEmp&quot;</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmp</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeService.addEmp(employee);</span><br><span class="line">    <span class="comment">//重定向至原来的页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addEmp</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.insert(employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line">&lt;!--  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee record)</span>;--</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span></span><br><span class="line">    insert into <span class="title function_">t_emp</span><span class="params">(emp_name,age,gender,email)</span>    values(#&#123;empName&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line">    &lt;/insert</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h2><h3 id="实现详解-1"><a href="#实现详解-1" class="headerlink" title="实现详解"></a>实现详解</h3><ol><li>前端通过点击对应用户后面的修改按钮将所要修改的数据传到控制层由相关的控制层方法接收后开始在数据库中查询用户</li><li>将查询到的用户信息通过Model共享到request域中，然后通过请求转发到修改页面将需要修改的数据显示出来</li><li>修改完成后通过form表单提交数据，通过action匹配控制层中的相应控制器方法，再通过service将数据修改后保存，实现数据的修改</li><li>最后重定向回当初的页面</li></ol><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;&#x27;/update/&#x27;+<span class="variable">$&#123;employee.empId&#125;</span>&#125;&quot;</span>修改&lt;/a</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.otg&quot;</span></span><br><span class="line">&lt;<span class="built_in">head</span></span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &lt;title修改&lt;/title</span><br><span class="line">&lt;/head</span><br><span class="line">    &lt;body</span><br><span class="line">        &lt;form th:action=<span class="string">&quot;@&#123;/updateEmp&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span></span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;put&quot;</span></span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;empId&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.empId&#125;</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">            姓名: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;empName&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.empName&#125;</span>&quot;</span>&lt;br</span><br><span class="line">            年龄: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.age&#125;</span>&quot;</span></span><br><span class="line">            &lt;br</span><br><span class="line">            性别: &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;M&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.gender&#125;</span>&quot;</span>M</span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;F&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.gender&#125;</span>&quot;</span> F</span><br><span class="line">            &lt;br</span><br><span class="line">            email: &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> th:field=<span class="string">&quot;<span class="variable">$&#123;employee.email&#125;</span>&quot;</span></span><br><span class="line">            &lt;br</span><br><span class="line">            &lt;input <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;update&quot;</span></span><br><span class="line">        &lt;/form</span><br><span class="line">    &lt;/body</span><br><span class="line">&lt;/html</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/update/&#123;empId&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getEmpById</span>(<span class="params"><span class="meta">@PathVariable</span>(<span class="string">&quot;empId&quot;</span>) Integer empId,Model model</span>)&#123;</span><br><span class="line">    <span class="comment">//首先查询到id为要删除的人的id，然后将数据共享到add页面 ，最后实现的添加</span></span><br><span class="line">    <span class="comment">//employeeService.updateEmp();</span></span><br><span class="line">    <span class="title class_">Employee</span> employee = employeeService.<span class="title function_">getById</span>(empId);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(employee);</span><br><span class="line">    model.<span class="title function_">addAttribute</span>(<span class="string">&quot;employee&quot;</span>,employee);</span><br><span class="line">    <span class="comment">//        将数据共享到add页面显示出来，然后进行修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/update&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">Employee</span> <span class="title function_">getById</span>(<span class="params">Integer id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.<span class="title function_">selectByPrimaryKey</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="title class_">Employee</span> <span class="title function_">selectByPrimaryKey</span>(<span class="title class_">Integer</span> empId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EmployeeMapper.xml</span></span><br><span class="line">&lt;!--      <span class="title class_">Employee</span> <span class="title function_">selectByPrimaryKey</span>(<span class="title class_">Integer</span> empId);--</span><br><span class="line">&lt;select id=&quot;selectByPrimaryKey&quot; resultType=&quot;Employee&quot;</span><br><span class="line">    select emp_id, emp_name,age,gender,email from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">&lt;/select</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">//修改回显的数据Controller层</span><br><span class="line">@RequestMapping(value = &quot;/updateEmp&quot;, method = RequestMethod.PUT)</span><br><span class="line">public String updateEmployee(Employee employee)&#123;</span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    return &quot;redirect:/employee/page/1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//service层</span><br><span class="line">@Override</span><br><span class="line">public void save(Employee employee) &#123;</span><br><span class="line">    mapper.save(employee);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">&lt;!--      Employee save(Employee employee);--</span><br><span class="line">    &lt;update id=&quot;save&quot;</span><br><span class="line">      update t_emp set emp_name = #&#123;empName&#125; ,age = #&#123;age&#125; ,gender = #&#123;gender&#125;,email = #&#123;email&#125; where emp_id = #&#123;empId&#125;</span><br><span class="line">    &lt;/update</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h2><h3 id="实现详解-2"><a href="#实现详解-2" class="headerlink" title="实现详解"></a>实现详解</h3><ol><li>前端通过点击对应用户后面的删除按钮，将要删除的用户的id传入Contrller层，找到对应的控制器方法，通过service调用mapper接口中的方法实现在数据库中删除用户信息</li><li>通过重定向返回对应的页面</li></ol><h4 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;&#x27;/delete/&#x27;+<span class="variable">$&#123;employee.empId&#125;</span>&#125;&quot;</span>删除&lt;/a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="后端代码-4"><a href="#后端代码-4" class="headerlink" title="后端代码"></a>后端代码</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Controller层</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/delete/&#123;empId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;empId&quot;)</span> Integer empId)</span>&#123;</span><br><span class="line">    employeeService.deleteEmp(empId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee/page/1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">    mapper.deleteEmp(empId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer empId)</span>;</span><br><span class="line"></span><br><span class="line">&lt;!--  <span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer empId)</span>;--</span><br><span class="line">&lt;delete id=<span class="string">&quot;deleteEmp&quot;</span></span><br><span class="line">    delete from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> #&#123;empId&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统---文件与用户</title>
      <link href="/post/5f2109f0.html"/>
      <url>/post/5f2109f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户相关的指令"><a href="#用户相关的指令" class="headerlink" title="用户相关的指令"></a>用户相关的指令</h1><ol><li><strong>关机&amp;重启操作</strong></li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now <span class="comment">//立即关机</span></span><br><span class="line">shutdown -h <span class="number">1</span>  <span class="comment">//1分钟后关机</span></span><br><span class="line">shutdown -r now <span class="comment">//重启</span></span><br><span class="line">halt <span class="comment">//关机</span></span><br><span class="line">reboot <span class="comment">//现在重启计算机</span></span><br><span class="line">sync<span class="comment">//把数据同步到磁盘上</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65765d04bac745ec93e2ac1b5b840dbd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>用户登录和注销（su - tom）</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dfb9f6c95ef4616a202db0b3724ba8e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f079d0ffb7c24622b1e9600ad92cedd2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - tom</span><br><span class="line">su - root</span><br><span class="line">logout   <span class="comment">//退出系统</span></span><br></pre></td></tr></table></figure><ol><li><strong>用户管理- 添加用户</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84842a443c064d50a07b5a068b41752b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>注意： 在home目录下创建</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/470fd0b9d2d54b2fa82dc35271632b56~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>修改密码</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fea78a9784914ec183a04992582ea95f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>显示当前用户在哪个目录下【 输入： <strong>pwd</strong>】</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/335da09c7a4e498c9f517153113f31d4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>删除用户</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbe64bfdb6bb4a16a7f5274dca5a3db1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>注意： 在root环境下，并且地址为home目录下才能删除，但是这样删除会保留删除用户的home目录</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f29737736b9047938774339489b5ff3a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>使用【userdel -r tom】可以删除该用户的home目录</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fdde666026f4fd2bf186e1f38eff947~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>查询用户信息指令</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b17c4fd04084b49abfd93a5e02a78d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>查询当前用户</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c16a487e886c4c1eb2271e7d41a3d143~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>用户组</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d84cebdc5875418ea78f185115d7925b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>用户和组相关文件</strong> <strong>（暂时不明）</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d9552c889e94cc7966e0e18303f060b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用XXX代替用户</span></span><br><span class="line"><span class="selector-tag">useradd</span> <span class="selector-tag">XXX</span><span class="comment">//添加用户XXX</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">useradd</span> <span class="selector-tag">-d</span> <span class="selector-tag">XXX</span>  <span class="comment">//给新用户创建指定家目录</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">userdel</span> <span class="selector-tag">XXX</span> <span class="comment">//删除用户XXX ，但无法删除家目录，并且必须按ctrl + D 来登出，然后才能删除</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">userdel</span> <span class="selector-tag">-r</span> <span class="selector-tag">XXX</span>  <span class="comment">//删除XXX用户的home目录</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">id</span> <span class="selector-tag">XXX</span> <span class="comment">//查询用户XXX的信息</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">who</span> <span class="selector-tag">am</span> <span class="selector-tag">i</span>  <span class="comment">//查询当前用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将用AAA代替组名</span></span><br><span class="line"><span class="selector-tag">groupadd</span> <span class="selector-tag">AAA</span><span class="comment">//新增组</span></span><br><span class="line"><span class="selector-tag">groupdel</span> <span class="selector-tag">AAA</span> <span class="comment">//删除组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">usermod</span> <span class="selector-tag">-g</span> <span class="selector-tag">AAA</span> <span class="selector-tag">XXX</span>  <span class="comment">//增加用户XXX到组AAA上</span></span><br></pre></td></tr></table></figure><h1 id="Linux运行级别"><a href="#Linux运行级别" class="headerlink" title="Linux运行级别"></a>Linux运行级别</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> <span class="number">0</span> <span class="comment">//关机</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">1</span> <span class="comment">//单用户【找回丢失的密码】</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">2</span> <span class="comment">//多用户状态没有网络服务</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">3</span> <span class="comment">//多用户状态有网络服务</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">4</span> <span class="comment">//系统未使用保留给用户</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">5</span> <span class="comment">//图形界面</span></span><br><span class="line"><span class="keyword">init</span> <span class="number">6</span> <span class="comment">//系统重启</span></span><br></pre></td></tr></table></figure><ol><li><strong>指定运行级别</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e20ec89a570749f9b9ad4d22d9d5d17d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>帮助指令</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/792fbdc9dd494f85a82ec1be841878b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="文件目录类指令"><a href="#文件目录类指令" class="headerlink" title="文件目录类指令"></a>文件目录类指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>   //显示当前目录的所有内容</span><br><span class="line"><span class="built_in">ls</span> -a//显示当前目录的所有文件包括隐藏的</span><br><span class="line"><span class="built_in">ls</span> -l  //以列表的形式显示所有信息</span><br><span class="line"><span class="built_in">pwd</span>  //显示当前目录的绝对路径</span><br><span class="line"><span class="built_in">cd</span> ~home //返回到root目录</span><br><span class="line"><span class="built_in">cd</span> /home //到home目录</span><br><span class="line"><span class="built_in">rmdir</span> XXX //删除目录</span><br><span class="line"><span class="built_in">rm</span> rf /home/animal//删除一个空目录</span><br><span class="line"><span class="built_in">touch</span> XXX//创建一个文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r <span class="built_in">test</span>/ newtest //使用<span class="built_in">cp</span>指令将当前目录<span class="built_in">test</span>/的所有文件复制到新的目录newtest下</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58158d3e3c0e4806b0bc0ea30ad0228c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d463c269e7e45ec8123cb9507284d64~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f007ee25fe5d44c0b2cf56d53f1b9948~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cba38732e5743ba926826109f9f9b3f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58025c71727840329c0ec726899c716e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="more指令"><a href="#more指令" class="headerlink" title="more指令"></a>more指令</h3><p>主要在文本编辑器中进行操作</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44e63cb4b52743d18b34a9ec282f42c3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="Less指令"><a href="#Less指令" class="headerlink" title="Less指令"></a>Less指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c0391a63a9a490496b7e5049d60f168~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="echo指令"><a href="#echo指令" class="headerlink" title="echo指令"></a>echo指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8dfd56a9b024650a7134e88789213b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a>tail指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc9ce4a7bb174ead930b4a546aecc1a0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="gt-指令-和-gt-gt-指令"><a href="#gt-指令-和-gt-gt-指令" class="headerlink" title="&gt; 指令 和 &gt;&gt;指令"></a>&gt; 指令 和 &gt;&gt;指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31de0f0d5ade486393123d874bc58da8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="In指令"><a href="#In指令" class="headerlink" title="In指令"></a>In指令</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04250b67327f4447958ea01c8f5e7700~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> oldFile newFile //文件重命名</span><br><span class="line"><span class="built_in">mv</span> /temp/moveFile /targetFolder  //移动文件与目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> XXX //查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -r  //递归删除整个文件夹</span><br><span class="line"><span class="built_in">rm</span> -f//强制删除不提示</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span>指令 ：查看所有的历史指令记录</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉排序树(BST)</title>
      <link href="/post/ffb573e.html"/>
      <url>/post/ffb573e.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉排序树（Binary-Sort-Tree）"><a href="#二叉排序树（Binary-Sort-Tree）" class="headerlink" title="二叉排序树（Binary Sort Tree）"></a>二叉排序树（Binary Sort Tree）</h1><blockquote><p>前言： 二叉排序树是二叉树中十分重要的一种，又称二叉查找树（Binary Search Tree），亦称<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/7077855?fromModule=lemma_inlink">二叉搜索树</a>。是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink">数据结构</a>中的一类。在一般情况下，查询效率比链表结构要高。</p></blockquote><h2 id="Node节点类代码"><a href="#Node节点类代码" class="headerlink" title="Node节点类代码"></a>Node节点类代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day7_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找要删除的节点并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回要删除的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  Node <span class="title function_">searchNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.val == index)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到要删除的节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//情况一： 当前节点就是要删除节点的父节点</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.val == index) ||(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.val == index))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//左节点不为空，并且左节点就是parent</span></span><br><span class="line">            <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(index);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(index);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树的添加功能"><a href="#二叉排序树的添加功能" class="headerlink" title="二叉排序树的添加功能"></a>二叉排序树的添加功能</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>每传进来一个node节点，我们就与当前节点进行比较</p><ol><li><p>node的val值  &lt;  当前节点的val值：</p><p>​向左进行递归，一直递归到this.left &#x3D;&#x3D; null时，加入node节点</p></li><li><p>node的val值 &gt;&#x3D; 当前节点的val值：</p><p>​向右进行递归，知道this.right &#x3D;&#x3D; null时，加入node节点</p></li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//添加节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>结果：</strong></em></p><p>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;3]<br>Node[val&#x3D;5]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;12]</p><h2 id="二叉排序树删除功能详解"><a href="#二叉排序树删除功能详解" class="headerlink" title="二叉排序树删除功能详解"></a>二叉排序树删除功能详解</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>首先分三种情况进行处理：</p><p>① 所删除的节点为叶子节点（left 和right 节点上为空）</p><p>② 所删除的节点为非叶子节点，并且left 或 right节点上只有一个不为空</p><p>③ 所删除的节点为非叶子节点，并且left 和 right 都不为空</p><p><em><strong>在处理这三种情况之前，先再Node节点类中增添方法，用来查询要删除的目标节点targetNode 以及targetNode的父节点 parent节点</strong></em></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找要删除的节点并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回要删除的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  Node <span class="title function_">searchNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.val == index)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.searchNode(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.searchNode(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到要删除的节点的父节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除的节点的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回父节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="comment">//情况一： 当前节点就是要删除节点的父节点</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.val == index) ||(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.val == index))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//左节点不为空，并且左节点就是parent</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况一：删除的是叶子节点"><a href="#情况一：删除的是叶子节点" class="headerlink" title="情况一：删除的是叶子节点"></a>情况一：删除的是叶子节点</h4><h5 id="步骤：【"><a href="#步骤：【" class="headerlink" title="步骤：【"></a>步骤：【</h5><ol><li>找到目标节点targetNode  及其它的父节点 parent </li><li>确定targetNode是parent的left节点 还是right 节点</li><li>parent.left &#x3D; null 或 parent.right &#x3D; null ;</li></ol><p>】</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.searchNode(index);</span><br><span class="line"><span class="keyword">if</span> (targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;没有找到要删除的节点！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">    root = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> root.searchParent(index);</span><br><span class="line"><span class="comment">//要删除的是叶子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent.left!= <span class="literal">null</span> &amp;&amp; parent.left.val == targetNode.val)&#123;</span><br><span class="line">        parent.left = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right != <span class="literal">null</span> &amp;&amp; parent.right.val == targetNode.val ) &#123;</span><br><span class="line">        parent.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况二：要删除的节点只有一个子节点"><a href="#情况二：要删除的节点只有一个子节点" class="headerlink" title="情况二：要删除的节点只有一个子节点"></a>情况二：要删除的节点只有一个子节点</h4><h5 id="步骤【"><a href="#步骤【" class="headerlink" title="步骤【"></a>步骤【</h5><ol><li><p>找到父节点和targetNode目标节点后</p></li><li><p>先判断targetNode的left 和right 是否为空 ，如果不为空再判断是否有parent节点，因为很可能这个节点是root节点 ，root节点没有parent节点</p></li><li><p>接下来就是四种判断 </p><p>targetNode 有左节点 ，targetNode是parent的左节点；—–&gt;  parent.left &#x3D; targetNode.left;</p></li></ol><p>​targetNode 有左节点 ，targetNode是parent的右节点；—–&gt; parent.right &#x3D; targetNode.left;</p><p>​targetNode 有右节点 ，targetNode是parent的左节点；—–&gt;parent.left &#x3D; targetNode.right;</p><p>​targetNode 有右节点 ，targetNode是parent的右节点；—–&gt;parent.right &#x3D; targetNode.right;</p><p>】</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//要删除的节点有左子节点</span></span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                parent.left = targetNode.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right = targetNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = targetNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                parent.left = targetNode.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right = targetNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = targetNode.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况三：要删除的节点只有一个子节点"><a href="#情况三：要删除的节点只有一个子节点" class="headerlink" title="情况三：要删除的节点只有一个子节点"></a>情况三：要删除的节点只有一个子节点</h4><p>这种情况我们有两种解决办法</p><h5 id="步骤-【"><a href="#步骤-【" class="headerlink" title="步骤 【"></a>步骤 【</h5><p>​<strong>方法一：</strong>以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</p><p>​<strong>方法二：</strong>以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</p><p>】</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">//要删除的是有两个子节点的节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  方法一：以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</span></span><br><span class="line"><span class="comment">                  方法二：以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                int tempMin = 0;</span></span><br><span class="line"><span class="comment">//                Node tempNode = targetNode.right;</span></span><br><span class="line"><span class="comment">//                while(tempNode.left != null)&#123;</span></span><br><span class="line"><span class="comment">//                    tempNode = tempNode.left;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                tempMin = tempNode.val;</span></span><br><span class="line"><span class="comment">//                deleteNode(tempMin);</span></span><br><span class="line"><span class="comment">//                targetNode.val = tempMin;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempNode</span> <span class="operator">=</span> targetNode.left;</span><br><span class="line">                <span class="keyword">while</span>(tempNode.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    tempNode = tempNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempMax = tempNode.val;</span><br><span class="line">                deleteNode(tempMax);</span><br><span class="line">                targetNode.val = tempMax;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="main方法代码"><a href="#main方法代码" class="headerlink" title="main方法代码"></a>main方法代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] =&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">BinarySortTree</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        b.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    b.infix(b.root);</span><br><span class="line">    b.deleteNode(<span class="number">3</span>);</span><br><span class="line">    b.deleteNode(<span class="number">12</span>);</span><br><span class="line">    b.deleteNode(<span class="number">5</span>);</span><br><span class="line">    b.deleteNode(<span class="number">1</span>);</span><br><span class="line">    b.deleteNode(<span class="number">7</span>);</span><br><span class="line">    b.deleteNode(<span class="number">9</span>);</span><br><span class="line">    b.deleteNode(<span class="number">10</span>);</span><br><span class="line">    b.deleteNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;删除之后~~~&quot;</span>);</span><br><span class="line">    b.infix(b.root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体代码实现："><a href="#整体代码实现：" class="headerlink" title="整体代码实现："></a>整体代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day7_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] =&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">BinarySortTree</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            b.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        b.infix(b.root);</span><br><span class="line">        b.deleteNode(<span class="number">3</span>);</span><br><span class="line">        b.deleteNode(<span class="number">12</span>);</span><br><span class="line">        b.deleteNode(<span class="number">5</span>);</span><br><span class="line">        b.deleteNode(<span class="number">1</span>);</span><br><span class="line">        b.deleteNode(<span class="number">7</span>);</span><br><span class="line">        b.deleteNode(<span class="number">9</span>);</span><br><span class="line">        b.deleteNode(<span class="number">10</span>);</span><br><span class="line">        b.deleteNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后~~~&quot;</span>);</span><br><span class="line">        b.infix(b.root);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除二叉树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.searchNode(index);</span><br><span class="line">            <span class="keyword">if</span> (targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;没有找到要删除的节点！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> root.searchParent(index);</span><br><span class="line">            <span class="comment">//要删除的是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(parent.left!= <span class="literal">null</span> &amp;&amp; parent.left.val == targetNode.val)&#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right != <span class="literal">null</span> &amp;&amp; parent.right.val == targetNode.val ) &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的是有两个子节点的节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  方法一：以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</span></span><br><span class="line"><span class="comment">                  方法二：以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                int tempMin = 0;</span></span><br><span class="line"><span class="comment">//                Node tempNode = targetNode.right;</span></span><br><span class="line"><span class="comment">//                while(tempNode.left != null)&#123;</span></span><br><span class="line"><span class="comment">//                    tempNode = tempNode.left;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                tempMin = tempNode.val;</span></span><br><span class="line"><span class="comment">//                deleteNode(tempMin);</span></span><br><span class="line"><span class="comment">//                targetNode.val = tempMin;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempNode</span> <span class="operator">=</span> targetNode.left;</span><br><span class="line">                <span class="keyword">while</span>(tempNode.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    tempNode = tempNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempMax = tempNode.val;</span><br><span class="line">                deleteNode(tempMax);</span><br><span class="line">                targetNode.val = tempMax;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//要删除的节点有左子节点</span></span><br><span class="line">                    <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                            parent.left = targetNode.left;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            parent.right = targetNode.left;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                            parent.left = targetNode.right;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            parent.right = targetNode.right;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">(Node root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root.infix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>删除3 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;5]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;12]<br>删除3,12,5,1 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>删除3,12,5,1,7,9 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;10]<br>删除所有的之后<br>空树！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web项目整合---实现增删查改</title>
      <link href="/post/44f9189b.html"/>
      <url>/post/44f9189b.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于web项目中如何实现增删查改的操作"><a href="#关于web项目中如何实现增删查改的操作" class="headerlink" title="关于web项目中如何实现增删查改的操作"></a>关于web项目中如何实现增删查改的操作</h1><p>这里我们以一个书城项目为例讲解</p><h2 id="首先了解javaEE的三层架构"><a href="#首先了解javaEE的三层架构" class="headerlink" title="首先了解javaEE的三层架构"></a>首先了解javaEE的三层架构</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03ac4472cdda46b29e155c4891cca09a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"> 由图中我们可以看出,javaEE的三层架构严格的规定了项目中的每个模块,每个层需要完成的事情,这样会使项目的变得非常简洁,按部就班的完成每一部分,我们的项目也就很容易的完成,当然这这里说的只是针对非常简单的项目,对于大型项目就另当别论了。</p><h2 id="增删查改之—-增Create"><a href="#增删查改之—-增Create" class="headerlink" title="增删查改之—-增Create"></a>增删查改之—-增Create</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d0986b395245b689252d8e6b43cb15~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>从图中我们可以看出,当客户端用户输入完数据之后请求就会发送给服务器,当服务器端BooServlet接受到来自add.html页面的请求后就会做出相应的相应,通过反射调用Add(req,resp)方法</p><p>在Add方法中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected void add(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //1. 获取请求参数，封装成Book对象</span><br><span class="line">    String <span class="attr">name</span> = req.getParameter(<span class="string">&quot;name&quot;</span>)<span class="comment">;</span></span><br><span class="line">    String <span class="attr">author</span> = req.getParameter(<span class="string">&quot;author&quot;</span>)<span class="comment">;</span></span><br><span class="line">    BigDecimal <span class="attr">price</span> = BigDecimal.valueOf(Double.parseDouble(req.getParameter(<span class="string">&quot;price&quot;</span>)))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">sales</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;sales&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">stock</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;stock&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Book <span class="attr">book</span> = new Book(null, name, author, price, sales, stock, null)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    //2. 调用bookService.addBook(book)将数据保存入数据库</span><br><span class="line">    bookService.addBook(book)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    //3. 跳转回图书列表页面----又出现表单重复提交的bug</span><br><span class="line">    resp.sendRedirect(req.getContextPath() + &quot;/bookServlet?<span class="attr">action</span>=page&amp;page<span class="literal">No</span>=<span class="string">&quot;+req.getParameter(&quot;</span>page<span class="literal">No</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">复制代码</span></span><br></pre></td></tr></table></figure><p>这就是一个简单add方法的实现</p><h2 id="增删查改之—-查Read"><a href="#增删查改之—-查Read" class="headerlink" title="增删查改之—-查Read"></a>增删查改之—-查Read</h2><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fecaab1016447959d65038754887258~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><ol><li>在index上点击跳转到manager页面的请求，然后manager页面上显示响应【bookServlet？action&#x3D;list】，然后服务器端就会收到响应</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20fb6e0f76ac451ab13b44fd40ca2741~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>服务器端收到响应就会调用BookServlet的doPost方法，在doPost方法中显示的action收到的是list，然后后端就会调用list方法</p></li><li><p>在list方法中有三个步骤【</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span>  通过BookService调用BookDao中的查询所有图书的方法（queryBooks），然后queryBooks再次调用BaseDao抽象类中的queryForList方法查找到所有图书。</span><br><span class="line"><span class="bullet">2.</span> 将查询到的所有图书保存到request域中</span><br><span class="line"><span class="bullet">3.</span>  通过请求转发，将保存的数据回传给前端book<span class="emphasis">_manager.jsp页面</span></span><br><span class="line"><span class="emphasis">4.  book_</span>manager.jsp页面收到转发的请求，通过el表达式，将数据显示出来</span><br><span class="line"><span class="bullet">5.</span>  最后，数据就会完美的呈现在面前</span><br></pre></td></tr></table></figure></li></ol><p>】</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 通过BookService查询所有的图书</span></span><br><span class="line">    List&lt;Book&gt; books = bookService.queryBooks();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 保存所有的图书到request域中</span></span><br><span class="line"></span><br><span class="line">    req.setAttribute(<span class="string">&quot;books&quot;</span>,books);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 请求转发到book_manager.jsp</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;book_manager.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增删查改之—-改Update"><a href="#增删查改之—-改Update" class="headerlink" title="增删查改之—-改Update"></a>增删查改之—-改Update</h2><h3 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df30b25f71e74671a2e22e63088b475c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>首先点击修改，他将会调用doPost方法，将action值赋值为getBook</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40626b38033c47b2a91bd6ab7c9aa606~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>通过getBook()方法将id为XXX的数据获取出来然后显示在book_edit页面上。步骤有【</p><p>1&gt;  获取请求的参数信息–图书编号</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/172491c3edf24da8b9f52161b8b2902e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>2&gt; 调用BookService下的queryBookById()获取该图书的所有信息</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa79a8b38678487f9dde6b5aeec568db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>3&gt; 将数据保存在request作用域中</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e62b1a858f5b4d62804f5cf5b8eb22b0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>4&gt; 请求转发到book_edit页面 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc37668e4b4b42c3af63e149622708b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><p>】</p><ol><li>通过上述步骤，在book_edit页面就会显示要修改的数据，接下来要做的就是将要修改的数据保存起来，然后再回传给客户端</li><li>将book_edit页面的隐藏域的value值修改为动态获取的值<strong>因为book_edit页面会是实现两个操作，修改与保存，所以回传的action值就因该动态的获取是add&#x2F;update(判断的方法是id是否为空；添加的id为空)</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/099ca85f1c7547ddaa7ac71a4f3a109a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>这里我们回传的action值为update，所以再次回到BookServlet程序，这里我们调用的是doGet方法，然后通doGet在调用doPost 。通过doPost，因为action的值为update，所以这里我们调用update方法</strong>*</p><ol><li><p>在update方法中要实现以下的及步骤【</p><p>1&gt; 获取请求参数，封装成Book对象<strong>不能忘记id，修改的时候id值是存在的，我们得获取但是不能修改</strong></p><p>2&gt;通过BookService调用BookDao中的修改图书的方法（updateBook），然后updateBook再次调用BaseDao抽象类中的update方法将数据库中的数据修改保存</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/844acec9c4e94da696d91d1f440ce771~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>3&gt; 重定向跳转回原来的页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/411d93a1b17f4924a865951761780423~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void update(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //获取请求参数，封装成Book对象</span><br><span class="line">    Integer <span class="attr">id</span>= Integer.valueOf(req.getParameter(<span class="string">&quot;id&quot;</span>))<span class="comment">;</span></span><br><span class="line">    String <span class="attr">name</span> = req.getParameter(<span class="string">&quot;name&quot;</span>)<span class="comment">;</span></span><br><span class="line">    String <span class="attr">author</span> = req.getParameter(<span class="string">&quot;author&quot;</span>)<span class="comment">;</span></span><br><span class="line">    BigDecimal <span class="attr">price</span> = BigDecimal.valueOf(Double.parseDouble(req.getParameter(<span class="string">&quot;price&quot;</span>)))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">sales</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;sales&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">stock</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;stock&quot;</span>))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    Book <span class="attr">book</span> = new Book(id, name, author, price, sales, stock, null)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    bookService.updateBook(book)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    //请求重定向</span><br><span class="line">    resp.sendRedirect(req.getContextPath() + &quot;/bookServlet?<span class="attr">action</span>=page&amp;page<span class="literal">No</span>=<span class="string">&quot;+req.getParameter(&quot;</span>page<span class="literal">No</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="增删查改之—-删Delete"><a href="#增删查改之—-删Delete" class="headerlink" title="增删查改之—-删Delete"></a>增删查改之—-删Delete</h2><h3 id="思维导图-3"><a href="#思维导图-3" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bb36979638145b79e0673ca7437d6b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>服务器获取客户端要删除的数据的id</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b6c6734964240eba039f5ba5254a0db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>将请求发送至服务器，然后后端调用doPost方法，action传的值为delete</p></li><li><p>doPost方法，在其中执行这几步骤【</p><p>1&gt; 获取请求参数 id</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78c54fe73375454ebef06947711cee71~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>2&gt;通过BookService调用BookDao中的添加图书的方法（deleteBookById），然后adeleteBookById再次调用BaseDao抽象类中的update方法将数据库中的数据删除</p><p>3&gt;重定向跳转回原来的页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4afd8aff7e854767ae72aa2345af54bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><p>】</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求参数 id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="comment">//2. 调用BookService.deleteBookById()删除数据</span></span><br><span class="line">    bookService.deleteBookById(id);</span><br><span class="line">    <span class="comment">//3. 重定向跳转回原来的页面</span></span><br><span class="line"></span><br><span class="line">    resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/bookServlet?action=page&amp;pageNo=&quot;</span>+req.getParameter(<span class="string">&quot;pageNo&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线索化二叉树</title>
      <link href="/post/e71d88af.html"/>
      <url>/post/e71d88af.html</url>
      
        <content type="html"><![CDATA[<h1 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h1><blockquote><p>前言：</p><p>​对于线索化二叉树来说，他的后序线索化二叉树的遍历是其最难的地方，需要很多的辅助节点</p><p>​对于中序、前序线索化二叉树相对来说比较简单。</p></blockquote><h2 id="Node节点类的代码："><a href="#Node节点类的代码：" class="headerlink" title="Node节点类的代码："></a>Node节点类的代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * l 作用 ：标注left节点，若有值则为 0 无值,但经过序列化复制后为 1</span></span><br><span class="line"><span class="comment">     * r 作用 ：标注right节点，若有值则为 0 无值,但经过序列化复制后为 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> l;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">public</span> Node parent;  <span class="comment">//用于后序序列化遍历时使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.prefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.prefix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.suffix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.suffix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, left节点是否为空=&quot;</span> + l +</span><br><span class="line">                <span class="string">&quot;, right节点是否为空=&quot;</span> + r +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  <span class="comment">//0为有值 / 1为线索化后有值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前序线索化二叉树"><a href="#前序线索化二叉树" class="headerlink" title="前序线索化二叉树"></a>前序线索化二叉树</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路"><a href="#线索化思路" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>左移至最左边，判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li><li>向左右分别递归移动当前节点</li></ol><h5 id="线索化遍历思路"><a href="#线索化遍历思路" class="headerlink" title="线索化遍历思路"></a>线索化遍历思路</h5><p>​根左右，所以从根节点开始，沿着左子树进行处理，当子节点的left指针类型是null时，给其left赋值，然后标注为此node的l&#x3D; 1 说明到了最左子节点，然后处理子节点的right指针指向的节点，可能是右子树，也可能是后继节点，无论是哪种类型继续按照上面的方式（先沿着左子树处理，找到子树的最左子节点，然后处理right指针指向），以此类推，直到节点的right指针为空，说明是最后一个，遍历完成。 </p><h4 id="前序线索化"><a href="#前序线索化" class="headerlink" title="前序线索化"></a>前序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序线索化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先处理左节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;</span><br><span class="line">        node.l = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再处理右节点</span></span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = node;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    <span class="keyword">if</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">        prefixSearch(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    <span class="keyword">if</span>(node.r == <span class="number">0</span>)&#123;</span><br><span class="line">        prefixSearch(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前序线索化的遍历"><a href="#前序线索化的遍历" class="headerlink" title="前序线索化的遍历"></a>前序线索化的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序线索化二叉树的遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序线索化二叉树"><a href="#中序线索化二叉树" class="headerlink" title="中序线索化二叉树"></a>中序线索化二叉树</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路-1"><a href="#线索化思路-1" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>向左递归移动当前节点</li><li>判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li><li>向右递归移动当前节点</li></ol><h5 id="遍历思路"><a href="#遍历思路" class="headerlink" title="遍历思路"></a>遍历思路</h5><p>​左根右，因此第一个节点一定是最左子节点，先找到最左子节点，依次沿着right指针指向进行处理（无论是指向子节点还是指向后继节点），直到节点的right指针为空，说明是最后一个，遍历完成。 </p><h4 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用中序线索化将节点连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node : 为当前节点</span></span><br><span class="line"><span class="comment"> *        temp : 为当前节点的后面的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line"><span class="comment">//首先，如果当前节点为空，那么就不用继续连接</span></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左递归找到最left的节点</span></span><br><span class="line">    infixSearch(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//来处理当前节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;   <span class="comment">//如果当前节点的left为空，那么就说明已经递归到最left的节点了</span></span><br><span class="line">        node.l = <span class="number">1</span>;         <span class="comment">//标注，当前节点为叶子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后面的节点不能为空 。 因为他必须遍历到最left边（最左边的叶子节点）才能开始使用temp节点</span></span><br><span class="line">    <span class="keyword">if</span> (temp!= <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动辅助节点</span></span><br><span class="line">    temp = node;</span><br><span class="line">    <span class="comment">//右递归找到最right的节点</span></span><br><span class="line">    infixSearch(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序线索化的遍历"><a href="#中序线索化的遍历" class="headerlink" title="中序线索化的遍历"></a>中序线索化的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序线索化遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//首先创建一个临时节点，用于遍历所有的节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//先循环到最left</span></span><br><span class="line">        <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(node);</span><br><span class="line">        <span class="comment">//然后判断，继续循环其他的</span></span><br><span class="line">        <span class="keyword">while</span>(node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序线索化二叉树"><a href="#后序线索化二叉树" class="headerlink" title="后序线索化二叉树"></a>后序线索化二叉树</h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路-2"><a href="#线索化思路-2" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>向左递归移动当前节点</li><li>向右递归移动当前节点</li><li>判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li></ol><h5 id="线索化遍历思路-1"><a href="#线索化遍历思路-1" class="headerlink" title="线索化遍历思路"></a>线索化遍历思路</h5><p>​后序遍历线索化二叉树最为复杂，通用的二叉树数节点存储结构不能够满足后序线索化，因此我们扩展了节点的数据结构，增加了父节点的指针。后序的遍历顺序是：左右根，先找到最左子节点，沿着right后继指针处理，当right不是后继指针时，并且上一个处理节点是当前节点的右节点，则处理当前节点的右子树，遍历终止条件是：当前节点是root节点，并且上一个处理的节点是root的right节点。</p><h4 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序线索化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    suffixSearch(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    suffixSearch(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先处理左节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;</span><br><span class="line">        node.l = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再处理右节点</span></span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序线索化遍历★★★★★"><a href="#后序线索化遍历★★★★★" class="headerlink" title="后序线索化遍历★★★★★"></a>后序线索化遍历★★★★★</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序线索化遍历★★★★★</span></span><br><span class="line"><span class="comment"> * 与前面的有所不用，终止为临时节点到root节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root; <span class="comment">//辅助指针1</span></span><br><span class="line">    <span class="comment">//先循环走到最左边</span></span><br><span class="line">    <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//辅助指针2</span></span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果节点被序列化，那么就右移，同时移动辅助指针2</span></span><br><span class="line">        <span class="keyword">if</span> (node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">            pre = node;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果当前node节点有右节点，那么</span></span><br><span class="line">            <span class="keyword">if</span>(node.right == pre)&#123;</span><br><span class="line">                System.out.println(node);</span><br><span class="line">                <span class="keyword">if</span>(node == root)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = node;</span><br><span class="line">                node = node.parent; <span class="comment">// 回到父节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">                <span class="keyword">while</span> (node != <span class="literal">null</span> &amp;&amp; node.l == <span class="number">0</span>)&#123;</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅识Spring AOP</title>
      <link href="/post/8b9a3af8.html"/>
      <url>/post/8b9a3af8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><blockquote><p>引言(just I think)： <strong>因为java是面向对象编程，而面向对象是纵向继承机制，无法集中注意力到核心代码中，所以我们需要调用其他的机制来解决非核心代码的包装,将其从核心代码块中解耦出来</strong></p></blockquote><blockquote><p>首先我们从spring官网了解一下他们对AOP思想的介绍</p><p>官网地址：<a href="https://link.juejin.cn/?target=https://docs.spring.io/spring-framework/docs/2.5.5/reference/aop.html">docs.spring.io&#x2F;spring-fram…</a></p><p>面向方面编程 <em>(AOP) 通过提供另一种思考程序结构的方式来补充面向对象编程 (OOP)。OOP 中模块化的关键单元是类，而在 AOP 中，模块化的单元是</em>方面 <em>。方面使关注点模块化，例如跨越多种类型和对象的事务管理。（此类关注点在 AOP 文献中通常称为</em>横切关注点。）</p><p>Spring 的关键组件之一是<em>AOP 框架</em>。虽然 Spring IoC 容器不依赖于 AOP，这意味着您不需要使用 AOP，但 AOP 补充了 Spring IoC 以提供非常强大的中间件解决方案。</p></blockquote><h3 id="具体概念"><a href="#具体概念" class="headerlink" title="具体概念"></a>具体概念</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术  。*</span>**</span></span><br></pre></td></tr></table></figure><h3 id="AOP的相关相关术语："><a href="#AOP的相关相关术语：" class="headerlink" title="AOP的相关相关术语："></a>AOP的相关相关术语：</h3><ol><li><ol><li><strong>横切关注点</strong></li></ol></li></ol><p>就是从每个<strong>核心方法中</strong>抽取出来的非核心代码（既<strong>非核心业务逻辑</strong>），最后放入一个类中（<strong>这个类叫切面</strong>），不同的业务逻辑实现不同的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个概念不是语法层面天然存在的，而是根据附加功能（核心方法中的非核心代码）的逻辑上的需要：有十个附加功能（核心方法中的非核心代码），就有十个横切关注点。  </span><br></pre></td></tr></table></figure><ol><li><ol><li><strong>通知</strong></li></ol></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5883866603f1469ca4c2c9971796bee6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>简单地说就是在切面中，非核心业务也就是我们需要做的事，被封装成为一个方法（该方法叫通知）—-通知就是横切关注点的实现。</p><ol><li><strong>切面</strong></li></ol><p><em>封装横切关注点或者说是通知的类</em></p><ol><li><strong>目标</strong></li></ol><p><em>被代理的目标对象</em></p><ol><li><strong>代理</strong></li></ol><p><em>向目标对象应用通知之后创建的代理对象（不需要我们自己创建，封装的就是）AOP帮助我们创建</em></p><ol><li><strong>连接点</strong></li></ol><p><em>这也是一个纯逻辑概念，不是语法定义的。 把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉 点就是连接点</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fafd3911b50d40cb828bf8cbd5e6667d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em>从哪里套出来的就放回哪里，不改变元代码的逻辑</em></p><ol><li><strong>切入点</strong></li></ol><p><em>定位连接点的方式（位置）。</em></p><h3 id><a href="#" class="headerlink" title></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5112a18e0fc441c3a6f917333fbcbb8f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></h3><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><em><strong>简化代码：</strong></em> 把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。</li><li><em><strong>代码增强：</strong></em> 把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。</li></ul><h2 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h2><h3 id="技术说明："><a href="#技术说明：" class="headerlink" title="技术说明："></a>技术说明：</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93510564dc644f568d41641b73d0f4d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="几种动态代理"><a href="#几种动态代理" class="headerlink" title="几种动态代理"></a>几种动态代理</h3><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。</li><li>cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最 终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><p>通过阅读官方文档我们可以知道 :</p><p>Spring AOP <strong>默认使用标准的 J2SE</strong>* <strong>动态代理</strong>* 作为 AOP 代理。这使得任何接口（或接口集）都可以被代理。</p><h3 id="启用AOP顺序"><a href="#启用AOP顺序" class="headerlink" title="启用AOP顺序"></a>启用AOP顺序</h3><ol><li><strong>将目标对象和切面交给IOC容器管理（注解+扫描）</strong></li><li><strong>将切面类和目标类作为容器中的组件，所以加@Component</strong></li><li><strong>将当前组件用@Aspect注解标注为切面</strong></li><li><strong>开启基于注解的aop (</strong> 开启AspectJ的自动代理，为目标对象自动生成代理 <strong>)</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    作用： 开启基于注解的aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>配置好切入点表达式 ：</strong></li></ol><p><strong>声明一个方法，然后使用@Poincut注解来进行声明公共的切入点表达式 可)</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fb3a34826364f6b8182e1ac33922ad2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点表达式的重用******重点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    execution(权限修饰符 返回值 项目. 包/ *  . 类/ * .方法 (..) )</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com_Ray.such.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/735ab7047ed34ec3b81fb740df6a0df2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="AOP的各种通知详解"><a href="#AOP的各种通知详解" class="headerlink" title="AOP的各种通知详解"></a>AOP的各种通知详解</h3><p>各种通知的执行顺序：</p><blockquote><p>Spring版本5.3.x以前：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置通知 -<span class="punctuation">-&gt;</span>目标操作-<span class="punctuation">-&gt;</span> 后置通知-<span class="punctuation">-&gt;</span> 返回通知 / 异常通知</span><br></pre></td></tr></table></figure><p>Spring版本5.3.x以后：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置通知-<span class="punctuation">-&gt;</span> 目标操作-<span class="punctuation">-&gt;</span> 返回通知 / 异常通知-<span class="punctuation">-&gt;</span> 后置通知</span><br></pre></td></tr></table></figure></blockquote><ol><li><strong>前置语法：</strong></li></ol><p><strong>使用@Before注解标识，在被代理的目标方法前执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接点所对应方法的方法名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//2.  获取连接点所对应方法的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法名为： &quot;</span> + signature.getName()+ <span class="string">&quot;,参数为： &quot;</span> + Arrays.toString(args));</span><br><span class="line"><span class="comment">//        System.out.println(&quot;前置通知！&quot;);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>joinPoint 作为前置通知的方法的参数 ，可以获取连接点多对应的方法的签名信息（）</p><ol><li><strong>后置语法</strong></li></ol><p><strong>注解 ：@After（“point Cut（）”）在方法执行之后的finally中执行</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62e3ee1668eb4ef2a9d356096830114f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>返回通知</strong></li></ol><p><strong>注解： @AfterReturn（“point Cut（）“） 在目标对象执行之后执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回通知！</span></span><br><span class="line"><span class="comment"> * 在目标方法返回值之后的一个通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    System.out.println(<span class="string">&quot;方法： &quot;</span> + signature.getName()+<span class="string">&quot;执行返回通知&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>异常通知</strong></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@AfterThrowing(<span class="keyword">value</span> = <span class="string">&quot;pointCut()&quot;</span>,throwing = <span class="string">&quot;ex&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterThrow</span>(<span class="params">JoinPoint joinPoint, Throwable ex</span>)</span>&#123;</span><br><span class="line">    Signature signature = joinPoint.getSignature();</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;方法： &quot;</span> + signature.getName()+<span class="string">&quot;的异常通知:&quot;</span> + ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>环绕通知---@Around( )</strong></li></ol><p><em><strong>设置环绕通知之后就可以将所有前面的通知都涵盖进去</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54ec3fe2cdfb4bd3b267bfe2020faa1a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h2><p><strong>其基本与基于注解实现一样</strong></p><h3 id="配置xml环境"><a href="#配置xml环境" class="headerlink" title="配置xml环境"></a>配置xml环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:componentscan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcutref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;validateBeforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统学习</title>
      <link href="/post/6ea88167.html"/>
      <url>/post/6ea88167.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux操作系统"><a href="#linux操作系统" class="headerlink" title="linux操作系统"></a>linux操作系统</h1><h2 id="Linux的目录结构："><a href="#Linux的目录结构：" class="headerlink" title="Linux的目录结构："></a>Linux的目录结构：</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e0acf91abf541d08f5fd445614c0ed3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5e2a1000f4947d796b0596adbdc7122~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10e80a9586674529a8b50e920b781cc8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84409ad7377c4593b8b2ad616f6f47ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="树状图解"><a href="#树状图解" class="headerlink" title="树状图解"></a>树状图解</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ec3d8f97b5941cb843a829b470c4e0d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed935c1b0b7d4f8a9697a1ab668ac48b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="vi-x2F-vim的学习"><a href="#vi-x2F-vim的学习" class="headerlink" title="vi &#x2F; vim的学习"></a>vi &#x2F; vim的学习</h1><h2 id="什么是vi-x2F-vim，为什么我们需要学习"><a href="#什么是vi-x2F-vim，为什么我们需要学习" class="headerlink" title="什么是vi&#x2F; vim，为什么我们需要学习"></a>什么是vi&#x2F; vim，为什么我们需要学习</h2><p><strong>原因：</strong></p><ol><li><p>鸟哥的原因</p></li><li><ol><li>所有的Unix Like 系统都会内建vi 文书编辑器，其他的文书编辑器则不一定会存在；</li><li>很多个别软体的编辑介面都会主动呼叫vi (例如未来会谈到的crontab , visudo , edquota等指令)；</li><li>vim 具有程式编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程式设计；</li><li>因为程式简单，编辑速度相当快速。</li></ol></li><li><p><strong>有太多Linux 上面的指令都预设使用vi 作为资料编辑的介面，所以你必须、一定要学会 vi ，否则很多指令你根本就无法操作呢！</strong></p></li></ol><p><strong>什么是vi &#x2F; vim：</strong></p><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="https://link.juejin.cn/?target=https://www.vim.org/">www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h1 id="各种模式的切换"><a href="#各种模式的切换" class="headerlink" title="各种模式的切换"></a>各种模式的切换</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65f28fc1e02f491cbfedb42ed7b1ce39~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>各种模式解释：</p><ol><li>一般模式&#x2F;正常模式</li></ol><p>第一种：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88af663538104644908e005eb64930f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>第二种： 就是进入遍历模式，但是没有输入( i &#x2F; a的情况下 )</p><ol><li>编辑模式（输入i, I, o, O, a, A, r, R的情况下）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2df0a2f67c714011b91a631835f668bf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>命令模式</li></ol><p>就是进入编辑模式之后，输入完成按esc键，然后在输入 ：或者 &#x2F; 就会进入命令模式<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6931fb0e976243ee8e2c19ba174ffbdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="vim快捷键练习"><a href="#vim快捷键练习" class="headerlink" title="vim快捷键练习"></a>vim快捷键练习</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d74202aa35d44f9a7f46c0323a79a8c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>对于复制元素 命令： (x) yy,然后输入p &#x2F;&#x2F;x为我们需要向下拷贝的行数</li></ol><p>同样的对于拷贝&#x2F;复制 ，我们必须是在一般模式&#x2F;正常模式下进行</p><p><strong>操作方法：</strong> 【 现输入x(行数) ，然后再按yy，（接下来就是移动光标，比如我们向向下复制这几行元素，就必须在进行完上述操作后将光标移动到下面），最后在按p<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0254d9c3c4064001af77ef5c5c333bf3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img">最后呈现效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4b306cf85364ddf96c01ae9533dda41~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>】</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>删除当前行：输入dd</li></ol><p>(x) dd,然后输入p &#x2F;&#x2F;x为我们需要向下删除的行数</p><p>光标移动到当前行，然后输入5dd就会删除当前行下面的5行元素</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/087720ebad5f4d51a86bdd346568c9b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83da363939084ac3a6670c54c687c8c1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>在命令模式下进行</p><p>完成进入编辑模式后</p><p>操作： 输入 &#x2F;+关键字，然后按回车 —&gt; 就会在编辑页面出现查找的内容，输入 n就会查找下一个</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52bf7ac5b504f9085cce96077ec2c2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果：（输入n 就是查找下一个 ）<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5141613ff604e6d925d279432fee277~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="设置文件行号"><a href="#设置文件行号" class="headerlink" title="设置文件行号"></a>设置文件行号</h3><p>在命令模式下</p><p>操作： 进入命令行，输入:set nu</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac8ab4b6afee41f2beec046e95bfac79~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如果不想展示则输入 set nonu 就会取消行号设置</p><h3 id="快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下"></a>快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下</h3><p>直接输入 大写的G(最末行) 或者小写的gg(首行)</p><p>撤销编辑时的输入操作 在一般模式下&#x2F;正常模式下</p><p>输入 u</p><h3 id="快速定位到某一行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某一行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某一行 在一般模式下&#x2F;正常模式下"></a>快速定位到某一行 在一般模式下&#x2F;正常模式下</h3><p>操作： 输入 行号 –&gt; 在输入 shift + g （建议先打开行号）</p><h3 id="vim的键盘图"><a href="#vim的键盘图" class="headerlink" title="vim的键盘图"></a>vim的键盘图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c67f76506a491e93006c8adfd569a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0460b70928145bdb71c473cd3672c52~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><hr><h1 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h1><h3 id="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"><a href="#第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等" class="headerlink" title="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"></a>第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等</h3><table><thead><tr><th>移动游标的方法</th><th></th></tr></thead><tbody><tr><td>h 或向左方向键(←)</td><td>游标向左移动一个字元</td></tr><tr><td>j 或向下方向键(↓)</td><td>游标向下移动一个字元</td></tr><tr><td>k 或向上方向键(↑)</td><td>游标向上移动一个字元</td></tr><tr><td>l 或向右方向键(→)</td><td>游标向右移动一个字元</td></tr><tr><td>如果你将右手放在键盘上的话，你会发现hjkl 是排列在一起的，因此可以使用这四个按钮来移动游标。如果想要进行多次移动的话，例如向下移动30 列，可以使用”30j” 或”30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td>[Ctrl] + [f]</td><td>萤幕『向下』移动一页，相当于[Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>萤幕『向上』移动一页，相当于[Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>萤幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>萤幕『向上』移动半页</td></tr><tr><td>+</td><td>游标移动到非空白字元的下一列</td></tr><tr><td>-</td><td>游标移动到非空白字元的上一列</td></tr><tr><td>n</td><td>那个n 表示『数字』，例如20 。按下数字后再按空白键，游标会向右移动这一列的n 个字元。例如20 则游标会向后面移动20 个字元距离。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一列的最前面字元处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一列的最后面字元处(常用)</td></tr><tr><td>H</td><td>游标移动到这个萤幕的最上方那一列的第一个字元</td></tr><tr><td>M</td><td>游标移动到这个萤幕的中央那一列的第一个字元</td></tr><tr><td>L</td><td>游标移动到这个萤幕的最下方那一列的第一个字元</td></tr><tr><td>G</td><td>移动到这个档案的最后一列(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第n 列。例如20G 则会移动到这个档案的第20 列(可配合:set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一列，相当于1G 啊！(常用)</td></tr><tr><td>n</td><td>n 为数字。游标向下移动n 列(常用)</td></tr><tr><td>搜寻与取代</td><td></td></tr><tr><td>&#x2F;word</td><td>向游标之下寻找一个名称为word 的字串。例如要在档案内搜寻vbird 这个字串，就输入&#x2F;vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向游标之上寻找一个字串名称为word 的字串。</td></tr><tr><td>n</td><td>这个n 是英文按键。代表『重复前一个搜寻的动作』。举例来说， 如果刚刚我们执行&#x2F;vbird 去向下搜寻vbird 这个字串，则按下n 后，会向下继续搜寻下一个名称为vbird 的字串。如果是执行?vbird 的话，那么按下n 则会向上继续搜寻名称为vbird 的字串！</td></tr><tr><td>N</td><td>这个N 是英文按键。与n 刚好相反，为『反向』进行前一个搜寻动作。例如&#x2F;vbird 后，按下N 则表示『向上』搜寻vbird 。</td></tr><tr><td>使用&#x2F;word 配合n 及N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键字！</td><td></td></tr><tr><td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与n2 为数字。在第n1 与n2 列之间寻找word1 这个字串，并将该字串取代为 word2 ！举例来说，在100 到200 列之间搜寻vbird 并取代为VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！且在取代前显示提示字元给使用者确认(confirm) 是否需要取代！(常用)</td></tr><tr><td>删除、复制与贴上</td><td></td></tr><tr><td>x, X</td><td>在一列字当中，x 为向后删除一个字元(相当于[del] 按键)， X 为向前删除一个字元(相当于[backspace] 亦即是倒退键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除n 个字元。举例来说，我要连续删除10 个字元， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整列(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除游标所在的向下n 列，例如20dd 则是删除20 列 (常用)</td></tr><tr><td>d1G</td><td>删除游标所在到第一列的所有资料</td></tr><tr><td>dG</td><td>删除游标所在到最后一列的所有资料</td></tr><tr><td>d$</td><td>删除游标所在处，到该列的最后一个字元</td></tr><tr><td>d0</td><td>那个是数字的0 ，删除游标所在处，到该列的最前面一个字元</td></tr><tr><td>yy</td><td>复制游标所在的那一列(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制游标所在的向下n 列，例如20yy 则是复制20 列(常用)</td></tr><tr><td>y1G</td><td>复制游标所在列到第一列的所有资料</td></tr><tr><td>yG</td><td>复制游标所在列到最后一列的所有资料</td></tr><tr><td>y0</td><td>复制游标所在的那个字元到该列行首的所有资料</td></tr><tr><td>y$</td><td>复制游标所在的那个字元到该列行尾的所有资料</td></tr><tr><td>p, P</td><td>p 为将已复制的资料在游标下一列贴上，P 则为贴在游标上一列！举例来说，我目前游标在第20 列，且已经复制了10 列资料。则按下p 后， 那10 列资料会贴在原本的20 列之后，亦即由21 列开始贴。但如果是按下P 呢？那么原本的第20 列会被推到变成30 列。(常用)</td></tr><tr><td>J</td><td>将游标所在列与下一列的资料结合成同一列</td></tr><tr><td>c</td><td>重复删除多个资料，例如向下删除10 列，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>这个u 与[Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！(常用)</td></tr></tbody></table><h3 id="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般指令模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般指令模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th>进入插入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入插入模式(Insert mode)： i 为『从目前游标所在处插入』， I 为『在目前所在列的第一个非空白字元处开始插入』。(常用)</td></tr><tr><td>a, A</td><td>进入插入模式(Insert mode)： a 为『从目前游标所在的下一个字元处开始插入』， A 为『从游标所在列的最后一个字元处开始插入』。(常用)</td></tr><tr><td>o, O</td><td>进入插入模式(Insert mode)： 这是英文字母o 的大小写。o 为『在目前游标所在的下一列处插入新的一列』； O 为在目前游标所在处的上一列插入新的一列！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代游标所在的那一个字元一次；R会一直取代游标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字元时， 一定要在左下角处看到INSERT 或REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般指令模式中(常用)</td></tr></tbody></table><h3 id="第三部份：一般指令模式切换到指令列模式的可用按钮说明"><a href="#第三部份：一般指令模式切换到指令列模式的可用按钮说明" class="headerlink" title="第三部份：一般指令模式切换到指令列模式的可用按钮说明"></a>第三部份：一般指令模式切换到指令列模式的可用按钮说明</h3><table><thead><tr><th>指令列模式的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的资料写入硬碟档案中(常用)</td></tr><tr><td>:w!</td><td>若档案属性为『唯读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号(!) 在vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为:wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的资料储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的资料中，读入另一个档案的资料。亦即将『filename』 这个档案内容加到游标所在列后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将n1 到n2 的内容储存成filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开vi 到指令列模式下执行command 的显示结果！例如 『:! ls &#x2F;home』即可在vi 当中察看&#x2F;home 底下以ls 输出的档案资讯！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一列的字首显示该列的行号</td></tr><tr><td>:set nonu</td><td>与set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="参考说明："><a href="#参考说明：" class="headerlink" title="参考说明："></a>参考说明：</h1><p>文档学习:</p><p>​相关内容参考鸟哥Linux私房菜( <a href="https://link.juejin.cn/?target=https://linux.vbird.org/">linux.vbird.org&#x2F;</a> )</p><p>​视频学习：韩顺平Linux</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中的动态SQL技术</title>
      <link href="/post/c0b354ed.html"/>
      <url>/post/c0b354ed.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b1aefc3fff34f48a670f0cb2029b9a8~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="MyBatis中的动态SQL技术"></p><h1 id="MyBatis-之-动态SQL技术"><a href="#MyBatis-之-动态SQL技术" class="headerlink" title="MyBatis 之 动态SQL技术"></a>MyBatis 之 动态SQL技术</h1><p><strong>引言:</strong></p><blockquote><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p></blockquote><blockquote><p>这里我们使用的表为t_emp 对应的实体类名为Emp</p><p>字段: emp_name, emp_id ,age ,gender 对应的属性名 : empName , empId , age ,gender</p></blockquote><h2 id="First-if-标签"><a href="#First-if-标签" class="headerlink" title="First : if 标签"></a>First : if 标签</h2><p>if 标签只有一个test属性 只有test属性的表达式判定结果为true ,其中的内容才会被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp <span class="built_in">where</span></span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">             emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>但是这样做的局限性非常大 , 如果我们第一个if 不满足的话 ,那么就会导致后面满足条件的语句前面多出来一个and ,这个问题又无法解决 ,那么就用到了下面的where标签</p><h2 id="Second-where标签"><a href="#Second-where标签" class="headerlink" title="Second : where标签"></a>Second : where标签</h2><p>使用where 标签作用:</p><ol><li>如果标签中没有任何的条件满足 那么就不需要执行任何的功能 ;可以直接退出 , 如果满足 那么就执行里面的if 标签</li><li>可以将<strong>if中内容前面的没用的and去除 ( 内容后面的and 无法去除</strong>), 所以可以都添加 ;</li><li>如果 where 标签中有条件成立 , 他将会自动的添加where</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Third-trim-标签"><a href="#Third-trim-标签" class="headerlink" title="Third : trim 标签"></a>Third : trim 标签</h2><p><strong>trim标签中相关属性的作用</strong></p><ol><li>prefix &#x2F; suffix: 在内容前面 &#x2F; 后面添加指定内容</li><li>prefixOverrides &#x2F;suffixOverrides 在内容前面 &#x2F; 后面 去除某些指定内容</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;trim <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> prefixOverrides=<span class="string">&quot;and&quot;</span>&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fourth-choose-when-otherwise-标签"><a href="#Fourth-choose-when-otherwise-标签" class="headerlink" title="Fourth : choose - when - otherwise 标签"></a>Fourth : choose - when - otherwise 标签</h2><p>它和java中的switch语句十分相似 ,所以它只有一个when语句会被执行 ,如果都不满足 , 那么就会执行otherwise语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">        &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">            &lt;choose&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                 &lt;when <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;otherwise&gt;</span><br><span class="line">                &lt;/otherwise&gt;</span><br><span class="line">            &lt;/choose&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fifth-foreach-标签"><a href="#Fifth-foreach-标签" class="headerlink" title="Fifth : foreach 标签"></a>Fifth : foreach 标签</h2><p><strong>属性：</strong></p><ul><li>collection：设置要循环的数组或集合</li><li>item：表示集合或数组中的每一个数据</li><li>separator：设置循环体之间的分隔符</li><li>open：设置foreach标签中的内容的开始符</li><li>close：设置foreach标签中的内容的结束符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  批量添加员工信息  void insertMoreEmp(@Param (&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp values</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">             (null ,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)</span><br><span class="line">         <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">&lt;!--   批量删除的功能 void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where emp_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;empId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;empId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Sixth-SQL标签"><a href="#Sixth-SQL标签" class="headerlink" title="Sixth : SQL标签"></a>Sixth : SQL标签</h2><p>sql 标签 可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql <span class="attr">id</span>=<span class="string">&quot;Columns&quot;</span>&gt;</span><br><span class="line">    emp_id, emp_name,age ,gender</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">select &lt;include <span class="attr">refid</span>=<span class="string">&quot;Columns&quot;</span>&gt;&lt;/include&gt; from t_emp</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SpringMVC</title>
      <link href="/post/23c7dc9f.html"/>
      <url>/post/23c7dc9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅识SpringIOC"><a href="#浅识SpringIOC" class="headerlink" title="浅识SpringIOC"></a>浅识SpringIOC</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9215b78ca8964c1680efc934f81b494e~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="浅识 Spring IOC "></p><h1 id="小小了解一下-Spring-家族"><a href="#小小了解一下-Spring-家族" class="headerlink" title="小小了解一下 Spring 家族"></a>小小了解一下 Spring 家族</h1><blockquote><blockquote><p><strong>官网地址：<a href="https://link.juejin.cn/?target=https://spring.io/">spring.io&#x2F;</a></strong></p><p><strong>项目列表：<a href="https://link.juejin.cn/?target=https://spring.io/projects">spring.io&#x2F;projects</a></strong></p></blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首 次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应 用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践</p></blockquote><p>通过上面的粗略介绍 ,我们可以简单的了解一下Spring家族的厉害之处下面就是我们今天学习的重点</p><p><strong>Spring IOC( Inversion of Control )反转控制</strong></p><h1 id="First-理解什么是IOC思想"><a href="#First-理解什么是IOC思想" class="headerlink" title="First : 理解什么是IOC思想"></a>First : 理解什么是IOC思想</h1><p>图示理解:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15d9384a4554425ae7fb19863b29445~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Spring IOC.png">文字解释:</p><ul><li><p>①获取资源的传统方式</p><blockquote><p>传统的方式是组件主动的从容器中获取所需要的资源，在这样的 模式下开发人员往往需要知道在具体容器中特定资源的获取方式</p></blockquote></li><li><p>②反转控制方式获取资源</p><blockquote><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源 的方式即可，极大的降低了学习成本，提高了开发的效率。</p></blockquote></li><li><p>③DI：Dependency Injection，翻译过来就是依赖注入</p><blockquote><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。相对于IOC而言，这种表述更直接。 所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p></blockquote></li></ul><h1 id="Second-在Spring中的IOC是怎么体现出来的"><a href="#Second-在Spring中的IOC是怎么体现出来的" class="headerlink" title="Second : 在Spring中的IOC是怎么体现出来的"></a>Second : 在Spring中的IOC是怎么体现出来的</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d1c91bca5214088b92b3b1ec7a6fadd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"><strong>Spring中的IOC有两种实现方式 :</strong></p><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h2><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用</p><h2 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h2><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。(原因显而易见, 我们无法控制内部)</p><h3 id="ApplicationContext的主要实现类"><a href="#ApplicationContext的主要实现类" class="headerlink" title="ApplicationContext的主要实现类"></a>ApplicationContext的主要实现类</h3><ul><li>ClassPathXmlApplicationContext :<ul><li>见名知意 它就是通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</li></ul></li><li>FileSystemXmlApplicationContext :<ul><li>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</li></ul></li><li>ConfigurableApplicationContext :<ul><li>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力。</li></ul></li><li>WebApplicationContext :<ul><li>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中。</li></ul></li></ul><h1 id="Third-基于XML-管理IOC容器"><a href="#Third-基于XML-管理IOC容器" class="headerlink" title="Third : 基于XML 管理IOC容器"></a>Third : 基于XML 管理IOC容器</h1><h5 id="首先是创建所有的项目都绕不过去的坑—-引入依赖"><a href="#首先是创建所有的项目都绕不过去的坑—-引入依赖" class="headerlink" title="首先是创建所有的项目都绕不过去的坑—-引入依赖"></a>首先是创建所有的项目都绕不过去的坑—-引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/670a2ff0267e4fae955f78df171a8e94~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="1-操作顺序及其思路"><a href="#1-操作顺序及其思路" class="headerlink" title="1. 操作顺序及其思路"></a>1. 操作顺序及其思路</h2><p>创建自定义组件类的时候一定要创建有参和无参构造器两个, <strong>良好的代码习惯是避免犯错的前提</strong> Spring底层默认是通过反射来调用自定义组件类中的无参构造器来创建组件对象的<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f578a4d0612e4e0eaed84eb017038393~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="2-获取Bean的方式"><a href="#2-获取Bean的方式" class="headerlink" title="2. 获取Bean的方式"></a>2. 获取Bean的方式</h2><ul><li>①方式一：根据id获取</li><li>②方式二：根据类型获取</li><li>③方式三：根据id和类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;Spring配置文件.xml&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据id获取 </span></span><br><span class="line"><span class="comment">由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据类型获取--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(自定义组件类.class);</span><br><span class="line"><span class="comment">&lt;!--根据id和类型--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;,自定义组件类.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取bean时注意点"><a href="#获取bean时注意点" class="headerlink" title="获取bean时注意点"></a>获取bean时注意点</h4><p>首先 : <em><strong>在根据类型获取对象时</strong></em> 创建的Bean 对象只能有一个。因为<strong>默认情况下</strong>我们bean中的scope属性的值为”singleton” 如果<strong>想要创建多个对象 ,那么就将scope的属性设置为”prototype”</strong></p><p>其次 :如果组件的类型是接口类型 ,那么就必须设置<em>接口的实现类的Bean是唯一的</em> ,否则报错</p><h2 id="3-DI-依赖注入"><a href="#3-DI-依赖注入" class="headerlink" title="3. DI 依赖注入"></a>3. DI 依赖注入</h2><blockquote><p>这里用的是Student组件类 属性: id , name , age , sex</p></blockquote><h4 id="①-setXXX-方法-注入"><a href="#①-setXXX-方法-注入" class="headerlink" title="① setXXX()方法 注入"></a>① setXXX()方法 注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="②-构造器-注入"><a href="#②-构造器-注入" class="headerlink" title="② 构造器 注入"></a>② 构造器 注入</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> class=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="③-特殊类型-引用类型-的-注入"><a href="#③-特殊类型-引用类型-的-注入" class="headerlink" title="③ 特殊类型(引用类型)的 注入"></a>③ 特殊类型(引用类型)的 注入</h4><blockquote><p>首先创建被引用的类的Bean</p><p>比如下面 :先创建Clazz类的Bean ,然后该Bean的id (clazzOne) 作为需要引用的属性值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第二种</strong>方法就是创建内部bean(不常用 , 做了解即可)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第三种</strong>方法: 级联属性赋值 <strong>(一定先引用某个bean为属性赋值，才可以使用级联方式更新属性)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;三班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="④-特殊类型-数组类型-注入"><a href="#④-特殊类型-数组类型-注入" class="headerlink" title="④ 特殊类型(数组类型) 注入"></a>④ 特殊类型(数组类型) 注入</h4><blockquote><p>在前面的基础上 新增属性 String [ ] hobbies;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑤-特殊类型-List集合类型-注入"><a href="#⑤-特殊类型-List集合类型-注入" class="headerlink" title="⑤ 特殊类型(List集合类型) 注入"></a>⑤ 特殊类型(List集合类型) 注入</h4><blockquote><p>在Clazz 类中新增 List &lt; Student &gt; students;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑥-特殊类型-Map集合类型-注入"><a href="#⑥-特殊类型-Map集合类型-注入" class="headerlink" title="⑥ 特殊类型(Map集合类型) 注入"></a>⑥ 特殊类型(Map集合类型) 注入</h4><blockquote><p>新创建教师类Teacher 在学生类中添加Map&lt; String , Teacher &gt;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--这里我们同样的创建Teacher类的Bean--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Fourth-Bean的生命周期"><a href="#Fourth-Bean的生命周期" class="headerlink" title="Fourth : Bean的生命周期"></a>Fourth : Bean的生命周期</h1><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73d418aa28394d74999365dbeb04020b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="具体的生命周期过程"><a href="#具体的生命周期过程" class="headerlink" title="具体的生命周期过程"></a>具体的生命周期过程</h4><ol><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作（由bean的后置处理器负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ol><h1 id="Fifth-FactoryBean"><a href="#Fifth-FactoryBean" class="headerlink" title="Fifth : FactoryBean"></a>Fifth : FactoryBean</h1><p><strong>FactoryBean是Spring提供的一种整合第三方框架的常用机制</strong>。和普通的bean不同，配置一个 FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是 getObject()方法的返回值。通过这种机制 **(反射机制)**，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p><strong>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88d02ea7834b4f47992d23da8e8eaa03~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;bean.UserFactoryBean&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Sixth-基于注解管理Bean★★★★★"><a href="#Sixth-基于注解管理Bean★★★★★" class="headerlink" title="Sixth : 基于注解管理Bean★★★★★"></a>Sixth : 基于注解管理Bean★★★★★</h1><blockquote><p>首先了解一下注解</p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测 到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p><strong>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行</strong>。</p><p><strong>常用的注解 :</strong></p><blockquote><p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组 @Service：将类标识为业务层组件 @Repository：将类标识为持久层组件</p></blockquote><p>对于上述的除了Component注解之外的其他三个注解 Spring使用IOC容器管理这些组件来说<strong>没有区别</strong>。所以@Controller、@Service、@Repository这 三个注解<strong>只是给开发人员看的，让我们能够便于分辨组件的作用。</strong></p></blockquote><h4 id="扫描组件的几种情况"><a href="#扫描组件的几种情况" class="headerlink" title="扫描组件的几种情况"></a>扫描组件的几种情况</h4><ul><li>include-filter : 包含扫描 , 只扫描谁</li><li>exclude-filter : 排除扫描 , 不扫描谁</li><li>如果没有那么就默认全部扫描</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">         https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描组件  :   让spring知道 ,什么加了注解</span></span><br><span class="line"><span class="comment">    通过包来进行识别 ,直接扫描spring ,然后她下面的所有的包 以及类都会被扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com_Ray.spring&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--                在实际的项目开发中, 我们需要进行选择性的扫描 ,所以这时我们就需要进行排除</span></span><br><span class="line"><span class="comment">        include-filter : 包含扫描 , 只扫描谁</span></span><br><span class="line"><span class="comment">            [需要在context:component-scan标签中添加属性 :use-default-filters=&quot;false&quot; ]</span></span><br><span class="line"><span class="comment">        exclude-filter : 排除扫描 , 不扫描谁</span></span><br><span class="line"><span class="comment">                type : 排除的类型(根据什么进行排除/或者只包括什么类型):</span></span><br><span class="line"><span class="comment">                    annotation(注解的类型)  aspectj(了解即可)</span></span><br><span class="line"><span class="comment">                    assignable(类的类型)    custom(了解即可)     regex(了解即可)</span></span><br><span class="line"><span class="comment">                expression : 放置全类名(或者注解全名)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com_Ray.spring.controller.UserController&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceInpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="基于注解自动装配之Autowried注解"><a href="#基于注解自动装配之Autowried注解" class="headerlink" title="基于注解自动装配之Autowried注解"></a>基于注解自动装配之Autowried注解</h3><p>首先 ,自动装配是: 通过我们指定的策略 ,为我们当前ioc容器所管理的bean中的成员变量进行赋值的操作</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bb1f1cb6a0549a2af230743bd62ac57~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>@Autowried注解标识的位置:</strong></p><ol><li>标识在成员变量上</li><li>set方法上</li><li>为当前变量赋值的有参构造器上</li></ol><h4 id="Autowried注解的原理"><a href="#Autowried注解的原理" class="headerlink" title="@Autowried注解的原理"></a>@Autowried注解的原理</h4><p><strong>场景参考:</strong><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b07a73061ffa47f6a85efca66b37307d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>原理 :</p><ol><li><strong>byType 根据类型来找到一个类型匹配的bean ,来为当前的属性自动进行赋值</strong></li></ol><p><em><strong>自动装配:</strong></em> <em><strong>根据指定的策略,在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的</strong></em> <em><strong>类类型或接口类型属性</strong></em> <em>赋值</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c64696fdf8a46e886263c37445ef7f4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>byName 把需要赋值的属性的名字来作为bean的id在ioc容器中去匹配到某一个bean来为当前的属性赋值</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2838e7fe41d647e6bdfab066db6e8c93~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em><strong>实现流程:</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9fa2b8a09f44b7cb8d2f3ec2e7a4747~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c711a4d811e4af08a993786552b6626~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h1 id="Finally-写在最后"><a href="#Finally-写在最后" class="headerlink" title="Finally : 写在最后"></a>Finally : 写在最后</h1><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>本站是本人的私人博客，所有的博客都是经过自己学习总结得出的。可能内容质量比较差，也许您有疑惑，或者说是博客哪里写的有问题，希望各位能够谅解！！！</p><p>如果您方便，也可以添加我的qq或微信指出我的不足。</p><h1 id="关于图片中的稀土掘金标签问题"><a href="#关于图片中的稀土掘金标签问题" class="headerlink" title="关于图片中的稀土掘金标签问题"></a>关于图片中的稀土掘金标签问题</h1><p> 因为从本地上传图片比较麻烦，有时也会出现图片加载失败的问题，所以为了方便起见，我先将文章发布到稀土掘金上，这样就可以直接复制图片，保证了图片不加载失败</p><p><img src="/images/bc-images.png" alt="image-20230413145336043"></p><h1 id="分享一些话"><a href="#分享一些话" class="headerlink" title="分享一些话"></a>分享一些话</h1><blockquote><p>这世上的事，认真不对，不认真也不对，执着不对，一切视为空气也不对。平平常常自自然然，如上山拜佛，见了佛像就磕头，磕了头，佛像还是佛像，你还是你，生活之累，就该少下来了</p></blockquote><blockquote><p>在这人世间，有些路是非得单独一个人去面对，单独一个人去跋涉的，路再长再远，夜再黑再暗，也得独自默默地的走下去。如果遇到了一个陪伴自己走了很长一段路的人，剩下的除了感恩还是感恩。</p></blockquote><blockquote><p>你身边全都是和你当年一样充满野心、充满激情、充满渴望的年轻人，他们把你的长处和你的短处拿出来放在显微镜下去研究，以你为标靶，你说你守天下难不难。</p></blockquote><blockquote><p>屏蔽力是一个人最高级的能力，任何消耗你的人和事，多看一眼都是不应该的。不敏感于他人的目光，不生活在别人的嘴里，做自己人生的评判管，才是最难得的清醒。</p></blockquote><blockquote><p>月亮代表崇高而不可企及的梦想，六便士则代表了生存，不得不赚取的卑微收入。多少人只是胆怯地抬头看一眼月亮，又继续低头追求温饱的六便士，二者是否可以和谐共处。一般情况下，每个对月亮充满渴望的人，都必须在生存线上苦苦挣扎，而那些为了六便士卑躬屈膝的人，慢慢地会觉得六便士就是月亮，就是人生的终极理想。</p></blockquote><blockquote><p>在所有的物是人非中，我最怀念曾经的自己</p></blockquote><blockquote><p>在遇见麻烦时，你不会听到我的抱怨，你只会得到我给出的解决办法</p></blockquote><blockquote><p>我未曾见过一个早起、勤奋，谨慎，诚实的人抱怨命运不公；我也未曾见过一个认真负责、努力好学、心胸开阔的年轻人，会一直没有机会的。</p></blockquote><blockquote><p>你可以感慨人世间的凉薄，你可以感慨普通人的艰难，但是你要知道普通人家的孩子读书学习，是一条最不难的路，不要老是嘲笑很多人读了书，最后也不过是送外卖送快递，也不过是如何如何，那只是有的人时运不济，可是他们时运不济时的下限，就已经是很多不读书不学习人的上限了。所以别嫌读书学习苦，为了逃避读书学习的苦，你可能要在生活当中吃到更多的苦。</p></blockquote><blockquote><p>格局如果能大一些，身边的破事就会少一些，人的生命格局一大，就不会在生活琐事里沉沦。有很多人一辈子也走不出那个狭小的圈子，就会与这小圈子里的人相互内耗，当你发现一个小圈子里的人都在相互的内耗，不要试图去改变，明智的选择是远离这个圈子，外面的世界很大，空气更清新。</p></blockquote><blockquote><p>最能让人感到快乐的事，莫过于经过一番努力后，所有东西正慢慢变成你想要的样子。</p></blockquote><blockquote><p>心中装满着自己的看法和想法的人，永远听不见别人的心声。</p></blockquote><blockquote><p>我们从小都在接受要做一个诚实的人，不要欺骗别人，但是很少有人会教育我们，</p><p><code>人最重要的是不欺骗自己</code>。人生有胜有败，胜利很重要，我们有时候应该并且理所当然的去享受胜利，但是有时候往往在追求胜利的途中，我们太渴望成功快点到来，所以迷失了自己，我们无法掌握胜败，最终被胜败所掌握。接受胜利很容易，接受失败很难，所以勇敢的承认失败，面对失败，承认所有的一切，有时候是人生新征途的起点</p></blockquote><blockquote><p>“你要努力变成自己想象中的样子，这一点，一步都不能让 ”</p></blockquote><blockquote><p>我拼尽全力是为了赢， 而不是虽败犹荣</p></blockquote><blockquote><p>真的是好人做多了，人人都想从你这占点便宜</p></blockquote><blockquote><p>无论你的人生上到了哪层台阶</p><p>​阶下有人仰望你， 阶上亦有人在俯视你。</p><p>你抬头自卑，低头自得。</p><p>​唯有平视才得以看见最真实的自己。人身漫漫，好坏难分，心安即归处。</p></blockquote><blockquote><p>在人生的路上， 一定会有迷茫、焦虑、孤独</p><p>​但请你在短暂的喘息过后，勇敢的咽下生活的委屈</p><p>​在逆境中野蛮生长，做一个为自己负责的成年人</p></blockquote><h1 id="缺席打卡："><a href="#缺席打卡：" class="headerlink" title="缺席打卡："></a>缺席打卡：</h1><ol><li>2023.1.12日，暂无总结内容</li><li>2023.1.17日，在外面，有事未归</li><li>2023.1.20日，日常刷题，暂无总结</li><li>2023.1.21日，日常刷题，暂无总结</li><li>2023.1.30日，家中有事，无总结</li><li>2023.1.31日，无总结</li><li>2023.2.1日-2.4日，返校</li><li>2023.2.5日，日常刷题，暂无总结</li><li>2023.2.7日，刷题、听课</li><li>2023.2.9日，刷题、听课，暂无总结</li><li>2023.2.10日，刷题、听课，暂无总结</li><li>2023.2.18 —-2023.2.27日，写项目</li><li>2023.3.2日，日常刷题</li><li>2023.3.30日，外出有事</li><li>2023.4.1日，外出有事</li><li>2023.4.8日，这两天备赛蓝桥杯</li><li>2023.4.15日 准备找实习</li><li>2023.4.16日，巩固基础，日常刷题</li><li>2023.4.19日，刷题，巩固基础</li><li>2023.4.23-24日，准备实习， 刷题，巩固基础</li><li>2023.4.26日，刷题，巩固基础</li><li>2023.4.29日 — 2023.5.2日 外出</li><li>2023.5.3.开始新的一轮冲刺！！！</li><li>2023.5.4日，offer run </li><li>2023.5.7日，日常刷题</li><li>2023.5.11日，日常刷题</li><li>2023.5.23-30日， 准备期末考试的复习。最近更新减少</li><li>2023.6.4日，准备实习</li><li>2023.6.11日 - 14日，备战考试</li><li>2023.6.14日， 上班&amp;自学 开始</li><li>2023.7.5日 ， 回顾深入学习SpringBoot</li><li>2023.7.13日， 这行tmd的就没有不加班的…</li><li>2023.7.27日， 前端学习ing</li><li>2023.7.31日， 前端学习ing</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
