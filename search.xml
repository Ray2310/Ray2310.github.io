<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉排序树(BST)</title>
      <link href="/post/ffb573e.html"/>
      <url>/post/ffb573e.html</url>
      
        <content type="html"><![CDATA[<h1 id="二叉排序树（Binary-Sort-Tree）"><a href="#二叉排序树（Binary-Sort-Tree）" class="headerlink" title="二叉排序树（Binary Sort Tree）"></a>二叉排序树（Binary Sort Tree）</h1><blockquote><p>前言： 二叉排序树是二叉树中十分重要的一种，又称二叉查找树（Binary Search Tree），亦称<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/7077855?fromModule=lemma_inlink">二叉搜索树</a>。是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink">数据结构</a>中的一类。在一般情况下，查询效率比链表结构要高。</p></blockquote><h2 id="Node节点类代码"><a href="#Node节点类代码" class="headerlink" title="Node节点类代码"></a>Node节点类代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day7_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找要删除的节点并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回要删除的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  Node <span class="title function_">searchNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.val == index)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到要删除的节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//情况一： 当前节点就是要删除节点的父节点</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.val == index) ||(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.val == index))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//左节点不为空，并且左节点就是parent</span></span><br><span class="line">            <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(index);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(index);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;val=&quot;</span> + val +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树的添加功能"><a href="#二叉排序树的添加功能" class="headerlink" title="二叉排序树的添加功能"></a>二叉排序树的添加功能</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>每传进来一个node节点，我们就与当前节点进行比较</p><ol><li><p>node的val值  &lt;  当前节点的val值：</p><p>​向左进行递归，一直递归到this.left &#x3D;&#x3D; null时，加入node节点</p></li><li><p>node的val值 &gt;&#x3D; 当前节点的val值：</p><p>​向右进行递归，知道this.right &#x3D;&#x3D; null时，加入node节点</p></li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//添加节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val &lt; <span class="built_in">this</span>.val)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//node.val &gt;= this.val</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>结果：</strong></em></p><p>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;3]<br>Node[val&#x3D;5]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;12]</p><h2 id="二叉排序树删除功能详解"><a href="#二叉排序树删除功能详解" class="headerlink" title="二叉排序树删除功能详解"></a>二叉排序树删除功能详解</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>首先分三种情况进行处理：</p><p>① 所删除的节点为叶子节点（left 和right 节点上为空）</p><p>② 所删除的节点为非叶子节点，并且left 或 right节点上只有一个不为空</p><p>③ 所删除的节点为非叶子节点，并且left 和 right 都不为空</p><p><em><strong>在处理这三种情况之前，先再Node节点类中增添方法，用来查询要删除的目标节点targetNode 以及targetNode的父节点 parent节点</strong></em></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找要删除的节点并返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回要删除的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  Node <span class="title function_">searchNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.val == index)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.searchNode(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.searchNode(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到要删除的节点的父节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 要删除的节点的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回父节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="comment">//情况一： 当前节点就是要删除节点的父节点</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.val == index) ||(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.val == index))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//左节点不为空，并且左节点就是parent</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.val &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(index);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况一：删除的是叶子节点"><a href="#情况一：删除的是叶子节点" class="headerlink" title="情况一：删除的是叶子节点"></a>情况一：删除的是叶子节点</h4><h5 id="步骤：【"><a href="#步骤：【" class="headerlink" title="步骤：【"></a>步骤：【</h5><ol><li>找到目标节点targetNode  及其它的父节点 parent </li><li>确定targetNode是parent的left节点 还是right 节点</li><li>parent.left &#x3D; null 或 parent.right &#x3D; null ;</li></ol><p>】</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.searchNode(index);</span><br><span class="line"><span class="keyword">if</span> (targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;没有找到要删除的节点！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">    root = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> root.searchParent(index);</span><br><span class="line"><span class="comment">//要删除的是叶子节点</span></span><br><span class="line"><span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent.left!= <span class="literal">null</span> &amp;&amp; parent.left.val == targetNode.val)&#123;</span><br><span class="line">        parent.left = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right != <span class="literal">null</span> &amp;&amp; parent.right.val == targetNode.val ) &#123;</span><br><span class="line">        parent.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况二：要删除的节点只有一个子节点"><a href="#情况二：要删除的节点只有一个子节点" class="headerlink" title="情况二：要删除的节点只有一个子节点"></a>情况二：要删除的节点只有一个子节点</h4><h5 id="步骤【"><a href="#步骤【" class="headerlink" title="步骤【"></a>步骤【</h5><ol><li><p>找到父节点和targetNode目标节点后</p></li><li><p>先判断targetNode的left 和right 是否为空 ，如果不为空再判断是否有parent节点，因为很可能这个节点是root节点 ，root节点没有parent节点</p></li><li><p>接下来就是四种判断 </p><p>targetNode 有左节点 ，targetNode是parent的左节点；—–&gt;  parent.left &#x3D; targetNode.left;</p></li></ol><p>​targetNode 有左节点 ，targetNode是parent的右节点；—–&gt; parent.right &#x3D; targetNode.left;</p><p>​targetNode 有右节点 ，targetNode是parent的左节点；—–&gt;parent.left &#x3D; targetNode.right;</p><p>​targetNode 有右节点 ，targetNode是parent的右节点；—–&gt;parent.right &#x3D; targetNode.right;</p><p>】</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//要删除的节点有左子节点</span></span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                parent.left = targetNode.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right = targetNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = targetNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                parent.left = targetNode.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right = targetNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root = targetNode.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情况三：要删除的节点只有一个子节点"><a href="#情况三：要删除的节点只有一个子节点" class="headerlink" title="情况三：要删除的节点只有一个子节点"></a>情况三：要删除的节点只有一个子节点</h4><p>这种情况我们有两种解决办法</p><h5 id="步骤-【"><a href="#步骤-【" class="headerlink" title="步骤 【"></a>步骤 【</h5><p>​<strong>方法一：</strong>以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</p><p>​<strong>方法二：</strong>以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</p><p>】</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">//要删除的是有两个子节点的节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  方法一：以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</span></span><br><span class="line"><span class="comment">                  方法二：以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                int tempMin = 0;</span></span><br><span class="line"><span class="comment">//                Node tempNode = targetNode.right;</span></span><br><span class="line"><span class="comment">//                while(tempNode.left != null)&#123;</span></span><br><span class="line"><span class="comment">//                    tempNode = tempNode.left;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                tempMin = tempNode.val;</span></span><br><span class="line"><span class="comment">//                deleteNode(tempMin);</span></span><br><span class="line"><span class="comment">//                targetNode.val = tempMin;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempNode</span> <span class="operator">=</span> targetNode.left;</span><br><span class="line">                <span class="keyword">while</span>(tempNode.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    tempNode = tempNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempMax = tempNode.val;</span><br><span class="line">                deleteNode(tempMax);</span><br><span class="line">                targetNode.val = tempMax;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="main方法代码"><a href="#main方法代码" class="headerlink" title="main方法代码"></a>main方法代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] =&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">BinarySortTree</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        b.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    b.infix(b.root);</span><br><span class="line">    b.deleteNode(<span class="number">3</span>);</span><br><span class="line">    b.deleteNode(<span class="number">12</span>);</span><br><span class="line">    b.deleteNode(<span class="number">5</span>);</span><br><span class="line">    b.deleteNode(<span class="number">1</span>);</span><br><span class="line">    b.deleteNode(<span class="number">7</span>);</span><br><span class="line">    b.deleteNode(<span class="number">9</span>);</span><br><span class="line">    b.deleteNode(<span class="number">10</span>);</span><br><span class="line">    b.deleteNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;删除之后~~~&quot;</span>);</span><br><span class="line">    b.infix(b.root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体代码实现："><a href="#整体代码实现：" class="headerlink" title="整体代码实现："></a>整体代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day7_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] =&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">BinarySortTree</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            b.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        b.infix(b.root);</span><br><span class="line">        b.deleteNode(<span class="number">3</span>);</span><br><span class="line">        b.deleteNode(<span class="number">12</span>);</span><br><span class="line">        b.deleteNode(<span class="number">5</span>);</span><br><span class="line">        b.deleteNode(<span class="number">1</span>);</span><br><span class="line">        b.deleteNode(<span class="number">7</span>);</span><br><span class="line">        b.deleteNode(<span class="number">9</span>);</span><br><span class="line">        b.deleteNode(<span class="number">10</span>);</span><br><span class="line">        b.deleteNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后~~~&quot;</span>);</span><br><span class="line">        b.infix(b.root);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除二叉树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要删除的节点的val值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> root.searchNode(index);</span><br><span class="line">            <span class="keyword">if</span> (targetNode == <span class="literal">null</span>)&#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;没有找到要删除的节点！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> root.searchParent(index);</span><br><span class="line">            <span class="comment">//要删除的是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span>(targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(parent.left!= <span class="literal">null</span> &amp;&amp; parent.left.val == targetNode.val)&#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parent.right != <span class="literal">null</span> &amp;&amp; parent.right.val == targetNode.val ) &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的是有两个子节点的节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  方法一：以当前要删除的节点为根节点，找到left边的最大值，然后用临时变量保存值，删除该最大值所在的节点</span></span><br><span class="line"><span class="comment">                  方法二：以当前要删除的节点为根节点，找到right边的最小值，然后用临时变量保存值，删除该最小值所在的节点</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"><span class="comment">//                int tempMin = 0;</span></span><br><span class="line"><span class="comment">//                Node tempNode = targetNode.right;</span></span><br><span class="line"><span class="comment">//                while(tempNode.left != null)&#123;</span></span><br><span class="line"><span class="comment">//                    tempNode = tempNode.left;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                tempMin = tempNode.val;</span></span><br><span class="line"><span class="comment">//                deleteNode(tempMin);</span></span><br><span class="line"><span class="comment">//                targetNode.val = tempMin;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempNode</span> <span class="operator">=</span> targetNode.left;</span><br><span class="line">                <span class="keyword">while</span>(tempNode.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    tempNode = tempNode.right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempMax = tempNode.val;</span><br><span class="line">                deleteNode(tempMax);</span><br><span class="line">                targetNode.val = tempMax;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(targetNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//要删除的节点有左子节点</span></span><br><span class="line">                    <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                            parent.left = targetNode.left;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            parent.right = targetNode.left;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (parent.left == targetNode)&#123;</span><br><span class="line">                            parent.left = targetNode.right;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            parent.right = targetNode.right;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        root = targetNode.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">(Node root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空树！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root.infix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>删除3 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;1]<br>Node[val&#x3D;5]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>Node[val&#x3D;12]<br>删除3,12,5,1 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;7]<br>Node[val&#x3D;9]<br>Node[val&#x3D;10]<br>删除3,12,5,1,7,9 后<br>Node[val&#x3D;0]<br>Node[val&#x3D;10]<br>删除所有的之后<br>空树！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web项目整合---实现增删查改</title>
      <link href="/post/44f9189b.html"/>
      <url>/post/44f9189b.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于web项目中如何实现增删查改的操作"><a href="#关于web项目中如何实现增删查改的操作" class="headerlink" title="关于web项目中如何实现增删查改的操作"></a>关于web项目中如何实现增删查改的操作</h1><p>这里我们以一个书城项目为例讲解</p><h2 id="首先了解javaEE的三层架构"><a href="#首先了解javaEE的三层架构" class="headerlink" title="首先了解javaEE的三层架构"></a>首先了解javaEE的三层架构</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03ac4472cdda46b29e155c4891cca09a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"> 由图中我们可以看出,javaEE的三层架构严格的规定了项目中的每个模块,每个层需要完成的事情,这样会使项目的变得非常简洁,按部就班的完成每一部分,我们的项目也就很容易的完成,当然这这里说的只是针对非常简单的项目,对于大型项目就另当别论了。</p><h2 id="增删查改之—-增Create"><a href="#增删查改之—-增Create" class="headerlink" title="增删查改之—-增Create"></a>增删查改之—-增Create</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d0986b395245b689252d8e6b43cb15~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>从图中我们可以看出,当客户端用户输入完数据之后请求就会发送给服务器,当服务器端BooServlet接受到来自add.html页面的请求后就会做出相应的相应,通过反射调用Add(req,resp)方法</p><p>在Add方法中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected void add(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //1. 获取请求参数，封装成Book对象</span><br><span class="line">    String <span class="attr">name</span> = req.getParameter(<span class="string">&quot;name&quot;</span>)<span class="comment">;</span></span><br><span class="line">    String <span class="attr">author</span> = req.getParameter(<span class="string">&quot;author&quot;</span>)<span class="comment">;</span></span><br><span class="line">    BigDecimal <span class="attr">price</span> = BigDecimal.valueOf(Double.parseDouble(req.getParameter(<span class="string">&quot;price&quot;</span>)))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">sales</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;sales&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">stock</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;stock&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Book <span class="attr">book</span> = new Book(null, name, author, price, sales, stock, null)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    //2. 调用bookService.addBook(book)将数据保存入数据库</span><br><span class="line">    bookService.addBook(book)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">    //3. 跳转回图书列表页面----又出现表单重复提交的bug</span><br><span class="line">    resp.sendRedirect(req.getContextPath() + &quot;/bookServlet?<span class="attr">action</span>=page&amp;page<span class="literal">No</span>=<span class="string">&quot;+req.getParameter(&quot;</span>page<span class="literal">No</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">复制代码</span></span><br></pre></td></tr></table></figure><p>这就是一个简单add方法的实现</p><h2 id="增删查改之—-查Read"><a href="#增删查改之—-查Read" class="headerlink" title="增删查改之—-查Read"></a>增删查改之—-查Read</h2><h3 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fecaab1016447959d65038754887258~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><ol><li>在index上点击跳转到manager页面的请求，然后manager页面上显示响应【bookServlet？action&#x3D;list】，然后服务器端就会收到响应</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20fb6e0f76ac451ab13b44fd40ca2741~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>服务器端收到响应就会调用BookServlet的doPost方法，在doPost方法中显示的action收到的是list，然后后端就会调用list方法</p></li><li><p>在list方法中有三个步骤【</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span>  通过BookService调用BookDao中的查询所有图书的方法（queryBooks），然后queryBooks再次调用BaseDao抽象类中的queryForList方法查找到所有图书。</span><br><span class="line"><span class="bullet">2.</span> 将查询到的所有图书保存到request域中</span><br><span class="line"><span class="bullet">3.</span>  通过请求转发，将保存的数据回传给前端book<span class="emphasis">_manager.jsp页面</span></span><br><span class="line"><span class="emphasis">4.  book_</span>manager.jsp页面收到转发的请求，通过el表达式，将数据显示出来</span><br><span class="line"><span class="bullet">5.</span>  最后，数据就会完美的呈现在面前</span><br></pre></td></tr></table></figure></li></ol><p>】</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 通过BookService查询所有的图书</span></span><br><span class="line">    List&lt;Book&gt; books = bookService.queryBooks();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 保存所有的图书到request域中</span></span><br><span class="line"></span><br><span class="line">    req.setAttribute(<span class="string">&quot;books&quot;</span>,books);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 请求转发到book_manager.jsp</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;book_manager.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增删查改之—-改Update"><a href="#增删查改之—-改Update" class="headerlink" title="增删查改之—-改Update"></a>增删查改之—-改Update</h2><h3 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df30b25f71e74671a2e22e63088b475c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>首先点击修改，他将会调用doPost方法，将action值赋值为getBook</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40626b38033c47b2a91bd6ab7c9aa606~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>通过getBook()方法将id为XXX的数据获取出来然后显示在book_edit页面上。步骤有【</p><p>1&gt;  获取请求的参数信息–图书编号</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/172491c3edf24da8b9f52161b8b2902e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>2&gt; 调用BookService下的queryBookById()获取该图书的所有信息</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa79a8b38678487f9dde6b5aeec568db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>3&gt; 将数据保存在request作用域中</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e62b1a858f5b4d62804f5cf5b8eb22b0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>4&gt; 请求转发到book_edit页面 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc37668e4b4b42c3af63e149622708b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><p>】</p><ol><li>通过上述步骤，在book_edit页面就会显示要修改的数据，接下来要做的就是将要修改的数据保存起来，然后再回传给客户端</li><li>将book_edit页面的隐藏域的value值修改为动态获取的值<strong>因为book_edit页面会是实现两个操作，修改与保存，所以回传的action值就因该动态的获取是add&#x2F;update(判断的方法是id是否为空；添加的id为空)</strong></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/099ca85f1c7547ddaa7ac71a4f3a109a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>这里我们回传的action值为update，所以再次回到BookServlet程序，这里我们调用的是doGet方法，然后通doGet在调用doPost 。通过doPost，因为action的值为update，所以这里我们调用update方法</strong>*</p><ol><li><p>在update方法中要实现以下的及步骤【</p><p>1&gt; 获取请求参数，封装成Book对象<strong>不能忘记id，修改的时候id值是存在的，我们得获取但是不能修改</strong></p><p>2&gt;通过BookService调用BookDao中的修改图书的方法（updateBook），然后updateBook再次调用BaseDao抽象类中的update方法将数据库中的数据修改保存</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/844acec9c4e94da696d91d1f440ce771~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>3&gt; 重定向跳转回原来的页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/411d93a1b17f4924a865951761780423~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void update(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    //获取请求参数，封装成Book对象</span><br><span class="line">    Integer <span class="attr">id</span>= Integer.valueOf(req.getParameter(<span class="string">&quot;id&quot;</span>))<span class="comment">;</span></span><br><span class="line">    String <span class="attr">name</span> = req.getParameter(<span class="string">&quot;name&quot;</span>)<span class="comment">;</span></span><br><span class="line">    String <span class="attr">author</span> = req.getParameter(<span class="string">&quot;author&quot;</span>)<span class="comment">;</span></span><br><span class="line">    BigDecimal <span class="attr">price</span> = BigDecimal.valueOf(Double.parseDouble(req.getParameter(<span class="string">&quot;price&quot;</span>)))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">sales</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;sales&quot;</span>))<span class="comment">;</span></span><br><span class="line">    Integer <span class="attr">stock</span> = Integer.valueOf(req.getParameter(<span class="string">&quot;stock&quot;</span>))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    Book <span class="attr">book</span> = new Book(id, name, author, price, sales, stock, null)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    bookService.updateBook(book)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    //请求重定向</span><br><span class="line">    resp.sendRedirect(req.getContextPath() + &quot;/bookServlet?<span class="attr">action</span>=page&amp;page<span class="literal">No</span>=<span class="string">&quot;+req.getParameter(&quot;</span>page<span class="literal">No</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="增删查改之—-删Delete"><a href="#增删查改之—-删Delete" class="headerlink" title="增删查改之—-删Delete"></a>增删查改之—-删Delete</h2><h3 id="思维导图-3"><a href="#思维导图-3" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bb36979638145b79e0673ca7437d6b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>服务器获取客户端要删除的数据的id</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b6c6734964240eba039f5ba5254a0db~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><p>将请求发送至服务器，然后后端调用doPost方法，action传的值为delete</p></li><li><p>doPost方法，在其中执行这几步骤【</p><p>1&gt; 获取请求参数 id</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78c54fe73375454ebef06947711cee71~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>2&gt;通过BookService调用BookDao中的添加图书的方法（deleteBookById），然后adeleteBookById再次调用BaseDao抽象类中的update方法将数据库中的数据删除</p><p>3&gt;重定向跳转回原来的页面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4afd8aff7e854767ae72aa2345af54bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p></li></ol><p>】</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求参数 id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="comment">//2. 调用BookService.deleteBookById()删除数据</span></span><br><span class="line">    bookService.deleteBookById(id);</span><br><span class="line">    <span class="comment">//3. 重定向跳转回原来的页面</span></span><br><span class="line"></span><br><span class="line">    resp.sendRedirect(req.getContextPath() + <span class="string">&quot;/bookServlet?action=page&amp;pageNo=&quot;</span>+req.getParameter(<span class="string">&quot;pageNo&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线索化二叉树</title>
      <link href="/post/e71d88af.html"/>
      <url>/post/e71d88af.html</url>
      
        <content type="html"><![CDATA[<h1 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h1><blockquote><p>前言：</p><p>​对于线索化二叉树来说，他的后序线索化二叉树的遍历是其最难的地方，需要很多的辅助节点</p><p>​对于中序、前序线索化二叉树相对来说比较简单。</p></blockquote><h2 id="Node节点类的代码："><a href="#Node节点类的代码：" class="headerlink" title="Node节点类的代码："></a>Node节点类的代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * l 作用 ：标注left节点，若有值则为 0 无值,但经过序列化复制后为 1</span></span><br><span class="line"><span class="comment">     * r 作用 ：标注right节点，若有值则为 0 无值,但经过序列化复制后为 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> l;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">public</span> Node parent;  <span class="comment">//用于后序序列化遍历时使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefix</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.prefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.prefix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.infix();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.infix();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffix</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.left.suffix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.right.suffix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, left节点是否为空=&quot;</span> + l +</span><br><span class="line">                <span class="string">&quot;, right节点是否为空=&quot;</span> + r +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;  <span class="comment">//0为有值 / 1为线索化后有值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前序线索化二叉树"><a href="#前序线索化二叉树" class="headerlink" title="前序线索化二叉树"></a>前序线索化二叉树</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路"><a href="#线索化思路" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>左移至最左边，判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li><li>向左右分别递归移动当前节点</li></ol><h5 id="线索化遍历思路"><a href="#线索化遍历思路" class="headerlink" title="线索化遍历思路"></a>线索化遍历思路</h5><p>​根左右，所以从根节点开始，沿着左子树进行处理，当子节点的left指针类型是null时，给其left赋值，然后标注为此node的l&#x3D; 1 说明到了最左子节点，然后处理子节点的right指针指向的节点，可能是右子树，也可能是后继节点，无论是哪种类型继续按照上面的方式（先沿着左子树处理，找到子树的最左子节点，然后处理right指针指向），以此类推，直到节点的right指针为空，说明是最后一个，遍历完成。 </p><h4 id="前序线索化"><a href="#前序线索化" class="headerlink" title="前序线索化"></a>前序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序线索化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先处理左节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;</span><br><span class="line">        node.l = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再处理右节点</span></span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = node;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    <span class="keyword">if</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">        prefixSearch(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    <span class="keyword">if</span>(node.r == <span class="number">0</span>)&#123;</span><br><span class="line">        prefixSearch(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前序线索化的遍历"><a href="#前序线索化的遍历" class="headerlink" title="前序线索化的遍历"></a>前序线索化的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序线索化二叉树的遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prefixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序线索化二叉树"><a href="#中序线索化二叉树" class="headerlink" title="中序线索化二叉树"></a>中序线索化二叉树</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路-1"><a href="#线索化思路-1" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>向左递归移动当前节点</li><li>判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li><li>向右递归移动当前节点</li></ol><h5 id="遍历思路"><a href="#遍历思路" class="headerlink" title="遍历思路"></a>遍历思路</h5><p>​左根右，因此第一个节点一定是最左子节点，先找到最左子节点，依次沿着right指针指向进行处理（无论是指向子节点还是指向后继节点），直到节点的right指针为空，说明是最后一个，遍历完成。 </p><h4 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用中序线索化将节点连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node : 为当前节点</span></span><br><span class="line"><span class="comment"> *        temp : 为当前节点的后面的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line"><span class="comment">//首先，如果当前节点为空，那么就不用继续连接</span></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左递归找到最left的节点</span></span><br><span class="line">    infixSearch(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//来处理当前节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;   <span class="comment">//如果当前节点的left为空，那么就说明已经递归到最left的节点了</span></span><br><span class="line">        node.l = <span class="number">1</span>;         <span class="comment">//标注，当前节点为叶子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后面的节点不能为空 。 因为他必须遍历到最left边（最左边的叶子节点）才能开始使用temp节点</span></span><br><span class="line">    <span class="keyword">if</span> (temp!= <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动辅助节点</span></span><br><span class="line">    temp = node;</span><br><span class="line">    <span class="comment">//右递归找到最right的节点</span></span><br><span class="line">    infixSearch(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序线索化的遍历"><a href="#中序线索化的遍历" class="headerlink" title="中序线索化的遍历"></a>中序线索化的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序线索化遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//首先创建一个临时节点，用于遍历所有的节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//先循环到最left</span></span><br><span class="line">        <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(node);</span><br><span class="line">        <span class="comment">//然后判断，继续循环其他的</span></span><br><span class="line">        <span class="keyword">while</span>(node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序线索化二叉树"><a href="#后序线索化二叉树" class="headerlink" title="后序线索化二叉树"></a>后序线索化二叉树</h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><h5 id="线索化思路-2"><a href="#线索化思路-2" class="headerlink" title="线索化思路"></a>线索化思路</h5><p>​首先判断当前节点是否为空，如果不为空再做处理。</p><ol><li>向左递归移动当前节点</li><li>向右递归移动当前节点</li><li>判定left为空时将临时节点指向当前node节点的左指针</li><li>处理右节点时是在下一次，此时node为下一个节点，而temp则指向上一轮的node节点。然后将temp指向的right节点连接到node（也就是当前节点）</li><li>temp节点，让其始终跟在node节点的后面（node节点递归移动）</li></ol><h5 id="线索化遍历思路-1"><a href="#线索化遍历思路-1" class="headerlink" title="线索化遍历思路"></a>线索化遍历思路</h5><p>​后序遍历线索化二叉树最为复杂，通用的二叉树数节点存储结构不能够满足后序线索化，因此我们扩展了节点的数据结构，增加了父节点的指针。后序的遍历顺序是：左右根，先找到最左子节点，沿着right后继指针处理，当right不是后继指针时，并且上一个处理节点是当前节点的右节点，则处理当前节点的右子树，遍历终止条件是：当前节点是root节点，并且上一个处理的节点是root的right节点。</p><h4 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序线索化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffixSearch</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左递归</span></span><br><span class="line">    suffixSearch(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向右递归</span></span><br><span class="line">    suffixSearch(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先处理左节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left == <span class="literal">null</span>)&#123;</span><br><span class="line">        node.left = temp;</span><br><span class="line">        node.l = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再处理右节点</span></span><br><span class="line">    <span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; temp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">        temp.right = node;</span><br><span class="line">        temp.r = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序线索化遍历★★★★★"><a href="#后序线索化遍历★★★★★" class="headerlink" title="后序线索化遍历★★★★★"></a>后序线索化遍历★★★★★</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序线索化遍历★★★★★</span></span><br><span class="line"><span class="comment"> * 与前面的有所不用，终止为临时节点到root节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suffixLink</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> root; <span class="comment">//辅助指针1</span></span><br><span class="line">    <span class="comment">//先循环走到最左边</span></span><br><span class="line">    <span class="keyword">while</span>(node.l == <span class="number">0</span>)&#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//辅助指针2</span></span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果节点被序列化，那么就右移，同时移动辅助指针2</span></span><br><span class="line">        <span class="keyword">if</span> (node.r == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(node);</span><br><span class="line">            pre = node;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果当前node节点有右节点，那么</span></span><br><span class="line">            <span class="keyword">if</span>(node.right == pre)&#123;</span><br><span class="line">                System.out.println(node);</span><br><span class="line">                <span class="keyword">if</span>(node == root)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = node;</span><br><span class="line">                node = node.parent; <span class="comment">// 回到父节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">                <span class="keyword">while</span> (node != <span class="literal">null</span> &amp;&amp; node.l == <span class="number">0</span>)&#123;</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅识Spring AOP</title>
      <link href="/post/8b9a3af8.html"/>
      <url>/post/8b9a3af8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><blockquote><p>引言(just I think)： <strong>因为java是面向对象编程，而面向对象是纵向继承机制，无法集中注意力到核心代码中，所以我们需要调用其他的机制来解决非核心代码的包装,将其从核心代码块中解耦出来</strong></p></blockquote><blockquote><p>首先我们从spring官网了解一下他们对AOP思想的介绍</p><p>官网地址：<a href="https://link.juejin.cn/?target=https://docs.spring.io/spring-framework/docs/2.5.5/reference/aop.html">docs.spring.io&#x2F;spring-fram…</a></p><p>面向方面编程 <em>(AOP) 通过提供另一种思考程序结构的方式来补充面向对象编程 (OOP)。OOP 中模块化的关键单元是类，而在 AOP 中，模块化的单元是</em>方面 <em>。方面使关注点模块化，例如跨越多种类型和对象的事务管理。（此类关注点在 AOP 文献中通常称为</em>横切关注点。）</p><p>Spring 的关键组件之一是<em>AOP 框架</em>。虽然 Spring IoC 容器不依赖于 AOP，这意味着您不需要使用 AOP，但 AOP 补充了 Spring IoC 以提供非常强大的中间件解决方案。</p></blockquote><h3 id="具体概念"><a href="#具体概念" class="headerlink" title="具体概念"></a>具体概念</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术  。*</span>**</span></span><br></pre></td></tr></table></figure><h3 id="AOP的相关相关术语："><a href="#AOP的相关相关术语：" class="headerlink" title="AOP的相关相关术语："></a>AOP的相关相关术语：</h3><ol><li><ol><li><strong>横切关注点</strong></li></ol></li></ol><p>就是从每个<strong>核心方法中</strong>抽取出来的非核心代码（既<strong>非核心业务逻辑</strong>），最后放入一个类中（<strong>这个类叫切面</strong>），不同的业务逻辑实现不同的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个概念不是语法层面天然存在的，而是根据附加功能（核心方法中的非核心代码）的逻辑上的需要：有十个附加功能（核心方法中的非核心代码），就有十个横切关注点。  </span><br></pre></td></tr></table></figure><ol><li><ol><li><strong>通知</strong></li></ol></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5883866603f1469ca4c2c9971796bee6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>简单地说就是在切面中，非核心业务也就是我们需要做的事，被封装成为一个方法（该方法叫通知）—-通知就是横切关注点的实现。</p><ol><li><strong>切面</strong></li></ol><p><em>封装横切关注点或者说是通知的类</em></p><ol><li><strong>目标</strong></li></ol><p><em>被代理的目标对象</em></p><ol><li><strong>代理</strong></li></ol><p><em>向目标对象应用通知之后创建的代理对象（不需要我们自己创建，封装的就是）AOP帮助我们创建</em></p><ol><li><strong>连接点</strong></li></ol><p><em>这也是一个纯逻辑概念，不是语法定义的。 把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉 点就是连接点</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fafd3911b50d40cb828bf8cbd5e6667d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em>从哪里套出来的就放回哪里，不改变元代码的逻辑</em></p><ol><li><strong>切入点</strong></li></ol><p><em>定位连接点的方式（位置）。</em></p><h3 id><a href="#" class="headerlink" title></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5112a18e0fc441c3a6f917333fbcbb8f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></h3><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><em><strong>简化代码：</strong></em> 把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。</li><li><em><strong>代码增强：</strong></em> 把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。</li></ul><h2 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h2><h3 id="技术说明："><a href="#技术说明：" class="headerlink" title="技术说明："></a>技术说明：</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93510564dc644f568d41641b73d0f4d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="几种动态代理"><a href="#几种动态代理" class="headerlink" title="几种动态代理"></a>几种动态代理</h3><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。</li><li>cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最 终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><p>通过阅读官方文档我们可以知道 :</p><p>Spring AOP <strong>默认使用标准的 J2SE</strong>* <strong>动态代理</strong>* 作为 AOP 代理。这使得任何接口（或接口集）都可以被代理。</p><h3 id="启用AOP顺序"><a href="#启用AOP顺序" class="headerlink" title="启用AOP顺序"></a>启用AOP顺序</h3><ol><li><strong>将目标对象和切面交给IOC容器管理（注解+扫描）</strong></li><li><strong>将切面类和目标类作为容器中的组件，所以加@Component</strong></li><li><strong>将当前组件用@Aspect注解标注为切面</strong></li><li><strong>开启基于注解的aop (</strong> 开启AspectJ的自动代理，为目标对象自动生成代理 <strong>)</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    作用： 开启基于注解的aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>配置好切入点表达式 ：</strong></li></ol><p><strong>声明一个方法，然后使用@Poincut注解来进行声明公共的切入点表达式 可)</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fb3a34826364f6b8182e1ac33922ad2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点表达式的重用******重点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    execution(权限修饰符 返回值 项目. 包/ *  . 类/ * .方法 (..) )</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com_Ray.such.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/735ab7047ed34ec3b81fb740df6a0df2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="AOP的各种通知详解"><a href="#AOP的各种通知详解" class="headerlink" title="AOP的各种通知详解"></a>AOP的各种通知详解</h3><p>各种通知的执行顺序：</p><blockquote><p>Spring版本5.3.x以前：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置通知 -<span class="punctuation">-&gt;</span>目标操作-<span class="punctuation">-&gt;</span> 后置通知-<span class="punctuation">-&gt;</span> 返回通知 / 异常通知</span><br></pre></td></tr></table></figure><p>Spring版本5.3.x以后：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置通知-<span class="punctuation">-&gt;</span> 目标操作-<span class="punctuation">-&gt;</span> 返回通知 / 异常通知-<span class="punctuation">-&gt;</span> 后置通知</span><br></pre></td></tr></table></figure></blockquote><ol><li><strong>前置语法：</strong></li></ol><p><strong>使用@Before注解标识，在被代理的目标方法前执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取连接点所对应方法的方法名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//2.  获取连接点所对应方法的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法名为： &quot;</span> + signature.getName()+ <span class="string">&quot;,参数为： &quot;</span> + Arrays.toString(args));</span><br><span class="line"><span class="comment">//        System.out.println(&quot;前置通知！&quot;);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>joinPoint 作为前置通知的方法的参数 ，可以获取连接点多对应的方法的签名信息（）</p><ol><li><strong>后置语法</strong></li></ol><p><strong>注解 ：@After（“point Cut（）”）在方法执行之后的finally中执行</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62e3ee1668eb4ef2a9d356096830114f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li><strong>返回通知</strong></li></ol><p><strong>注解： @AfterReturn（“point Cut（）“） 在目标对象执行之后执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回通知！</span></span><br><span class="line"><span class="comment"> * 在目标方法返回值之后的一个通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    System.out.println(<span class="string">&quot;方法： &quot;</span> + signature.getName()+<span class="string">&quot;执行返回通知&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>异常通知</strong></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@AfterThrowing(<span class="keyword">value</span> = <span class="string">&quot;pointCut()&quot;</span>,throwing = <span class="string">&quot;ex&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterThrow</span>(<span class="params">JoinPoint joinPoint, Throwable ex</span>)</span>&#123;</span><br><span class="line">    Signature signature = joinPoint.getSignature();</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;方法： &quot;</span> + signature.getName()+<span class="string">&quot;的异常通知:&quot;</span> + ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>环绕通知---@Around( )</strong></li></ol><p><em><strong>设置环绕通知之后就可以将所有前面的通知都涵盖进去</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54ec3fe2cdfb4bd3b267bfe2020faa1a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h2><p><strong>其基本与基于注解实现一样</strong></p><h3 id="配置xml环境"><a href="#配置xml环境" class="headerlink" title="配置xml环境"></a>配置xml环境</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:componentscan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcutref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;validateBeforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统学习</title>
      <link href="/post/6ea88167.html"/>
      <url>/post/6ea88167.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux操作系统"><a href="#linux操作系统" class="headerlink" title="linux操作系统"></a>linux操作系统</h1><h2 id="Linux的目录结构："><a href="#Linux的目录结构：" class="headerlink" title="Linux的目录结构："></a>Linux的目录结构：</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e0acf91abf541d08f5fd445614c0ed3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5e2a1000f4947d796b0596adbdc7122~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10e80a9586674529a8b50e920b781cc8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84409ad7377c4593b8b2ad616f6f47ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="树状图解"><a href="#树状图解" class="headerlink" title="树状图解"></a>树状图解</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ec3d8f97b5941cb843a829b470c4e0d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed935c1b0b7d4f8a9697a1ab668ac48b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="vi-x2F-vim的学习"><a href="#vi-x2F-vim的学习" class="headerlink" title="vi &#x2F; vim的学习"></a>vi &#x2F; vim的学习</h1><h2 id="什么是vi-x2F-vim，为什么我们需要学习"><a href="#什么是vi-x2F-vim，为什么我们需要学习" class="headerlink" title="什么是vi&#x2F; vim，为什么我们需要学习"></a>什么是vi&#x2F; vim，为什么我们需要学习</h2><p><strong>原因：</strong></p><ol><li><p>鸟哥的原因</p></li><li><ol><li>所有的Unix Like 系统都会内建vi 文书编辑器，其他的文书编辑器则不一定会存在；</li><li>很多个别软体的编辑介面都会主动呼叫vi (例如未来会谈到的crontab , visudo , edquota等指令)；</li><li>vim 具有程式编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程式设计；</li><li>因为程式简单，编辑速度相当快速。</li></ol></li><li><p><strong>有太多Linux 上面的指令都预设使用vi 作为资料编辑的介面，所以你必须、一定要学会 vi ，否则很多指令你根本就无法操作呢！</strong></p></li></ol><p><strong>什么是vi &#x2F; vim：</strong></p><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="https://link.juejin.cn/?target=https://www.vim.org/">www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h1 id="各种模式的切换"><a href="#各种模式的切换" class="headerlink" title="各种模式的切换"></a>各种模式的切换</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65f28fc1e02f491cbfedb42ed7b1ce39~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>各种模式解释：</p><ol><li>一般模式&#x2F;正常模式</li></ol><p>第一种：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88af663538104644908e005eb64930f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>第二种： 就是进入遍历模式，但是没有输入( i &#x2F; a的情况下 )</p><ol><li>编辑模式（输入i, I, o, O, a, A, r, R的情况下）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2df0a2f67c714011b91a631835f668bf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>命令模式</li></ol><p>就是进入编辑模式之后，输入完成按esc键，然后在输入 ：或者 &#x2F; 就会进入命令模式<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6931fb0e976243ee8e2c19ba174ffbdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="vim快捷键练习"><a href="#vim快捷键练习" class="headerlink" title="vim快捷键练习"></a>vim快捷键练习</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d74202aa35d44f9a7f46c0323a79a8c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>对于复制元素 命令： (x) yy,然后输入p &#x2F;&#x2F;x为我们需要向下拷贝的行数</li></ol><p>同样的对于拷贝&#x2F;复制 ，我们必须是在一般模式&#x2F;正常模式下进行</p><p><strong>操作方法：</strong> 【 现输入x(行数) ，然后再按yy，（接下来就是移动光标，比如我们向向下复制这几行元素，就必须在进行完上述操作后将光标移动到下面），最后在按p<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0254d9c3c4064001af77ef5c5c333bf3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img">最后呈现效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4b306cf85364ddf96c01ae9533dda41~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>】</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>删除当前行：输入dd</li></ol><p>(x) dd,然后输入p &#x2F;&#x2F;x为我们需要向下删除的行数</p><p>光标移动到当前行，然后输入5dd就会删除当前行下面的5行元素</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/087720ebad5f4d51a86bdd346568c9b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83da363939084ac3a6670c54c687c8c1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>在命令模式下进行</p><p>完成进入编辑模式后</p><p>操作： 输入 &#x2F;+关键字，然后按回车 —&gt; 就会在编辑页面出现查找的内容，输入 n就会查找下一个</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52bf7ac5b504f9085cce96077ec2c2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果：（输入n 就是查找下一个 ）<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5141613ff604e6d925d279432fee277~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="设置文件行号"><a href="#设置文件行号" class="headerlink" title="设置文件行号"></a>设置文件行号</h3><p>在命令模式下</p><p>操作： 进入命令行，输入:set nu</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac8ab4b6afee41f2beec046e95bfac79~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如果不想展示则输入 set nonu 就会取消行号设置</p><h3 id="快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下"></a>快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下</h3><p>直接输入 大写的G(最末行) 或者小写的gg(首行)</p><p>撤销编辑时的输入操作 在一般模式下&#x2F;正常模式下</p><p>输入 u</p><h3 id="快速定位到某一行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某一行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某一行 在一般模式下&#x2F;正常模式下"></a>快速定位到某一行 在一般模式下&#x2F;正常模式下</h3><p>操作： 输入 行号 –&gt; 在输入 shift + g （建议先打开行号）</p><h3 id="vim的键盘图"><a href="#vim的键盘图" class="headerlink" title="vim的键盘图"></a>vim的键盘图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c67f76506a491e93006c8adfd569a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0460b70928145bdb71c473cd3672c52~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><hr><h1 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h1><h3 id="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"><a href="#第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等" class="headerlink" title="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"></a>第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等</h3><table><thead><tr><th>移动游标的方法</th><th></th></tr></thead><tbody><tr><td>h 或向左方向键(←)</td><td>游标向左移动一个字元</td></tr><tr><td>j 或向下方向键(↓)</td><td>游标向下移动一个字元</td></tr><tr><td>k 或向上方向键(↑)</td><td>游标向上移动一个字元</td></tr><tr><td>l 或向右方向键(→)</td><td>游标向右移动一个字元</td></tr><tr><td>如果你将右手放在键盘上的话，你会发现hjkl 是排列在一起的，因此可以使用这四个按钮来移动游标。如果想要进行多次移动的话，例如向下移动30 列，可以使用”30j” 或”30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td>[Ctrl] + [f]</td><td>萤幕『向下』移动一页，相当于[Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>萤幕『向上』移动一页，相当于[Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>萤幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>萤幕『向上』移动半页</td></tr><tr><td>+</td><td>游标移动到非空白字元的下一列</td></tr><tr><td>-</td><td>游标移动到非空白字元的上一列</td></tr><tr><td>n</td><td>那个n 表示『数字』，例如20 。按下数字后再按空白键，游标会向右移动这一列的n 个字元。例如20 则游标会向后面移动20 个字元距离。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一列的最前面字元处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一列的最后面字元处(常用)</td></tr><tr><td>H</td><td>游标移动到这个萤幕的最上方那一列的第一个字元</td></tr><tr><td>M</td><td>游标移动到这个萤幕的中央那一列的第一个字元</td></tr><tr><td>L</td><td>游标移动到这个萤幕的最下方那一列的第一个字元</td></tr><tr><td>G</td><td>移动到这个档案的最后一列(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第n 列。例如20G 则会移动到这个档案的第20 列(可配合:set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一列，相当于1G 啊！(常用)</td></tr><tr><td>n</td><td>n 为数字。游标向下移动n 列(常用)</td></tr><tr><td>搜寻与取代</td><td></td></tr><tr><td>&#x2F;word</td><td>向游标之下寻找一个名称为word 的字串。例如要在档案内搜寻vbird 这个字串，就输入&#x2F;vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向游标之上寻找一个字串名称为word 的字串。</td></tr><tr><td>n</td><td>这个n 是英文按键。代表『重复前一个搜寻的动作』。举例来说， 如果刚刚我们执行&#x2F;vbird 去向下搜寻vbird 这个字串，则按下n 后，会向下继续搜寻下一个名称为vbird 的字串。如果是执行?vbird 的话，那么按下n 则会向上继续搜寻名称为vbird 的字串！</td></tr><tr><td>N</td><td>这个N 是英文按键。与n 刚好相反，为『反向』进行前一个搜寻动作。例如&#x2F;vbird 后，按下N 则表示『向上』搜寻vbird 。</td></tr><tr><td>使用&#x2F;word 配合n 及N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键字！</td><td></td></tr><tr><td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与n2 为数字。在第n1 与n2 列之间寻找word1 这个字串，并将该字串取代为 word2 ！举例来说，在100 到200 列之间搜寻vbird 并取代为VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！且在取代前显示提示字元给使用者确认(confirm) 是否需要取代！(常用)</td></tr><tr><td>删除、复制与贴上</td><td></td></tr><tr><td>x, X</td><td>在一列字当中，x 为向后删除一个字元(相当于[del] 按键)， X 为向前删除一个字元(相当于[backspace] 亦即是倒退键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除n 个字元。举例来说，我要连续删除10 个字元， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整列(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除游标所在的向下n 列，例如20dd 则是删除20 列 (常用)</td></tr><tr><td>d1G</td><td>删除游标所在到第一列的所有资料</td></tr><tr><td>dG</td><td>删除游标所在到最后一列的所有资料</td></tr><tr><td>d$</td><td>删除游标所在处，到该列的最后一个字元</td></tr><tr><td>d0</td><td>那个是数字的0 ，删除游标所在处，到该列的最前面一个字元</td></tr><tr><td>yy</td><td>复制游标所在的那一列(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制游标所在的向下n 列，例如20yy 则是复制20 列(常用)</td></tr><tr><td>y1G</td><td>复制游标所在列到第一列的所有资料</td></tr><tr><td>yG</td><td>复制游标所在列到最后一列的所有资料</td></tr><tr><td>y0</td><td>复制游标所在的那个字元到该列行首的所有资料</td></tr><tr><td>y$</td><td>复制游标所在的那个字元到该列行尾的所有资料</td></tr><tr><td>p, P</td><td>p 为将已复制的资料在游标下一列贴上，P 则为贴在游标上一列！举例来说，我目前游标在第20 列，且已经复制了10 列资料。则按下p 后， 那10 列资料会贴在原本的20 列之后，亦即由21 列开始贴。但如果是按下P 呢？那么原本的第20 列会被推到变成30 列。(常用)</td></tr><tr><td>J</td><td>将游标所在列与下一列的资料结合成同一列</td></tr><tr><td>c</td><td>重复删除多个资料，例如向下删除10 列，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>这个u 与[Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！(常用)</td></tr></tbody></table><h3 id="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般指令模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般指令模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th>进入插入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入插入模式(Insert mode)： i 为『从目前游标所在处插入』， I 为『在目前所在列的第一个非空白字元处开始插入』。(常用)</td></tr><tr><td>a, A</td><td>进入插入模式(Insert mode)： a 为『从目前游标所在的下一个字元处开始插入』， A 为『从游标所在列的最后一个字元处开始插入』。(常用)</td></tr><tr><td>o, O</td><td>进入插入模式(Insert mode)： 这是英文字母o 的大小写。o 为『在目前游标所在的下一列处插入新的一列』； O 为在目前游标所在处的上一列插入新的一列！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代游标所在的那一个字元一次；R会一直取代游标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字元时， 一定要在左下角处看到INSERT 或REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般指令模式中(常用)</td></tr></tbody></table><h3 id="第三部份：一般指令模式切换到指令列模式的可用按钮说明"><a href="#第三部份：一般指令模式切换到指令列模式的可用按钮说明" class="headerlink" title="第三部份：一般指令模式切换到指令列模式的可用按钮说明"></a>第三部份：一般指令模式切换到指令列模式的可用按钮说明</h3><table><thead><tr><th>指令列模式的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的资料写入硬碟档案中(常用)</td></tr><tr><td>:w!</td><td>若档案属性为『唯读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号(!) 在vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为:wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的资料储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的资料中，读入另一个档案的资料。亦即将『filename』 这个档案内容加到游标所在列后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将n1 到n2 的内容储存成filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开vi 到指令列模式下执行command 的显示结果！例如 『:! ls &#x2F;home』即可在vi 当中察看&#x2F;home 底下以ls 输出的档案资讯！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一列的字首显示该列的行号</td></tr><tr><td>:set nonu</td><td>与set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="参考说明："><a href="#参考说明：" class="headerlink" title="参考说明："></a>参考说明：</h1><p>文档学习:</p><p>​相关内容参考鸟哥Linux私房菜( <a href="https://link.juejin.cn/?target=https://linux.vbird.org/">linux.vbird.org&#x2F;</a> )</p><p>​视频学习：韩顺平Linux</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中的动态SQL技术</title>
      <link href="/post/c0b354ed.html"/>
      <url>/post/c0b354ed.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b1aefc3fff34f48a670f0cb2029b9a8~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="MyBatis中的动态SQL技术"></p><h1 id="MyBatis-之-动态SQL技术"><a href="#MyBatis-之-动态SQL技术" class="headerlink" title="MyBatis 之 动态SQL技术"></a>MyBatis 之 动态SQL技术</h1><p><strong>引言:</strong></p><blockquote><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p></blockquote><blockquote><p>这里我们使用的表为t_emp 对应的实体类名为Emp</p><p>字段: emp_name, emp_id ,age ,gender 对应的属性名 : empName , empId , age ,gender</p></blockquote><h2 id="First-if-标签"><a href="#First-if-标签" class="headerlink" title="First : if 标签"></a>First : if 标签</h2><p>if 标签只有一个test属性 只有test属性的表达式判定结果为true ,其中的内容才会被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp <span class="built_in">where</span></span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">             emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>但是这样做的局限性非常大 , 如果我们第一个if 不满足的话 ,那么就会导致后面满足条件的语句前面多出来一个and ,这个问题又无法解决 ,那么就用到了下面的where标签</p><h2 id="Second-where标签"><a href="#Second-where标签" class="headerlink" title="Second : where标签"></a>Second : where标签</h2><p>使用where 标签作用:</p><ol><li>如果标签中没有任何的条件满足 那么就不需要执行任何的功能 ;可以直接退出 , 如果满足 那么就执行里面的if 标签</li><li>可以将<strong>if中内容前面的没用的and去除 ( 内容后面的and 无法去除</strong>), 所以可以都添加 ;</li><li>如果 where 标签中有条件成立 , 他将会自动的添加where</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Third-trim-标签"><a href="#Third-trim-标签" class="headerlink" title="Third : trim 标签"></a>Third : trim 标签</h2><p><strong>trim标签中相关属性的作用</strong></p><ol><li>prefix &#x2F; suffix: 在内容前面 &#x2F; 后面添加指定内容</li><li>prefixOverrides &#x2F;suffixOverrides 在内容前面 &#x2F; 后面 去除某些指定内容</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;trim <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> prefixOverrides=<span class="string">&quot;and&quot;</span>&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fourth-choose-when-otherwise-标签"><a href="#Fourth-choose-when-otherwise-标签" class="headerlink" title="Fourth : choose - when - otherwise 标签"></a>Fourth : choose - when - otherwise 标签</h2><p>它和java中的switch语句十分相似 ,所以它只有一个when语句会被执行 ,如果都不满足 , 那么就会执行otherwise语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">        &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">            &lt;choose&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                 &lt;when <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;otherwise&gt;</span><br><span class="line">                &lt;/otherwise&gt;</span><br><span class="line">            &lt;/choose&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fifth-foreach-标签"><a href="#Fifth-foreach-标签" class="headerlink" title="Fifth : foreach 标签"></a>Fifth : foreach 标签</h2><p><strong>属性：</strong></p><ul><li>collection：设置要循环的数组或集合</li><li>item：表示集合或数组中的每一个数据</li><li>separator：设置循环体之间的分隔符</li><li>open：设置foreach标签中的内容的开始符</li><li>close：设置foreach标签中的内容的结束符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  批量添加员工信息  void insertMoreEmp(@Param (&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp values</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">             (null ,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)</span><br><span class="line">         <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">&lt;!--   批量删除的功能 void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where emp_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;empId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;empId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Sixth-SQL标签"><a href="#Sixth-SQL标签" class="headerlink" title="Sixth : SQL标签"></a>Sixth : SQL标签</h2><p>sql 标签 可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql <span class="attr">id</span>=<span class="string">&quot;Columns&quot;</span>&gt;</span><br><span class="line">    emp_id, emp_name,age ,gender</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">select &lt;include <span class="attr">refid</span>=<span class="string">&quot;Columns&quot;</span>&gt;&lt;/include&gt; from t_emp</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myFirstBlog</title>
      <link href="/post/23c7dc9f.html"/>
      <url>/post/23c7dc9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅识SpringIOC"><a href="#浅识SpringIOC" class="headerlink" title="浅识SpringIOC"></a>浅识SpringIOC</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9215b78ca8964c1680efc934f81b494e~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="浅识 Spring IOC "></p><h1 id="小小了解一下-Spring-家族"><a href="#小小了解一下-Spring-家族" class="headerlink" title="小小了解一下 Spring 家族"></a>小小了解一下 Spring 家族</h1><blockquote><blockquote><p><strong>官网地址：<a href="https://link.juejin.cn/?target=https://spring.io/">spring.io&#x2F;</a></strong></p><p><strong>项目列表：<a href="https://link.juejin.cn/?target=https://spring.io/projects">spring.io&#x2F;projects</a></strong></p></blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首 次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应 用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践</p></blockquote><p>通过上面的粗略介绍 ,我们可以简单的了解一下Spring家族的厉害之处下面就是我们今天学习的重点</p><p><strong>Spring IOC( Inversion of Control )反转控制</strong></p><h1 id="First-理解什么是IOC思想"><a href="#First-理解什么是IOC思想" class="headerlink" title="First : 理解什么是IOC思想"></a>First : 理解什么是IOC思想</h1><p>图示理解:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15d9384a4554425ae7fb19863b29445~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Spring IOC.png">文字解释:</p><ul><li><p>①获取资源的传统方式</p><blockquote><p>传统的方式是组件主动的从容器中获取所需要的资源，在这样的 模式下开发人员往往需要知道在具体容器中特定资源的获取方式</p></blockquote></li><li><p>②反转控制方式获取资源</p><blockquote><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源 的方式即可，极大的降低了学习成本，提高了开发的效率。</p></blockquote></li><li><p>③DI：Dependency Injection，翻译过来就是依赖注入</p><blockquote><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。相对于IOC而言，这种表述更直接。 所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p></blockquote></li></ul><h1 id="Second-在Spring中的IOC是怎么体现出来的"><a href="#Second-在Spring中的IOC是怎么体现出来的" class="headerlink" title="Second : 在Spring中的IOC是怎么体现出来的"></a>Second : 在Spring中的IOC是怎么体现出来的</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d1c91bca5214088b92b3b1ec7a6fadd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"><strong>Spring中的IOC有两种实现方式 :</strong></p><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h2><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用</p><h2 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h2><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。(原因显而易见, 我们无法控制内部)</p><h3 id="ApplicationContext的主要实现类"><a href="#ApplicationContext的主要实现类" class="headerlink" title="ApplicationContext的主要实现类"></a>ApplicationContext的主要实现类</h3><ul><li>ClassPathXmlApplicationContext :<ul><li>见名知意 它就是通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</li></ul></li><li>FileSystemXmlApplicationContext :<ul><li>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</li></ul></li><li>ConfigurableApplicationContext :<ul><li>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力。</li></ul></li><li>WebApplicationContext :<ul><li>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中。</li></ul></li></ul><h1 id="Third-基于XML-管理IOC容器"><a href="#Third-基于XML-管理IOC容器" class="headerlink" title="Third : 基于XML 管理IOC容器"></a>Third : 基于XML 管理IOC容器</h1><h5 id="首先是创建所有的项目都绕不过去的坑—-引入依赖"><a href="#首先是创建所有的项目都绕不过去的坑—-引入依赖" class="headerlink" title="首先是创建所有的项目都绕不过去的坑—-引入依赖"></a>首先是创建所有的项目都绕不过去的坑—-引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/670a2ff0267e4fae955f78df171a8e94~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="1-操作顺序及其思路"><a href="#1-操作顺序及其思路" class="headerlink" title="1. 操作顺序及其思路"></a>1. 操作顺序及其思路</h2><p>创建自定义组件类的时候一定要创建有参和无参构造器两个, <strong>良好的代码习惯是避免犯错的前提</strong> Spring底层默认是通过反射来调用自定义组件类中的无参构造器来创建组件对象的<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f578a4d0612e4e0eaed84eb017038393~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="2-获取Bean的方式"><a href="#2-获取Bean的方式" class="headerlink" title="2. 获取Bean的方式"></a>2. 获取Bean的方式</h2><ul><li>①方式一：根据id获取</li><li>②方式二：根据类型获取</li><li>③方式三：根据id和类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;Spring配置文件.xml&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据id获取 </span></span><br><span class="line"><span class="comment">由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据类型获取--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(自定义组件类.class);</span><br><span class="line"><span class="comment">&lt;!--根据id和类型--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;,自定义组件类.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取bean时注意点"><a href="#获取bean时注意点" class="headerlink" title="获取bean时注意点"></a>获取bean时注意点</h4><p>首先 : <em><strong>在根据类型获取对象时</strong></em> 创建的Bean 对象只能有一个。因为<strong>默认情况下</strong>我们bean中的scope属性的值为”singleton” 如果<strong>想要创建多个对象 ,那么就将scope的属性设置为”prototype”</strong></p><p>其次 :如果组件的类型是接口类型 ,那么就必须设置<em>接口的实现类的Bean是唯一的</em> ,否则报错</p><h2 id="3-DI-依赖注入"><a href="#3-DI-依赖注入" class="headerlink" title="3. DI 依赖注入"></a>3. DI 依赖注入</h2><blockquote><p>这里用的是Student组件类 属性: id , name , age , sex</p></blockquote><h4 id="①-setXXX-方法-注入"><a href="#①-setXXX-方法-注入" class="headerlink" title="① setXXX()方法 注入"></a>① setXXX()方法 注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="②-构造器-注入"><a href="#②-构造器-注入" class="headerlink" title="② 构造器 注入"></a>② 构造器 注入</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> class=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="③-特殊类型-引用类型-的-注入"><a href="#③-特殊类型-引用类型-的-注入" class="headerlink" title="③ 特殊类型(引用类型)的 注入"></a>③ 特殊类型(引用类型)的 注入</h4><blockquote><p>首先创建被引用的类的Bean</p><p>比如下面 :先创建Clazz类的Bean ,然后该Bean的id (clazzOne) 作为需要引用的属性值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第二种</strong>方法就是创建内部bean(不常用 , 做了解即可)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第三种</strong>方法: 级联属性赋值 <strong>(一定先引用某个bean为属性赋值，才可以使用级联方式更新属性)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;三班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="④-特殊类型-数组类型-注入"><a href="#④-特殊类型-数组类型-注入" class="headerlink" title="④ 特殊类型(数组类型) 注入"></a>④ 特殊类型(数组类型) 注入</h4><blockquote><p>在前面的基础上 新增属性 String [ ] hobbies;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑤-特殊类型-List集合类型-注入"><a href="#⑤-特殊类型-List集合类型-注入" class="headerlink" title="⑤ 特殊类型(List集合类型) 注入"></a>⑤ 特殊类型(List集合类型) 注入</h4><blockquote><p>在Clazz 类中新增 List &lt; Student &gt; students;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑥-特殊类型-Map集合类型-注入"><a href="#⑥-特殊类型-Map集合类型-注入" class="headerlink" title="⑥ 特殊类型(Map集合类型) 注入"></a>⑥ 特殊类型(Map集合类型) 注入</h4><blockquote><p>新创建教师类Teacher 在学生类中添加Map&lt; String , Teacher &gt;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--这里我们同样的创建Teacher类的Bean--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Fourth-Bean的生命周期"><a href="#Fourth-Bean的生命周期" class="headerlink" title="Fourth : Bean的生命周期"></a>Fourth : Bean的生命周期</h1><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73d418aa28394d74999365dbeb04020b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="具体的生命周期过程"><a href="#具体的生命周期过程" class="headerlink" title="具体的生命周期过程"></a>具体的生命周期过程</h4><ol><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作（由bean的后置处理器负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ol><h1 id="Fifth-FactoryBean"><a href="#Fifth-FactoryBean" class="headerlink" title="Fifth : FactoryBean"></a>Fifth : FactoryBean</h1><p><strong>FactoryBean是Spring提供的一种整合第三方框架的常用机制</strong>。和普通的bean不同，配置一个 FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是 getObject()方法的返回值。通过这种机制 **(反射机制)**，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p><strong>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88d02ea7834b4f47992d23da8e8eaa03~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;bean.UserFactoryBean&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Sixth-基于注解管理Bean★★★★★"><a href="#Sixth-基于注解管理Bean★★★★★" class="headerlink" title="Sixth : 基于注解管理Bean★★★★★"></a>Sixth : 基于注解管理Bean★★★★★</h1><blockquote><p>首先了解一下注解</p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测 到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p><strong>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行</strong>。</p><p><strong>常用的注解 :</strong></p><blockquote><p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组 @Service：将类标识为业务层组件 @Repository：将类标识为持久层组件</p></blockquote><p>对于上述的除了Component注解之外的其他三个注解 Spring使用IOC容器管理这些组件来说<strong>没有区别</strong>。所以@Controller、@Service、@Repository这 三个注解<strong>只是给开发人员看的，让我们能够便于分辨组件的作用。</strong></p></blockquote><h4 id="扫描组件的几种情况"><a href="#扫描组件的几种情况" class="headerlink" title="扫描组件的几种情况"></a>扫描组件的几种情况</h4><ul><li>include-filter : 包含扫描 , 只扫描谁</li><li>exclude-filter : 排除扫描 , 不扫描谁</li><li>如果没有那么就默认全部扫描</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">         https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描组件  :   让spring知道 ,什么加了注解</span></span><br><span class="line"><span class="comment">    通过包来进行识别 ,直接扫描spring ,然后她下面的所有的包 以及类都会被扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com_Ray.spring&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--                在实际的项目开发中, 我们需要进行选择性的扫描 ,所以这时我们就需要进行排除</span></span><br><span class="line"><span class="comment">        include-filter : 包含扫描 , 只扫描谁</span></span><br><span class="line"><span class="comment">            [需要在context:component-scan标签中添加属性 :use-default-filters=&quot;false&quot; ]</span></span><br><span class="line"><span class="comment">        exclude-filter : 排除扫描 , 不扫描谁</span></span><br><span class="line"><span class="comment">                type : 排除的类型(根据什么进行排除/或者只包括什么类型):</span></span><br><span class="line"><span class="comment">                    annotation(注解的类型)  aspectj(了解即可)</span></span><br><span class="line"><span class="comment">                    assignable(类的类型)    custom(了解即可)     regex(了解即可)</span></span><br><span class="line"><span class="comment">                expression : 放置全类名(或者注解全名)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com_Ray.spring.controller.UserController&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceInpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="基于注解自动装配之Autowried注解"><a href="#基于注解自动装配之Autowried注解" class="headerlink" title="基于注解自动装配之Autowried注解"></a>基于注解自动装配之Autowried注解</h3><p>首先 ,自动装配是: 通过我们指定的策略 ,为我们当前ioc容器所管理的bean中的成员变量进行赋值的操作</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bb1f1cb6a0549a2af230743bd62ac57~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>@Autowried注解标识的位置:</strong></p><ol><li>标识在成员变量上</li><li>set方法上</li><li>为当前变量赋值的有参构造器上</li></ol><h4 id="Autowried注解的原理"><a href="#Autowried注解的原理" class="headerlink" title="@Autowried注解的原理"></a>@Autowried注解的原理</h4><p><strong>场景参考:</strong><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b07a73061ffa47f6a85efca66b37307d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>原理 :</p><ol><li><strong>byType 根据类型来找到一个类型匹配的bean ,来为当前的属性自动进行赋值</strong></li></ol><p><em><strong>自动装配:</strong></em> <em><strong>根据指定的策略,在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的</strong></em> <em><strong>类类型或接口类型属性</strong></em> <em>赋值</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c64696fdf8a46e886263c37445ef7f4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>byName 把需要赋值的属性的名字来作为bean的id在ioc容器中去匹配到某一个bean来为当前的属性赋值</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2838e7fe41d647e6bdfab066db6e8c93~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em><strong>实现流程:</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9fa2b8a09f44b7cb8d2f3ec2e7a4747~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c711a4d811e4af08a993786552b6626~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h1 id="Finally-写在最后"><a href="#Finally-写在最后" class="headerlink" title="Finally : 写在最后"></a>Finally : 写在最后</h1><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
