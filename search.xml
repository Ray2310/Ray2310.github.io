<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux操作系统学习</title>
      <link href="/post/6ea88167.html"/>
      <url>/post/6ea88167.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux操作系统"><a href="#linux操作系统" class="headerlink" title="linux操作系统"></a>linux操作系统</h1><h2 id="Linux的目录结构："><a href="#Linux的目录结构：" class="headerlink" title="Linux的目录结构："></a>Linux的目录结构：</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e0acf91abf541d08f5fd445614c0ed3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5e2a1000f4947d796b0596adbdc7122~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10e80a9586674529a8b50e920b781cc8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84409ad7377c4593b8b2ad616f6f47ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="树状图解"><a href="#树状图解" class="headerlink" title="树状图解"></a>树状图解</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ec3d8f97b5941cb843a829b470c4e0d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed935c1b0b7d4f8a9697a1ab668ac48b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h1 id="vi-x2F-vim的学习"><a href="#vi-x2F-vim的学习" class="headerlink" title="vi &#x2F; vim的学习"></a>vi &#x2F; vim的学习</h1><h2 id="什么是vi-x2F-vim，为什么我们需要学习"><a href="#什么是vi-x2F-vim，为什么我们需要学习" class="headerlink" title="什么是vi&#x2F; vim，为什么我们需要学习"></a>什么是vi&#x2F; vim，为什么我们需要学习</h2><p><strong>原因：</strong></p><ol><li><p>鸟哥的原因</p></li><li><ol><li>所有的Unix Like 系统都会内建vi 文书编辑器，其他的文书编辑器则不一定会存在；</li><li>很多个别软体的编辑介面都会主动呼叫vi (例如未来会谈到的crontab , visudo , edquota等指令)；</li><li>vim 具有程式编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程式设计；</li><li>因为程式简单，编辑速度相当快速。</li></ol></li><li><p><strong>有太多Linux 上面的指令都预设使用vi 作为资料编辑的介面，所以你必须、一定要学会 vi ，否则很多指令你根本就无法操作呢！</strong></p></li></ol><p><strong>什么是vi &#x2F; vim：</strong></p><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="https://link.juejin.cn/?target=https://www.vim.org/">www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h1 id="各种模式的切换"><a href="#各种模式的切换" class="headerlink" title="各种模式的切换"></a>各种模式的切换</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65f28fc1e02f491cbfedb42ed7b1ce39~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>各种模式解释：</p><ol><li>一般模式&#x2F;正常模式</li></ol><p>第一种：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88af663538104644908e005eb64930f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>第二种： 就是进入遍历模式，但是没有输入( i &#x2F; a的情况下 )</p><ol><li>编辑模式（输入i, I, o, O, a, A, r, R的情况下）</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2df0a2f67c714011b91a631835f668bf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>命令模式</li></ol><p>就是进入编辑模式之后，输入完成按esc键，然后在输入 ：或者 &#x2F; 就会进入命令模式<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6931fb0e976243ee8e2c19ba174ffbdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="vim快捷键练习"><a href="#vim快捷键练习" class="headerlink" title="vim快捷键练习"></a>vim快捷键练习</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d74202aa35d44f9a7f46c0323a79a8c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>对于复制元素 命令： (x) yy,然后输入p &#x2F;&#x2F;x为我们需要向下拷贝的行数</li></ol><p>同样的对于拷贝&#x2F;复制 ，我们必须是在一般模式&#x2F;正常模式下进行</p><p><strong>操作方法：</strong> 【 现输入x(行数) ，然后再按yy，（接下来就是移动光标，比如我们向向下复制这几行元素，就必须在进行完上述操作后将光标移动到下面），最后在按p<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0254d9c3c4064001af77ef5c5c333bf3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img">最后呈现效果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4b306cf85364ddf96c01ae9533dda41~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>】</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在正常模式&#x2F;一般模式下才会有效</p><ol><li>删除当前行：输入dd</li></ol><p>(x) dd,然后输入p &#x2F;&#x2F;x为我们需要向下删除的行数</p><p>光标移动到当前行，然后输入5dd就会删除当前行下面的5行元素</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/087720ebad5f4d51a86bdd346568c9b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83da363939084ac3a6670c54c687c8c1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>在命令模式下进行</p><p>完成进入编辑模式后</p><p>操作： 输入 &#x2F;+关键字，然后按回车 —&gt; 就会在编辑页面出现查找的内容，输入 n就会查找下一个</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e52bf7ac5b504f9085cce96077ec2c2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>效果：（输入n 就是查找下一个 ）<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5141613ff604e6d925d279432fee277~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="设置文件行号"><a href="#设置文件行号" class="headerlink" title="设置文件行号"></a>设置文件行号</h3><p>在命令模式下</p><p>操作： 进入命令行，输入:set nu</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac8ab4b6afee41f2beec046e95bfac79~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如果不想展示则输入 set nonu 就会取消行号设置</p><h3 id="快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某文档的最末行-或者-最首行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下"></a>快速定位到某文档的最末行 或者 最首行 在一般模式下&#x2F;正常模式下</h3><p>直接输入 大写的G(最末行) 或者小写的gg(首行)</p><p>撤销编辑时的输入操作 在一般模式下&#x2F;正常模式下</p><p>输入 u</p><h3 id="快速定位到某一行-在一般模式下-x2F-正常模式下"><a href="#快速定位到某一行-在一般模式下-x2F-正常模式下" class="headerlink" title="快速定位到某一行 在一般模式下&#x2F;正常模式下"></a>快速定位到某一行 在一般模式下&#x2F;正常模式下</h3><p>操作： 输入 行号 –&gt; 在输入 shift + g （建议先打开行号）</p><h3 id="vim的键盘图"><a href="#vim的键盘图" class="headerlink" title="vim的键盘图"></a>vim的键盘图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c67f76506a491e93006c8adfd569a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0460b70928145bdb71c473cd3672c52~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><hr><h1 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h1><h3 id="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"><a href="#第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等" class="headerlink" title="第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等"></a>第一部份：一般指令模式可用的按钮说明，游标移动、复制贴上、搜寻取代等</h3><table><thead><tr><th>移动游标的方法</th><th></th></tr></thead><tbody><tr><td>h 或向左方向键(←)</td><td>游标向左移动一个字元</td></tr><tr><td>j 或向下方向键(↓)</td><td>游标向下移动一个字元</td></tr><tr><td>k 或向上方向键(↑)</td><td>游标向上移动一个字元</td></tr><tr><td>l 或向右方向键(→)</td><td>游标向右移动一个字元</td></tr><tr><td>如果你将右手放在键盘上的话，你会发现hjkl 是排列在一起的，因此可以使用这四个按钮来移动游标。如果想要进行多次移动的话，例如向下移动30 列，可以使用”30j” 或”30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td>[Ctrl] + [f]</td><td>萤幕『向下』移动一页，相当于[Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>萤幕『向上』移动一页，相当于[Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>萤幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>萤幕『向上』移动半页</td></tr><tr><td>+</td><td>游标移动到非空白字元的下一列</td></tr><tr><td>-</td><td>游标移动到非空白字元的上一列</td></tr><tr><td>n</td><td>那个n 表示『数字』，例如20 。按下数字后再按空白键，游标会向右移动这一列的n 个字元。例如20 则游标会向后面移动20 个字元距离。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一列的最前面字元处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一列的最后面字元处(常用)</td></tr><tr><td>H</td><td>游标移动到这个萤幕的最上方那一列的第一个字元</td></tr><tr><td>M</td><td>游标移动到这个萤幕的中央那一列的第一个字元</td></tr><tr><td>L</td><td>游标移动到这个萤幕的最下方那一列的第一个字元</td></tr><tr><td>G</td><td>移动到这个档案的最后一列(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第n 列。例如20G 则会移动到这个档案的第20 列(可配合:set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一列，相当于1G 啊！(常用)</td></tr><tr><td>n</td><td>n 为数字。游标向下移动n 列(常用)</td></tr><tr><td>搜寻与取代</td><td></td></tr><tr><td>&#x2F;word</td><td>向游标之下寻找一个名称为word 的字串。例如要在档案内搜寻vbird 这个字串，就输入&#x2F;vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向游标之上寻找一个字串名称为word 的字串。</td></tr><tr><td>n</td><td>这个n 是英文按键。代表『重复前一个搜寻的动作』。举例来说， 如果刚刚我们执行&#x2F;vbird 去向下搜寻vbird 这个字串，则按下n 后，会向下继续搜寻下一个名称为vbird 的字串。如果是执行?vbird 的话，那么按下n 则会向上继续搜寻名称为vbird 的字串！</td></tr><tr><td>N</td><td>这个N 是英文按键。与n 刚好相反，为『反向』进行前一个搜寻动作。例如&#x2F;vbird 后，按下N 则表示『向上』搜寻vbird 。</td></tr><tr><td>使用&#x2F;word 配合n 及N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键字！</td><td></td></tr><tr><td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与n2 为数字。在第n1 与n2 列之间寻找word1 这个字串，并将该字串取代为 word2 ！举例来说，在100 到200 列之间搜寻vbird 并取代为VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</td><td>从第一列到最后一列寻找word1 字串，并将该字串取代为 word2 ！且在取代前显示提示字元给使用者确认(confirm) 是否需要取代！(常用)</td></tr><tr><td>删除、复制与贴上</td><td></td></tr><tr><td>x, X</td><td>在一列字当中，x 为向后删除一个字元(相当于[del] 按键)， X 为向前删除一个字元(相当于[backspace] 亦即是倒退键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除n 个字元。举例来说，我要连续删除10 个字元， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整列(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除游标所在的向下n 列，例如20dd 则是删除20 列 (常用)</td></tr><tr><td>d1G</td><td>删除游标所在到第一列的所有资料</td></tr><tr><td>dG</td><td>删除游标所在到最后一列的所有资料</td></tr><tr><td>d$</td><td>删除游标所在处，到该列的最后一个字元</td></tr><tr><td>d0</td><td>那个是数字的0 ，删除游标所在处，到该列的最前面一个字元</td></tr><tr><td>yy</td><td>复制游标所在的那一列(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制游标所在的向下n 列，例如20yy 则是复制20 列(常用)</td></tr><tr><td>y1G</td><td>复制游标所在列到第一列的所有资料</td></tr><tr><td>yG</td><td>复制游标所在列到最后一列的所有资料</td></tr><tr><td>y0</td><td>复制游标所在的那个字元到该列行首的所有资料</td></tr><tr><td>y$</td><td>复制游标所在的那个字元到该列行尾的所有资料</td></tr><tr><td>p, P</td><td>p 为将已复制的资料在游标下一列贴上，P 则为贴在游标上一列！举例来说，我目前游标在第20 列，且已经复制了10 列资料。则按下p 后， 那10 列资料会贴在原本的20 列之后，亦即由21 列开始贴。但如果是按下P 呢？那么原本的第20 列会被推到变成30 列。(常用)</td></tr><tr><td>J</td><td>将游标所在列与下一列的资料结合成同一列</td></tr><tr><td>c</td><td>重复删除多个资料，例如向下删除10 列，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>这个u 与[Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！(常用)</td></tr></tbody></table><h3 id="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般指令模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般指令模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般指令模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th>进入插入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入插入模式(Insert mode)： i 为『从目前游标所在处插入』， I 为『在目前所在列的第一个非空白字元处开始插入』。(常用)</td></tr><tr><td>a, A</td><td>进入插入模式(Insert mode)： a 为『从目前游标所在的下一个字元处开始插入』， A 为『从游标所在列的最后一个字元处开始插入』。(常用)</td></tr><tr><td>o, O</td><td>进入插入模式(Insert mode)： 这是英文字母o 的大小写。o 为『在目前游标所在的下一列处插入新的一列』； O 为在目前游标所在处的上一列插入新的一列！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代游标所在的那一个字元一次；R会一直取代游标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字元时， 一定要在左下角处看到INSERT 或REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般指令模式中(常用)</td></tr></tbody></table><h3 id="第三部份：一般指令模式切换到指令列模式的可用按钮说明"><a href="#第三部份：一般指令模式切换到指令列模式的可用按钮说明" class="headerlink" title="第三部份：一般指令模式切换到指令列模式的可用按钮说明"></a>第三部份：一般指令模式切换到指令列模式的可用按钮说明</h3><table><thead><tr><th>指令列模式的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的资料写入硬碟档案中(常用)</td></tr><tr><td>:w!</td><td>若档案属性为『唯读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号(!) 在vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为:wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的资料储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的资料中，读入另一个档案的资料。亦即将『filename』 这个档案内容加到游标所在列后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将n1 到n2 的内容储存成filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开vi 到指令列模式下执行command 的显示结果！例如 『:! ls &#x2F;home』即可在vi 当中察看&#x2F;home 底下以ls 输出的档案资讯！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一列的字首显示该列的行号</td></tr><tr><td>:set nonu</td><td>与set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="参考说明："><a href="#参考说明：" class="headerlink" title="参考说明："></a>参考说明：</h1><p>文档学习:</p><p>​相关内容参考鸟哥Linux私房菜( <a href="https://link.juejin.cn/?target=https://linux.vbird.org/">linux.vbird.org&#x2F;</a> )</p><p>​视频学习：韩顺平Linux</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中的动态SQL技术</title>
      <link href="/post/c0b354ed.html"/>
      <url>/post/c0b354ed.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b1aefc3fff34f48a670f0cb2029b9a8~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="MyBatis中的动态SQL技术"></p><h1 id="MyBatis-之-动态SQL技术"><a href="#MyBatis-之-动态SQL技术" class="headerlink" title="MyBatis 之 动态SQL技术"></a>MyBatis 之 动态SQL技术</h1><p><strong>引言:</strong></p><blockquote><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p></blockquote><blockquote><p>这里我们使用的表为t_emp 对应的实体类名为Emp</p><p>字段: emp_name, emp_id ,age ,gender 对应的属性名 : empName , empId , age ,gender</p></blockquote><h2 id="First-if-标签"><a href="#First-if-标签" class="headerlink" title="First : if 标签"></a>First : if 标签</h2><p>if 标签只有一个test属性 只有test属性的表达式判定结果为true ,其中的内容才会被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp <span class="built_in">where</span></span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">             emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>但是这样做的局限性非常大 , 如果我们第一个if 不满足的话 ,那么就会导致后面满足条件的语句前面多出来一个and ,这个问题又无法解决 ,那么就用到了下面的where标签</p><h2 id="Second-where标签"><a href="#Second-where标签" class="headerlink" title="Second : where标签"></a>Second : where标签</h2><p>使用where 标签作用:</p><ol><li>如果标签中没有任何的条件满足 那么就不需要执行任何的功能 ;可以直接退出 , 如果满足 那么就执行里面的if 标签</li><li>可以将<strong>if中内容前面的没用的and去除 ( 内容后面的and 无法去除</strong>), 所以可以都添加 ;</li><li>如果 where 标签中有条件成立 , 他将会自动的添加where</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Third-trim-标签"><a href="#Third-trim-标签" class="headerlink" title="Third : trim 标签"></a>Third : trim 标签</h2><p><strong>trim标签中相关属性的作用</strong></p><ol><li>prefix &#x2F; suffix: 在内容前面 &#x2F; 后面添加指定内容</li><li>prefixOverrides &#x2F;suffixOverrides 在内容前面 &#x2F; 后面 去除某些指定内容</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">    &lt;trim <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> prefixOverrides=<span class="string">&quot;and&quot;</span>&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           and emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and  gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fourth-choose-when-otherwise-标签"><a href="#Fourth-choose-when-otherwise-标签" class="headerlink" title="Fourth : choose - when - otherwise 标签"></a>Fourth : choose - when - otherwise 标签</h2><p>它和java中的switch语句十分相似 ,所以它只有一个when语句会被执行 ,如果都不满足 , 那么就会执行otherwise语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> resultType=<span class="string">&quot;Emp&quot;</span>&gt;</span><br><span class="line">    select * from t_emp</span><br><span class="line">        &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">            &lt;choose&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    emp_name = <span class="comment">#&#123;empName&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                 &lt;when <span class="built_in">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    age = <span class="comment">#&#123;age&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when <span class="built_in">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                    gender = <span class="comment">#&#123;gender&#125;</span></span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;otherwise&gt;</span><br><span class="line">                &lt;/otherwise&gt;</span><br><span class="line">            &lt;/choose&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Fifth-foreach-标签"><a href="#Fifth-foreach-标签" class="headerlink" title="Fifth : foreach 标签"></a>Fifth : foreach 标签</h2><p><strong>属性：</strong></p><ul><li>collection：设置要循环的数组或集合</li><li>item：表示集合或数组中的每一个数据</li><li>separator：设置循环体之间的分隔符</li><li>open：设置foreach标签中的内容的开始符</li><li>close：设置foreach标签中的内容的结束符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  批量添加员工信息  void insertMoreEmp(@Param (&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp values</span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">             (null ,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)</span><br><span class="line">         <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">&lt;!--   批量删除的功能 void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds);--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreEmp&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where emp_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;empId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;empId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="Sixth-SQL标签"><a href="#Sixth-SQL标签" class="headerlink" title="Sixth : SQL标签"></a>Sixth : SQL标签</h2><p>sql 标签 可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql <span class="attr">id</span>=<span class="string">&quot;Columns&quot;</span>&gt;</span><br><span class="line">    emp_id, emp_name,age ,gender</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">select &lt;include <span class="attr">refid</span>=<span class="string">&quot;Columns&quot;</span>&gt;&lt;/include&gt; from t_emp</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myFirstBlog</title>
      <link href="/post/23c7dc9f.html"/>
      <url>/post/23c7dc9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅识SpringIOC"><a href="#浅识SpringIOC" class="headerlink" title="浅识SpringIOC"></a>浅识SpringIOC</h1><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9215b78ca8964c1680efc934f81b494e~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="浅识 Spring IOC "></p><h1 id="小小了解一下-Spring-家族"><a href="#小小了解一下-Spring-家族" class="headerlink" title="小小了解一下 Spring 家族"></a>小小了解一下 Spring 家族</h1><blockquote><blockquote><p><strong>官网地址：<a href="https://link.juejin.cn/?target=https://spring.io/">spring.io&#x2F;</a></strong></p><p><strong>项目列表：<a href="https://link.juejin.cn/?target=https://spring.io/projects">spring.io&#x2F;projects</a></strong></p></blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首 次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应 用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践</p></blockquote><p>通过上面的粗略介绍 ,我们可以简单的了解一下Spring家族的厉害之处下面就是我们今天学习的重点</p><p><strong>Spring IOC( Inversion of Control )反转控制</strong></p><h1 id="First-理解什么是IOC思想"><a href="#First-理解什么是IOC思想" class="headerlink" title="First : 理解什么是IOC思想"></a>First : 理解什么是IOC思想</h1><p>图示理解:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b15d9384a4554425ae7fb19863b29445~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Spring IOC.png">文字解释:</p><ul><li><p>①获取资源的传统方式</p><blockquote><p>传统的方式是组件主动的从容器中获取所需要的资源，在这样的 模式下开发人员往往需要知道在具体容器中特定资源的获取方式</p></blockquote></li><li><p>②反转控制方式获取资源</p><blockquote><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源 的方式即可，极大的降低了学习成本，提高了开发的效率。</p></blockquote></li><li><p>③DI：Dependency Injection，翻译过来就是依赖注入</p><blockquote><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。相对于IOC而言，这种表述更直接。 所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p></blockquote></li></ul><h1 id="Second-在Spring中的IOC是怎么体现出来的"><a href="#Second-在Spring中的IOC是怎么体现出来的" class="headerlink" title="Second : 在Spring中的IOC是怎么体现出来的"></a>Second : 在Spring中的IOC是怎么体现出来的</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d1c91bca5214088b92b3b1ec7a6fadd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"><strong>Spring中的IOC有两种实现方式 :</strong></p><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1. BeanFactory"></a>1. BeanFactory</h2><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用</p><h2 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h2><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。(原因显而易见, 我们无法控制内部)</p><h3 id="ApplicationContext的主要实现类"><a href="#ApplicationContext的主要实现类" class="headerlink" title="ApplicationContext的主要实现类"></a>ApplicationContext的主要实现类</h3><ul><li>ClassPathXmlApplicationContext :<ul><li>见名知意 它就是通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</li></ul></li><li>FileSystemXmlApplicationContext :<ul><li>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</li></ul></li><li>ConfigurableApplicationContext :<ul><li>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力。</li></ul></li><li>WebApplicationContext :<ul><li>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中。</li></ul></li></ul><h1 id="Third-基于XML-管理IOC容器"><a href="#Third-基于XML-管理IOC容器" class="headerlink" title="Third : 基于XML 管理IOC容器"></a>Third : 基于XML 管理IOC容器</h1><h5 id="首先是创建所有的项目都绕不过去的坑—-引入依赖"><a href="#首先是创建所有的项目都绕不过去的坑—-引入依赖" class="headerlink" title="首先是创建所有的项目都绕不过去的坑—-引入依赖"></a>首先是创建所有的项目都绕不过去的坑—-引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/670a2ff0267e4fae955f78df171a8e94~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="1-操作顺序及其思路"><a href="#1-操作顺序及其思路" class="headerlink" title="1. 操作顺序及其思路"></a>1. 操作顺序及其思路</h2><p>创建自定义组件类的时候一定要创建有参和无参构造器两个, <strong>良好的代码习惯是避免犯错的前提</strong> Spring底层默认是通过反射来调用自定义组件类中的无参构造器来创建组件对象的<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f578a4d0612e4e0eaed84eb017038393~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h2 id="2-获取Bean的方式"><a href="#2-获取Bean的方式" class="headerlink" title="2. 获取Bean的方式"></a>2. 获取Bean的方式</h2><ul><li>①方式一：根据id获取</li><li>②方式二：根据类型获取</li><li>③方式三：根据id和类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;Spring配置文件.xml&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据id获取 </span></span><br><span class="line"><span class="comment">由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;);</span><br><span class="line"><span class="comment">&lt;!--根据类型获取--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(自定义组件类.class);</span><br><span class="line"><span class="comment">&lt;!--根据id和类型--&gt;</span></span><br><span class="line">HappyComponent hc = ioc.getBean(&quot;bean的id属性&quot;,自定义组件类.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取bean时注意点"><a href="#获取bean时注意点" class="headerlink" title="获取bean时注意点"></a>获取bean时注意点</h4><p>首先 : <em><strong>在根据类型获取对象时</strong></em> 创建的Bean 对象只能有一个。因为<strong>默认情况下</strong>我们bean中的scope属性的值为”singleton” 如果<strong>想要创建多个对象 ,那么就将scope的属性设置为”prototype”</strong></p><p>其次 :如果组件的类型是接口类型 ,那么就必须设置<em>接口的实现类的Bean是唯一的</em> ,否则报错</p><h2 id="3-DI-依赖注入"><a href="#3-DI-依赖注入" class="headerlink" title="3. DI 依赖注入"></a>3. DI 依赖注入</h2><blockquote><p>这里用的是Student组件类 属性: id , name , age , sex</p></blockquote><h4 id="①-setXXX-方法-注入"><a href="#①-setXXX-方法-注入" class="headerlink" title="① setXXX()方法 注入"></a>① setXXX()方法 注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="②-构造器-注入"><a href="#②-构造器-注入" class="headerlink" title="② 构造器 注入"></a>② 构造器 注入</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> class=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="③-特殊类型-引用类型-的-注入"><a href="#③-特殊类型-引用类型-的-注入" class="headerlink" title="③ 特殊类型(引用类型)的 注入"></a>③ 特殊类型(引用类型)的 注入</h4><blockquote><p>首先创建被引用的类的Bean</p><p>比如下面 :先创建Clazz类的Bean ,然后该Bean的id (clazzOne) 作为需要引用的属性值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第二种</strong>方法就是创建内部bean(不常用 , 做了解即可)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>特殊类型的注入<strong>第三种</strong>方法: 级联属性赋值 <strong>(一定先引用某个bean为属性赋值，才可以使用级联方式更新属性)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;三班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="④-特殊类型-数组类型-注入"><a href="#④-特殊类型-数组类型-注入" class="headerlink" title="④ 特殊类型(数组类型) 注入"></a>④ 特殊类型(数组类型) 注入</h4><blockquote><p>在前面的基础上 新增属性 String [ ] hobbies;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑤-特殊类型-List集合类型-注入"><a href="#⑤-特殊类型-List集合类型-注入" class="headerlink" title="⑤ 特殊类型(List集合类型) 注入"></a>⑤ 特殊类型(List集合类型) 注入</h4><blockquote><p>在Clazz 类中新增 List &lt; Student &gt; students;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="⑥-特殊类型-Map集合类型-注入"><a href="#⑥-特殊类型-Map集合类型-注入" class="headerlink" title="⑥ 特殊类型(Map集合类型) 注入"></a>⑥ 特殊类型(Map集合类型) 注入</h4><blockquote><p>新创建教师类Teacher 在学生类中添加Map&lt; String , Teacher &gt;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--这里我们同样的创建Teacher类的Bean--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Fourth-Bean的生命周期"><a href="#Fourth-Bean的生命周期" class="headerlink" title="Fourth : Bean的生命周期"></a>Fourth : Bean的生命周期</h1><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73d418aa28394d74999365dbeb04020b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h4 id="具体的生命周期过程"><a href="#具体的生命周期过程" class="headerlink" title="具体的生命周期过程"></a>具体的生命周期过程</h4><ol><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作（由bean的后置处理器负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ol><h1 id="Fifth-FactoryBean"><a href="#Fifth-FactoryBean" class="headerlink" title="Fifth : FactoryBean"></a>Fifth : FactoryBean</h1><p><strong>FactoryBean是Spring提供的一种整合第三方框架的常用机制</strong>。和普通的bean不同，配置一个 FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是 getObject()方法的返回值。通过这种机制 **(反射机制)**，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p><strong>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88d02ea7834b4f47992d23da8e8eaa03~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;bean.UserFactoryBean&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="Sixth-基于注解管理Bean★★★★★"><a href="#Sixth-基于注解管理Bean★★★★★" class="headerlink" title="Sixth : 基于注解管理Bean★★★★★"></a>Sixth : 基于注解管理Bean★★★★★</h1><blockquote><p>首先了解一下注解</p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测 到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p><strong>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行</strong>。</p><p><strong>常用的注解 :</strong></p><blockquote><p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组 @Service：将类标识为业务层组件 @Repository：将类标识为持久层组件</p></blockquote><p>对于上述的除了Component注解之外的其他三个注解 Spring使用IOC容器管理这些组件来说<strong>没有区别</strong>。所以@Controller、@Service、@Repository这 三个注解<strong>只是给开发人员看的，让我们能够便于分辨组件的作用。</strong></p></blockquote><h4 id="扫描组件的几种情况"><a href="#扫描组件的几种情况" class="headerlink" title="扫描组件的几种情况"></a>扫描组件的几种情况</h4><ul><li>include-filter : 包含扫描 , 只扫描谁</li><li>exclude-filter : 排除扫描 , 不扫描谁</li><li>如果没有那么就默认全部扫描</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">         https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描组件  :   让spring知道 ,什么加了注解</span></span><br><span class="line"><span class="comment">    通过包来进行识别 ,直接扫描spring ,然后她下面的所有的包 以及类都会被扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com_Ray.spring&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--                在实际的项目开发中, 我们需要进行选择性的扫描 ,所以这时我们就需要进行排除</span></span><br><span class="line"><span class="comment">        include-filter : 包含扫描 , 只扫描谁</span></span><br><span class="line"><span class="comment">            [需要在context:component-scan标签中添加属性 :use-default-filters=&quot;false&quot; ]</span></span><br><span class="line"><span class="comment">        exclude-filter : 排除扫描 , 不扫描谁</span></span><br><span class="line"><span class="comment">                type : 排除的类型(根据什么进行排除/或者只包括什么类型):</span></span><br><span class="line"><span class="comment">                    annotation(注解的类型)  aspectj(了解即可)</span></span><br><span class="line"><span class="comment">                    assignable(类的类型)    custom(了解即可)     regex(了解即可)</span></span><br><span class="line"><span class="comment">                expression : 放置全类名(或者注解全名)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com_Ray.spring.controller.UserController&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceInpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com_Ray.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="基于注解自动装配之Autowried注解"><a href="#基于注解自动装配之Autowried注解" class="headerlink" title="基于注解自动装配之Autowried注解"></a>基于注解自动装配之Autowried注解</h3><p>首先 ,自动装配是: 通过我们指定的策略 ,为我们当前ioc容器所管理的bean中的成员变量进行赋值的操作</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bb1f1cb6a0549a2af230743bd62ac57~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><strong>@Autowried注解标识的位置:</strong></p><ol><li>标识在成员变量上</li><li>set方法上</li><li>为当前变量赋值的有参构造器上</li></ol><h4 id="Autowried注解的原理"><a href="#Autowried注解的原理" class="headerlink" title="@Autowried注解的原理"></a>@Autowried注解的原理</h4><p><strong>场景参考:</strong><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b07a73061ffa47f6a85efca66b37307d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>原理 :</p><ol><li><strong>byType 根据类型来找到一个类型匹配的bean ,来为当前的属性自动进行赋值</strong></li></ol><p><em><strong>自动装配:</strong></em> <em><strong>根据指定的策略,在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的</strong></em> <em><strong>类类型或接口类型属性</strong></em> <em>赋值</em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c64696fdf8a46e886263c37445ef7f4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><ol><li>byName 把需要赋值的属性的名字来作为bean的id在ioc容器中去匹配到某一个bean来为当前的属性赋值</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2838e7fe41d647e6bdfab066db6e8c93~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><em><strong>实现流程:</strong></em></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9fa2b8a09f44b7cb8d2f3ec2e7a4747~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c711a4d811e4af08a993786552b6626~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><h1 id="Finally-写在最后"><a href="#Finally-写在最后" class="headerlink" title="Finally : 写在最后"></a>Finally : 写在最后</h1><p>如果各位觉得有用，<strong>请点赞支持一下</strong></p><p>如果我写的哪里有不足, 以及各位觉得哪里不明白的<strong>请评论区指出</strong></p><p><strong>诚挚欢迎各位交流学习,共同进步</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
